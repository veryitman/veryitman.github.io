<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS7.9 安装 mysql5.7</title>
      <link href="/2022/04/30/CentOS7-9-%E5%AE%89%E8%A3%85-mysql5-7/"/>
      <url>/2022/04/30/CentOS7-9-%E5%AE%89%E8%A3%85-mysql5-7/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 CentOS 7 上面安装 MySQL5.7 经历了一点小挫折，特此记录，给有需要的朋友做个参考。</p><p>我的云主机 CentOS 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt; </span><span class="language-bash">lsb_release -a</span></span><br><span class="line"></span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">Release:7.9.2009</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><p>当然你要是不想安装<strong>指定版本</strong>的 MySQL，直接使用 <code>yum install mysql</code> 也可以。</p><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><p>因为现有工程的各种缘故，我需要在云主机上面安装 MySQL5.7 版本。</p><p>在网上找了挺多安装方法但总是事与愿违，会出现各种各样的问题，还好在 <a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html">MySQL 官方文档</a> 找到了解决方案。所以说遇到问题还是要到官网去找方案。</p><p>如果你已经使用 <code>root</code> 身份登录了主机，在下面的步骤中可以不使用 <code>sudo</code>。</p><h3 id="1、Adding-the-Yum-Repository"><a href="#1、Adding-the-Yum-Repository" class="headerlink" title="1、Adding the Yum Repository"></a>1、Adding the Yum Repository</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><p>如果出现类似 <code>Failed to set locale, defaulting to C</code> 这样的错误，说明该源无法找到，可以换中方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7.rpm</span><br></pre></td></tr></table></figure><p>关于源可以在 <a href="http://repo.mysql.com/">http://repo.mysql.com/</a> 找。</p><h3 id="2、Selecting-a-Release-Series"><a href="#2、Selecting-a-Release-Series" class="headerlink" title="2、Selecting a Release Series"></a>2、Selecting a Release Series</h3><p>执行如下命令前，记得安装 <code>yum -y install yum-utils</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br><span class="line"></span><br><span class="line">yum-config-manager --enable mysql57-community</span><br><span class="line"></span><br><span class="line">yum repolist enabled | grep mysql</span><br></pre></td></tr></table></figure><h3 id="3、Install"><a href="#3、Install" class="headerlink" title="3、Install"></a>3、Install</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果你是 <code>CentOS8</code>，还需要在执行此步骤操作前，需要执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum module disable mysql</span><br></pre></td></tr></table></figure><p>在安装过程中，可能会出现下面的错误（此时 MySQL 并没有安装成功）</p><blockquote><p>Public key for mysql-community-libs-compat-5.7.38-1.el7.x86_64.rpm is not installed</p><p> Failing package is: mysql-community-libs-compat-5.7.38-1.el7.x86_64</p><p> GPG Keys are configured as: file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-mysql</p></blockquote><p>需要升级一下 GPG 然后重新安装，方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"></span><br><span class="line"> yum install mysql-community-server</span><br></pre></td></tr></table></figure><h3 id="4、Start-mysqld"><a href="#4、Start-mysqld" class="headerlink" title="4、Start mysqld"></a>4、Start mysqld</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure><p>下面给出安装 MySQL 成功后，默认的配置文件路径，方便后续使用。</p><ul><li>配置文件：<code>/etc/my.cnf</code></li><li>日志文件：<code>/var/log/mysqld.log</code></li><li>启动脚本：<code>/usr/lib/systemd/system/mysqld.service</code></li><li>socket文件：<code>/var/run/mysqld/mysqld.pid</code></li></ul><h2 id="使用-MySQL"><a href="#使用-MySQL" class="headerlink" title="使用 MySQL"></a>使用 MySQL</h2><p>经过上面简单 4 步就可以轻松的完成 MySQL 的安装，接下来我们开始使用它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>直接回车（<code>Enter</code>），提示如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1045 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: NO)</span><br></pre></td></tr></table></figure><p>解决上述问题，需要先想办法登入 MySQL，然后再修改 root 用户的密码。</p><p>如何解决这个错误而进行登入呢？</p><p>MySQL 安装完成之后，生成的默认密码在 <code>/var/log/mysqld.log</code> 日志文件中，我们可以使用 <code>grep</code> 命令在日志中找到临时密码（temporary password）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>可以看到临时密码信息：2022-04-30T04:40:47.234502Z 1 [Note] A temporary password is generated for root@localhost: <code>Tq%y:sUnC7;d</code>，用该密码登入 MySQL 即可。</p><p><code>MySQL 5.7</code> 默认安装了密码安全检查插件（validate_password），<strong>默认密码检查策略要求密码必须包含大小写字母、数字和特殊符号，并且长度不能少于8位</strong>。如果设置的密码不符合规范和要求，进行对应的操作会提示类似密码不符合规范的错误。可以查看 <a href="https://links.jianshu.com/go?to=https://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html%23sysvar_validate_password_policy">MySQL官网密码详细策略</a> 了解更多这方面的知识。</p><p>登入成功之后，修改 root 用户的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;MyNewPass4!&#x27;;</span><br></pre></td></tr></table></figure><p>后续可以通过如下方式（update）修改 root 用户的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update user set authentication_string=password(&#x27;MyNewPass4!&#x27;) where user=&#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>以上操作完成后，需要重启一下 MySQL 服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>另外还有一种解决方案，就是修改 my.cnf 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在 mysqld 下面新增 <code>skip-grant-tables</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>同理，以上操作完成后需要重启一下 MySQL 服务。新增的这个配置再次登录 MySQL 无需输入 root 密码。</p><p>登入后再用上述方法设置 root 用户的密码即可，修改完成后记得去掉 <code>skip-grant-tables</code> 这个配置。</p><h2 id="修改默认编码"><a href="#修改默认编码" class="headerlink" title="修改默认编码"></a>修改默认编码</h2><p>MySQL 的字符编码，可以通过下述方式查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;character%&#x27;;</span><br></pre></td></tr></table></figure><p>我们通过编辑 <code>/etc/my.cnf</code> 配置文件来改变默认编码，分别在对应的标签下面增加如下内容即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>需要重启一下 MySQL 服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h2><p>默认只允许 root 用户在本地（即本机上）登录，如果其它机器要连接或者访问 mysql，必须添加一个允许远程连接或者访问的帐户。</p><p>当然你也可以设置让 root 用户进行远程访问，但这样就很不安全，一般也不会这么做。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,authentication_string from user;</span><br></pre></td></tr></table></figure><table><thead><tr><th>host</th><th>user</th><th>authentication_string</th></tr></thead><tbody><tr><td>localhost</td><td>root</td><td>*88195A6507F4892C6CED9F6E30BA6C609AF5AFA7</td></tr><tr><td>localhost</td><td>mysql.session</td><td>*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>下面新增一个允许远程连接的帐户 <code>lisi</code>，注意设置的密码要符合 MySQL 复杂度要求，否则设置会失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;lisi&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;lisi2018!A&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>再次查看一下用户会发现多了 <code>lisi</code> 这个用户。</p><table><thead><tr><th>host</th><th>user</th><th>authentication_string</th></tr></thead><tbody><tr><td>localhost</td><td>root</td><td>*88195A6507F4892C6CED9F6E30BA6C609AF5AFA7</td></tr><tr><td>localhost</td><td>mysql.session</td><td>*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE</td></tr><tr><td>%</td><td>lisi</td><td>*86BA32081A204071832FE6D1DECD57D9519D6411</td></tr></tbody></table><p>如果你在安装过程中，遇到了文中没有提到的问题，请耐心解决也可以给我留言，一起进步！</p><hr><p><strong>祝大家五一节日快乐，生活幸福</strong></p><p><img src="/upload/me/qrcode_wx2022.png"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> Tools </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby on Rails: RubyGems</title>
      <link href="/2022/03/16/Ruby-on-Rails-RubyGems/"/>
      <url>/2022/03/16/Ruby-on-Rails-RubyGems/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>RubyGems is a package management framework for Ruby</strong>，<code>RubyGems</code> 是 Ruby 程序包管理器（工具）。很多编程语言或者平台都有自己的包管理工具，如 Rust 的 cargo、RedHat 的 RPM，Ubuntu 的 apt-get 等等。RubyGems 简称 <code>gems</code>，使用它可以方便地下载安装 Ruby 的软件包到自己的系统或者 Ruby 工程中，一个软件包称之为 <code>gem</code>。</p><p>为了更好的使用各种轮子（<code>gem</code>），在 <a href="https://rubygems.org/">rubygems</a> 可以找到很多已经用 ruby 写好的框架（或者称之为 lib），我们直接复用即可，另外自己也可以开发一些 ruby 库放到 <code>gems</code> 中供其他人享用。 </p><p>文中提到的 gems 和 RubyGems 都表示是同一个意思。</p><h2 id="安装-RubyGems"><a href="#安装-RubyGems" class="headerlink" title="安装 RubyGems"></a>安装 RubyGems</h2><p>如果你使用的是 macOS，系统已经自带来 ruby 和 对应的 RubyGems，不需要单独安装。详细情况可以参考  <a href="https://veryitman.com/2022/03/14/Ruby-on-Rails-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Ruby 开发环境搭建</a> 这篇文章。</p><p>如果你想独立安装 RubyGems，可以去 <a href="https://rubygems.org/">RubyGems 官网</a> 下载安装即可。</p><p>安装完成之后，可以通过 <code>gem 命令</code>查看 <code>gems</code> 版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem --version</span><br><span class="line"></span><br><span class="line">3.1.4</span><br></pre></td></tr></table></figure><h2 id="RubyGems-源"><a href="#RubyGems-源" class="headerlink" title="RubyGems 源"></a>RubyGems 源</h2><p>使用 <code>gems</code> 下载每个 <code>gem</code>，默认使用的下载地址是 <code>https://rubygems.org/</code>，即对应的包地址在国外，速度较慢甚至会出现下载失败的情况。为了解决这个问题，<a href="https://gems.ruby-china.com/">Ruby 中国</a> 提供了国内下载 <code>gem</code> 的通道，速度较快，源更新也比较及时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">查看 gems 源</span></span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>可以通过 <code>gem 命令</code>更改 <code>gems</code> 源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem sources -remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">gem sources --add https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure><p>上面两条命令等同于下面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p>我们也可以查看本地的文件确定是否已经更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.gemrc </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">:backtrace: false</span><br><span class="line">:bulk_threshold: 1000</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.com/</span><br><span class="line">:update_sources: true</span><br><span class="line">:verbose: true</span><br><span class="line">:concurrent_downloads: 8</span><br></pre></td></tr></table></figure><p>更新源缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -u</span><br></pre></td></tr></table></figure><p>更多关于 gem sources 的命令，可以查看帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem help sources</span><br></pre></td></tr></table></figure><p>也可以使用清华大学提供的源：<code>https://mirrors.tuna.tsinghua.edu.cn/rubygems/</code>，好人一生平安。</p><h2 id="常用的-gem-命令"><a href="#常用的-gem-命令" class="headerlink" title="常用的 gem 命令"></a>常用的 gem 命令</h2><blockquote><p>下面主要以 rails 这个 gem 来举例</p></blockquote><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>根据 <a href="http://guides.rubygems.org/rubygems-basics/#finding-gems">RubyGem的指南，</a>使用<code>search</code> 可以搜索任何 gem。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem search rails --all</span><br></pre></td></tr></table></figure><p>确切的搜索使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem search &#x27;^rails$&#x27; --all</span><br></pre></td></tr></table></figure><p>包括预发布版本使用 <code>--pre</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem search &#x27;^rails$&#x27; --pre</span><br></pre></td></tr></table></figure><p>从本地和远程服务器上查找含有rails字符串的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem search rails --both </span><br></pre></td></tr></table></figure><p>只从远程服务器上查找含有log字符串的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem search rails --remoter </span><br></pre></td></tr></table></figure><p>只从远程服务器上查找含有log字符串的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem search -r rails </span><br></pre></td></tr></table></figure><h3 id="un-install"><a href="#un-install" class="headerlink" title="(un)install"></a>(un)install</h3><p>安装最新版 rails</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install rails</span><br></pre></td></tr></table></figure><p>安装指定版本 rails</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install rails --version 6.1.5</span><br></pre></td></tr></table></figure><p>卸载 rails </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem uninstall rails</span><br></pre></td></tr></table></figure><p>卸载指定版本的 rails </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem uninstall rails -v 6.1.5</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>查看本地安装了哪些 gem</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem list -l</span><br></pre></td></tr></table></figure><p>查看本地安装了哪些版本的 rails</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem list &#x27;^rails$&#x27; -l</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">更新所有包</span></span><br><span class="line">gem update </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">更新指定包</span></span><br><span class="line">gem update rails</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">更新RubyGems软件自身</span></span><br><span class="line">gem update --system </span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">查找本地含有数字的包</span></span><br><span class="line">gem query -n &#x27;&#x27;[0-9]&#x27;&#x27; --local </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">把rake.gemspec编译成rake.gem</span></span><br><span class="line">gem build rake.gemspec </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">检测rake是否有效</span></span><br><span class="line">gem check -v pkg/rake-0.4.0.gem </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">清除所有包旧版本，保留最新版本</span></span><br><span class="line">gem cleanup </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">显示rake包中所包含的文件</span></span><br><span class="line">gem contents rails </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">列出与rails相互依赖的包</span></span><br><span class="line">gem dependency rails -v 6.1.5 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">查看gem的环境</span></span><br><span class="line">gem environment </span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>rubygems 学习手册：<a href="https://guides.rubygems.org/rubygems-basics/">https://guides.rubygems.org/rubygems-basics/</a></li><li>ruby-china：<a href="https://gems.ruby-china.com/">https://gems.ruby-china.com/</a></li></ul><hr><p><strong>任何小事都不能忽视，否则可能就会出大事</strong></p><p><img src="/upload/me/qrcode_wx2022.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ruby-on-Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ruby rails gem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby on Rails: 常用的开发工具</title>
      <link href="/2022/03/15/Ruby-on-Rails-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/15/Ruby-on-Rails-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>好的工具能让开发效率事半功倍，我把自己常用的工具介绍给大家，后续会持续更新。</p><p>如果你想使用 ruby 可以参考 <a href="https://veryitman.com/2022/03/14/Ruby-on-Rails-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Ruby 开发环境搭建</a>。</p><h2 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h2><ul><li>Ruby 手册：<a href="https://ruby-doc.org/core-2.7.2/">ruby-doc</a>，可以查询不同 ruby 版本的手册</li><li>Gem 国内镜像：<a href="https://gems.ruby-china.com/">gems.ruby-china</a></li><li>Ruby on Rails 官网：<a href="https://rubyonrails.org/">https://rubyonrails.org/</a></li><li>查看 Rails 所有版本：<a href="https://rubygems.org/gems/rails/versions">rail release</a></li><li><a href="https://ruby-china.github.io/rails-guides/">Ruby on Rails5.1 指南</a></li><li><a href="https://guides.rubyonrails.org/getting_started.html#creating-a-new-rails-project-installing-rails">Ruby on Rails7 指南</a></li><li><a href="https://api.rubyonrails.org/">Rails API</a></li></ul><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><ul><li><strong><a href="https://github.com/rubocop/rubocop">rubocop</a></strong></li></ul><blockquote><p>gem install rubocop</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ruby-work-dir</span><br><span class="line"></span><br><span class="line">rubocop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">检查指定的文件</span></span><br><span class="line">rubocop xxx.rb</span><br></pre></td></tr></table></figure><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><ul><li><strong><a href="https://github.com/ruby-formatter/rufo">rufo</a></strong></li></ul><blockquote><p>gem install rubocop</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ruby-work-dir</span><br><span class="line"></span><br><span class="line">rufo .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">格式化指定的文件</span></span><br><span class="line">rufo xxx.rb</span><br></pre></td></tr></table></figure><p>此工具也会做一些语法检测的工作。</p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul><li><p>ruby 代码规范：<a href="https://github.com/rubocop/ruby-style-guide">ruby-style-guide</a></p></li><li><p>rails 代码规范：<a href="https://github.com/rubocop/rails-style-guide">rails-style-guide</a></p></li></ul><h3 id="开发-IDE"><a href="#开发-IDE" class="headerlink" title="开发 IDE"></a>开发 IDE</h3><p>推荐使用 <code>Visual Studio Code</code>。</p><p>安装插件，在 <code>VSCode</code> 中搜索安装即可。</p><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby">Ruby</a>；</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=hridoy.rails-snippets">Rails on Rails</a>；</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=castwide.solargraph">Ruby Solargraph</a>，功能比较强大。代码提示、方法文档提示等；</p><blockquote><p>需要电脑上安装 <code>solargraph</code></p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install solargraph</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2022/03/16/1.png" alt="image-20220316185104895"></p><p>如果大家有足够的 Money，可以考虑购买 RubyMine，不过建议刚入门的同学还是先从 <code>irb</code> （ruby 自带的命令行交互工具，终端打开使用即可）或者 <code>VSCode</code> 开始。</p><hr><p><strong>本是后山人，偶做前堂客；醉舞经阁半卷书，坐井说天阔。</strong></p><p><img src="/upload/me/qrcode_wx2022.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ruby-on-Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ruby rails gem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby on Rails: 环境搭建</title>
      <link href="/2022/03/14/Ruby-on-Rails-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/03/14/Ruby-on-Rails-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我的电脑以及自带 Ruby 环境如下。</p><p>1、系统版本：<code>macOS Monterey 12.2.1</code></p><p>2、自带 ruby 版本：<code>ruby 2.6.8p205 (2021-07-07 revision 67951) [universal.x86_64-darwin21]</code>，其二进制文件在 <code>/usr/bin/ruby</code> 下。</p><p>3、自带 gem 版本：<code>3.1.6</code></p><p>自带的 ruby 版本无法支持 <code>rails 7.x</code> 的版本（<a href="https://rubygems.org/gems/rails/versions/7.0.2.3">可以查看 Rails 要求的 Ruby 版本</a>），我需要使用 <code>rvm</code> 对 <code>ruby</code> 版本进行控制，下面重点记录一下安装步骤和过程。</p><h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>可以参考 <a href="https://brew.sh/">官网</a> 最新的安装方式。</p><p>使用 brew 安装 <code>git</code>、<code>curl</code> 工具，安装过程中提示缺少就老老实实的安装啥就好了。</p><h2 id="安装-RubyGems"><a href="#安装-RubyGems" class="headerlink" title="安装 RubyGems"></a>安装 RubyGems</h2><p>简称为 <code>gem</code> 工具，<code>macOS</code> 会自带该工具不需要单独安装，如果没有可以使用 <code>brew</code> 安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt; </span><span class="language-bash">brew search gem</span></span><br><span class="line"><span class="meta">&gt; </span><span class="language-bash">If you meant <span class="string">&quot;gem&quot;</span> specifically:</span></span><br><span class="line">macOS provides gem as part of Ruby.</span><br></pre></td></tr></table></figure><p>也可以去 <a href="https://rubygems.org/pages/download">官网</a> 下载安装。</p><h2 id="安装-rvm"><a href="#安装-rvm" class="headerlink" title="安装 rvm"></a>安装 rvm</h2><p>参考：<a href="https://rvm.io/">https://rvm.io/</a></p><p>如果是 Ubuntu，可以参考 <a href="https://github.com/rvm/ubuntu_rvm%EF%BC%9B">https://github.com/rvm/ubuntu_rvm；</a></p><p>安装 <code>gpg2</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gpg2 </span><br></pre></td></tr></table></figure><p>如果安装不成功，可以安装 <code>gpg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gpg </span><br></pre></td></tr></table></figure><p>然后接着在终端执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure><p>或者使用 <code>gpg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>在 <code>～/.bash_profile</code> 中添加环境变量，记得下面这个一定要添加在文件的最后，否则每次启动命令行都需要设置一下默认的 ruby 版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">rvm</span></span><br><span class="line">[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; . &quot;$HOME/.rvm/scripts/rvm&quot;</span><br></pre></td></tr></table></figure><p>保存后在终端执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source ～/.bash_profile </span><br><span class="line"></span><br><span class="line">source ～/.zshrc</span><br></pre></td></tr></table></figure><h2 id="安装-bundler"><a href="#安装-bundler" class="headerlink" title="安装 bundler"></a>安装 <a href="https://www.bundler.cn/">bundler</a></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install bundler</span><br></pre></td></tr></table></figure><h2 id="安装-ruby"><a href="#安装-ruby" class="headerlink" title="安装 ruby"></a>安装 ruby</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、brew update</span><br><span class="line"></span><br><span class="line">2、rvm get master</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">指定安装版本</span></span><br><span class="line">3、rvm install 2.7.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看已经安装的ruby</span></span><br><span class="line">4、rvm list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">使用默认的版本</span></span><br><span class="line">5、rvm use ruby-2.7.5 --default</span><br></pre></td></tr></table></figure><h2 id="安装-rails"><a href="#安装-rails" class="headerlink" title="安装 rails"></a>安装 rails</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">默认安装最新版本</span></span><br><span class="line">sudo gem install rails </span><br></pre></td></tr></table></figure><p>安装成功后，可以查看一下安装的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rails -v</span><br><span class="line"><span class="meta"># </span><span class="language-bash">我安装后的 rails 版本是 7.0.2.3</span></span><br><span class="line">Rails 7.0.2.3</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails new weibo --skip-bundle</span><br></pre></td></tr></table></figure><p>其中 <code>weibo</code> 是项目名称，参数 <code>--skip-bundle</code> 可以跳过依赖库的安装，这样创建工程很快。</p><p>打开工程 <code>weibo</code> 下面的 <code>Gemfile</code> 文件，修改源地址即使用 <a href="https://gems.ruby-china.com,注意原来的/">https://gems.ruby-china.com，注意原来的</a> taobao 源已经停止更新了，全部放到了 ruby-china 上了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#source &quot;https://rubygems.org&quot;</span></span><br><span class="line"><span class="string">source</span> <span class="string">&quot;https://gems.ruby-china.com&quot;</span></span><br></pre></td></tr></table></figure><p>你在使用 source 遇到了问题，可以在 <a href="https://gems.ruby-china.com/">https://gems.ruby-china.com/</a> 上面查找答案。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>执行完成后，启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails server</span><br></pre></td></tr></table></figure><p>打开 <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a> 可以看到默认首页。</p><hr><p><strong>得先从自己身上找问题</strong></p><p><img src="/upload/me/qrcode_wx2022.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ruby-on-Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby Rails Gem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GithubPages 404</title>
      <link href="/2022/03/06/Hexo-GithubPages-404/"/>
      <url>/2022/03/06/Hexo-GithubPages-404/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>继上次 <a href="http://veryitman.com/2018/02/02/Hi-2018-%E6%88%91%E5%8F%88%E6%9D%A5%E4%BA%86">2018，我又来了</a> 中说 Hexo 数据丢失已有几个年头了，手中的那台笔记本见证了我头发稀疏的过程，它已经到了退休的年龄，运行速度已经无法匹配我的手速了。于是我省吃俭用换了一台电脑。我最先迁移的就是 Hexo，因为它太简单好用了实在是爱不释手。万万没想到一个 404 折腾了我几天几夜，几乎让我崩溃，还好最终解决了，不然我真的要去住院治疗了。</p><h2 id="诸多方案"><a href="#诸多方案" class="headerlink" title="诸多方案"></a>诸多方案</h2><p>或许使用 Hexo 搭建个人网站的朋友见过下面这张图</p><p><img src="/upload/images/2022/03/06/1.png"></p><p>出现这种 404 有如下几种情况，不知道你是哪一种，听我一一道来。</p><p><strong>1、github 仓库名称不匹配</strong></p><p>我们都知道，想要部署自己的 github.io，需要在 github 上面创建仓库。</p><p>在 github 上面创建的仓库名称没有使用自己的 github 账号名称，例如你的 github 账号名称是 <code>zhanghao</code>，而你创建的仓库名称是 <code>suibian.github.io</code>，这样你确实是无法访问你的博客网站的。</p><p><strong>2、配置文件错误</strong></p><p>在你的本地博客目录下（我创建的名称是 <code>hexo</code>，注意不是 themes 主题目录下的那个配置文件），有个配置文件 <code>_config.yml</code>，里面内容是这样的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment">#deploy: git@github.com:zhanghao/zhanghao.github.io.git</span></span><br><span class="line"><span class="comment">#type: git</span></span><br></pre></td></tr></table></figure><p>需要修改一下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:zhanghao/zhanghao.github.io.git</span></span><br><span class="line">  <span class="comment">#branch: [master]</span></span><br><span class="line">  <span class="comment">#message: [message]</span></span><br></pre></td></tr></table></figure><p>特别要注意 <code>repo</code> 和 <code>git</code> 后面要有<strong>空格</strong>。</p><p><strong>3、分支错误</strong></p><p>现在在 github 上面创建 repo，默认分支名称是 <code>main</code> 而不是 <code>master</code>。</p><p>所以，你本地 Hexo 提交（<code>hexo d</code> 命令）的默认是去了 <code>master</code> 分支，这样访问也是没有内容的。可以在 github 上面把你的 <code>zhanghao.github.io</code> 仓库默认分支改为 <code>master</code>，当然还可以修改 Hexo 的配置来改变分支为 <code>main</code>，我没有试过就不误人子弟了。</p><p><strong>4、hexo 依赖不全</strong></p><p>我在 hexo 目录下，检查了一下，发现该安装的插件已经很齐全了，毕竟我是把 <code>package.json</code> 复制过来的，一个 <code>npm install</code> 妥妥完事。</p><p>检查依赖安装是否有不全的情况，可以使用 npm list 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list --depth 0</span><br></pre></td></tr></table></figure><p>如果检查有问题，会在控制台提示类似 <code>npm ERR! missing xxxxx</code>。</p><p><strong>5、域名解析错误</strong></p><p>或许你配置了自己的域名，在阿里云或者腾讯云上面购买了自己的域名也配置了对应的 DNS 解析，但就是 404，你说气人不？！</p><p>关于在云上配置 CNAME，我就不多讲了，这里一定要在配置的时候检查一下你的 <code>zhanghao.github.io</code> IP，然后再去配置 A 记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ping zhanghao.github.io</span><br><span class="line"></span><br><span class="line">PING veryitman.github.io (185.199.108.153): 56 data bytes</span><br><span class="line">64 bytes from 185.199.108.153: icmp_seq=0 ttl=43 time=78.002 ms</span><br><span class="line">64 bytes from 185.199.108.153: icmp_seq=1 ttl=43 time=119.590 ms</span><br></pre></td></tr></table></figure><p>其中，<code>185.199.108.153</code> 就是 <code>github.io</code> 的 IP。</p><p><strong>6、仓库中 CNAME 为空</strong></p><p>这种错误，可以在 source 目录下创建一个 CNAME 文件，填写你的域名即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd hexo/source </span><br><span class="line"></span><br><span class="line">touch CNAME</span><br><span class="line"></span><br><span class="line">vim CNAME</span><br></pre></td></tr></table></figure><p>例如我的 CNAME 文件内容是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhanghao.com</span><br></pre></td></tr></table></figure><p>保存完成后，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="我的问题"><a href="#我的问题" class="headerlink" title="我的问题"></a>我的问题</h2><p>很遗憾的告诉你，我遇到的问题上面 6 种情况都不是。</p><p>而是我的 <code>node</code> 版本太高了（17.x），我用的 hexo 版本是 <code>4.2.1</code>。</p><p>官方给出了对应的兼容版本要求，如下表所示：</p><table><thead><tr><th>Hexo 版本</th><th>最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td>6.0+</td><td>12.13.0</td></tr><tr><td>5.0+</td><td>10.13.0</td></tr><tr><td>4.1 - 4.2</td><td>8.10</td></tr><tr><td>4.0</td><td>8.6</td></tr><tr><td>3.3 - 3.9</td><td>6.9</td></tr><tr><td>3.2 - 3.3</td><td>0.12</td></tr><tr><td>3.0 - 3.1</td><td>0.10 or iojs</td></tr><tr><td>0.0.1 - 2.8</td><td>0.10</td></tr></tbody></table><p>后面我卸载了 <code>node</code>，重新安装了 <code>node 12</code>，一顿操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install node@12</span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>再次打开自己的网站，一切都正常了，喜出望外。</p><p>当你痴迷一件事情的时候，连做梦都会帮你思考解决方案。</p><hr><p><strong>老天的事儿管不了，把自己的事情做好就好。</strong></p><p><img src="/upload/me/qrcode_wx2022.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool hexo githubpages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH问题汇集笔记</title>
      <link href="/2022/03/05/SSH%E9%97%AE%E9%A2%98%E6%B1%87%E9%9B%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/05/SSH%E9%97%AE%E9%A2%98%E6%B1%87%E9%9B%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近换了电脑并且升级了 macOS，发现在使用 SSH 遇到了一些问题，在此记录希望能帮到更多的朋友。</p><h2 id="无法连接远程服务器"><a href="#无法连接远程服务器" class="headerlink" title="无法连接远程服务器"></a>无法连接远程服务器</h2><p>执行远程连接，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip.ip.ip.ip </span><br></pre></td></tr></table></figure><p>控制台提示如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unable to negotiate with legacyhost: no matching key exchange method found.</span><br><span class="line">Their offer: diffie-hellman-group1-sha1</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>1、创建 <code>～/.ssh</code> 目录</p><p>2、在<code>～/.ssh</code> 目录下新建 <code>config</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br><span class="line"></span><br><span class="line">cd ~/.ssh</span><br><span class="line"></span><br><span class="line">touch config</span><br></pre></td></tr></table></figure><p>3、编辑 <code>config</code> 文件，写入如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">    KexAlgorithms +diffie-hellman-group1-sha1</span><br></pre></td></tr></table></figure><h2 id="无法提交代码到-Github"><a href="#无法提交代码到-Github" class="headerlink" title="无法提交代码到 Github"></a>无法提交代码到 Github</h2><p>当提交自己的代码到自己的 git 仓库时，发生了尴尬的一幕，提示的错误信息大致如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure><p>后面发现需要设置本地的公钥，该公钥相当于本地和远程 github 的链接桥梁，撸起袖子开搞。完整教程可以参考官方文档，<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">戳我</a>即可。</p><p>假设你的 github 账号名称是 <code>zhanghao</code>，邮箱是 <code>zhanghao@126.com</code></p><p><strong>1、全局配置账号和邮箱</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global  user.name &quot;zhanghao&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;zhanghao@126.com&quot;</span><br></pre></td></tr></table></figure><p><strong>2、生成公私钥</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;zhanghao@126.com&quot;</span><br></pre></td></tr></table></figure><p>在接下来提示的过程中，最好不要设置密码即直接回车。</p><p>完成之后，不出意外会在 <code>～/.ssh</code> 目录下生成 <code>id_rsa.pub</code> 公钥文件和 <code>id_rsa</code> 私钥文件。</p><p><strong>3、配置 github</strong> </p><p>登入 github，分别点击 Settings &#x2F; SSH and GPG keys &#x2F; New SSH key，复制 <code>id_rsa.pub</code> 公钥文件里面的内容粘贴保存即可。</p><p>在控制台测试一下是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>提示如下信息即可表示成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi zhanghao! You&#x27;ve successfully authenticated, but GitHub does not provide shell access</span><br></pre></td></tr></table></figure><p><strong>4、生成访问令牌（可选）</strong></p><p>如果直接使用账号密码在控制台登入 github 是一件比较危险的事情，所以 github 采用了令牌的访问方式，一旦发生泄漏可以即可删除该令牌。</p><p>登入 github，分别点击 Settings &#x2F; Developer settings &#x2F; Personal access tokens &#x2F; Generate new token</p><p>生成之后，需要你自己保存下来，在需要使用密码的地方使用该令牌即可。</p><h2 id="清除本地公钥"><a href="#清除本地公钥" class="headerlink" title="清除本地公钥"></a>清除本地公钥</h2><p>我看自己的云主机 CPU 使用率一直很高，怀疑是中毒了，就给云主机重新安装了系统。</p><p>系统安装完成后，发现 ssh 连不上云主机了，并且在终端提示如下信息：</p><blockquote><p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that a host key has just been changed.</p></blockquote><p>清除本地公钥命令如下，清除完成后重新使用 ssh 登录即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">换成自己的云服务器外网IP</span></span><br><span class="line">ssh-keygen -R ip-addr</span><br></pre></td></tr></table></figure><p>命令 <code>ssh-keygen -R ip</code> 本质是清空 <code>~/.ssh/known_hosts</code>文件内容，并给你做个备份重命名为 <code>~/.ssh/known_hosts.old</code>，又学到一招。</p><hr><p><strong>勿以善小而不为</strong></p><p><img src="/upload/me/qrcode_wx2022.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心流</title>
      <link href="/2022/02/13/%E5%BF%83%E6%B5%81/"/>
      <url>/2022/02/13/%E5%BF%83%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>冬季的阳光透过窗帘洒到沙发上，虽没有夏季那般的生猛但依旧那么耀眼。清晨如约而至，马路上急促的喇叭声暗示上班时间已经到了，我戴上耳机骑上小黄奔赴办公室。一天的工作在自我安排中悄然有序的开始了，每天工作的内容不一样但节奏基本一致，我已经习惯并享受着这份忙碌的快乐，日复一日年复一年。或许在朋友眼中我就是个工作狂而且不会感觉到累的人，其实他们不知道，哪有工作不累的，我只是能在工作中找到让自己快乐的“灵丹妙药”而已，我喜欢让自己忙一点去让周围的人更快乐一些，围绕着目标和一群有工作激情的人在一起工作是一件很幸福的事情。工作中我会产生心流，它也一直让我成长着。</p><p>说到心流，不得不推荐米哈里·契克森米哈赖大师的《心流：最优体验心理学》这本书。书中提到了三个核心关键词即幸福、最优体验（他称之为心流）和精神熵。个人从中获益良多，结合自己工作中的体验讲讲如何获得心流😄。</p><p>我们先看看什么是 “熵”。</p><h2 id="各种熵"><a href="#各种熵" class="headerlink" title="各种熵"></a>各种熵</h2><p>在微信中搜索 “熵”，各种各样的文章层出不穷。</p><p><img src="/upload/images/2022/02/13/1.png"></p><p>熵（shāng），英文是 <code>Entropy</code> ，属于物理学中的热力学概念。热力学中表征物质状态的参量之一，用符号 <code>S</code> 表示，其物理意义是 <strong>体系混乱程度的度量</strong>。热力学第一定律是能量守恒原理，热力学第二定律是熵原理，这两个定律是最基础的理论。有序趋于无序，无序的量度被称作“熵”。</p><p>听起来云里雾里的，第一次在高中物理课堂上听到熵这个东西，老师讲的吐沫横飞，我听的是摇摇欲坠，还好老师当时说：“大家先不理解没关系，先记住这个东西，它只是一个单位，后面慢慢就会理解的”。老师当时的安慰已经让我们内心不安的世界开始熵减了。</p><p>举个栗子🌰~</p><p>你刚搬进一个新家，整齐划一干净整洁的环境让你耳目一新，家具餐具摆放的有条不紊，透着阳光的照耀，地板显得格外光鲜亮丽。随着时间的推移和个人购物需求的增长，你家里叠放的东西越来越多，有限的空间会变得越发混乱，这就是一个熵增的过程。很多人会收拾旧东西并且把它扔掉或者捐赠给别人会觉得心旷神怡，原来他们这样做可以让整个家变得越来越有秩序，懂得取舍很关键。</p><p>工作之后，陆陆续续看到很多文章在讲熵形态相关的内容，例如信息熵、反熵、共享熵、心灵之熵和分布式之熵诸如此类。看到这些文章的感受，就好比无法理解心理学家丹尼尔·卡尼曼为什么能获得诺贝尔经济学奖一样费解。直到自己认真看完米哈里·契克森米哈赖的《心流：最优体验心理学》这本书之后，感觉确实可以用熵的物理学概念解释很多工作、生活、婚姻方面的事情，倍感收益，其实很多知识是相通的。</p><p>《心流：最优体验心理学》提出了精神熵的概念。米哈里说精神熵是指各种资讯信息会给人们意识中的目标和结构带来威胁（比如 <a href="http://www.veryitman.com/2021/11/28/%E8%A1%8C%E5%8A%A8%E8%B5%B7%E6%9D%A5%E6%89%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E7%84%A6%E8%99%91/">焦虑</a>），将导致内心失去秩序，就是精神熵。</p><p>米哈里所说的心流指的是心理上可获得的最优体验，能给你带来无法言语的心灵感受，最重要的是心流会带给你成长。米哈里说“精神熵是常态”，在他看来精神熵的反面就是最优体验，他称之为“心流”。今天你给自己定了一个小目标比如修复一个很难复现的产品缺陷，通过自己的专注力和专业能力在下班前搞定了，你那个时刻甚至接下来的很长一段日子里都是满足的，内心是幸福的，至少你向自己证明了自己的能力。</p><h2 id="获得心流"><a href="#获得心流" class="headerlink" title="获得心流"></a>获得心流</h2><p>每个人对幸福的理解不一样，我们也很难用一句话解释或者说明到底什么是幸福。幸福发生的时刻可能是听到朋友或者家人的一句话，也可能是一个微笑，也可能是你正在阅读、写作或者工作的状态。</p><p>幸福是不容易得到的，大自然并不是为人类所服务的。换句话说，宇宙其实是不在乎我们的，人类从诞生到现在仍然要面对各种自然灾害以及生老病死。人的欲望也是无止境的，好的想更好。想获得幸福你需要有个平常心。</p><p>能够用自己的能力完成跳一跳够得着的事情才会让你有成就感，可以造就心流的活动中需要有动态的挑战，即当挑战与你的技能匹配时，就会有心流。当挑战的目标大大高过你的技能时，将产生焦虑，此时应降低挑战目标。当你的技能高过设定的目标，继续持续这种活动将产生厌倦，便要提升目标，以求挑战和心流的持续。正是在技巧提高、目标上调的过程中，当事者感受到了成长的乐趣。此为幸福之真谛。正如下面这张图所示：</p><p><img src="/upload/images/2022/02/13/2.png"></p><p>那我们如何才能获得心流呢？</p><p>个人拙见，最重要的一点就是做自己喜欢的事情，否则很难达到心灵上的最优体验，即使有心流的感觉也是昙花一现，长期来看也很难有所成长。这也是米哈里所说的，想获得心流，需要有一个能为之付出的目标，并且能够集中注意力，专注的去完成。因全神贯注于此，日常恼人的琐事被忘却和屏蔽，这样一来你的精神熵就会减少，获得心流的感受就会越强。</p><p>那我们聊聊自律，我始终相信自律的人生是幸福的。</p><p>所谓的自律，其实也是一种心流的感觉，真正的自律是不存在的或者说是骗人的。只有在某件事情上你尝到了甜头，你才愿意一直坚持下去，这才形成了所谓的自律。《少有人走的路》这本书里解释了自律的含义。所谓自律，就是以积极主动的态度，去解决人生痛苦的重要原则，主要包括四个方面：推迟满足感、承担责任、尊重事实、保持平衡。自律不等于被逼迫。如果一个人拼得满头大汗，却仍然强迫自己去完成某件事，那么结果往往会不尽如人意。所以，真正自律的人往往都是因为做某件事的成就感而变得自律。有成就感才是他们坚持下去的原因。</p><p>总之，想获得心流，你至少需要：</p><ul><li><p>有确定且合适的目标，并且愿意为之付出；</p></li><li><p>能集中精力，全身心投入并实现目标；</p></li></ul><hr><p><strong>不断的拼搏、奋斗，从而让自己产生心流，人生才有意义</strong></p><p><img src="/upload/me/qrcode_wx2022.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心流 工作 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怀念 Ubuntu：查看 CPU 信息</title>
      <link href="/2021/12/19/%E6%80%80%E5%BF%B5-Ubuntu%EF%BC%9A%E6%9F%A5%E7%9C%8B-CPU-%E4%BF%A1%E6%81%AF/"/>
      <url>/2021/12/19/%E6%80%80%E5%BF%B5-Ubuntu%EF%BC%9A%E6%9F%A5%E7%9C%8B-CPU-%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>初中时期结识了一位挚友，在初中生涯我俩算是焦不离孟的友情，有一次我们聊天。</p><p>我说：“看到自己之前写的字，实在太丑了。。。”</p><p>他说：“说明你进步了。每当你审视之前做的东西不够完美，说明你是有追求的人。”</p><p>现在想想，这位朋友当时的解释算是哲学界的泰斗解说了。</p><p>今天在翻阅之前写的技术文章，发现了 <a href="https://veryitman.blog.csdn.net/article/details/7326536">linux 常用命令: 查看 CPU 信息</a> 这篇文章，那是我在 2012 年写的。当时自己使用 Linux 已经有两年多的时间了，很多命令还是记不住，我就在 CSDN 上面写下来当作备忘了。几年过去了，今天翻翻自己之前写的东西突然看到了它，文笔确实很糟糕（今天还顺便修改了几个错别字🤦‍），截至到今天阅读量只有 1.3万+但最近7天查看较多就想着发出来给大家共享一下，希望能帮到正在努力的你。</p><p>记得在大四的时候，我就开始折腾 Ubuntu，觉得这个东西挺好玩的，它最吸引我的地方就是可以在上面为所欲为的敲打命令，整个系统能被自己敲打出来的命令所操控，那种感觉不仅爽而且还很酷。毕业之后购买的第一台笔记本是联想的，我还特意要求老板给装上了 Ubuntu 的系统。工作了这么多年用过 macOS、Windows，但 Linux 给我的那种纯粹的感觉至今让人难以忘却，我的台式机里面一直给 Ubuntu 留着位置，时不时的要拿出来爽一把。</p><hr><p><img src="/upload/images/2021/12/19/1.png"></p><p>在 Windows 下面可以很方便快捷的看出当前 CPU 的信息，那么在 Linux 下面如何很快的知道呢？</p><p>也很简单，不信你可以试一试下面这个命令：</p><p><strong>lscpu</strong></p><p><img src="/upload/images/2021/12/19/2.png"></p><p>可以看出，CPU 的信息出来了，红色部分是 CPU 的位数和 CPU 的核数。</p><p>也可以用 <code>cat -n /proc/cpuinfo</code> 命令查看更加详细的信息，但查出来的内容太多，看起来挺费劲。</p><p>下面给出几个常用的命令。<strong>wc</strong> 主要用于统计，<strong>uniq</strong> 主要用于除去重复行，只显示其中相同的某条数据。大家可以自行去搜索和学习这两个命令。</p><p><strong>1、查看物理 CPU 的个数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /proc/cpuinfo | grep &quot;physical id&quot; | sort  | uniq | wc -l</span><br></pre></td></tr></table></figure><p>注意：物理 CPU 就是实实在在的硬件。</p><p><strong>2、查看逻辑 CPU 的个数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /proc/cpuinfo | grep &quot;processor&quot; | wc -l</span><br></pre></td></tr></table></figure><p><strong>3、查看 CPU 是几核</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /proc/cpuinfo | grep &quot;cores&quot; | uniq</span><br></pre></td></tr></table></figure><p><strong>4、查看 CPU 的主频</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /proc/cpuinfo | grep MHz | uniq</span><br></pre></td></tr></table></figure><p>查询结果如下图，所示：</p><p><img src="/upload/images/2021/12/19/3.png"></p><p>当然不同的 CPU 显示结果会不一样，上图是 2012 年购买的机器安装的 Ubuntu，下图是现在虚拟机安装的 Ubuntu 系统。</p><p><img src="/upload/images/2021/12/19/4.png"></p><hr><p><strong>做自己喜欢做的事情，这个很重要！</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Ubuntu CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行动起来才能解决焦虑</title>
      <link href="/2021/11/28/%E8%A1%8C%E5%8A%A8%E8%B5%B7%E6%9D%A5%E6%89%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E7%84%A6%E8%99%91/"/>
      <url>/2021/11/28/%E8%A1%8C%E5%8A%A8%E8%B5%B7%E6%9D%A5%E6%89%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E7%84%A6%E8%99%91/</url>
      
        <content type="html"><![CDATA[<p>最近遇到很多朋友或者同事，多多少少都有在说自己比较焦虑，恰好自己正在看《底层逻辑》和《结构思考力》，今天我也来凑个热闹，聊聊焦虑。</p><p>焦虑是对亲人或自己生命安全、前途命运等的过度担心而产生的一种烦躁情绪。其中含有着急、挂念、忧愁、紧张、恐慌、不安等成分。</p><p><img src="/upload/images/2021/11/28/2.jpg"></p><p>我有过一次记忆犹新的焦虑，来自于童年。</p><p>那时我已经7岁了，岁末年初。春节对于孩子们来说是让人期待和兴奋的，大雪在空中高兴的飞舞着，胖胖的雪人给院子增添了一份温馨，用树枝做的鼻子让它显得格外卓别林。父母在厨房里准备着年夜饭，我独自在房间里黯然神伤。我突然觉得哪一天父母要是离开了我们，眼前这一切都会随之消失，那种可怕的想法让我潸然泪下。说起来也奇怪，那个时候的我为什么会有这样的焦虑，现在想想还挺傻的。</p><p>人有悲欢离合。珍惜当下，珍惜和亲人或者同事在一起的日子，记住和他们在一起努力奋斗和生活的岁月，比什么都重要。</p><p>有个做互联网开发的朋友，工作了大概两年的时间，他说自己当初为了找工作就学习了比较热门的技术，但最近他觉得这门技术会凉凉，开始担心自己将来会被淘汰。</p><p>我问他，“你用现在的技术做的项目前景如何？”</p><p>“项目还可以并且很有前景，也有很多技术大牛一起工作，能学到不少知识”。</p><p>“那你应该提升自己的能力让项目变得更好，在项目中夯实基础，我相信你再学习其他的专业编程知识会更加与鱼得水”。</p><p>“那我应该在项目中不断磨练自己的基本功，用最好的状态为项目贡献力量”。</p><p>“是的，调整好心态，行动起来”。</p><p>我相信每个人都有自己的焦虑。</p><ul><li>孩子成绩总是差强人意；</li><li>总觉得老公的工资杯水车薪；</li><li>等着买房而房价总是居高不下；</li><li>项目交付质量层次不齐；</li><li>工作中大小事务层出不穷；</li><li>身体情不自禁地发了福，减肥屡屡失败；</li><li>等等。。。</li></ul><p>心理学研究表明，焦虑都是源自于对事件的“不确定性”。对于不太确定的事情，我们会在脑海不停地猜想可能发生的后果，从而感到焦虑、不安，难以专心做好眼前的事。</p><p>心理学家河森堡说，如果你觉得某件事让你特别焦虑，压得你喘不过气来，那么最好的排解方法就是直接去做这件事，什么都别管，就是使劲做，努力去推动进度。你每往前推进一点这件棘手的事情，你的焦虑就会减少一分。同时，你的焦虑越少，推进工作的速度也就越快。只要咬紧牙关，不停地推进，总会有解脱的那一天。而且你每完成一个棘手的任务，或多或少都会比之前强大一点，这件苦差事总会改变你一点。</p><p><img src="/upload/images/2021/11/28/3.jpg"></p><p>如果你不采取任何行动，焦虑慢慢的会将你吞噬，让你变得消极甚至抑郁。</p><p>从某种角度来看，焦虑并不是绝对的坏事，人无远虑必有近忧。当焦虑来临后，你更应该具有忧患意识，客观的评价当前情况，让焦虑变成自己前进的动力。付出更多的努力改变现状，争取取得更好的成绩。</p><p>面对焦虑，我们应该持有更开放的心态，学会释放压力。无论如何，你要行动起来不能只是焦虑！<a href="http://www.veryitman.com/2020/09/26/%E7%94%9F%E8%80%8C%E4%B8%BA%E4%BA%BA%EF%BC%8C%E6%88%91%E5%BE%88%E6%AC%A2%E5%96%9C/">生而为人，要能欢喜</a>。</p><p><img src="/upload/images/2021/11/28/1.png"></p><hr><p><strong>努力向前一步，离梦想就更进一步</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 焦虑 工作 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术人，也应具备项目管理能力</title>
      <link href="/2021/11/07/%E6%8A%80%E6%9C%AF%E4%BA%BA%EF%BC%8C%E4%B9%9F%E5%BA%94%E5%85%B7%E5%A4%87%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%83%BD%E5%8A%9B/"/>
      <url>/2021/11/07/%E6%8A%80%E6%9C%AF%E4%BA%BA%EF%BC%8C%E4%B9%9F%E5%BA%94%E5%85%B7%E5%A4%87%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>你即将要看到的内容在我脑海里翻滚了很久~</p><p>自己写过不少技术博客，写的虽然不好但是总能拼凑出来。一旦开始写管理类的文章，就显得有些局促，但内心还是告诉我要坚持写下去。</p><p>自从写完 <a href="http://www.veryitman.com/2021/05/23/%E8%B5%B0%E4%B8%8A%E9%A1%B9%E7%AE%A1%E4%B9%8B%E8%B7%AF/">走上项管之路</a>，迟迟没有动手去写关于项目管理的文章。倒不是因为自己想偷赖，而是确实不知道如何下手。这种感觉，就好比你在岸上看到一条肥嘟嘟的大鱼想据为己有而又无计可施一般让人难受。</p><p>与其临渊羡鱼，不如退而结网。</p><p>我想把自己在做项目经理这个职业中遇到的一些关于项目管理的问题、感悟和经验分享给大家，尽量通俗易懂的和盘托出。</p><p>关于项目管理方面的文章都会归纳在 <a href="http://www.veryitman.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/">项目管理</a> 合集中，今天只分享的主题是在项目管理中常见问题的解答和分析。作为一名技术人，除了掌握专业的技能和解决问题的能力，还应该具备一定的项目管理能力，争取将来能做一名带兵打仗的将军实现自我更大的价值。</p><hr><p>爬过一座高山之后，除了累，还有山顶的风光却和沿途的景色。做项目管理的经理人也是如此。</p><hr><h2 id="证书在手，天下我有"><a href="#证书在手，天下我有" class="headerlink" title="证书在手，天下我有"></a>证书在手，天下我有</h2><blockquote><p>问：”考 PMP 证书到底有没有用“？</p></blockquote><blockquote><p>再问：”考过 PMP，月薪是不是可以翻一番“？</p></blockquote><blockquote><p>又问：”拿到 PMP 证书，是不是就可以当项目经理了“？</p></blockquote><p>之前有不少人问过我相同的问题，包括我自己在刚做项目经理的初期也有过类似的疑问。</p><p>这些问题都是好问题，但每个问题又不可以随便说 <code>可以</code> 或者 <code>不可以</code>。</p><p>PMP，全称是 Project Management Professional，指的是项目管理专业人士资格认证。它是由美国项目管理协会 PMI（Project Management Institute）发起的，严格评估项目管理人员知识技能是否具有高品质的资格认证考试。通过该考试可以拿到 PMP 证书。</p><p>从我个人经历和感悟来逐一回答上面三个问题。</p><p><img src="/upload/images/2021/11/07/1.png"></p><p><strong>1、考 PMP 证书到底有没有用？</strong></p><p>如果你有时间或者精力，考 PMP 证书对绝大多数人来说肯定是有用的，这个毋庸置疑。</p><p>考 PMP 证书花费大概在 5000 - 6000 左右，准备大概 2-3个月就可以了，也算是对自己的一种投资，说不定哪天能够派上用场，无心插柳柳成荫。</p><p>PMP 考试过程中你需要看相关的专业书籍，至少要看 2 遍，在书中学到的一些理论知识不仅可以运用到工作当中，还可以运用到生活、家庭和教育以及人际关系当中去。</p><p>一切皆项目，利用考证的机会可以学到一些项目管理知识，既拿到了 PMP 证书又学到了新知识，一举两得。</p><p><strong>2、考过 PMP，月薪是不是可以翻一番？</strong></p><p>很多企业招聘项目经理会写：有 PMP 证书的优先。但是没有写：有 PMP 证书的薪资比没有 PMP 证书的薪资高 N 倍。</p><p>如果你之前有项目管理的工作经验，并且担任过几年的项目经理，做过的项目业绩也不错，但因为各种原因没有考 PMP 证书，突然有一天你心血来潮一脚油门考过了 PMP 考试。此时，你已不再是那个懵懂的少年，俨然是个项目管理老司机了，便可以理直气壮地跟公司领导谈谈升职加薪的事了。如果你对谈判结果不满意，大不了跳个槽，说不定薪资真能翻一番。此处不留爷，自有留爷处嘛。</p><p>考过了 PMP，拿到了证书，只能说明你对项目管理的专业知识技能掌握的还不错。至于能不能升职加薪，还是要看你的个人工作能力以及你所带的项目对公司的贡献度。</p><p>在我的职业生涯中，有很多项目经理并没有考 PMP但一样做的风生水起，他们确实比较优秀，能够用自己的方式和方法帮团队和组织实现目标。</p><p><strong>3、拿到 PMP 证书，是不是就可以当项目经理了？</strong></p><p>可以这么说，没有 PMP 证书，也一样可以做项目经理。</p><blockquote><p> “如果你恨一个人，就让他去当项目经理，因为十有八九他会被失败的项目毁了。“</p></blockquote><p>这是网上比较流行的一个段子，只有做过项目经理的人才能领悟这句话的含义。</p><p>大多数的公司或者企业，一般会从内部提拔人员担任项目经理的岗位，而不会从外部招聘（但有可能会从外部招聘一名项目管理专家）。</p><p>能从其他岗位做到项目经理这个位置的人，一般都是业绩比较突出，在团队里有较高的威望，一言九鼎，做人做事都能拿捏的恰到好处。</p><p>给想从事项目经理的同学们一句劝，最好先做好自己的业务再来做项目经理，在自己的业务中不断的实践项目管理知识，待时机成熟后再来考虑是否要坐上项目经理的宝座吧，且不要操之过急。</p><h2 id="专业我有，恪尽职守"><a href="#专业我有，恪尽职守" class="headerlink" title="专业我有，恪尽职守"></a>专业我有，恪尽职守</h2><p><img src="/upload/images/2021/11/07/4.png"></p><p>项目管理是一门学问和艺术，任何人都可以具备项目管理的能力，项目管理强调的是技能和专业；项目经理是一个岗位名称，项目经理要能够使用项目管理的方法、技巧和手段完成组织目标，强调的是职位和职能。</p><p>你可以不是项目经理，但你可能需要项目管理的能力。</p><p>一般有项目经理的团队，组织结构大致如下图所示。</p><p><img src="/upload/images/2021/11/07/2.png"></p><p>还有一种情况是团队中没有专职的项目经理，需要有人能够履行项目经理的职能，一般都是由组长担任项目管理的职责。</p><p><img src="/upload/images/2021/11/07/3.png"></p><p>常见的软件开发项目中，测试组长会带领测试成员负责项目的测试工作，前后端开发组长会安排开发成员的工作，负责项目开发周期以及开发质量。这样各个组的组长都是各组的”项目经理“。当项目发展到一定阶段（如团队人数增加了、产品线变多了等），产品经理会承担项目经理的角色组织和管理各个组长，向项目负责人（一般是部门负责人）汇报，产品经理要对用户和相关方负责，需要不断的提高产品用户体验，能够站在更高的层次管理项目。</p><p>从上面的介绍中，可以看出无论你是产品经理，还是开发或者测试组长，都需要一定的项目管理知识作为储备。</p><p>在很多互联网公司的职级晋升要求中，明文规定：”晋升到某个职级必须要具备项目管理的专业知识，否则不予通过“。就拿开发组长来说，可能 TA 编写代码的速度和代码质量在团队中出类拔萃，解决问题的思维和手段出其不意，大家都称 TA 为大神。只要跟 TA 讨论编程，TA 能够滔滔不绝的给你来上几段，但一到事情规划和人员管理上就显得手忙脚乱，措手不及。这种人需要公司或者企业给与一定的指导和培训，适当的让 TA 带领人员从小事做起，慢慢的培养项目管理的能力和自信，换句话说就是要能给予这样的人才赋能。</p><p>你要知道很多成功的企业家，他们都是从组长做起来的，他们通过不断的学习和实践具备了较强的项目管理能力，为后面自己的创业生涯添上了浓墨重彩的一笔。不积跬步无以至千里，点点滴滴才是基石。在做好本专业领域的同时，不妨”越俎代庖“地做一些管理项的工作，能让你事半功倍的完成目标。</p><hr><p><strong>你的使命是带领一批合适的人完成组织的特定目标</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 常见问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC: __attribute__((visibility()))</title>
      <link href="/2021/08/08/GCC-attribute-visibility/"/>
      <url>/2021/08/08/GCC-attribute-visibility/</url>
      
        <content type="html"><![CDATA[<p>在 <code>objc-api.h</code> 里面有很多关于 <code>__attribute__ </code> 的定义。</p><p>例如下面的代码片段：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(OBJC_VISIBLE)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">if</span> TARGET_OS_WIN32</span></span><br><span class="line"><span class="meta">#       <span class="keyword">if</span> defined(BUILDING_OBJC)</span></span><br><span class="line"><span class="meta">#           <span class="keyword">define</span> OBJC_VISIBLE __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#       <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#           <span class="keyword">define</span> OBJC_VISIBLE __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#       <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#       <span class="keyword">define</span> OBJC_VISIBLE  __attribute__((visibility(<span class="string">&quot;default&quot;</span>)))</span></span><br><span class="line"><span class="meta">#   <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>可以看到：OBJC_VISIBLE 的定义方式是 <code>__attribute__((visibility(&quot;default&quot;)))</code>。</p><p>那么究竟有什么作用呢？下面举例说明。</p><hr><p>GCC 有个 <code>visibility</code> 属性，启用这个属性情况如下说明。</p><p>1、当编译时增加 <code>-fvisibility=hidden</code> </p><p>动态库中的函数默认是被隐藏的即 hidden，除非显示声明为 <code>__attribute__((visibility(&quot;default&quot;)))</code></p><p>2、当编译时增加 <code>-fvisibility=default</code> </p><p> 动态库中的函数默认是可见的。除非显示声明为 <code>__attribute__((visibility(&quot;hidden&quot;)))</code></p><p><strong>特别说明:：这个特性是 GCC4.0 以后才有的。</strong></p><p>基于 <a href="http://blog.csdn.net/veryitman/article/details/46754909">GCC系列: 加载静态链接库</a> 的例子。谈谈 visibility。</p><p><strong>Car.c</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line">__attribute ((visibility(<span class="string">&quot;default&quot;</span>))) <span class="keyword">int</span> drive()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">&quot;Car driving...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> stop()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">&quot;Car stop.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：attribute 的定义和使用方法</strong>。</p><p>使用 visibility 属性来编译动态链接库，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++<span class="number">-4.9</span> -shared -o libCar.so -fvisibility=hidden Car.c</span><br></pre></td></tr></table></figure><p>这样一来，<code>drive</code> 方法是可见的，但是 <code>stop</code> 是不可见的。</p><p><em><strong>main.c</strong></em></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 在 gcc 编译器下, 必须声明方法</span></span><br><span class="line"><span class="comment">// 在 clang 编译下, 只是给了警告</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> drive();</span><br><span class="line"><span class="keyword">void</span> stop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    drive();</span><br><span class="line">    stop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 编译</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++<span class="number">-4.9</span> -o app main.c -L ./ -lCar</span><br></pre></td></tr></table></figure><p> 提示信息</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">&quot;stop()&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> ccZnwENu.o</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">collect2: error: ld returned <span class="number">1</span> exit status</span><br></pre></td></tr></table></figure><p> 这说明了上面提到的第一种情况。</p><p>重新编译 <code>Car.c</code>，换个方式：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++<span class="number">-4.9</span> -shared -o libCar.so -fvisibility=<span class="keyword">default</span> Car.c</span><br></pre></td></tr></table></figure><p> <strong>注意: 这次使用了 default 属性。</strong></p><p>编译 <code>main.c</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++<span class="number">-4.9</span> -o app main.c -L ./ -lCar</span><br></pre></td></tr></table></figure><p> 编译成功，运行程序</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./app </span><br><span class="line">Car driving...</span><br><span class="line">Car stop.</span><br></pre></td></tr></table></figure><p> 那么修改一下 <code>Car.c</code> 的代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line">__attribute ((visibility(<span class="string">&quot;default&quot;</span>))) <span class="keyword">int</span> drive()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">&quot;Car driving...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute ((visibility(<span class="string">&quot;hidden&quot;</span>))) <span class="keyword">void</span> stop()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">&quot;Car stop.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>visibility=default</code> 和 <code>visibility=hidden</code> 分别编译 <code>Car.c</code>.</p><p>可以知道，<code>stop</code> 函数都是隐藏的，这个也很好的说明了上面两个问题。</p><p>另外，除了 <code>default</code> 和 <code>hidden</code>，还有 <code>internal</code>、 <code>protected</code> 等，大家可以根据自己的使用场景选择使用即可。</p><hr><p><strong>选择比努力更重要，将就可以一时但不能一世~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows+Nginx 部署 Flutter Web</title>
      <link href="/2021/07/09/Windows-Nginx-%C2%B2%C2%BF%C3%8A%C4%91-Flutter-Web/"/>
      <url>/2021/07/09/Windows-Nginx-%C2%B2%C2%BF%C3%8A%C4%91-Flutter-Web/</url>
      
        <content type="html"><![CDATA[<p>今天的内容比较简单，我们直接进入主题。</p><hr><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>目前笔者用的 Flutter SDK 是 Stable 2.x，其已经支持 Web了。</p><p>使用 Android Studio 创建 Flutter 工程，需要勾选上对 Web 的支持，如下图所示：</p><p><img src="/upload/images/2021/07/09/1.png"></p><p>如果你之前创建的工程没有勾选该选项，可以在工程目录下执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">flutter create &lt;output directory&gt;</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Create a new Flutter project <span class="keyword">in</span> the specified directory.</span></span><br><span class="line">flutter create .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Recreating project ....</span><br><span class="line">  web\favicon.png (created)</span><br><span class="line">  web\icons\Icon-192.png (created)</span><br><span class="line">  web\icons\Icon-512.png (created)</span><br><span class="line">  web\index.html (created)</span><br><span class="line">  web\manifest.json (created)</span><br><span class="line"></span><br><span class="line">Wrote 8 files.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure><p>完成之后，在工程目录下就会生成 web 目录。</p><p><img src="/upload/images/2021/07/09/2.png"></p><h2 id="编译-Web-版本"><a href="#编译-Web-版本" class="headerlink" title="编译 Web 版本"></a>编译 Web 版本</h2><p>编译 Web 版本只需要一行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build web</span><br></pre></td></tr></table></figure><p>编译成功后，在工程的 build 目录下面有个 web 目录。</p><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><p>在 Nginx 的配置文件中，增加一个 server 配置即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8083</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># web目录的路径</span></span><br><span class="line">            <span class="attribute">root</span>   \project-path\build\web;</span><br><span class="line">            <span class="comment"># 默认页面</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>启动 Nginx（关于 Windows 上面操作 Nginx 的命令，可以参考笔者的 <a href="http://www.veryitman.com/2019/09/08/%E5%87%8F%E5%B0%91%E8%B7%A8%E5%9F%9F%E4%B8%AD%E7%9A%84OPTIONS%E8%AF%B7%E6%B1%82/">减少跨域中的OPTIONS请求</a>) ，然后在浏览器中访问 <code>http://localhost:8083/index.html</code> 即可。</p><hr><p><strong>学习犹如爬山，适当的咬紧牙关冲刺一把，就能一览众山小</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter Nginx Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主键值被我用完了</title>
      <link href="/2021/06/12/MySQL%E4%B8%BB%E9%94%AE%E5%80%BC%E8%A2%AB%E6%88%91%E7%94%A8%E5%AE%8C%E4%BA%86/"/>
      <url>/2021/06/12/MySQL%E4%B8%BB%E9%94%AE%E5%80%BC%E8%A2%AB%E6%88%91%E7%94%A8%E5%AE%8C%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复是指能够通过某个字段唯一区分出不同的记录，这个字段被称为 <em>主键</em>。</p><p>对表的主键要求比较关键的一点是：记录一旦插入到表中，主键最好不要再修改。</p><p>选取表的主键一个基本原则是：没有特殊情况，不使用任何业务相关的字段（如证件号码、手机号码等）作为主键。</p><p>本篇主要说明下面两个问题：</p><ul><li>主键值范围越界了会发生什么？</li><li>不设置主键行吗？</li></ul><p>看完正文之后，可以在本篇的【小结】部分找到答案。</p><p>推荐下面几篇关于 MySQL 的文章：</p><ul><li><a href="http://www.veryitman.com/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0">MySQL8-0-15在Win10上的折腾记</a></li><li><a href="http://www.veryitman.com/2019/12/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1-MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/">微服务-MySQL基本操作</a></li><li><a href="http://www.veryitman.com/2020/12/13/%E5%AF%BC%E5%85%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6/">导入MySQL数据库文件</a></li></ul><h2 id="数值类型的边界值"><a href="#数值类型的边界值" class="headerlink" title="数值类型的边界值"></a>数值类型的边界值</h2><p>C 标准库  <code>limits.h</code> 中定义了一些数据类型的值的范围、限制值，也就是说该类型的值不可以大于该上界或者小于该类型值的下界。</p><p>咱们先看下下面这个 C 语言例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 65535</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned short max value: %u\n&quot;</span>, USHRT_MAX);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> yy = USHRT_MAX;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;xx = %hu\n&quot;</span>, yy); <span class="comment">//65535</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;xx + 1 = %hu\n&quot;</span>, yy+<span class="number">1</span>); <span class="comment">//0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;xx + 2 = %hu\n&quot;</span>, yy+<span class="number">2</span>); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned short sizeof: %u\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">short</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，可以得到如下结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">short</span> max value: <span class="number">65535</span></span><br><span class="line">xx = <span class="number">65535</span></span><br><span class="line">xx + <span class="number">1</span> = <span class="number">0</span></span><br><span class="line">xx + <span class="number">2</span> = <span class="number">1</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> <span class="keyword">sizeof</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>从结果来看，无符号的 short 数据类型的最大值是 65535，当然最小值就是 0，即范围是 0 ~ 65535。</p><p>在这里，还是要再提一下关于格式化打印里面的一些说明：</p><ul><li><p><code>i%</code> 和 <code>d%</code>，都可以用来表示有符号的十进制整数，一般 <code>ld%</code> 用来表示 <code>long</code> 类型的；</p></li><li><p><code>o%</code> 用来表示八进制整数，<code>x%</code>（<code>X%</code>）用来表示十六进制整数；</p></li><li><p>对 <code>short</code> 类型使用 <code>h</code> 前缀，因此 <code>%hd</code> 表示以十进制显示 <code>short</code> 整数，<code>%ho</code> 表示以八进制显示 <code>short</code> 整数；</p></li><li><p><code>%u</code> 用来表示无符号整数，即 <code>unsigned int</code> 类型数据；</p></li><li><p><code>h%</code> 和 <code>l%</code> 前缀都可以同 <code>u%</code> 结合使用表示无符号整数。如 <code>%lu</code> 表示打印 <code>unsigned long</code> 类型、<code>%hu</code> 表示打印 <code>unsigned short</code> 类型；</p></li><li><p>打印 <code>long</code> 数值，<code>%ld</code> 打印 <code>long</code> 数值，<code>%lx</code> 表示以十六进制格式打印长整数，<code>%lo</code> 表示以八进制格式打印长整数；</p></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>经过上面的说明之后，接下来我们就可以进入今天的正题了。</p><p>创建数据库 <code>play_db</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE play_db;</span><br><span class="line"></span><br><span class="line">USE play_db;</span><br></pre></td></tr></table></figure><h3 id="设置主键并自增"><a href="#设置主键并自增" class="headerlink" title="设置主键并自增"></a>设置主键并自增</h3><p>创建表 <code>table0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table0(id <span class="type">SMALLINT</span> unsigned AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, name <span class="type">char</span>(<span class="number">10</span>)) AUTO_INCREMENT<span class="operator">=</span><span class="number">65535</span>;</span><br></pre></td></tr></table></figure><p>SMALLINT 是 MySQL 支持的一种数据类型，占用 2 个字节，有符号的取值范围是 (-32 768，32 767)，无符号的取值范围是 (0，65 535)。</p><p>看下创建的表情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> table0;</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2021/06/12/1.png"></p><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table0 (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;veryitman&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2021/06/12/2.png"></p><p>可见，此时 id 默认值已经是 65535了，试图再插入一条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table0 (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2021/06/12/3.png"></p><p>那么另外一个问题来了，如果我们不设置主键呢？</p><h3 id="不设置主键无自增"><a href="#不设置主键无自增" class="headerlink" title="不设置主键无自增"></a>不设置主键无自增</h3><p>创建表 <code>table1</code></p><blockquote><p>TINYINT unsigned，表示范围 0 ~ 255</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table1(id TINYINT unsigned, name <span class="type">char</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table1 (id, name) <span class="keyword">VALUES</span> (<span class="number">255</span>, <span class="string">&#x27;veryitman&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table1 (id, name) <span class="keyword">VALUES</span> (<span class="number">256</span>, <span class="string">&#x27;haha&#x27;</span>);</span><br></pre></td></tr></table></figure><p>此时会报错：<code>ERROR 1264 (22003): Out of range value for column &#39;id&#39; at row 1</code></p><p>如果不设置主键， InnoDB 会自动帮你创建一个不可见的、长度为 6 字节的 <code>row_id</code>，而且这个 <code>row_id</code> 是由 InnoDB 维护全局的 <code>dictsys.row_id</code>，每次插入一条数据时都会让全局 <code>row_id</code> 加一（未定义主键的表会使用全局 <code>row_id</code> 作为主键 <code>id</code>）。</p><p>如果全局 <code>row_id</code> 一直涨，直到涨到2的48次方-1时，这时候再加一就会让低 48 位的 <code>row_id</code> 都为 0，此时如果再插入一条数据，它拿到的 <code>row_id</code> 就是 0，这样的话就有可能存在主键冲突的。</p><p>所以创建表的时候，最好设置主键。</p><h3 id="设置自增但无主键"><a href="#设置自增但无主键" class="headerlink" title="设置自增但无主键"></a>设置自增但无主键</h3><p>创建表 <code>table2</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table2(id TINYINT unsigned AUTO_INCREMENT, name <span class="type">char</span>(<span class="number">10</span>)) AUTO_INCREMENT<span class="operator">=</span><span class="number">255</span>;</span><br></pre></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1075</span> (<span class="number">42000</span>): Incorrect <span class="keyword">table</span> definition; there can be <span class="keyword">only</span> <span class="keyword">one</span> auto <span class="keyword">column</span> <span class="keyword">and</span> it must be defined <span class="keyword">as</span> a key</span><br></pre></td></tr></table></figure><p>错误信息的意思是，只能有一个自增列，它必须被定义为键。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1、在设计数据表时，尽量根据业务需求来选择合适的字段类型。数据库表的自增 ID 达到上限之后，再申请时它的值就不会在改变了，继续插入数据时会导致报主键冲突错误。</p><blockquote><p>一个库或者表数据尽量不要太多，根据自己的业务合适设置即可。如果数据较多要进行分库分表，分布式环境下要注意主键生成问题，做到主键唯一；</p></blockquote><p>2、为了避免一些不必要的麻烦和隐性错误，设计表都应该设置主键。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>MySQL支持的数值类型</strong></p><p><img src="/upload/images/2021/06/12/4.png"></p><hr><p><strong>不积跬步，无以至千里；不积小流，无以成江海。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走上项管之路</title>
      <link href="/2021/05/23/%E8%B5%B0%E4%B8%8A%E9%A1%B9%E7%AE%A1%E4%B9%8B%E8%B7%AF/"/>
      <url>/2021/05/23/%E8%B5%B0%E4%B8%8A%E9%A1%B9%E7%AE%A1%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在几年前，我还不知道项目管理究竟为何物，而如今自己却与它紧紧相连。</p><p>跟大家分享一下自己是如何走上项目管理之路的，希望能对你将来的职业规划有点帮助。</p><h2 id="开发之路"><a href="#开发之路" class="headerlink" title="开发之路"></a>开发之路</h2><p>本人大学的专业是搞电子信息的。大学的生涯让我学到了很多高深莫测的知识，也让我结识了一帮志同道合的朋友，有幸能和他们一起在实验室里面搞研究。当然大学最重要的是让我获得了文凭，为将来找工作埋下了重要的基础。</p><p>我是从 2009 年真正开始接触移动端编程的，那个时候 Android 编程慢慢的在一线城市火了起来，朋友建议我趁现在有时间赶紧学一学：“这可能是将来让你辉煌腾达的首选之路”。听着他中肯的建议，仿佛自己已经走上了人生之颠，比当年哥伦布发现新大陆还 TM 还喜出望外。然鹅我不禁乐极生悲，Android 是啥？</p><p>经过一番了解和学习，终于认识了 Android。从 Java 编程到 Android 编程，我开始了自我修炼之路。那个时候我就在想，这个玩意挺好玩的，这辈子我都要学习它，玩转它！现在想想那个时候的自己还是挺理想的一个人，呵呵！</p><p>毕业后不久，就有模有样的干起了 Android 开发的勾当，这一干就是 5 年。</p><p>从一个意气风发的骚年变成了真正的码农，飘逸的头发也渐渐的稀疏了起来。</p><p><img src="/upload/images/2021/05/23/1.jpg"></p><p>直到有一天，遇到一个项目，大佬（项目技术总监）告诉我说：“团队目前没有 iOS 开发的人员，你是否愿意为自己多增加一种技能？”。</p><p>看着大佬诚挚的眼神，年少轻狂的我想都没想就答应了。现在回想起自己那种很自信的样子，挺傻的。</p><p>从那以后，我便开始了没日没夜的走上了熟悉和学习 iOS 编程之路，苦并快乐着，可能是因为自己的勤奋感动了上苍，很快就上手了 iOS 开发，并做得如火如荼，一发不可收拾。</p><p>在 iOS 开发的同时，我并没有放弃对 Android 开发的学习和进步，两手都要抓尽量都要硬。在后续的编程道路里，我越来越发现编程是相通的，只要你肯努力，就没有克服不了的困难。唯一要克服的就是你的懒惰和借口。</p><p>慢慢地我又开始接触了 Java 后端编程，移动端游戏开发等工作。唯一遗憾的是没有接触过前端编程，当全栈工程师的梦想也就破灭了。</p><p><img src="/upload/images/2021/05/23/2.png"></p><p>任何人都有选择的权力，在某个风和日丽的早上我毅然选择要放弃编程之路，准备踏上项目管理之路。</p><p>有很多人会说，你是因为年龄的问题才想着转管理路线的吧！</p><p>我只能说，年龄只是很小的一部分因素。毕竟这个世界上还有很多事情，我还没有经历过，也想在有生之年换一种求生之路。</p><h2 id="项目管理之路"><a href="#项目管理之路" class="headerlink" title="项目管理之路"></a>项目管理之路</h2><p>能从编程之路转到项管之路，跟当时的项目有关，对我来说也是一个机会。</p><p>走上项管的历程，让我想起了电影《功夫》里面的一个片段：</p><p><img src="/upload/images/2021/05/23/3.png"></p><blockquote><p>“唉，小弟，小弟，别走啊”</p><p>“哇，不得了，不得了啊！</p><p>你有道灵光从天灵盖喷出来，你知道吗？</p><p>年纪轻轻的就有一身横练的筋骨，简直百年一见的练武奇才啊！</p><p>如果有一天，让你打通任督二脉，那还不风龙上天哪？！</p><p>正所谓：我不入地狱，谁入地狱。警恶惩奸，维护世界和平这个任务，就交给你了，好吗？”</p></blockquote><blockquote><p>“唔”</p></blockquote><p>。。。</p><p>当然了，电影中的片段存在一定忽悠的成分。这里想表达的是：当机会来临的时候，做一下对比和衡量，适合就上吧！</p><p>我很感谢当初让我转行的大佬，给了我很多专业的建议，让我在这条路上能够有个很好的开始。</p><p>在转行后，自己也是积极的学习项目管理知识，虽没有悬梁刺股倒也会闻鸡起舞。</p><p>在项目管理的职业生涯中，并非是一帆风顺的，跟编程一样需要不断的学习。让项目成功，是项目管理中的重要使命。</p><p>这里要给在座的各位提个醒，项目管理不是让你来颐指气使管人的，而是让你能够把握大局，营造氛围让大家创造一个又一个成功的项目。</p><p>在团队中，你应该坚持公平公正的原则，维持项目的可持续健康发展，做好服务大众的角色和义务！</p><p>~</p><p>今天就到这吧，后续我会分享更多关于自己在项目管理中的实际案例给大家~</p><hr><p><strong>任何事都没有表面看起来的那么简单，既然选择了你认为适合自己的就坚持下去！终可见！</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AS、VSCode中实时显示每行代码的修改记录</title>
      <link href="/2021/04/12/AS%E3%80%81VSCode%E4%B8%AD%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E6%AF%8F%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/04/12/AS%E3%80%81VSCode%E4%B8%AD%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E6%AF%8F%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>阅读下面内容开始之前，假设你已经在使用 git 管理自己的代码了。</p><p>阅读本篇，可以看到如下内容：</p><p>1、如何在 Android Studio 中实时显示每行代码的提交历史记录；</p><p>2、如何在 Android Studio 中查看单个文件的修改历史记录；</p><p>3、如何在 Visual Studio Code 中实时显示每行代码的提交历史记录；</p><h2 id="plugin-之功"><a href="#plugin-之功" class="headerlink" title="plugin 之功"></a>plugin 之功</h2><p>工欲善其事必先利其器，在使用 IDE 工具的时候找到适合自己的插件可以让你的工作事半功倍。</p><p>大家可以在 在 AS 中安装如下两个插件：</p><ul><li>Git</li><li>GitToolBox</li></ul><p><img src="/upload/images/2021/04/12/01.png"></p><p>安装方式很简单，<code>File/Setttings/Plugins</code>，搜索插件名称直接安装完成重启 AS 即可。</p><p>在 VSCode 中安装如下插件：</p><ul><li>GitLens</li></ul><p><img src="/upload/images/2021/04/12/02.png"></p><p>使用快捷键 <code>Ctrl + Shift + P</code>，输入 <code>Install Extensions</code>，再搜索 <code>GitLens</code> 安装即可。</p><p>安装完成之后，就可以如下分别在 VSCode 和 AS 中的效果了，如下图所示：</p><p>VSCode 显示效果：</p><p><img src="/upload/images/2021/04/12/03.png"></p><p>AS 显示效果：</p><p><img src="/upload/images/2021/04/12/04.png"></p><h2 id="AS-设置-GitToolBox"><a href="#AS-设置-GitToolBox" class="headerlink" title="AS 设置 GitToolBox"></a>AS 设置 GitToolBox</h2><p>可以在 <code>File/Setting</code> 中对 <code>GitToolBox</code> 进行相关的设置，如下图：</p><p><img src="/upload/images/2021/04/12/07.png"></p><h2 id="AS-查看单文件修改记录"><a href="#AS-查看单文件修改记录" class="headerlink" title="AS 查看单文件修改记录"></a>AS 查看单文件修改记录</h2><p>按照下面截图的步骤操作即可查看，例如查看 <code>main.dart</code> 的修改记录。</p><p><img src="/upload/images/2021/04/12/05.png"></p><p><img src="/upload/images/2021/04/12/06.png"></p><p><code>Show History</code> 后，在打开的页面中即可查看该文件的修改记录。</p><p>如果你习惯使用 git 命令行操作，也可以结合 <code>git log --pretty=oneline 文件名</code> 和 <code>git show COMMITID</code> 的方式来查看。</p><h2 id="命令行使用-code"><a href="#命令行使用-code" class="headerlink" title="命令行使用 code"></a>命令行使用 code</h2><p>我们有时候想在命令行中直接使用 VSCode 打开当前目录，可以安装 <code>code</code> 命令，在 macos 上面使用 <code>CMD+Shift+ P</code> 打开输入框然后输入 <code>shell command</code>，如下图所示。</p><p><img src="/upload/images/2021/04/12/08.png"></p><p>安装成功后，就可以在命令行中使用 <code>code</code> 命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 VSCode</span></span><br><span class="line">code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 VSCode 打开当前目录</span></span><br><span class="line">code .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 VSCode 新建文件</span></span><br><span class="line">code custom.txt</span><br></pre></td></tr></table></figure><hr><p><strong>一味的妥协和让步只会让事情愈发以控制，直至灾难来临~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git AS VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: Token 相关的重构</title>
      <link href="/2021/01/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Token-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%87%8D%E6%9E%84/"/>
      <url>/2021/01/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Token-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在上一篇 <a href="http://www.veryitman.com/2021/01/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Token%E7%9A%84%E5%A4%84%E7%90%86/">微服务-Token的处理</a> 中，写了一个 <code>MSAuthTokenUtil</code> 类，用来生成、刷新、校验 token，该类的方法都是 <code>static</code> 的。后续想了一下，还是将其改为普通的组件较好，在最新代码中对其做了两个较大的重构。</p><h2 id="重构为组件"><a href="#重构为组件" class="headerlink" title="重构为组件"></a>重构为组件</h2><p>将其改名为 <code>MSAuthTokenHelper</code>，并将其中的所有 <code>static</code> 方法改为实例方法，用注解 <code>@Component </code> 修饰。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSAuthTokenHelper</span> &#123;</span><br><span class="line">    <span class="comment">///....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在所有使用到 <code>MSAuthTokenHelper</code> 的地方，增加对应的自动注入后调用即可。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MSAuthTokenHelper tokenHelper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTokenHelper</span><span class="params">(MSAuthTokenHelper tokenHelper)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tokenHelper = tokenHelper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MSResponse <span class="title function_">refreshUserToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">refreshToken</span> <span class="operator">=</span> tokenHelper.refreshToken(token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != refreshToken) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userID</span> <span class="operator">=</span> tokenHelper.userIDfromToken(token);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里顺便提一下，<code>@Controller</code>，<code>@Service</code>，<code>@Repository</code> 以及 <code>@Component</code> 的区别以及联系，如下表所示：</p><table><thead><tr><th align="left">注解</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">@Component</td><td align="left">最普通的组件，可以被注入到spring容器进行管理</td></tr><tr><td align="left">@Repository</td><td align="left">作用于持久层</td></tr><tr><td align="left">@Service</td><td align="left">作用于业务逻辑层</td></tr><tr><td align="left">@Controller</td><td align="left">作用于表现层（spring-mvc的注解）</td></tr></tbody></table><p><code>@Controller</code>，<code>@Service</code>，<code>@Repository</code> 都继承了 <code>@Component</code> 的功能，可以看这几个注解的源码得知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Repository 注解</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Controller 注解</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Service 注解</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个类被 <code>@Component</code> 所注解，那么就意味着同样可以用 <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code> 来替代它，同时这三个注解会具备有更多的功能，而且功能各异，可以根据自己的需要使用不同的注解来表示不同的业务和逻辑。具体可以参考 <a href="https://www.cnblogs.com/greatLong/articles/11910303.html">Spring&#x2F;Spring-Boot 学习 @Controller,@Component,@Service,@Repository的异同</a> 这篇文章，写的很清楚了。</p><h2 id="从配置文件读取-token-的配置"><a href="#从配置文件读取-token-的配置" class="headerlink" title="从配置文件读取 token 的配置"></a>从配置文件读取 token 的配置</h2><p>在之前的文章中，分享过如何通过 SpringBoot 的 <code>@ConfigurationProperties</code> 注解来读取配置文件，可以参考 <a href="http://www.veryitman.com/2020/08/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-ConfigurationProperties%E9%85%8D%E7%BD%AE/">微服务-ConfigurationProperties配置</a> 这篇文章。</p><p>在 <code>properties</code> 文件中，新增如下的配置信息:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auth token config</span></span><br><span class="line"><span class="comment"># --------------------------------------------</span></span><br><span class="line"><span class="attr">msconfig.authtoken.claims_jwtsid</span>=<span class="string">restful_api</span></span><br><span class="line"><span class="attr">msconfig.authtoken.claims_subject</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">msconfig.authtoken.claims_audience</span>=<span class="string">client</span></span><br><span class="line"><span class="comment">#token 过期时间24小时(24 * 60 * 60 * 1000)</span></span><br><span class="line"><span class="attr">msconfig.authtoken.token_expire_time</span>=<span class="string">86400000</span></span><br><span class="line"><span class="comment">#密钥盐</span></span><br><span class="line"><span class="attr">msconfig.authtoken.token_secret</span>=<span class="string">token123</span></span><br></pre></td></tr></table></figure><p>这些配置信息对应的 model 是 <code>MSAuthTokenPropertyConfig</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;msconfig.authtoken&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSAuthTokenPropertyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String claims_jwtsid;</span><br><span class="line">    <span class="keyword">private</span> String claims_subject;</span><br><span class="line">    <span class="keyword">private</span> String claims_audience;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> token_expire_time;<span class="comment">//token 过期时间24小时</span></span><br><span class="line">    <span class="keyword">private</span> String token_secret;<span class="comment">//密钥盐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>MSAuthTokenHelper</code>直接使用即可，关键代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSAuthTokenHelper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> MSAuthTokenPropertyConfig authTokenPropertyConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthTokenPropertyConfig</span><span class="params">(MSAuthTokenPropertyConfig authTokenPropertyConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authTokenPropertyConfig = authTokenPropertyConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(String userID)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">tokenExpireTime</span> <span class="operator">=</span> authTokenPropertyConfig.getToken_expire_time();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtsid</span> <span class="operator">=</span> authTokenPropertyConfig.getClaims_jwtsid();</span><br><span class="line">        <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> authTokenPropertyConfig.getClaims_subject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">audience</span> <span class="operator">=</span> authTokenPropertyConfig.getClaims_audience();</span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenSecret</span> <span class="operator">=</span> authTokenPropertyConfig.getToken_secret();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT Token Refractor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: Token的处理</title>
      <link href="/2021/01/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Token%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2021/01/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Token%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2020/11/15/Win10-%E5%AE%89%E8%A3%85-Redis/">Win10-安装-Redis</a> 和 <a href="http://www.veryitman.com/2020/12/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1-SpringBoot-%E9%9B%86%E6%88%90-Redis/">微服务-SpringBoot-集成-Redis</a> 分别介绍了如何安装和使用 Redis，今天继续结合 Redis，聊聊 token 授权登录的事情。</p><p>今天聊的主角是 JWT，聊完 JWT 之后再结合实例实现用户 token 登录。</p><h2 id="JWT-介绍"><a href="#JWT-介绍" class="headerlink" title="JWT 介绍"></a>JWT 介绍</h2><p>JWT，JSON Web Token 的缩写，基于 <a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a> 标准。</p><p>下面内容来自 <a href="https://jwt.io/">jwd.io</a>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.</span><br></pre></td></tr></table></figure><p>JWT 定义了一种紧凑的、自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。该信息可以被验证和信任（因为它是数字签名的）。</p><p>JWT 可应用于但不仅限于下面的几种场景：</p><p><strong>1、跨域认证</strong></p><p>JWT 是一种比较流行的跨域认证解决方案，JWT 的诞生并不是解决 CSRF 跨域攻击，而是解决跨域认证的难题。</p><p>A 网站和 B 网站是同一家公司的关联服务，现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，这应该如何实现呢？客户端保存 Token，每次请求都发回给服务器即可。</p><p><strong>2、授权</strong>（Authorization）</p><p>用户一旦登录成功后，后续用户的每个请求都将包含 JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的 JWT 的一个特性，因为它的开销很小，并且可以轻松地跨域使用。授权，是使用 JWT 的最常见的场景之一。</p><p><strong>3、信息交换</strong>（Information Exchange） </p><p>对于安全的在各方之间传输信息而言，JWT 是一种很好的方式。JWT 可以被签名，例如，用公钥&#x2F;私钥对，可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，还可以验证内容没有被篡改。</p><p>可以参考阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程</a>，更多详细的介绍可以参考 <a href="https://jwt.io/">jwd.io</a> 的相关资料。</p><h2 id="使用-JWT"><a href="#使用-JWT" class="headerlink" title="使用 JWT"></a>使用 JWT</h2><h3 id="Spring-Boot-集成-jjwt"><a href="#Spring-Boot-集成-jjwt" class="headerlink" title="Spring Boot 集成 jjwt"></a>Spring Boot 集成 jjwt</h3><p>本文以集成 <a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a> 为例。如果你有兴趣也可以试着去使用 <a href="https://github.com/auth0/java-jwt%EF%BC%8C%E5%AE%83%E6%98%AF">https://github.com/auth0/java-jwt，它是</a> JWT 的另一个 Java 实现。</p><p>截止到该文发布，在 maven repository 仓库中 <a href="https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt?__cf_chl_jschl_tk__=40ed76b98ea56a31b34ae41068be356abf8e7c14-1609035481-0-AXWqPSMWrV3GrvD-HnJUNECglQaslmvbqqmHDG7k-9M_29qE9GRZ7nwtHkgj20FyvUbV-IqHyAZKdY10ws0QZectFAnTTF6idWvIqF2O-g_hc4soVukN5OssNoHWgnIAyGNWw2Q28eih-vEnuqJVLpkcsI2TrmW6Iv7vTrhFqSCplqYa9vntXVPeRuAcH174hq_Ep4XROJH84lwN__3I9NOG41A64oXIsyPC5i6ZfBwLTt7T1VC0JISbVfnGAAsekbFItQYPA_gfd_jnUDVG9ygyaW0luOrMFoejVThPtzAPr04IX-A7CNQJKVwpZgAMbb1WsjCwGHgKLdoOmkEkzwC66AmNlIh4tz2zEca4TO1-0TzHk9sz8u78f2sMQfdL8WyiXwUVJ5F30CB3tiN8wHw">jjwt</a> 最新版本是 <code>0.9.1</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改了哪些文件"><a href="#修改了哪些文件" class="headerlink" title="修改了哪些文件"></a>修改了哪些文件</h3><p>本次涉及修改和新增的文件如下：</p><ul><li>【修改】<code>MSUserSigninService.java</code>：登录服务的接口；</li><li>【修改】<code>MSUserSigninServiceImpl.java</code>：登录服务的接口实现；</li><li>【修改】<code>MSSigninController.java</code>：登录的Controller；</li><li>【新增】<code>MSAuthTokenUtil.java</code>：token工具类；</li><li>【新增】<code>MSAuthConfigurer.java</code>：token配置管理；</li><li>【新增】<code>MSAuthInterceptor.java</code>：自定义拦截器；</li></ul><p>具体的实现步骤为：</p><ul><li>写 token 工具类，实现 token 的生成，校验等工作即 <code>MSAuthTokenUtil.java</code>;</li><li>写自定义拦截器，即 <code>MSAuthInterceptor.java</code>，该类实现了 <code>HandlerInterceptor</code> 接口；<ul><li>拦截客户端相关的 API 请求，对相关的接口进行token的校验；</li><li>有了统一的拦截器不需要在每个 Controller 或者对应的 Service 中去做 token 的判断；</li></ul></li><li>写自定义拦截器的配置管理类即 <code>MSAuthConfigurer.java</code>，该类实现了 <code>WebMvcConfigurer</code> 接口；</li><li>增加 token 登录的 API，并实现 Redis 缓存 token 的逻辑；</li></ul><h3 id="实例演练"><a href="#实例演练" class="headerlink" title="实例演练"></a>实例演练</h3><p>用户登录完成后，根据 userID 生成 token，将 token 保存到 Redis 中按照 userID 为 key 来进行存储的。</p><p><code>MSAuthInterceptor.java</code> 是自定义的拦截器，在该拦截器中获取请求的 token 并进行相关的校验。核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSAuthInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REQUEST_TOKEN_KEY</span> <span class="operator">=</span> <span class="string">&quot;token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestMethod</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equalsIgnoreCase(requestMethod)) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 请求的Header中拿</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(REQUEST_TOKEN_KEY);</span><br><span class="line">        <span class="comment">// Header中拿不到token</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == token) &#123;</span><br><span class="line">            String[] tokens = request.getParameterValues(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != tokens &amp;&amp; tokens.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                token = tokens[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (MSAuthTokenUtil.verifyToken(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = response.getWriter();</span><br><span class="line">            Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">            result.put(<span class="string">&quot;code&quot;</span>, <span class="number">400</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户令牌token无效&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;data&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            writer.print(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != writer) &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器的配置在 <code>MSAuthConfigurer.java</code> 中进行管理，关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSAuthConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MSAuthInterceptor authInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MSAuthConfigurer</span><span class="params">(MSAuthInterceptor authInterceptor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authInterceptor = authInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 如下路径不做拦截</span></span><br><span class="line">        List&lt;String&gt; excludePaths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        excludePaths.add(<span class="string">&quot;/signup/**&quot;</span>); <span class="comment">//注册</span></span><br><span class="line">        excludePaths.add(<span class="string">&quot;/signin/name/**&quot;</span>); <span class="comment">//用户名登录</span></span><br><span class="line">        excludePaths.add(<span class="string">&quot;/signin/get/token/**&quot;</span>); <span class="comment">//获取token</span></span><br><span class="line">        excludePaths.add(<span class="string">&quot;/signout/**&quot;</span>); <span class="comment">//登出</span></span><br><span class="line">        excludePaths.add(<span class="string">&quot;/static/**&quot;</span>);  <span class="comment">//静态资源</span></span><br><span class="line">        excludePaths.add(<span class="string">&quot;/assets/**&quot;</span>);  <span class="comment">//静态资源</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 除了 excludePaths 外的请求地址都做拦截</span></span><br><span class="line">        registry.addInterceptor(authInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(excludePaths);</span><br><span class="line"></span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来重点说一下 <code>MSAuthTokenUtil.java</code> 里面如何生成 token 的，<code>MSAuthTokenUtil.java</code> 主要是完成生成、检验、刷新 token 等工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String userID)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 过期时间</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">expireDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + TOKEN_EXPIRE_TIME);</span><br><span class="line"></span><br><span class="line">    token = Jwts.builder().setId(JWTSID)</span><br><span class="line">        .setSubject(SUBJECT)</span><br><span class="line">        .setAudience(AUDIENCE)</span><br><span class="line">        .setIssuedAt(date)</span><br><span class="line">        .setExpiration(expireDate)</span><br><span class="line">        .claim(CLAIMS_USERID, userID)</span><br><span class="line">        .signWith(SignatureAlgorithm.HS256, TOKEN_SECRET)</span><br><span class="line">        .compact();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;generateToken token: &quot;</span> + token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据用户ID 生成 token，其中 <code>claim(CLAIMS_USERID, userID)</code> 是用于自定义字段的，便于解析 token 时获取相关的信息。</p><p>当我们调用用户名+密码登录的时候，会生成对应的 token，然后将该 token 保存到 Redis 中。下次调用 token 登录的接口时，会从 Redis 中取出对应的 token 信息进行校对，校对通过就返回成功，否则返回失败无法登录。</p><p>在 <code>MSSigninController.java</code> 分别实现了获取 token、刷新 token，token 登录三个接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/get/token&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;获取token&quot;, httpMethod = &quot;GET&quot;, notes = &quot;获取登录&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;userID&quot;, value = &quot;userID&quot;, required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> MSResponse <span class="title function_">getToken</span><span class="params">(<span class="meta">@RequestParam(value = &quot;userid&quot;)</span> String userID)</span> &#123;</span><br><span class="line">    <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> userSigninService.fetchUserToken(userID);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/token&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;Token登录&quot;, httpMethod = &quot;GET&quot;, notes = &quot;Token登录&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;userID&quot;, value = &quot;userID&quot;, required = true),</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;token&quot;, value = &quot;token&quot;, required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> MSResponse <span class="title function_">siginWithToken</span><span class="params">(<span class="meta">@RequestParam(value = &quot;userid&quot;)</span> String userID, <span class="meta">@RequestParam(value = &quot;token&quot;)</span> String token)</span> &#123;</span><br><span class="line">    <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> userSigninService.signinUsingToken(userID, token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/refresh/token&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;刷新Token&quot;, httpMethod = &quot;GET&quot;, notes = &quot;Token刷新&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;token&quot;, value = &quot;token&quot;, required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> MSResponse <span class="title function_">refreshToken</span><span class="params">(<span class="meta">@RequestParam(value = &quot;token&quot;)</span> String token)</span> &#123;</span><br><span class="line">    <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> userSigninService.refreshUserToken(token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便使用了 GET 方式进行网络请求。后续可以改为 POST 请求。</p><p>登录逻辑都在 <code>MSUserSigninServiceImpl.java</code> 中，大家可以自行去看源码，这里不再赘述。</p><h3 id="API-调用效果"><a href="#API-调用效果" class="headerlink" title="API 调用效果"></a>API 调用效果</h3><p>启动 MySQL，启动 Redis，再启动项目即可。</p><p>用户登录成功后，调用 <code>/get/token</code> API，如下：</p><p><img src="/upload/images/2021/01/03/1.png"></p><p>调用 <code>/token</code> 进行登录的 API，如下：</p><p><img src="/upload/images/2021/01/03/2.png"></p><p>调用 <code>refresh/token</code> API 如下：</p><p><img src="/upload/images/2021/01/03/3.png"></p><h2 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h2><ul><li><input checked="" disabled="" type="checkbox"> token 配置信息放置到配置文件中；2021.01.17 Done <a href="http://www.veryitman.com/2021/01/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Token-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%87%8D%E6%9E%84/">微服务-Token-相关的重构</a>;</li><li><input disabled="" type="checkbox"> Redis 中设置 token 的过期时间；</li><li><input disabled="" type="checkbox"> 调用刷新 token 的 API 后更新 Redis 中 token 的有效时间；</li><li><input disabled="" type="checkbox"> 刷新 token、使用 token 登录的 API 修改为 POST 方式；</li><li><input disabled="" type="checkbox"> Token 的加密，减少 Token 登录的数据库查询次数；</li></ul><hr><p><strong>只有弱者才去争取公平，这句话虽然残忍但很现实~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis JWT Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决bash profile不生效的方法</title>
      <link href="/2020/12/13/%E8%A7%A3%E5%86%B3bash-profile%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/12/13/%E8%A7%A3%E5%86%B3bash-profile%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>我喜欢把 <code>macOS</code> 上面的一些环境变量（主要是一些开发套件如 <code>Java、Android、Flutter</code> 等）放到  <code>~/.bash_profile</code> 这个文件中，But…</p><p>自从在 <code>macOS</code> 上面安装了 <a href="https://ohmyz.sh/">ohmyz.sh</a> 之后，每次重启电脑或者新开终端的时候，我在  <code>~/.bash_profile</code> 这个文件中的所有命令都无法使用了。除非再次执行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>通过网友们的群力群策，还是很快找到了解决方案。</p><p>在 <code>~/.zshrc</code> 文件最后增加一行：<code>source ~/.bash_profile</code> 即可完美解决。</p><p>如果你发现本机 <code>~/</code> 目录下面没有 <code>.zshrc</code> 这个文件，可以新建一个，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/</span><br><span class="line"></span><br><span class="line">touch .zshrc</span><br></pre></td></tr></table></figure><p>如果你是用的是 macOS Catalina(10.15) 版本的系统，其实系统已经用 <code>Zsh</code> 取代了 <code>Bash</code>，成为操作系统的默认 <code>Shell</code>。相比 <code>Bash</code> 来说，<code>Zsh</code> 也拥有许多更强大的功能：</p><ul><li><p>更智能的自动补全；</p></li><li><p>命令选项提示；</p></li><li><p>更丰富的主题，等等。</p></li></ul><p>可以使用下面的命令查询一下当前你的系统默认 <code>Shell</code> 是哪个，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -p $$</span><br></pre></td></tr></table></figure><p>我在 <code>macOS</code> 终端上执行，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PID TTY        TIME CMD</span><br><span class="line">692 ttys000    0:00.91 -zsh</span><br></pre></td></tr></table></figure><p>网上还有些朋友说在 <code>~/.profile</code> 中增加 <code>source ~/.bash_profile</code> 也可以解决问题，但我亲测后发现对于自己当前的 macOS 并没有生效。</p><hr><p><strong>目标一旦确立，遇到任何困难请不要轻易放弃~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS ohmyz bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导入MySQL数据库文件</title>
      <link href="/2020/12/13/%E5%AF%BC%E5%85%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>/2020/12/13/%E5%AF%BC%E5%85%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> <code>user.sql</code> 是我在 <code>Windows 10</code> 系统中写的数据库文件，下面的举例都是基于这个系统和文件进行操作的。</p><p>其他系统如 <code>macOS</code>，操作命令也基本一样，只是文件路径不一样罢了。</p><p>~接下来给大家介绍两种导入数据库文件的方法。</p><h3 id="1、先进后导式"><a href="#1、先进后导式" class="headerlink" title="1、先进后导式"></a>1、先进后导式</h3><blockquote><p>这种方式是先进入 MySQL，然后再导入数据库文件</p></blockquote><p>进入 <code>MySQL</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -p password</span><br></pre></td></tr></table></figure><p>其中 <code>username</code>、<code>password</code> 分别是你连接 <code>MySQL</code> 的用户名和密码；</p><p>进入之后，开始导入数据库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source sql-file-path</span><br></pre></td></tr></table></figure><p>其中 <code>sql-file-path</code> 是你数据库文件的路径，例如 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source E:/work/db/user.sql</span><br></pre></td></tr></table></figure><h3 id="2、同进同导式"><a href="#2、同进同导式" class="headerlink" title="2、同进同导式"></a>2、同进同导式</h3><blockquote><p>这种方式是进入 <code>MySQL</code> 的同时也导入数据库文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -p password -D data &lt; sql-file-path</span><br></pre></td></tr></table></figure><p>同理，<code>username</code>、<code>password</code> 分别是你连接 <code>MySQL</code> 的用户名和密码，后面的参数 <code>-D</code> 一定要大写， <code>sql-file-path</code> 是你数据库文件的路径，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -p password -D data &lt; E:/work/db/user.sql</span><br></pre></td></tr></table></figure><p>当然我们也可以先不输入 <code>password</code>，等命令行提示输入密码的时候再输入也可以，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -p -D data &lt; E:/work/db/user.sql</span><br></pre></td></tr></table></figure><p>还有其他姿势，大家自行探索吧~</p><hr><p><strong>需求只是客户需要的一小部分而已，而不是需求等于需要~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> Tools </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: SpringBoot 集成 Redis</title>
      <link href="/2020/12/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1-SpringBoot-%E9%9B%86%E6%88%90-Redis/"/>
      <url>/2020/12/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1-SpringBoot-%E9%9B%86%E6%88%90-Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>忙碌了一周，感觉只有此刻写文字的时间才是最惬意的。最近工作比较忙，文章更新的较慢还望大家多多见谅🙇‍！</p><p>在阅读下面的内容之前，希望你已经安装并且做好了学习 Spring Boot 集成 Redis 的准备了。</p><p>如果你还没有搭建 Redis 环境，<a href="http://www.veryitman.com/2020/11/15/Win10-%E5%AE%89%E8%A3%85-Redis/">Win10-安装-Redis</a> 这篇文章或许可以帮到您。</p><p>在 <code>Spring Boot 1.x</code> 版本中默认的 Redis 客户端是 Jedis 实现的，<code>Spring Boot 2.x</code> 版本中默认客户端是用 Lettuce 实现的。可以从加入的依赖包中看出，<code>Spring Boot 2.2.x</code> 中的 <code>spring-data-redis</code> 仍旧包括了 Jedis 和 Lettuce，但是默认使用了 Lettuce（换句话说，如果你不想使用默认的 Lettuce 实现可以换成  Jedis 的实现），如下图：</p><p><img src="/upload/images/2020/12/05/1.png"></p><p>Lettuce 和 Jedis 的都是连接 Redis Server 的客户端，简单异同点如下：</p><ul><li><strong>Jedis</strong> 在实现上是直连 Redis Server，多线程环境下非线程安全，除非使用连接池，为每个 Redis 实例增加物理连接；</li><li><strong>Lettuce</strong> 是 一种可伸缩，线程安全，完全非阻塞的 Redis 客户端，多个线程可以共享一个 <code>RedisConnection</code>，它利用 <code>Netty NIO</code> 框架来高效地管理多个连接，从而提供了异步和同步数据访问方式，用于构建非阻塞的反应性应用程序；</li></ul><p>本篇只分享在 Spring Boot 项目中如何集成 Jedis 实现的 Redis 客户端和简单使用，关于 Redis 的使用有很多应用场景，后续再做探讨和分享（Redis 确实很强大，值得我们深入学习和研究）。</p><h2 id="加入依赖包"><a href="#加入依赖包" class="headerlink" title="加入依赖包"></a>加入依赖包</h2><p>在 <code>pom.xml</code> 文件中添加 redis 的依赖，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行项目后，会报如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: </span><br><span class="line">Error creating bean with name &#x27;redisConnectionFactory&#x27; defined in class path resource </span><br><span class="line">[org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.class]: Bean instantiation via factory method failed; </span><br><span class="line">nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory]: </span><br><span class="line">Factory method &#x27;redisConnectionFactory&#x27; threw exception; </span><br><span class="line">nested exception is java.lang.NoClassDefFoundError: org/apache/commons/pool2/impl/GenericObjectPoolConfig</span><br></pre></td></tr></table></figure><p>此时，需要在你的 pom 文件中添加连接池 <code>commons-pool2</code> 的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Lettuce 需要依赖 Apache的 <code>common-pool2</code>（至少是2.2版本）提供连接池，本篇使用的版本是 2.6.0，具体可以参考 <a href="https://github.com/lettuce-io/lettuce-core/wiki/Connection-Pooling">Connection-Pooling</a> 的介绍。</p><h2 id="配置-properties"><a href="#配置-properties" class="headerlink" title="配置 properties"></a>配置 properties</h2><p>配置 <code>application.properties</code> 文件，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"><span class="comment"># 配置 redis for lettuce</span></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br></pre></td></tr></table></figure><p>注意：因为我的工程中使用了多个 properties 文件用于区分不同的环境，所以你根据自己的配置文件来配置 Redis 即可。</p><h2 id="真的是-Lettuce-嘛？"><a href="#真的是-Lettuce-嘛？" class="headerlink" title="真的是 Lettuce 嘛？"></a>真的是 Lettuce 嘛？</h2><p>为了证明我们现在使用的是 Lettuce 实现的 Redis 客户端，我写了一段测试代码，放到登录的 <code>MSSigninController</code> 进行了测试（具体代码可以参考 <a href="https://github.com/veryitman/MSTutorial/tree/veryitman-feature">GitHub</a>），如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisTemplate</span><span class="params">(RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/redisconn&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redis</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(redisTemplate.getValueSerializer().toString() + <span class="string">&quot;, &quot;</span> + redisTemplate.getHashValueSerializer().toString());</span><br><span class="line">        <span class="type">RedisConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> redisTemplate.getConnectionFactory();</span><br><span class="line">        log.info(connectionFactory.toString());</span><br><span class="line">        <span class="keyword">if</span> (connectionFactory <span class="keyword">instanceof</span> LettuceConnectionFactory) &#123;</span><br><span class="line">            <span class="type">LettuceConnectionFactory</span> <span class="variable">lettuceConnectionFactory</span> <span class="operator">=</span> (LettuceConnectionFactory) connectionFactory;</span><br><span class="line">            log.info(lettuceConnectionFactory.getHostName() + <span class="string">&quot;, &quot;</span> + lettuceConnectionFactory.getPort());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connectionFactory.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行项目，打开 <a href="http://localhost:8080/signin/redisconn">http://localhost:8080/signin/redisconn</a> 即可看到浏览器上面显示类似如下的输出信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@5e91612a</span><br></pre></td></tr></table></figure><p>同时，控制台输出如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.serializer.JdkSerializationRedisSerializer@7fd8e94e, </span><br><span class="line">org.springframework.data.redis.serializer.JdkSerializationRedisSerializer@7fd8e94e</span><br><span class="line">org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@34212775</span><br><span class="line">127.0.0.1, 6379</span><br></pre></td></tr></table></figure><p>从上面的信息可以看出：</p><ul><li>Redis 的客户端实现默认使用的是 Lettuce；</li><li>默认的序列化类是 <code>JdkSerializationRedisSerializer</code>，下面我们可以配置 RedisTemplate 来改变默认的序列化类；</li></ul><h2 id="配置-RedisTemplate"><a href="#配置-RedisTemplate" class="headerlink" title="配置 RedisTemplate"></a>配置 RedisTemplate</h2><p>关于 RedisTemplate 的配置，配置的实例代码都在 <code>MSRedisConfig</code> 这个类中，这里不再粘贴代码，有需要的可以直接点击  <a href="https://github.com/veryitman/MSTutorial/tree/veryitman-feature">GitHub</a> 查看。</p><p>配置完成后重新运行工程，再次访问 <a href="http://localhost:8080/signin/redisconn%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%A6%82%E4%B8%8B%E5%86%85%E5%AE%B9%EF%BC%9A">http://localhost:8080/signin/redisconn，控制台输出如下内容：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer@3151bece, </span><br><span class="line">org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer@7248212a</span><br><span class="line">org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@6bcda66f</span><br><span class="line">127.0.0.1, 6379</span><br></pre></td></tr></table></figure><p>可见，我们已经成功改变了默认的序列化类。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这次的例子，仍是在原来的工程 <a href="http://www.veryitman.com/2020/04/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%BB%93%E5%90%88MySQL%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/">微服务-结合MySQL实现登录注册</a> 的基础上面改造的，后续分享的内容基本都是在这个工程上面拓展。</p><p>用户使用用户名和密码登录，首先去 Redis 里面查找，查找到了直接返回不用去 MySQL 数据库中查找了，如果没有找到再去 MySQL 数据库中查找，查找成功后存储到 Redis 中，本次分享只是为了说明如何集成 Redis以及其简单使用，流程比较简单没有考虑其他因素和优化，仅供学习使用。</p><p>修改的逻辑部分，代码贴在下面，可以结合注释看一下很简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &#123;&quot;*&quot;, &quot;http://localhost:63344&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/name&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;用户名登录&quot;, httpMethod = &quot;GET&quot;, notes = &quot;用户名登录&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true),</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;userpwd&quot;, value = &quot;密码&quot;, required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> MSResponse <span class="title function_">sigin</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">    <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MSResponse</span>();</span><br><span class="line">    <span class="type">MSUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == userName || <span class="literal">null</span> == userPwd || userName.length() &lt;= <span class="number">0</span> || userPwd.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">MSUserResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSUserResponseEnum.Login4SiginInvalidInfo;</span><br><span class="line">        response.setCode(responseEnum.getCode());</span><br><span class="line">        response.setMsg(responseEnum.getMsg());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 从Redis里面查找该用户 */</span></span><br><span class="line">        <span class="type">MSUser</span> <span class="variable">redisUser</span> <span class="operator">=</span> (MSUser) redisTemplate.opsForValue().get(userName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">query_user_pwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != redisUser &amp;&amp; userPwd.equals(redisUser.getAccountName())) &#123; <span class="comment">// Redis 里面有该用户信息</span></span><br><span class="line">            log.info(<span class="string">&quot;Redis 中找到了 &quot;</span> + userName);</span><br><span class="line">            <span class="type">MSUserResponseEnum</span> <span class="variable">rspEnum</span> <span class="operator">=</span> MSUserResponseEnum.SUCCESS;</span><br><span class="line">            user = redisUser;</span><br><span class="line">            response.setCode(rspEnum.getCode());</span><br><span class="line">            response.setMsg(rspEnum.getMsg());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Redis 里面没有该用户信息</span></span><br><span class="line">            log.info(<span class="string">&quot;Redis 中没有找到 &quot;</span> + userName);</span><br><span class="line">            <span class="comment">/** 查数据库的‘user’表中是否有该用户？*/</span></span><br><span class="line">            List&lt;Map&gt; query_users = userService.queryUserByUserName(userName);</span><br><span class="line">            <span class="keyword">if</span> (query_users.isEmpty()) &#123;<span class="comment">// 没有该用户</span></span><br><span class="line">                <span class="type">MSUserResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSUserResponseEnum.LoginNoSuchUser;</span><br><span class="line">                response.setCode(responseEnum.getCode());</span><br><span class="line">                response.setMsg(responseEnum.getMsg());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 有这个用户</span></span><br><span class="line">                <span class="type">Map</span> <span class="variable">user_map</span> <span class="operator">=</span> query_users.get(<span class="number">0</span>);</span><br><span class="line">                query_user_pwd = (String) user_map.get(<span class="string">&quot;accountPwd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (!query_user_pwd.equals(userPwd)) &#123;</span><br><span class="line">                    <span class="type">MSUserResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSUserResponseEnum.LoginUserPwdError;</span><br><span class="line">                    response.setCode(responseEnum.getCode());</span><br><span class="line">                    response.setMsg(responseEnum.getMsg());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 将查询出来的map对象使用FastJson转换为MSUser对象</span></span><br><span class="line">                    user = JSON.parseObject(JSON.toJSONString(user_map), MSUser.class);</span><br><span class="line">                    <span class="comment">// 缓存到 Redis，使用userName作为key</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">userNameKey</span> <span class="operator">=</span> String.valueOf(user.getAccountName());</span><br><span class="line">                    redisTemplate.opsForValue().set(userNameKey, user);</span><br><span class="line">                    log.info(<span class="string">&quot;MySQL 中找到了 &quot;</span> + userName + <span class="string">&quot;, 并存到 Redis 中&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="type">MSUserResponseEnum</span> <span class="variable">rspEnum</span> <span class="operator">=</span> MSUserResponseEnum.SUCCESS;</span><br><span class="line">                    response.setCode(rspEnum.getCode());</span><br><span class="line">                    response.setMsg(rspEnum.getMsg());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.setResults(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连续两次登录请求 <code>http://localhost:8080/signin/name?username=foobar&amp;userpwd=foobar</code> ，可以看到如下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Redis 中没有找到 foobar</span><br><span class="line">MySQL 中找到了 foobar, 并存到 Redis 中</span><br><span class="line"></span><br><span class="line">... 省略其他日志</span><br><span class="line"></span><br><span class="line">Redis 中找到了 foobar</span><br></pre></td></tr></table></figure><p>打开 Redis 的 CLI，可以查询一下是否存储成功，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get foobar</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;\&quot;@class\&quot;:\&quot;com.veryitman.user.model.MSUser\&quot;,\&quot;userID\&quot;:1723068547,\&quot;accountName\&quot;:\&quot;foobar\&quot;,\&quot;accountPwd\&quot;:\&quot;foobar\&quot;,\&quot;nickName\&quot;:\&quot;foobar\&quot;,\&quot;age\&quot;:20,\&quot;gender\&quot;:1,\&quot;motto\&quot;:\&quot;\&quot;,\&quot;phone\&quot;:\&quot;\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://lettuce.io/core/release/reference/">Lettuce</a></li><li><a href="https://github.com/lettuce-io/lettuce-core">Lettuce-Core</a></li><li><a href="https://github.com/lettuce-io/lettuce-core/wiki/Connection-Pooling">Lettuce-Connection-Pooling</a> </li><li><a href="http://tool.oschina.net/uploads/apidocs/redis/clients/jedis/Jedis.html">Jedis</a></li></ul><hr><p><strong>适当的赞美可以让对方做出好的改变~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 安装 Redis</title>
      <link href="/2020/11/15/Win10-%E5%AE%89%E8%A3%85-Redis/"/>
      <url>/2020/11/15/Win10-%E5%AE%89%E8%A3%85-Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>关于微服务相关的分享，我都是在 <code>Windows 10</code> 系统下实践的，所以跟 <code>Spring Boot</code> 配套的软件也是在此系统上面安装的。</p><p>今天跟大家介绍一下如何在 <code>Win10</code> 下安装 <code>Redis</code>，该篇是 <code>Spring Boot</code> 使用 <code>Redis</code> 的处女篇，下篇结合之前登录场景举例如何在 <code>Spring Boot</code> 中使用 <code>Redis</code>。</p><p>往期 <code>Win10</code> 下面安装 <code>MySQL</code> 的文章：<a href="http://www.veryitman.com/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/">MySQL8-0-15在Win10上的折腾记</a> 推荐给有需要的伙伴。</p><h2 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h2><p><strong>Step1：下载</strong></p><p>下载 <code>Windows</code> 版本的 <code>Redis</code>，点击这里 <a href="https://github.com/MicrosoftArchive/redis/releases">下载 Redis</a>。</p><p>我下载的是 <code>3.0.504</code> 版本。</p><p><img src="/upload/images/2020/11/15/1.png"></p><p><strong>Step2：解压</strong></p><p>解压下载的 <code>zip</code> 包到任意目录，如我的目录：</p><p><img src="/upload/images/2020/11/15/2.png"></p><p><strong>Step3：启动</strong></p><p>命令行进入刚才解压文件的根目录下，然后执行如下命令即可，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><p>看到如下界面表示成功。</p><p><img src="/upload/images/2020/11/15/3.png"></p><p>这种方式一旦关闭命令行，<code>Redis</code> 服务就关闭了，所以需要将 <code>Redis</code> 安装成系统（Windows）服务。</p><p><strong>Step4：日志文件</strong></p><p>在 <code>Redis</code> 解压后的根目录，新建 <code>Logs</code> 目录，然后在该目录下新建 <code>redis_log.txt</code> 文件。</p><p>否则，在进行下面操作的时候会报 <code> Redis service failed to start.</code> 错误。</p><p>如果你按照该要求新建了还是报错，需要经过下面的操作解决。</p><p>在命令行中（如果使用的是 <code>git bash</code> 终端，需要在下面的命令前加上 <code>winpty</code>）下开启 <code>CLI</code> 模式，运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe</span><br></pre></td></tr></table></figure><p>然后再运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>重新启动服务即可。</p><p><strong>Step5：设置 Redis 成 Windows 服务</strong></p><p>另外打开一个命令行窗口，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server.exe --service-install redis.windows-service.conf --loglevel verbose --service-name Redis</span><br></pre></td></tr></table></figure><p>执行成功后，你可以在 <code>Windows</code> 的系统服务（<code>CMD+R/services.msc</code>）中找到该服务（服务名称为 <code>Redis</code>），如下图：</p><p><img src="/upload/images/2020/11/15/4.png"></p><p>另外从下图可以看到其属性，对应的配置文件是 <code>redis.windows-service.conf</code>，对应上面注册服务时使用的配置文件，所以后续的自定义配置就需要修改这个文件，不要搞错了。</p><p>如果你使用 <code>redis.windows.conf</code> 那么这里就应该是这个文件。</p><p><img src="/upload/images/2020/11/15/5.png"></p><p><strong>Step6：启动服务</strong></p><p>执行如下启动命令即可，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server.exe --service-start</span><br></pre></td></tr></table></figure><p>在服务列表中刷新一下，可以看到 <code>Redis</code> 正在运行。</p><p><img src="/upload/images/2020/11/15/6.png"></p><p>注册服务成功后，就不需要像 <strong>Step3</strong> 那样开启服务了，在 <strong>Step3</strong> 中开启的服务窗口也可以关闭了。后续使用 <strong>Step6</strong> 方式启动即可，或者将该服务设置为开机自启动也可以。</p><p>如果在启动 redis 服务的时候报如下的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[18236] 29 Nov 10:52:01.070 # HandleServiceCommands: system error caught. error code=1056, message = StartService failed: unknown error</span><br></pre></td></tr></table></figure><p>说明你的 redis 服务已经启动了，可以查看 Windows 的服务（<code>CMD+R/services.msc</code>）中是否已经启动成功。</p><h2 id="使用-Redis"><a href="#使用-Redis" class="headerlink" title="使用 Redis"></a>使用 Redis</h2><h3 id="Redis-相关命令"><a href="#Redis-相关命令" class="headerlink" title="Redis 相关命令"></a>Redis 相关命令</h3><blockquote><p>再次强调一下，如果使用了 <code>git bash</code> 终端执行下面的命令没有反应或者卡住很久的话，需要在下面命令前加上 <code>winpty</code> 即可。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 安装服务</span><br><span class="line">./redis-server.exe --service-install</span><br><span class="line"></span><br><span class="line">// 卸载服务</span><br><span class="line">./redis-server.exe --service-uninstall</span><br><span class="line"></span><br><span class="line">// 开启服务</span><br><span class="line">./redis-server.exe --service-start</span><br><span class="line"></span><br><span class="line">// 停止服务</span><br><span class="line">./redis-server.exe --service-stop</span><br><span class="line"></span><br><span class="line">// 开启 CLI 模式</span><br><span class="line">./redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure><h3 id="测试-Redis"><a href="#测试-Redis" class="headerlink" title="测试 Redis"></a>测试 Redis</h3><p>在命令行开启 CLI （命令行界面 <code>command-line interface</code>）模式，任意设置一个变量，如下：</p><p><img src="/upload/images/2020/11/15/7.png"></p><hr><p><strong>只有弱者才去争取公平，这句话虽然残忍但很现实~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis Windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生而为人，我很欢喜</title>
      <link href="/2020/09/26/%E7%94%9F%E8%80%8C%E4%B8%BA%E4%BA%BA%EF%BC%8C%E6%88%91%E5%BE%88%E6%AC%A2%E5%96%9C/"/>
      <url>/2020/09/26/%E7%94%9F%E8%80%8C%E4%B8%BA%E4%BA%BA%EF%BC%8C%E6%88%91%E5%BE%88%E6%AC%A2%E5%96%9C/</url>
      
        <content type="html"><![CDATA[<p>记得第一次读挪威的森林，还是上高一的时候。</p><p>这本书是一个同班同学借给我看的，这位同学是被大家公认的博览群书的翩翩才子。现在看来，他和《挪威的森林》这本书中的永泽还真是有得一拼。他告诉我说书里面写的很刺激，值得一看。我当时以为这是一本植物学家写的关于人与自然、探索世界的书籍，但从他猥琐的笑容里我逐渐感觉到我可能猜错了。</p><p>当时粗略的读完了这本书，内心满是草泥马，觉得渡边就一混蛋、渣男。在那个时候，渣男这个词并不奉行但世界上早已经有了这样的一群人🤢。</p><p>前段时间在偶然的机会下，我在书店又看到了这本书，难掩心中的迷惑又从容的读了一遍，发现根本不是自己原来看到和想到的那样。结合当时的日本社会背景和文化，这本书更多的是在写人精神层面的东西，生活给我们的是九十九件不如意和一件无奈，所有的不开心 、抑郁、困惑都在于本心，只要心态好，雨后便是晴天。人需要学会自我救赎。</p><p>日本很多作家的书籍，读来都比较压抑，像太宰治的《人间失格》，这本书我很早之前就买了但迟迟没有想好什么时候去看，直到我读完东野圭吾的大部分小说后才鼓起勇气读完了《人间失格》，读完我才知道，像我这种心态像花一样的人根本不畏惧什么。在出社会之前，我自己也是个经常愁眉苦脸的家伙，很多朋友都告诉我包括我的大学老师（良师益友），说我眉头就好像是被一把无孔的锁死死的锁住一样，笑容在我的脸上显得很吝啬。在那个时候，我对大学毕业其实是很恐惧的，家庭没有任何背景，自己对未来也很迷茫，大脑里乱糟糟的。不过我内心很知道这一切需要靠自己去改变，只有努力奋斗才能摆脱内心的束缚。慢慢的，我自己把很多事情想明白了，做事情也很有主见了，心态调整的相当好。</p><p>当生活以痛吻我，我要报之以歌！</p><p>前段时间，听到一位老师讲解书籍，里面提到【生而为人，我很抱歉】这句话，他说这是太宰治写的。文章下面的评论很多人都在喷他，说他没有文化，这句话根本不是太宰治写的。人就是这样，挑毛病最拿手。我默默的去查了一下，这句话最早是出自诗人 <code>寺内寿太郎</code> 之手但确实是因为太宰治让这句话发扬光大的。</p><p>诗人寺内寿太郎原创于《遗书》的一组诗歌，大致意思是：生而为人，深感歉意；</p><p>然后，在日本作家太宰治所写的短小说《二十世纪旗手》中，作者把这句话作为了一个副标题，1937年首次在《改造》杂志上发表，收录在《人间失格》作者集中。</p><p><img src="/upload/images/2020/09/26/1.png"></p><p>寺内寿太郎和太宰治是认识的。</p><p>据说是一个名不见经传的文学青年寺内寿太郎，他的表兄弟是太宰的朋友。这个青年相当命途多舛，年轻时失去了双亲，靠亲戚抚养，上了庆应大学。曾经多次感到人生的无奈，离家出走。一颗追求文学的诗心，让他写下了题为《遗书》的一组诗歌。其中有一首就是“一句诗”：生而为人深感歉意。然后这个倒霉蛋儿式文学青年的大嘴表哥就在一次跟太宰溜达聊天的时候谈到了这个表弟的诗句。当时太宰他们认为有了好点子，谁先用，算谁的。于是太宰就出其不意地在《二十世纪旗手》的开头，用了这么一句话。这个可怜的文学青年，怀着一颗赤诚的文学之心阅读他崇拜的作家太宰大作的时候，第一句话就被噎成重伤，据说脸气得发青去找他表哥算账，他表哥找到太宰算账，太宰装傻，哎呀，我以为是你的主意呢，真是深感歉意啊。于是这个可怜的青年大哭着，一切都完啦，患上严重的忧郁症。多次离家出走，最后一次被人目击是战后在一个车站。之后就不知所终了。</p><p>然鹅在2006年的电影《被嫌弃的松子的一生》中，这句话也被说了一次。川尻松子在自杀前，抄写日本小说家太宰治短篇小说《二十一世纪旗手》的开篇语「生まれて、すみません。」(中文意思：生而为人，我很抱歉）作为遗言。</p><p><img src="/upload/images/2020/09/26/2.jpg"></p><p>然后我在那篇文章的下面写了自己的评论：</p><blockquote><p>所有批评老师讲解错误的人，你们真的知道这句话的来源吗？有这个撕逼的时间，不如去读读我的文章😄</p></blockquote><p>生活中，美好的事物往往都是短暂的甚至是临时的，不如意的事情十之八九，只有调整好自己的心态才能迎接更美好的明天。情绪是可以感染的，热爱生活是我们不被坏情绪侵没和迷失的太阳。生活中需要正能量，很多事情只要你换个思路来想可能它的发生并不是一件坏事。不要把自己锁在那口暗无天日的井中，奋力前行才有美好的明天。</p><p>生而为人，我很欢喜！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情绪管理 心态 阳光 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中用char数组构造string</title>
      <link href="/2020/09/05/C-%E4%B8%AD%E7%94%A8char%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0string/"/>
      <url>/2020/09/05/C-%E4%B8%AD%E7%94%A8char%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0string/</url>
      
        <content type="html"><![CDATA[<p>在 <code>C++</code> 中如何使用用 <code>char 数组</code> 构造 <code>string</code>，确实是一个老掉牙的话题，但是稍加不注意你就会出错。</p><p>最近在写一个可以跨平台打印的日志程序，遇到了这个问题，故记之，共勉!</p><p><strong>用 char 数组初始化 string 示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> chArray[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;array size = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(chArray)/<span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; chArray &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(chArray)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; and str&#x27;s size = &quot;</span> &lt;&lt; str.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上面的代码，不同的编译器输出结果不一致，具有一定的随机性。</p><p>在 macos 系统下，输出结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array size = <span class="number">4</span></span><br><span class="line">hell\<span class="number">310</span>\<span class="number">367</span>\<span class="number">277</span>_\<span class="number">377</span></span><br><span class="line">str = hell\<span class="number">310</span>\<span class="number">367</span>\<span class="number">277</span>_\<span class="number">377</span> <span class="keyword">and</span> str<span class="number">&#x27;</span>s size = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>得到这种结果，简直要法克…</p><p>但是有时候输出结果又是下面那样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array size = <span class="number">4</span></span><br><span class="line">hell</span><br><span class="line">str = hell <span class="keyword">and</span> str<span class="number">&#x27;</span>s size = <span class="number">5</span></span><br></pre></td></tr></table></figure><p>很明显，<code>string</code> 的 <code>size</code> 不对.</p><p>思考一下，原来是少了 ‘\0’，修改上面代码，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> chArray[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;array size = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(chArray)/<span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; chArray &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(chArray)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; and str&#x27;s size = &quot;</span> &lt;&lt; str.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后，代码的结果输出正常了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array size = <span class="number">5</span></span><br><span class="line">hell</span><br><span class="line">str = hell <span class="keyword">and</span> str<span class="number">&#x27;</span>s size = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>也就是说，<code>char</code> 数组初始化 <code>string</code> 对象，数组的结束符 ‘\0’ 不要忘记了。</p><p>另外，要注意 <code>string</code> 的 <code>size</code> 要比 <code>char 数组</code> 的 <code>size</code> 小。</p><p>不知道上面的东西，你有没有看明白?</p><p>那么下面的代码输出，你觉得会达到自己的预期吗?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> * cp = str.<span class="built_in">c_str</span>();</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> size = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">char</span> chArray2[size];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    chArray2[i] = cp[i];</span><br><span class="line">    cout &lt;&lt; chArray2[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(chArray2)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; <span class="string">&quot; and str2&#x27;s size = &quot;</span> &lt;&lt; str2.<span class="built_in">length</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>这里很显然是错误的，至少两处是不对的。</p><p>1、<code>chArray2</code> 的大小；</p><p>2、<code>chArray2</code> 的结束符没有添加 ‘\0’；</p><p>修改一下，给出完整示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// char[] ---&gt; string</span></span><br><span class="line">    <span class="type">char</span> chArray[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;array size = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(chArray)/<span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; chArray &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(chArray)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; and str&#x27;s size = &quot;</span> &lt;&lt; str.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// string --&gt; char[]</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * cp = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">char</span> chArray2[size + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        chArray2[i] = cp[i];</span><br><span class="line">        cout &lt;&lt; chArray2[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    chArray2[size] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">string <span class="title">str2</span><span class="params">(chArray2)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; <span class="string">&quot; and str2&#x27;s size = &quot;</span> &lt;&lt; str2.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也许有人会说，为什么要用 <code>char 数组</code> 去构造 <code>string</code> 对象，用 <code>char *</code>(指针)不是更好吗?</p><p>的确是这样，但是有时候需要 <code>char</code> 数组来操作，我也是把自己遇到的问题,加以总结跟大家分享一下。</p><p>把示例代码中的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> chArray[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> chArray[] = <span class="string">&quot;hell&quot;</span>;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *chArray = <span class="string">&quot;hell&quot;</span>;</span><br></pre></td></tr></table></figure><p>代码也可以正常正确的输出。</p><p>如果你有兴趣，可以看我之前总结的一篇文章 <a href="http://www.veryitman.com/2019/03/07/%E4%B8%8D%E8%A7%81%E5%BE%97%E4%BD%A0%E4%BC%9A%E8%AE%A1%E7%AE%97C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/">不见得你会计算C字符串长度</a>, 🙇‍！</p><hr><p><strong>心若相知，无言也默契。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS C++ string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 多 Module 管理工程</title>
      <link href="/2020/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%A4%9A-Module-%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B/"/>
      <url>/2020/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%A4%9A-Module-%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/">微服务-想办法让项目运行起来</a> 这篇文章中，介绍了如何使用 <code>IDEA</code> 开发工具搭建本地的微服务开发环境，通常我们会把一个微服务项目分解成多个服务，那么为了更好的管理该项目，大家一般都会在 IDE 里面通过多 <code>Module</code> 来进行管理。这里的多 <code>Module</code> 可以理解为多个 <code>SpringBoot</code> 项目。</p><p>近期收到一些小伙伴的反馈，在使用 <code>IDEA</code> 搭建多 <code>Module</code> 的时候总会遇到一些莫名其妙的问题，甚是让人烦恼。趁此机会给大家介绍一下。</p><p>下面的实践，使用的是 <code>IntelliJ IDEA 2020.2</code> 版本，<code>2019.x</code> 版本也是同样的创建方法。</p><h2 id="说干就干"><a href="#说干就干" class="headerlink" title="说干就干"></a>说干就干</h2><p>一些在你看来并不起眼的工作，对于别人来说可能是难以逾越的鸿沟。</p><p>不废话，直接实践开干！</p><p>1、打开 IDEA，File&#x2F;New Project</p><p><img src="/upload/images/2020/08/29/1.png"></p><p>选择 <code>Spring Initializr</code>，工程类型选择 Maven。</p><p><img src="/upload/images/2020/08/29/3.png"></p><p>在接下来的步骤中，不需要选择任何依赖。填写完成后，点击 <code>Finish</code> 即可。</p><p>删除工程的 <code>src</code>、<code>.mvn</code>、<code>mvnw</code> 、<code>mvnw.cmd</code>  这几个目录。</p><p><img src="/upload/images/2020/08/29/4.png"></p><p>删除后，工程目录如下</p><p><img src="/upload/images/2020/08/29/5.png"></p><p>修改 <code>pom.xml</code> 文件，增加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>Maven</code> 项目中，<code>packaging</code> 给出了项目的打包类型，即作为项目的发布形式，其可能的类型。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承说明：这里继承SpringBoot提供的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目说明：这里作为聚合工程的父工程，修改打包为pom聚合工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.veryitman.main<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>blog-main-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>blog-main-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Blog of main project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>Maven 3</code> 中，其可用的打包类型如下：</p><ul><li>jar，默认类型</li><li>war</li><li>ejb</li><li>ear</li><li>rar</li><li>par</li><li>pom</li><li>maven-plugin</li></ul><p>如下图所示：</p><p><img src="/upload/images/2020/08/29/6.png"></p><p>2、创建 <code>Module</code></p><p>在工程名称上面右键新建 <code>module</code>，如下图</p><p><img src="/upload/images/2020/08/29/7.png"></p><p>这里以创建 SpringBoot Module 为例，使用 <code>Spring Initializr</code> 创建 <code>Module</code></p><p><img src="/upload/images/2020/08/29/8.png"></p><p>按照你自己的需求填写对应的信息即可进入到下一步直至 <code>Finish</code>.</p><p><img src="/upload/images/2020/08/29/9.png"></p><p>此时，修改该 module 的 pom 文件，如下（将从工程继承而不是从spring boot继承）所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.veryitman.main<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-xxx-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!-- 工程名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，再新建一个 <code>mz-payment-inone</code> 的 <code>Module</code>，最后工程目录如下：</p><p><img src="/upload/images/2020/08/29/10.png"></p><p>同理， <code>mz-payment-inone</code> 建立好之后也修改一下它的 pom 文件中的 <code>&lt;parent&gt;</code> 标签内容。</p><p>所有的 module 建立完成之后，在 <strong>工程的</strong> pom 中增加 module 的说明即增加 <code>&lt;module&gt;</code> 标签 ，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模块说明：这里声明多个子模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>ms-login-inone<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mz-payment-inone<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，工程中多 <code>Module</code> 已经创建完成👏，接下来再给大家介绍一下 <code>Module</code> 之间如何相互调用。</p><h3 id="Module-之间的调用"><a href="#Module-之间的调用" class="headerlink" title="Module 之间的调用"></a>Module 之间的调用</h3><p>按照上面的方法，我再次创建了一个 <code>mz-core</code> 的 <code>Module</code>，该 <code>Module</code> 为 上面两个 SpringBoot Module 提供基础的方法。</p><p>在 <code>mz-core</code> 中增加了一个 <code>MZDateUtil</code> 类和对应的方法</p><p><img src="/upload/images/2020/08/29/11.png"></p><p>在 <code>mz-login-inone</code> 中使用该类的方法。</p><p>为 <code>mz-login-inone</code> 添加依赖 <code>ms-core</code>，如图</p><p><img src="/upload/images/2020/08/29/12.png"></p><p>在 <code>mz-login-inone</code> 的 <code>pom.xml</code> 文件中添加如下代码</p><p><img src="/upload/images/2020/08/29/13.png"></p><p>编写 <code>API</code> 进行测试，在 <code>mz-login-inone</code> 的 <code>MZLoginInoneController</code> 中增加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MZLoginInoneController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;inone&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">loginInone</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Current date: &quot;</span> + MZDateUtil.currentDate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>mz-login-inone</code>，在浏览器访问该接口，显示如下：</p><p><img src="/upload/images/2020/08/29/14.png"></p><hr><p>如果你在使用过程中还有遇到奇葩的问题，欢迎留言评论，感谢阅读！</p><hr><p><strong>詹姆斯·高斯林 （James Gosling）是一名软件专家，1955年5月19日出生于加拿大，Java 编程语言的共同创始人之一，一般公认他为“Java之父”。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 多Module SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瘦身秘笈: 饮食运动相得益彰</title>
      <link href="/2020/08/15/%E7%98%A6%E8%BA%AB%E7%A7%98%E7%AC%88-%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E7%9B%B8%E5%BE%97%E7%9B%8A%E5%BD%B0/"/>
      <url>/2020/08/15/%E7%98%A6%E8%BA%AB%E7%A7%98%E7%AC%88-%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E7%9B%B8%E5%BE%97%E7%9B%8A%E5%BD%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2020/05/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%9D%E5%85%BB%E7%A7%98%E7%AC%88-%E5%85%BB%E6%88%90%E5%A5%BD%E4%B9%A0%E6%83%AF/">瘦身秘笈: 养成好习惯</a> 这篇文章中给大家介绍了一些保护自己健康的好习惯，希望您在看下面内容之前，可以先看看之前的文章。</p><p>今天跟大家分享关于饮食和运动结合如何让自己更加健康起来，我不是专业的瘦身专家😅，只能根据自己的亲身经历抛砖引玉，希望每个为家庭付出的IT工作者都能健康。</p><p>你可能经常会听到有人说“我喝口凉水都能胖”，也看到很多吃得再多也长不胖的人，轮到自己想瘦一点的时候感觉怎么那么难，经常陷入下面的死循环中。</p><p><img src="/upload/images/2020/08/15/1.png"></p><p>个人觉得只要自己不是胖的太过离谱（BMI大于30了）即使胖一点也没有关系，身体健康就好。你非要极致的身材，只能进行自我毁灭式的减肥了。</p><p>上次去爬山，听到有一哥们喘着气说长肥肉容易，掉肥肉难。感同身受，必须将 <code>饮食+运动</code> 结合好，你才能在与肥肉搏斗中立于不败之地。</p><p>我相信只要你能坚持下来，奇迹一定会在你身上发生。</p><h2 id="了解概念"><a href="#了解概念" class="headerlink" title="了解概念"></a>了解概念</h2><p><strong>热量单位</strong></p><hr><p>我们经常看到诸如 <code>卡</code>、<code>千卡</code>、<code>焦</code>、<code>千焦</code>、<code>大卡</code> 之类的热量单位，让人傻傻分不清。</p><p>一般描述食物的热量单位是卡路里（Calorie）, 1卡路里简称1卡，但是由于用 <code>卡</code> 来表示热量又太小了，所以人们总是用 <code>千卡</code> （KCal）来表示食物的热量。1千卡热量有多少？就是把1升水升高1摄氏度需要的热量。例如每100g米饭大概是116千卡的热量，我们平时用小碗盛一碗米饭目测有200多克。</p><p>那么既然 <code>千卡</code> 已经能很好的表示食物热量了，为何还需要 <code>大卡</code> 呢？</p><p>其实呢 <code>大卡</code> 就是 <code>千卡</code> 😄，只不过有些人对其的叫法不同而已，这就好比有些人把西红柿叫做番柿是一样的道理。</p><p>热量的单位还可以用 <code>千焦</code>（KJ）和 <code>焦</code> （J，也称之为焦耳）作单位，但这个单位一般用作学术上面，没有 <code>千卡</code> 那么接地气。</p><blockquote><p>焦耳（简称焦，符号为J），是国际单位能量和做功的单位。1焦耳能量相等于1牛顿力的作用点在力的方向上移动1米距离所做的功 。</p><p>符号J为纪念英国物理学家焦耳而命名。1焦&#x3D;1牛·米，也等于1瓦的功率在1秒内所做的功，1焦&#x3D;1瓦·秒。</p></blockquote><p>千焦和千卡换算如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>千卡 <span class="operator">=</span> <span class="number">4.184</span>千焦 <span class="operator">=</span> <span class="number">1</span>大卡 <span class="operator">=</span> <span class="number">1000</span>卡 <span class="operator">=</span> <span class="number">4184</span>焦</span><br></pre></td></tr></table></figure><p>以后你只需要记住，千卡和大卡都是一样的就可以了，在评估食物的热量上面暂时忘记焦耳这个单位吧，算起来脑壳会bulinbulin的痛。</p><p><strong>脂肪和热量</strong></p><hr><p>1 克脂肪含有 9 大卡热量，1 斤脂肪为 500 克，那么 1 斤脂肪含有的热量为：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">500</span>×<span class="number">9</span> ＝ <span class="number">4500</span>千卡</span><br></pre></td></tr></table></figure><p>根据这样来计算，1 千克（KG，即1公斤）脂肪含有 9000 千卡热量。人体内每克纯脂肪的热量是 9 千卡，但人体脂肪内还有一些非脂肪物质，比如约 10% 的水分，所以 1 公斤的脂肪储存着大概 <strong>7000～7700 千卡</strong> 的热量。</p><p>换句话来说，你消耗掉大概 **7000～7700 千卡 **的热量才能瘦 1 公斤左右。饮食相当于摄入热量，运动可以消耗热量，这个道理很好懂吧？所以，控制饮食和适当的运动才能更好的控制热量的摄入和消耗。</p><h2 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h2><h3 id="早睡早起"><a href="#早睡早起" class="headerlink" title="早睡早起"></a>早睡早起</h3><p>很多小伙伴睡得晚早晨起来的也晚，尤其是周末这种现象更加严重。</p><p><img src="/upload/images/2020/08/15/2.png"></p><p>如果你像上图中那样日复一日，迟早会不健康起来的🙁，也非常容易让你胖起来。正确的循环应该是下面那样：</p><p><img src="/upload/images/2020/08/15/3.png"></p><p>正常饮食从早睡早起开始。</p><p>尽量每天早上8点左右吃完早餐，早餐不要过于油腻。</p><blockquote><p>鸡蛋🥚+红薯（普通）+高钙牛奶；</p><p>鸡蛋🥚+高钙牛奶+玉米；</p><p>鸡蛋🥚+全麦面包+坚果；</p><p>鸡蛋🥚+蒸饺（瘦肉&#x2F;蔬菜馅儿）；</p><p>鸡蛋🥚+红薯（紫薯）+青瓜；</p><p>蛋白粉（冲水）+全麦面包+坚果；</p><p>西红柿鸡蛋面🥚+柠檬水+蔬菜；</p></blockquote><p>上面是我每周的早餐搭配，没有固定哪天早上吃什么，都是轮着来。你会发现我基本会保证每早都有个水煮鸡蛋，并且没有任何一种油炸的食物。</p><p>早上起来后，记得先喝一杯热开水，睡了一夜后身体水分会流失很多，所以需要早上起床后补充一定的水分（300ml~500ml左右即可）。每次早上喝热开水的时候，仿佛能听到细胞在身体里的欢呼声😄，你对身体的任何好，它都能感觉得到，不信的话你可以坚持几天试试。</p><h3 id="少吃多餐"><a href="#少吃多餐" class="headerlink" title="少吃多餐"></a>少吃多餐</h3><p>我之前总喜欢把吃不完的饭菜全部包揽，直接倒进碗里拌饭吃那种，嗝！总觉得扔掉挺可惜的。殊不知，盘子里面剩下的菜下面全部是厚厚的油，伴着米饭吃起来是很爽但是也会让热量乘虚而入。</p><p>后面发现自己逐渐壮大的肚子，就开始慢慢戒掉 <code>吃锅底</code> 的习惯了。</p><p>午餐可以适当的油腻一点，但是不要太过分哟。可以给减肥的自己加个卤鸡腿，记得扔掉鸡皮（热量有点高），午餐后可以吃点青瓜。</p><p>每天中午午餐，尽量多吃蔬菜，蔬菜里面的膳食纤维可以适当的阻止脂肪的成长，帮你阻挡一部分热量肆虐滋长。</p><p>晚餐尽量在 18 点之前吃，不要吃太多，同样不要吃的过于油腻。如果晚上尤其是下班比较晚的小伙伴，可以给自己补充一片全麦面包或者一杯高钙脱脂牛奶。</p><p>晚餐可以相对清淡一点，如果你不小心吃多了，那你晚上尽量多运动一会，哪怕散步也好。</p><p>晚上临睡前2小时内就不要吃东西了，对！不吃 anything。</p><p>午餐和晚餐，我现在都是吃个7成饱，如果你是刚开始减肥，建议从9成饱开始逐步递减到半饱。下午如果饿了就给自己补充点水果或者面包，切记在这两餐当中吃的太多，这样不仅会加大热量的摄入，还会让你的胃不堪重负。</p><p>至于什么是几成饱，我也没有实际测量过。不过，有个简单的办法，把你平时吃的米饭或者其他主食适当的减少一些分量。</p><p>有很多人说不吃晚餐，可以很快的瘦下来，这个我承认。2018年我坚持了一个半月没有吃晚餐，确实瘦了不少，但是每天晚上肚子凄惨的叫声着实让人难受。一个半月后，我实在是坚持不下来了，自己的内心就感觉住着另外一个自己总是说：”算了吧，太辛苦了，放弃吧！“，这种声音会持续到你毫无反抗之力为止。然后我就开始回归到正常的晚餐生活，胃口就像决堤的大坝，体重又如日中天的上来了😳。抛开经常不吃晚餐对身体有无坏处来说，你要是能坚持下来我觉得你不去创业当 CEO 就对不起你这颗坚强的心。</p><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>上面简单说了一下瘦身期间如何调节自己的饮食，下面我们说说结合运动，让你的瘦身计划如虎添翼。</p><p>根据美国的运动协会所做的研讨表明，在人初步运动 10 分钟之后，脂肪组织中的血流量会增加，表明脂肪的进行初步的燃烧，在运动 30 分钟后，脂肪组织内的血流量达到最高，如果间断运动，其脂肪组织血流量最高浓度仍可持续6小时。</p><p>如果你能坚持，最好趁热打铁，连续运动 30 分钟，这样可以烧脂肪长达 6 小时。但是运动时长也并不需要太长，研究表明，运动时长即使超过 30 分钟，脂肪也只能燃烧 6 小时。</p><p>另外运动最好是每天都能坚持做，不要三天打鱼两天晒网。</p><p>我推荐给大家两种运动，成本比较低的那种。即步行、跑步。</p><h3 id="步行"><a href="#步行" class="headerlink" title="步行"></a>步行</h3><p>我之前一直怀疑步行到底能否让人瘦身，后面坚持了三个月，发现步行只要坚持下来对瘦身是大有脾益的。</p><p>下面是我对步行的心路历程。</p><p><img src="/upload/images/2020/08/15/4.png"></p><p>每天坚持最少 30 分钟的步行，利用午餐或者晚餐后散步，下班回家走一段等时间段来步行。每走1公里，大概消耗掉50千卡的热量。</p><p>我着重说一下调整部分。</p><p>刚开始，走路没有注意自己的走姿，后面通过朋友和书籍的指导，我做出了几个改变。</p><p>1、尽量大步走，但是注意量力而行；</p><p>2、后脚跟先着地，不要让脚掌先着地；</p><p>3、收腹，正常呼吸不要憋气；</p><p>4、尽量摆动自己的双臂，主要不要打着路人；</p><p>5、腰直起来，提臀，目视前方；</p><p>6、每次至少要走 30 分钟或者以上才有效，这个时候脂肪才会慢慢开始燃烧；</p><p>对了，抬头看红绿灯🚦，不要只忙着走路，安全第一！</p><h3 id="跑步"><a href="#跑步" class="headerlink" title="跑步"></a>跑步</h3><p>如果你现在比较胖，还是建议不要跑步，对膝盖的伤害有点大。</p><p>我这里说的瘦身跑步指的是慢跑，比如你步行一公里需要12分钟，那么跑步一公里用7~8分钟就可以了。</p><p>慢跑更有助于瘦身减脂，快跑可以让你增肌。</p><p>我现在一周一般跑2~3次步，每次2公里左右，等体重再下来一点后再增大跑步的强度。每慢跑1公里的步，大概消耗掉80千卡的热量。</p><p>可以找个公园跑步，空气和氛围会好点更能让你坚持下来，如果有条件可以带上入耳式的蓝牙耳机，听着音乐放飞自我。</p><p>运动时体内水丢失加快，如果不及时补充会引起水不足。在运动强度较大时，要注意运动中水和矿物质的同时补充，运动后，应根据需要及时补充足量的饮水。</p><p>登山也是一项很不错的运动，根据自己的情况可以每个月可以进行一次登山运动，走进大自然呼吸新鲜空气，还能锻炼自己的意志。</p><p>切记每次运动前后，一定要进行适量的拉伸运动，防止肌肉过后酸痛影响接下来的运动。</p><p>减肥不仅仅是控制卡路里，更重要的是从根本上解决肥胖问题，改变易胖体质，别让脂肪缠上你。减肥的真理就是管住嘴迈开腿，通过减少摄入、增加能耗两方面实现，也就是说开源节流才能实现足够多的热量亏空。</p><p>肥肉不是一天突然长起来的，切记不要妄想一天就把肥肉给减下去，循序渐进的减肥才是王道，找到适合自己的减肥方法才能事半功倍！</p><hr><p><strong>真正自律的人，是不会把自律挂嘴边的~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动 饮食 健康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: ConfigurationProperties配置</title>
      <link href="/2020/08/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-ConfigurationProperties%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/08/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-ConfigurationProperties%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们在开发的时候，可能会遇到这样的场景：</p><blockquote><p>变量希望能够被在配置文件中动态配置，只要修改这些配置，对应的 Java 类对象的变量值就可以改变，从而改变代码的行为。这样我们通过修改配置就可以满足业务诉求，而不需要修改一行代码。</p></blockquote><p>在 SpringBoot 中，可以通过 <code>@ConfigurationProperties</code> 和 <code>@Values</code> 两个注解配合 properties 文件达到上述目的。</p><p>比如我的 <code>application.properties</code> 文件配置如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------</span></span><br><span class="line"><span class="comment"># Swagger config</span></span><br><span class="line"><span class="comment"># ------------------------</span></span><br><span class="line"><span class="attr">msconfig.swagger.enableSwagger</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ------------------------</span></span><br><span class="line"><span class="comment"># Security config</span></span><br><span class="line"><span class="comment"># ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msconfig.security.enableCSRF</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">msconfig.security.defToken</span>=<span class="string">&quot;token-xx-yy-kk-token-end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msconfig.security.testList[0]</span>=<span class="string">&quot;list0&quot;</span></span><br><span class="line"><span class="attr">msconfig.security.testList[1]</span>=<span class="string">&quot;list1&quot;</span></span><br><span class="line"><span class="attr">msconfig.security.testList[2]</span>=<span class="string">&quot;list2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msconfig.security.testMap.KeyTest</span>=<span class="string">&quot;map-key&quot;</span></span><br><span class="line"><span class="attr">msconfig.security.testMap.ValueTest</span>=<span class="string">&quot;map-value&quot;</span></span><br></pre></td></tr></table></figure><p>接下来，通过 <code>@ConfigurationProperties</code> 和 <code>@Values</code> 来分别读取对应的配置。</p><p>本文涉及的代码都已经更新到 <a href="https://github.com/veryitman/MSTutorial/tree/veryitman-feature">Github 工程</a> 中了，大家可以下载查看。</p><p><strong>关于微服务的相关文章目录</strong>，可以☞ <a href="%5Bhttp://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/%5D(http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/)">点我</a> 查看更多内容。</p><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="ConfigurationProperties"></a>ConfigurationProperties</h2><p>对应的，新建两个实体类，如下图所示：</p><p><img src="/upload/images/2020/08/02/1.png"></p><p>实体类 <code>MSSecurityPropertyConfigModel</code> 的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;msconfig.security&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSecurityPropertyConfigModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enableCSRF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String defToken;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List的配置</span></span><br><span class="line">    <span class="keyword">private</span> List testList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map的配置</span></span><br><span class="line">    <span class="keyword">private</span> Map testMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里需要注意以下几个问题</strong>：</p><p>1、必须提供 setter 方法，这里我使用了 <code>lombok</code>；</p><p>2、必须使用 <code>@Component</code> 注解，标注在实体类上面；</p><p>3、在 <code>@ConfigurationProperties</code> 的 <code>prefix</code> 中必须和配置文件命名保持一致；</p><p>4、需要在类上加上 <code>@Component</code> 注解；</p><p>关于 <code>MSSwaggerPropertyConfigModel</code> 大家可以自行查看代码，这里不再赘述。</p><p>写个测试类，验证一下配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSPropertyConfigTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MSSwaggerPropertyConfigModel swaggerPropertyConfigModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MSSecurityPropertyConfigModel securityPropertyConfigModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MSPropertyConfigTests.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveDataConfig</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">enableSwagger</span> <span class="operator">=</span> swaggerPropertyConfigModel.isEnableSwagger();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">enableCSRF</span> <span class="operator">=</span> securityPropertyConfigModel.isEnableCSRF();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;primitiveDataConfig-enableSwagger: &quot;</span> + enableSwagger + <span class="string">&quot;, enableCSRF: &quot;</span> + enableCSRF);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">defToken</span> <span class="operator">=</span> securityPropertyConfigModel.getDefToken();</span><br><span class="line">        logger.info(<span class="string">&quot;securityPropertyConfigModel deftoken: &quot;</span> + defToken);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> securityPropertyConfigModel.getTestList();</span><br><span class="line">        <span class="keyword">for</span> (Object v : list) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;securityPropertyConfigModel value: &quot;</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> securityPropertyConfigModel.getTestMap();</span><br><span class="line">        logger.info(<span class="string">&quot;securityPropertyConfigModel map: &quot;</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行该测试方法，得到如下的输出内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">primitiveDataConfig-enableSwagger: <span class="literal">true</span>, enableCSRF: <span class="literal">false</span></span><br><span class="line">securityPropertyConfigModel deftoken: <span class="string">&quot;token-xx-yy-kk-token-end&quot;</span></span><br><span class="line">securityPropertyConfigModel value: <span class="string">&quot;list0&quot;</span></span><br><span class="line">securityPropertyConfigModel value: <span class="string">&quot;list1&quot;</span></span><br><span class="line">securityPropertyConfigModel value: <span class="string">&quot;list2&quot;</span></span><br><span class="line">securityPropertyConfigModel map: &#123;KeyTest=<span class="string">&quot;map-key&quot;</span>, ValueTest=<span class="string">&quot;map-value&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>如果您在使用 <code>@ConfigurationProperties</code> 注解过程中，提示如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“Spring Boot Configuration Annotation Processor not found in classpath ”</span><br></pre></td></tr></table></figure><p>此时需要在你的 <code>pom.xml</code> 文件中引进 <code>configuration-processor</code> 依赖即可解决。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ConfigurationProperties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><p>使用 <code>@Values</code> 注解可以直接作用到某个类的某个字段上面，使用上面比较方便。</p><p>对于读取集合的方法跟 <code>@ConfigurationProperties</code> 注解有点不同。</p><p>在 <code>application.properties</code> 文件中增加 <code>testList1</code> 和 <code>testMap1</code> 配置如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------</span></span><br><span class="line"><span class="comment"># Security config</span></span><br><span class="line"><span class="comment"># ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msconfig.security.enableCSRF</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">msconfig.security.defToken</span>=<span class="string">&quot;token-xx-yy-kk-token-end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msconfig.security.testList1</span>=<span class="string">list0,list1,list2</span></span><br><span class="line"><span class="attr">msconfig.security.testMap1</span>=<span class="string">&#123;name:&quot;map-key&quot;, age:20&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在配置文件中的 <code>testList1</code> 和 <code>testMap1</code> 配置格式和之前的不一样，否则解析会报错。</p><p>测试类中验证，示例代码如下，注意 <code>@Values</code> 注解对集合的书写格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;msconfig.security.enableCSRF&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> geEnableCSRF;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;msconfig.security.defToken&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String defUserToken;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;&#x27;$&#123;msconfig.security.testList1&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List list1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;$&#123;msconfig.security.testMap1&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Map map1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveDataConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;annotation value. geEnableCSRF: &quot;</span> + geEnableCSRF);</span><br><span class="line">    logger.info(<span class="string">&quot;annotation value. defUserToken: &quot;</span> + defUserToken);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Object v : list1) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;annotation value. list: &quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;annotation value. map: &quot;</span> + map1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">annotation value. geEnableCSRF: <span class="literal">false</span></span><br><span class="line">annotation value. defUserToken: <span class="string">&quot;token-xx-yy-kk-token-end&quot;</span></span><br><span class="line">annotation value. list: list0</span><br><span class="line">annotation value. list: list1</span><br><span class="line">annotation value. list: list2</span><br><span class="line">annotation value. map: &#123;name=map-key, age=<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><p>我们也可以将  <code>@ConfigurationProperties</code> 和 <code>@Values</code> 这两个注解配合使用。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">msconfig.security.alias</span>=<span class="string">&quot;play-game&quot;</span></span><br></pre></td></tr></table></figure><p>在代码中重新定义变量名称为 <code>aliasPlayGame</code>，可以使用 <code>@Values</code> 定位实际配置的变量名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;msconfig.security&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSecurityPropertyConfigModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enableCSRF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String defToken;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List testList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map testMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和 ConfigurationProperties 一起使用</span></span><br><span class="line">    <span class="meta">@Value(&quot;msconfig.security.alias&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String aliasPlayGame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>你以为的不一定是你以为的</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 ConfigurationProperties SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ngrok让服务近在咫尺</title>
      <link href="/2020/07/16/ngrok%E8%AE%A9%E6%9C%8D%E5%8A%A1%E8%BF%91%E5%9C%A8%E5%92%AB%E5%B0%BA/"/>
      <url>/2020/07/16/ngrok%E8%AE%A9%E6%9C%8D%E5%8A%A1%E8%BF%91%E5%9C%A8%E5%92%AB%E5%B0%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近在和一个第三方服务做联调，即我方服务调用第三方的服务 API-A，然后第三方把结果回调给我方服务 API-B，因为我是在本地搭建的 <code>SpringBoot</code> 服务，又涉及到频繁的改动，所以就没有部署到远程服务器上面。</p><p>API-A 回调到 API-B 需要我方服务能被外网访问，如是我就使用了 <code>ngrok</code> 这个工具进行了内网穿透，让第三方服务很容易的就访问到我的本地服务。</p><blockquote><p>所谓的内网穿透，也即 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。</p></blockquote><p>下面具体讲一讲该工具的安装、配置和使用。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>Step1：下载工具</strong></p><p>点击 <a href="https://ngrok.com/download">这里</a> 可以进入下载页面根据自己所在的平台选择下载 <code>ngrok</code>。</p><p>目前 <code>ngrok</code> 支持 Mac OS X、Linux Mac (32-bit) 、Windows (32-bit)、Windows (64-bit)、 Linux (ARM)、 Linux (ARM64) 、Linux (32-bit) 、FreeBSD (64-Bit) 、FreeBSD (32-bit) 等操作系统。</p><p>我使用的是 Windows 系统，下面我以此系统安装配置做一个说明。</p><p>下载完成后，解压到你的磁盘任意目录，如我的放到了下面目录中：</p><p><img src="/upload/images/2020/07/16/1.png"></p><p><strong>Step2：配置 ngrok</strong></p><p>配置 ngrok 需要在其官网注册一个账号，点击 <a href="https://dashboard.ngrok.com/signup">Sign UP</a> 完成注册即可。</p><p>注册完成之后进入 <a href="https://dashboard.ngrok.com/get-started/setup">控制台</a>，获取你的 <a href="https://dashboard.ngrok.com/auth/your-authtoken">Your Authtoken</a>，复制一下即可后面有用。</p><p>打开 Windows 自带的命令行工具（CMD，曹孟德），执行下面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok.exe authtoken &#x27;your-authtoken&#x27;</span><br></pre></td></tr></table></figure><p>完成后，会在 <code>C:\Users\your-name\.ngrok2\ngrok.yml</code> 文件中注册成功。</p><p><strong>Step3：启动 ngrok</strong></p><p>我的服务端口号是 <code>8080</code>， 执行下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok.exe http 8080</span><br></pre></td></tr></table></figure><p>可以在命令行看到如下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Session Status                online</span><br><span class="line">Account                       name (Plan: Free)</span><br><span class="line">Version                       2.3.35</span><br><span class="line">Region                        United States (us)</span><br><span class="line">Web Interface                 http://127.0.0.1:4040</span><br><span class="line">Forwarding                    http://1a9d2e7e1e2d.ngrok.io -&gt; http://localhost:8080</span><br><span class="line">Forwarding                    https://1a9d2e7e1e2d.ngrok.io -&gt; http://localhost:8080</span><br></pre></td></tr></table></figure><p>接下来，我们访问 <code>SpringBoot</code> 的服务 API，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1a9d2e7e1e2d.ngrok.io/pay/callback</span><br></pre></td></tr></table></figure><p>或者访问 HTTPS 也可以的。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://1a9d2e7e1e2d.ngrok.io/pay/callback</span><br></pre></td></tr></table></figure><p>在外网访问这个接口也是没有问题的。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>内网穿透工具 <code>ngrok</code> 还有其他使用场景。</p><ul><li><p>外网连接自己的内网服务器，在外网演示内网 WEB 站点；</p></li><li><p>无需部署开发的服务到外网服务器，快速调试本地程序，比如微信公众号的开发等；</p></li><li><p><code>ngrok</code> 支持 HTTP、HTTPS 协议站点，HTTP 协议站点直接升级为 HTTPS 站点；</p></li><li><p><code>ngrok</code> 支持 TCP，UDP 协议端口转发。</p></li><li><p><code>ngrok</code> 支持数据库、SSH、远程桌面、网络摄像头等等开放到外网可以访问；</p></li></ul><p>还有其他的内网穿透工具，大家可以自行搜索。</p><hr><p><strong>你以为的不一定是你以为的</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务-Android客户端: 实现注册和登录</title>
      <link href="/2020/06/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Android%E5%AE%A2%E6%88%B7%E7%AB%AF-%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E5%BD%95/"/>
      <url>/2020/06/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Android%E5%AE%A2%E6%88%B7%E7%AB%AF-%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务项目系列文章</a> 中跟大家一起学习了如何搭建、部署（本机和远程部署、热部署、Nginx等）、运行一个 <code>SpringBoot</code> 服务以及 <code>MySQL</code> 数据库的操作、文档（Swagger）的生成等操作，客户端采用浏览器的方式实现了用户注册、登录的流程。根据 <a href="http://www.veryitman.com/2019/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AB%8B%E5%BF%97%E5%81%9A%E4%B8%AA%E4%BC%9F%E5%A4%A7%E7%9A%84%E9%A1%B9%E7%9B%AE/">微服务-立志做个伟大的项目</a> 立下的【誓言】可以循序渐进的实现我们伟大的理想了，今天我们正式进入 Android 客户端的学习，希望对微服务、Android 开发感兴趣的同学有点帮助。</p><p>如果你对 Android 不了解，建议先学习 Google 官网关于 Android 开发的入门知识，最起码你能用 <code>Android Studio</code> 跑起一个工程。如果你对 Java 也不了解或者压根都没有学习过 Java，那么你可能要加油了争取用一周的时间搞懂 Java 语法了，然后在 Android 学习的过程中再去深入 Java 语言的学习。当然了你会 <code>Kotlin</code> 编程语言也可以。这里想告诉大家，任何一门编程语言想精通需要比较长的时间，但是初级入门能写简单的代码只要用心不应该超过一周。你只需要克服内心的恐惧笃定自己一定行，那么很快你就入门了。</p><p><strong>阅读下面的内容需要你</strong>：</p><ul><li>看过 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务项目系列文章</a> 中的文章，不要求都看过至少关于如何使用 <code>SpringBoot</code> 的部分看过；</li><li>会 Java 编程或者 Kotlin 编程，入门的知识即可；</li><li>了解 Android 开发，知道如何使用 <code>Android Studio</code> 这个 IDE；</li></ul><p><strong>本篇主要内容：</strong></p><ul><li>搭建 <code>Android</code> 工程的基本框架；</li><li>实现 Android 端的用户注册和登录功能；</li></ul><p>工程源码在 <a href="https://github.com/veryitman/MSTutorial/tree/veryitman-feature">Github</a> 上面，大家可以去下载一起学习，工程相关目标如下：</p><p><img src="/upload/images/2020/06/20/1.png"></p><p>项目目前只实现了注册、登录的功能，后续会丰富其内容。</p><h2 id="搭建-Android-工程"><a href="#搭建-Android-工程" class="headerlink" title="搭建 Android 工程"></a>搭建 Android 工程</h2><p>该工程名称为 <code>MSBlog</code>，我的本机环境安装了：</p><ul><li>JDK 1.8；</li><li>Android Studio 4.0；</li><li>Android SDK ；</li></ul><p>首先，打开 <code>Android Studio</code>，选择 <code>File/New/New Project...</code>，打开下面视图</p><p><img src="/upload/images/2020/06/20/2.png"></p><p>紧接着，点击 <code>Next</code>，填写相关的项目名称和包名等信息即可。</p><p>工程大致结构如下：</p><p><img src="/upload/images/2020/06/20/3.png"></p><p>在 <code>com.veryitman.msblog.http</code>、<code>com.veryitman.msblog.model</code> 这两个包中是网络请求、数据模型等的 Java 实现，<code>MZOkHTTPWrapper</code> 是对 <code>okhttp</code> 的封装。</p><p>该工程中，使用了两个第三方库分别是 <code>gson</code>（json解析等）、<code>okhttp</code>（HTTP请求），详细配置在 <code>app/build.gradle</code> 文件中。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.squareup.okhttp3:okhttp:4.7.2&quot;</span>)</span><br><span class="line">implementation <span class="string">&#x27;com.google.code.gson:gson:2.8.6&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="实现-Android-注册"><a href="#实现-Android-注册" class="headerlink" title="实现 Android 注册"></a>实现 Android 注册</h2><p>用户注册效果图</p><p><img src="/upload/images/2020/06/20/4.png"></p><p>启动 <code>SpringBoot</code> 服务，注意在 <code>MZHttpUrlModel</code> 中修改一下连接该服务的 IP 地址（用你自己本机的IP）。</p><p>点击 <code>Signup</code>，根据用户输入的信息请求服务端的API去注册，点击 <code>Had Account</code> 去登录页面，点击 <code>Guest</code> 直接进入应用。</p><p>具体的代码是在 <code>MZSigninActivity</code> 中实现的，有兴趣的朋友可以看看源码，这里不再赘述。</p><p>在进行网络请求之前，注意需要在 <code>AndroidManifest.xml</code> 文件中添加访问网络的权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现-Android-登录"><a href="#实现-Android-登录" class="headerlink" title="实现 Android 登录"></a>实现 Android 登录</h2><p>用户登录效果图</p><p><img src="/upload/images/2020/06/20/5.png"></p><p>具体的代码是在 <code>MZSignupActivity</code> 中实现的，有兴趣的朋友可以看看源码，这里不再赘述。</p><p>点击 <code>Signup</code>，根据用户输入的信息请求服务端的API去登录。</p><p>进入主界面后，就可以看到四个Tab页面，分别是主页、分类、好友、个人中心。</p><p><img src="/upload/images/2020/06/20/6.png"></p><p>目前这几个页面尚未实现，后续会陆续完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新建一个 Android 工程还算是蛮简单的一个过程，希望大家能把工程跑起来，如果有任何问题可以留言给我。</p><p>今天的分享就这么多，简单的做个小结：</p><ul><li>从搭建完成 <code>SpringBoot</code> 再到使用 Android 实现一个简单的客户端，需要初学者付出较多的努力，最关键的是我们一起迈出了第一步；</li><li>在代码中尽量不要使用魔术数字，把通用的常量放到对应的类中进行管理，减少后续的维护成本；</li><li>尽量多的输出 Log，并且使用 Tag 对 Log 进行分类，方便后续排查问题，提高解决问题的效率；</li></ul><hr><p><strong>不要抱怨自己没有天赋，如果你能坚持做好一件事情，本身就是天赋。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简谈亲子教育</title>
      <link href="/2020/06/06/%E7%AE%80%E8%B0%88%E4%BA%B2%E5%AD%90%E6%95%99%E8%82%B2/"/>
      <url>/2020/06/06/%E7%AE%80%E8%B0%88%E4%BA%B2%E5%AD%90%E6%95%99%E8%82%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>网上流传着这样一句话：“没有一个教孩子学习的家长不是心梗的”。</p><p>当然了，这句玩笑话显然是夸张了一些，但它足以表明家长和孩子之间在学习这个话题上存在着不可调和的矛盾。</p><p>今天想跟大家分享一下在学习这件事情上，怎么做到更好的与自己的孩子相处才能不伤害彼此。</p><p>看到本篇文章的时候，或许你还是未婚者，或者是准父母者，抑或是已为人父母了，但我建议你看下去，说不定有些收获呢。</p><h2 id="不可逆的伤害"><a href="#不可逆的伤害" class="headerlink" title="不可逆的伤害"></a>不可逆的伤害</h2><p>今年是个特别年，冠状病毒让全国家长增加了陪伴孩子的时间。别人都说：”陪伴是最好的教育“，而我却发现自己在陪伴的日子里并没有那么理性，动辄为了教孩子写作业变得勃然大怒，俨然就是一头失去理性的野兽，后想起来挺好笑的。</p><p><img src="/upload/images/2020/06/06/1.jpg"></p><p>我小的时候经常挨父亲的揍，经常因为没有做好一些小事情，就会被突如其来的鞭子收拾的服服帖帖。直到自己上了初中，挨揍的迹象才逐渐消失，取而代之的是我对父亲的冷漠和敷衍以及对家的失望。你对孩子无缘无故的大骂，换来的并不是望子成龙而是不可逆的伤害，会让孩子对你失去信任，它会让你们彼此的交流变得屈指可数，到那个时候就后悔莫及了。</p><p>孩子来到这个世界上，不会的东西实在太多了，我们活了这麽多年不还仍旧在学习嘛？上学只是孩子在未来的道路上的一个阶段而已，而我们应该尽自己最大的努力让他在这个道路上走得更稳更安全才是正确的做法。只凭拳脚或者大吼大叫是无法让孩子信服的，三字经说”子不教父之过“，但是”教“得太”过“了就不好了。推荐大家读读 <a href="http://www.veryitman.com/2019/10/26/%E7%9C%8B%E3%80%8A%E9%93%B6%E6%B2%B3%E8%A1%A5%E4%B9%A0%E7%8F%AD%E3%80%8B%E6%9C%89%E6%84%9F/">看《银河补习班》有感</a> 这篇文章，鼓励和相信自己的孩子，才是给他前进的道路上最大的动力。每个孩子都是聪明的，他们会用自己的心灵感受你对他的点点滴滴。</p><h2 id="知识的诅咒"><a href="#知识的诅咒" class="headerlink" title="知识的诅咒"></a>知识的诅咒</h2><p><img src="/upload/images/2020/06/06/2.jpg"></p><p>大家应该考过驾照被教练带着练过车吧，我相信有很多学员都被教练骂哭过甚至还不止一次。若不是自己交了钱付出了那么多，应该早就拔方向盘走人了吧。我也听过身边很多同事抱怨过对教练的各种不满，年轻气盛点的学员也有当面怼教练的。</p><p>我自己亲身经历的一件事情，说起来也挺逗。那天去考科目三（路考），凌晨天不亮就出发到考试地了，如果当天科目三能考试通过就可以接着考科目四了，拿驾照就指日可待。在练车的过程中，教练对着我们几个学员分别痛斥了一顿，这个都说了几百遍了那个已经讲了上千遍了怎么还是不注意，我看你们考试挂了也是活该。这种感觉就像你清晨刚一起床就被人用冰水浇灌了一番。我确实是没有忍住就怼了教练一番，我用相对文明的成语胡乱说了他一通，还好大家都没有动起手来😄，那天考试还算顺利大家都考试通过了。</p><p>在回来的路上，我问一个学员你现在最想做的一件事是什么？他说删了教练的微信老死不相往来，我举起了左手，他举起了右手，我们不约而同的击了一掌，那响声响彻云霄，感觉那是练车以来最爽的一次就好比报了一个大仇一样。</p><p>教练开车多年俨然是一个老司机，而作为从来没有接触过汽车的学员，练车和考试对于他们来说除了不熟悉更可怕的是内心的那份对车的恐惧。再加上教练的咆哮就会更加乱了方寸。这就是知识的诅咒。</p><p>那什么是知识的诅咒<code>呢？英文称之为</code>The Curse of Knowledge&#96;，我们一旦知道了某事，就无法想象这件事在未知者眼中的样子。当我们把自己知道的知识解释给别人的时候，因为信息的不对等，我们很难把自己知道的完完全全给对方解释清楚。总是，我们的知识“诅咒”了我们。</p><p>简单的用一句话来说，<code>知识的诅咒</code> 就是你自己知道的东西很难通过简单的交流或者教育让对方全部get到。</p><p>生活中有很多这样的例子，对于孩子的学习，同样存在知识的诅咒。我们总是认为这些作业太简单，应该讲一两遍孩子都会了，他们为何总是反复的在错呢？为了防止知识的诅咒对我们的影响，我们更应该多一些耐心，或者换个思路想一想是不是自己的教育和表达方式有问题？换个思路和做法，孩子是不是就能学的更轻松呢？</p><h2 id="瓦拉赫效应"><a href="#瓦拉赫效应" class="headerlink" title="瓦拉赫效应"></a>瓦拉赫效应</h2><p>在了解了 <code>知识的诅咒</code> 这个知识点后，我们再来聊聊什么是 <code>瓦拉赫效应</code>。</p><p><img src="/upload/images/2020/06/06/3.jpeg"></p><p>在说 <code>瓦拉赫效应</code> 之前，我们还是先看看身边的真实事件。</p><p>我有个同学，初中成绩很一般，父母花钱求领导让他上了一个县高中。在高中的文理科分班之前，他整体成绩也很一般，没有人会相信他最后居然可以考上985的大学。后来同学聚会，他跟我们讲其实自己很喜欢理科尤其是数学和物理，对文科没有任何兴趣考试也是瞎蒙的。他非常感谢文理分科让自己有了更好的选择，否则自己的一生可能是另外一番景象。</p><p>学生的智能发展都是不均衡的，都有智能的强点和弱点，他们一旦找到自己最佳点，使潜力得到充分的发挥，便可取得惊人的成绩。这一现象人们称之为“瓦拉赫效应”。</p><blockquote><p>奥托·瓦拉赫是诺贝尔化学奖获得者，他的成才过程极富传奇色彩。瓦拉赫在开始读中学时，父母为他选择的是一条文学之路，不料一个学期下来，教师为他写下了这样的评语：“瓦拉赫很用功，但过分拘泥。这样的人即使有着完美的品德，也决不可能在文字上发挥出来。”此后，他改学油画。可瓦拉赫既不善于构图，又不会调色，对艺术的理解力也不强，成绩在班上是倒数第一，学校的评语更是难以令人接受：“你是绘画艺术方面的不可造就之才。”面对如此“笨拙”的学生，绝大多数老师认为他已成才无望，只有化学老师认为他做事一丝不苟，具备做好化学实验应有的品格，建议他试学化学，父母接受了化学老师的建议。这下，瓦拉赫智慧的火花一下被点着了，文学艺术的“不可造之才”一下子变成公认的化学方面的“前程远大 的高才生”。</p></blockquote><p>如果你还在强迫自己的孩子去上所谓的兴趣班的父母，是时候考虑一下继续这样下去会不会对孩子造成更大的伤害？</p><p>在这个年代，每个人都有很大的压力包括孩子自己，即使你在班级里考了80分也可能是倒数第一，培养孩子的兴趣是很重要但前提是你让他把最基本的学习搞好。强迫他去上兴趣班是没有任何意义的。</p><hr><p>自己乱七八糟的说了许多，总结一下吧！</p><ul><li>孩子在学习方面不懂的有很多，家长要更加有耐心的教导他们，别被知识诅咒了；</li><li>每个孩子的智能发展是不均衡的，当他们遇到问题后，试着换个方式去引导和教育他们，帮助他们找到那个平衡点；</li><li>拳打脚踢、声嘶力竭只能让家长和孩子之间的关系变得更加矛盾，造成的伤害不可逆；</li><li>不要私自给孩子下决定，尽量彼此进行商量，适当的时候可以进行适度的“骗”；</li></ul><hr><p><strong>对孩子的歇斯底里，换来的只不过是两败俱伤。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 亲子 教育 知识的诅咒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 配置Nginx反向代理</title>
      <link href="/2020/05/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%85%8D%E7%BD%AENginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2020/05/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%85%8D%E7%BD%AENginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本来是一件很小的事情，但我觉得还是很有必要跟大家分享一下，勿以善小而不为。</p><p>事情是这样的…</p><p>有个小伙伴告诉我说自己想学习一下 <code>SpringBoot</code> 结合 <code>Nginx</code>，毕竟用了 <code>Tomcat</code> 那么久（启动 <code>SpringBoot</code> 项目会自动启动 <code>Tomcat</code>）也是时候玩玩 <code>Nginx</code> 了。这个想法很赞，去探索和了解自己没有学过的东西本来就是一种进步。</p><p>他说按照网上教程配置了一下 <code>Nginx</code>，但是通过配置的方式访问 <code>Nginx</code> 死活都不能访问到  <code>SpringBoot Web</code> 项目提供的接口中去。</p><p>今天我们一起来看看这个问题，我也把实践的内容分享给大家，希望能帮助到有需要的人。</p><p>关于微服务相关的文章，有兴趣的可以参阅 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务项目系列</a> 这篇文章。</p><h2 id="大写的-404"><a href="#大写的-404" class="headerlink" title="大写的 404"></a>大写的 404</h2><p>经过一番的沟通，他给我大致描述了一下经过，我就开始了复现之路。</p><p>这个小伙伴是想通过 <code>Nginx</code> 的反向代理能力访问所有 <code>SpringBoot Web</code> 项目的接口，关于什么是反向代理、正向代理，可以参考我之前名为 <a href="http://www.veryitman.com/2019/04/14/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/">反向代理</a> 的一篇文章。</p><p>我所用依旧是 <a href="https://github.com/veryitman/MSTutorial/tree/master/server-project">SpringBoot 项目源代码</a> 中的代码，代码托管在 Github 上面了，有需要的朋友可以 clone 下来。</p><p>报错如下图所示：</p><p><img src="/upload/images/2020/05/23/1.png"></p><p>我在本机（Windows 10系统）安装的 <code>Nginx</code> 版本是 <strong>1.15.12</strong>，上图可以看出访问对应的 <code>url</code> 出现了 404 错误，关于 404 这个错误码，百度百科是这样解释的：</p><blockquote><p>404，是一种HTTP状态码，指网页或文件未找到。</p><p>HTTP 404或Not Found错误信息是HTTP的其中一种“标准回应信息”（HTTP状态码），此信息代表客户端在浏览网页时，服务器无法正常提供信息，或是服务器无法回应且不知原因。</p></blockquote><p>直白来讲，就是找不到资源。首先我们来看一下我是如何配置 <code>Nginx</code> 反向代理的。</p><p>配置文件 <code>nginx.conf</code> （在Nginx安装目录conf目录下），内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义虚拟主机1</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义虚拟主机2：配置转发给ms-user服务（springboot）</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  user.com;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Port <span class="variable">$server_port</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从配置可以看到，配置了两个虚拟主机，问题就出现在这里。</p><h2 id="让-404-消失"><a href="#让-404-消失" class="headerlink" title="让 404 消失"></a>让 404 消失</h2><p>我们再来看一下刚才报 404 的访问地址 <code>http://localhost/signin/name?username=fooboy&amp;userpwd=123</code>，其中 <code>http://localhost</code> 本质是  <code>http://localhost:80</code>，再结合看一下 <code>Nginx</code> 的配置文件，其实是访问到了 <code>自定义虚拟主机1</code> 上面了。</p><p>有两个比较简单的解决方案，下面的两种方案<strong>无需修改</strong> <code>SpringBoot</code> 项目的任何配置，你只需要启动你的 <code>SpringBoot</code> 项目即可。</p><p><strong>方案一：配置主机 host</strong></p><p>修改系统主机 <code>C:\Windows\System32\drivers\etc</code> 目录下面的 HOSTS 文件，记得要用管理员身份打开才有权限去写。</p><p>在 HOSTS 文件中，增加如下配置：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 user.com</span><br></pre></td></tr></table></figure><p>在浏览器访问 <code>http://user.com/signin/name?username=fooboy&amp;userpwd=123</code> 就可以成功了（注意访问的域名是 <code>user.com</code>），如下图所示（该API需要输入登录账号和密码）：</p><p><img src="/upload/images/2020/05/23/2.png"></p><p><strong>方案二：修改虚拟主机的端口</strong></p><p>这个需要修改 Nginx 的配置文件，将 <code>自定义虚拟主机2</code> 中的端口改为非 80 端口号，修改如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义虚拟主机2：配置转发给ms-user服务（springboot）</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8085</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  user.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Port <span class="variable">$server_port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后，保存文件。</p><p>需要重新加载 <code>Nginx 的配置</code>，可以在终端输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure><p>重新加载成功后，在浏览器访问 <code>http://localhost:8085/signin/name?username=fooboy&amp;userpwd=123</code> 就可以成功了（注意访问的端口改为了 <code>8085</code>），如下图所示：</p><p><img src="/upload/images/2020/05/23/3.png"></p><p>至此问题解决。</p><hr><p><strong>只要你愿意，一切都来得及~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot Nginx 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瘦身秘笈: 养成好习惯</title>
      <link href="/2020/05/10/%E7%98%A6%E8%BA%AB%E7%A7%98%E7%AC%88-%E5%85%BB%E6%88%90%E5%A5%BD%E4%B9%A0%E6%83%AF/"/>
      <url>/2020/05/10/%E7%98%A6%E8%BA%AB%E7%A7%98%E7%AC%88-%E5%85%BB%E6%88%90%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="习惯的力量"><a href="#习惯的力量" class="headerlink" title="习惯的力量"></a>习惯的力量</h2><p>得此秘笈者终生受益，练此秘笈无须自宫。</p><hr><p>过年因疫情肆虐，大家基本都是待在家中。老婆跟我说，你能不能写点非技术的东西呀，技术文章我们都看不懂，你可以写点程序员平常是怎么生活的文章呀？面对她恨铁不成钢的“愤怒”，我也hinhin的反思了一把，除了代码之外，确实有很多东西值得说值得写。毕竟人不能总是陷入能力的陷阱中，要不断的打破知识的诅咒，不断的去探索和表达自己。</p><p>于是，今天分享的话题与技术基本没有关系，我们聊聊关于健康管理的话题。</p><p>不知道大家有没有这样一种感觉，每当别人给你分享关于他自己一些经验的时候，尤其这些经验我们还没有体验过，就觉得对方说的东西距离自己很遥远，哪怕对方是苦口婆心的谆谆教导，自己可能也只是心不在焉的听听而已。</p><p>今天要分享的是关于如何调整自己的生活习惯的话题，为了能让大家“欣然接受”（奢求🙁），我用实际行动确实让自己有所改变，才敢发文。希望对大家有益。</p><p>对于 <code>程序员保养秘笈</code> 这个话题，我准备分为几篇文章跟大家分享，本篇算是一个导读。无论你现在是处于程序开发的初级阶段（小白🤝），还是高级（脱发😜）阶段，都希望你能坚持看完。减肥的前提是你能养成好习惯并且坚持下来，千万不要轻易相信网上所谓的减肥机构以及一些虚假宣传。</p><p>我始终认为只要自己的身体各项指标正常（比如没有脂肪肝，没有高血压等），生活习惯良好，即使胖一点也无所谓。一旦你能养成良好的习惯，想不瘦都难并且可以受益终生。</p><p>下面正式进入吹🐂🍺的时间。</p><h2 id="BMI-靠谱不？"><a href="#BMI-靠谱不？" class="headerlink" title="BMI 靠谱不？"></a>BMI 靠谱不？</h2><p>在2019年10月份，我体重达到了 <strong>86.5kg</strong>，我的身高175cm，这个体重对我来说已经超标了。当时的BMI（身体质量指数，简称体质指数）指数值为 <strong>28.2</strong>，下图是BMI相关的标准。</p><p><img src="/upload/images/2020/05/10/1.jpg"></p><p>从上面的图中就可以看出，我已经属于过度肥胖了。</p><p>自从我改变了的生活方式后，现在的BMI指数值为23.4，虽然达标了但还有很大的缩减空间，还需要继续努力。</p><p>这里我要普及一下关于BMI的相关知识，请各位搬好小板凳认真听。</p><p>BMI就是所谓的“体质指数”，计算公式如下：<br>$$<br>BMI &#x3D; 体重kg &#x2F; （身高m）^2<br>$$<br>即体重除以身高的平方得到的值就是 BMI 值。看到这个公式，调皮的小伙伴可能会说你是不是长高了所以BMI值才变低的🤭，我都几十岁的人了，长高已经是可望不可及了。</p><p>下面是引用自作者 <code>仰望尾迹云</code> 的 《我的最后一本减肥书》里面的内容。</p><blockquote><p>从公式上看，BMI就相当于把人均匀地剁成几段，称一称单位身高里人的体重。所以，体重越重，身高越低，BMI也就越高。BMI反映了人“横向发展”的程度，越胖的 人，BMI自然越高。BMI自20世纪五六十年代就开始用。但BMI多少算肥胖，多少算正常，不同国家和组织，规定都不一样。西方的标准一般略低。我国的标准，BMI值18.5～24算体重正常，24～28算超重，但还不算肥胖，超过28算肥胖。</p></blockquote><blockquote><p>但BMI也不是绝对标准。对大多数普通人来说，BMI有相对较好的指导意义，但BMI也有两个重要缺陷。</p><p>首先，BMI不区分脂肪和肌肉，有些人超重，是脂肪太多；但也有些人超重，是肌肉比例大，比如力量型运动员。他们体重大是因为肌肉发达，所以不能叫“胖”。用BMI衡量这些人的健康或者胖瘦，他们就很冤枉。有数据称，美国2004—2005赛季的1124名橄榄球运动员中，BMI超过30的有43%，超过35的有14%。看起来很可怕，但其实这些运动员身体健康得不得了，一个个也都不胖。</p><p>其次，BMI不区分脂肪的分布位置，这也是个大问题。从健康的角度讲，内脏脂肪和皮下脂肪，前者要比后者危险得多，但BMI可分不出脂肪长在哪儿。两个身高体重一样的人，一个胖得很均匀，一个脂肪都集中在内脏处，从健康和审美的角度讲，这两个人完全不同，但BMI却是一样的。所以，BMI高，不一定就是胖，也不一定就不健康；BMI低，不一定就不胖，也不一定绝对健康。BMI太粗略，所以有些问题还要具体来看。那为什么BMI在全世界被广泛使用了半个世纪？实际上这也是没办法的办法。准确地测量人的脂肪含量，并且明确脂肪的分布位置，难度很大，只有在实验室或者医院才能测出来。绝大多数人，不可能有条件经常去做体成分测试。</p></blockquote><blockquote><p>BMI最大的好处就是简单，知道身高体重就能算出来。虽然有误判，但相对来说，效用价格比还是很高的，适合大范围人群使用。不用BMI的话，也确实没有更好的办法来衡量人的身高体重和健康的关系了。</p></blockquote><p>总之，如果你没有经常运动或者去健身（低头看看自己肚子上面的肉吧）用BMI来看自己是否偏胖，算是比较靠谱的衡量标准了。如果你偏瘦的话，就需要稍微补充一下营养了，毕竟太瘦了对身体也不好还影响加班的效率！</p><h2 id="算是好习惯吧"><a href="#算是好习惯吧" class="headerlink" title="算是好习惯吧"></a>算是好习惯吧</h2><p>说实话，我也不知道怎么来定义什么是好习惯，凡是让你受益的习惯我觉得都算是好习惯。我把自己受益的那些习惯分享给正在看此文的你。</p><p>下面这些习惯暂时不展开说，后续的文章会详细的介绍。</p><p><strong>1、早睡早起</strong></p><p>对于绝大部分生活在大城市的年轻人，尤其这些年轻人是程序员的话，早睡简直是让人望尘莫及了，996甚至997的日子习以为常，每晚回到家基本都是22点后了，洗个澡刷个d音聊个w信再给自己远方的女朋友打个电话，估计都凌晨了，猛一点的可能要到凌晨2、3点才开始睡觉，早起就变得更难了。</p><p>晚睡的坏处自然不用我多说，大家心里都跟明镜似的。我个人觉得在大城市奋斗的年轻人，能在24点前一点点睡觉，放下手机也算是‘立地成佛’了。不过慢慢养成习惯吧，坚持一段时间后再把早睡时间往前调整一点，循序渐进的去调整自己。早上尽量在8前起床，有条件的朋友可以自制早餐，一杯热牛奶，一个新鲜鸡蛋，一个苹果或者香蕉就搞定了。</p><p><strong>2、规律饮食</strong></p><p>早餐尽量在<strong>9点前</strong>搞定，根据自己的喜好，早上可以多吃一点，尤其是疫情期间蛋白质的补充千万不能少。</p><p>午餐以蔬菜为主，加点玉米或者红薯之类的粗粮，也可以适当的吃点肉但千万不要太油腻，像猪肘子呀别人吃一个，你最好吃一半甚至更少一点。有人说了万一要是没忍住吃多了呢，那怎么办？酒肉穿肠过，佛祖心中留😄。嗯，偶尔几下也没有关系了，你只要在接下来的一两天内通过运动把他消耗掉就可以了。</p><p>晚餐最好在<strong>19点前</strong>就吃完，主食适当的少一点，主食还是以大米为主吧，同等质量的面食要比大米的热量高，多吃点菜。如果晚上你能忍住不吃肉那就更好了，晚餐尽量保证低盐低油饮食，遇到晚上加班或者开会肚子饿了可以适当补充一点高纤维面包和牛奶，睡觉前2个小时内就不要吃东西了。</p><p>总之，一日三餐按时吃饭，蔬菜为主，主食为辅，8分饱就可以了，适当的给胃和肠道留点运动的空间，只有它们舒服了你才能高枕无忧。</p><p><strong>PS</strong>：我之前使用过不吃晚餐的方法来减肥，苦苦的坚持了40多天，结果一个朋友的晚宴让我彻底突破了自己的防线，我承认那一晚我撑到了。最后可想而知，体重还是反弹回来了并且比之前更能吃了。所以，不吃饭减肥对于绝大多数的人来说是行不通的，只有吃饱了才能有力气减肥嘛！</p><p><strong>3、经常喝水</strong></p><p>这里的水指的不是可乐，雪碧之类的饮料，而是白开水（适当的加点料也可以，比如柠檬片，枸杞，茶叶）。</p><p>经常喝水有助于身体的新陈代谢，特别是像瘦下来的朋友们，多喝水可以促进脂肪的燃烧。还有如果你有肾结石之类的疾病更应该多喝水，水喝的量够了上厕所也会频繁，还可以促进运动，一举两得。</p><p>喝水可以保持每15分钟喝2~3口的样子，不要豪饮，慢慢养成习惯就好了，最好不要等着自己渴了再来喝水，让喝水变成肌肉记忆。早起一杯温开水可以清肠道，用餐前一杯水有利于增强饱腹感减少用餐量，间接地可以减少热量的摄入。</p><p><strong>4、适当运动</strong></p><p>你是否经常坐在位置上点外卖吃？如果是我建议你改变一下自己这个习惯，可以选择去楼下跟同事一起用餐，既可以增加运动又可以促进与同事之间的交流，饭前饭后走一走，有助于消化和吸收，减少脂肪的堆积。</p><p>一提到运动，大家心里面想到的一般都是那种大汗淋漓的场面才算是运动。其实运动有很多种，如果你不能跑步就选择快走，如果你觉得快走还是很累那就慢走，反正动起来比坐下来要好一些。特别是比较胖的人，跑步要特别注意自己的膝盖，体重偏胖对膝盖的伤害是很大的。</p><p>可以使用 NEAT（Non-Exercise Activity Thermogenesis，即非运动性热消耗）法来增加自己的热量消耗，我总结了一下自己使用的 NEAT 小习惯，如下图：</p><p><img src="/upload/images/2020/05/10/2.png"></p><p>这里我着重提一下收腹这个小动作，经常保持收腹的动作可以增强腹部的练习，有利于瘦肚子。当然了这个过程很慢，一旦你习惯了这个动作，我敢保证要不了多久肯定有同事说你瘦了许多。</p><p><strong>5、戒烟限酒</strong></p><p>之前有很多朋友都戒烟了，有的戒了半年，有的戒了几年，最后还是抽上了，戒烟是一个值得研究和探讨的课题。所以，我并没有期望你读到这里就立即戒烟了。</p><p>戒烟最难的是如何消除内心的那种失落的恐惧感，一烟在手，天下我有的感觉让人难以割舍。</p><p>我自己本身也是一个烟民，正在戒烟的苦难中苦苦挣扎着，等我哪一天真正戒掉了再来分享这个心路历程。</p><p>戒酒，对于有酒瘾的朋友也是很难的一件事情，但是限酒我觉得还是要去尝试一下的，少喝点不至于那么伤肝吧。本人对酒不感兴趣，也基本不喝，因为一喝就醉，实在没有这个天赋。</p><p>还有很多好的习惯没有一一列举出来，比如早晚刷牙（如果你喜欢甚至可以早中晚刷牙😜）、还有降低吃饭速度、午休等等，总之你有多自律就有多自由！</p><hr><p><strong>勿以恶小而为之，勿以善小而不为~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 习惯 自律 健康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: Admin与服务监测和管理</title>
      <link href="/2020/05/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Admin%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%B5%8B%E5%92%8C%E7%AE%A1%E7%90%86/"/>
      <url>/2020/05/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Admin%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%B5%8B%E5%92%8C%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Spring Boot Admin</code> 并不是 Spring Boot 官方出品的，开源地址 <a href="https://github.com/codecentric/spring-boot-admin">SpringBoot Admin</a>，伴随着 SpringBoot 的更新，<code>Spring Boot Admin</code> 也做了相对应的更新。Spring Boot 推出 2.X 版本时，<code>Spring Boot Admin</code> 也及时进行了更新。本篇使用的就是 <code>Spring Boot Admin</code> 2.2.1版本，最新版本是 <code>2.2.2</code>。 <code>Spring Boot Admin</code>  分为 <code>client</code> 和 <code>server</code> 端，<code>server</code> 端一般独立为一个服务，<code>client</code> 可以是你已经开发完成的服务，也可以是你即将要开发的服务。</p><p>对 <code>Spring Boot Admin</code>  2.x 版本的具体的更新内容和变化感兴趣的朋友，可以参考 <a href="https://github.com/codecentric/spring-boot-admin/blob/master/spring-boot-admin-docs/src/main/asciidoc/changes-2.x.adoc">changes-2.x.adoc</a> 文档，这里不再赘述。</p><p>继上一篇 <a href="http://www.veryitman.com/2020/05/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Actuator%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%B5%8B/">微服务-Actuator实现服务监测</a>，我们说到使用 <code>Actuator</code> 组件可以实现对服务的监测，但是这种方式没有管理界面体验很不友好。本篇继续学习关于 Admin 的知识，该组件不仅囊括了 <code>Actuator</code> 的功能，还提供了管理界面，使用起来比较方便。</p><p>本篇主要内容，如下：</p><ul><li><p>通过 HTTP 方式集成和使用 <code>spring-boot-admin-server</code>；</p></li><li><p>如何安全的使用 <code>spring-boot-admin</code>，这里又包含两个内容:</p></li><li><ul><li>如何将 <code>spring-boot-admin-server</code> 结合 <code>spring-boot-security</code>，实现安全管控以及如何配置；</li><li>如何将 <code>spring-boot-admin-client</code> 结合 <code>spring-boot-security</code>，实现安全管控以及如何配置；</li></ul></li></ul><p>完整工程代码，请移步 <a href="https://github.com/veryitman/MSTutorial">Github</a> 下载。后续会结合  <code>spring-cloud</code> 中的 <code>Eureka</code> 组件再次学习和分享使用  <code>spring-boot-admin</code>。  </p><h2 id="配置-Admin-Server"><a href="#配置-Admin-Server" class="headerlink" title="配置 Admin Server"></a>配置 Admin Server</h2><p>为了学习和验证 <code>Spring Boot Admin</code> 的使用，我创建了一个 <code>Admin-Server</code>工程即 <code>ms-admin</code>，创建了两个 <code>Admin-Client</code> 工程即 <code>ms-user</code> 和 <code>ms-admin-client</code>，工程结构如下图:</p><p><img src="/upload/images/2020/05/03/1.png"></p><p><code>ms-user</code> 和 <code>ms-admin-client</code> 不同点在于：<code>ms-user</code> 使用了 <code>spring-boot-security</code> 模块，而 <code>ms-admin-client</code> 没有使用  <code>spring-boot-security</code>  模块，是一个相对比较简单的 SpringBoot 服务。</p><h3 id="1、配置-ms-admin"><a href="#1、配置-ms-admin" class="headerlink" title="1、配置 ms-admin"></a>1、配置 <code>ms-admin</code></h3><p>在该 module 的 <code>properties</code> 文件中，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=Admin-Server</span><br><span class="line"># ---------------------------------</span><br><span class="line"># 配置该服务的独立端口</span><br><span class="line"># ---------------------------------</span><br><span class="line">server.port=8087</span><br></pre></td></tr></table></figure><p><strong>注意：该服务的端口为 <code>8087</code>。</strong></p><p>该 module 的 pom 文件，使用了 <code>spring-boot</code> 版本为 <code>2.2.6.RELEASE</code>，<code>spring-boot-admin</code> 版本为 <code>2.2.1</code>，这里一定要注意版本的匹配，否则工程运行会存在各种奇葩问题。这里教大家一个方法，如果你不知道如何匹配版本，直接使用 <a href="https://start.spring.io/">spring initializr</a> 创建工程，然后下载创建的工程，看一下里面的 pom文件中各个模块的版本号就可以了。</p><p>修改一下启动类，增加 <code>@EnableAdminServer</code> 注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.config.EnableAdminServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MZAdminApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MZAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、配置-ms-admin-client"><a href="#2、配置-ms-admin-client" class="headerlink" title="2、配置 ms-admin-client"></a>2、配置 <code>ms-admin-client</code></h3><p>在该 module 的 <code>properties</code> 文件中，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=Admin-Client</span><br><span class="line">server.port=8083</span><br><span class="line"></span><br><span class="line"># ------------------------</span><br><span class="line"># Actuator config</span><br><span class="line"># ------------------------</span><br><span class="line"># 可以访问任意控制点</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"></span><br><span class="line"># ------------------------------------------</span><br><span class="line"># 配置 spring boot admin</span><br><span class="line"># ------------------------------------------</span><br><span class="line">spring.boot.admin.client.url=http://localhost:8087</span><br><span class="line">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure><p><strong>注意：该服务的端口为 <code>8083</code>。如果 admin-client 和 admin-server 没有部署在同一台服务器，这里的<code>spring.boot.admin.client.url</code> 一定要写上 admin-server 所在服务器的ip地址。</strong></p><p>在该 module 的 <code>pom</code> 文件中，引入如下依赖即可，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot admin client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其余的不需要修改任何东西。</p><h3 id="3、启动验证"><a href="#3、启动验证" class="headerlink" title="3、启动验证"></a>3、启动验证</h3><p>分别启动 <code>ms-admin</code>、<code>ms-admin-client</code>，启动成功后，在浏览器中打开 <code>http://localhost:8087</code> 就可以看到如下效果，可以看到 <code>ms-admin-client</code> 被发现了。</p><p><img src="/upload/images/2020/05/03/2.png"></p><p>点进去，可以看到 <code>ms-admin-client</code> 的运行状况。大家可以自己试试，我就不截图了。</p><h2 id="配置带-security-的-Admin-Client"><a href="#配置带-security-的-Admin-Client" class="headerlink" title="配置带 security 的 Admin-Client"></a>配置带 security 的 Admin-Client</h2><p>上面我们说了，<code>ms-user</code> 也是一个 Admin-Client，我也希望他能被监控和管理，但是 <code>ms-user</code> 有点特殊它使用了 security 模块，那么如何让他被 Admin-Server 发现呢，我们接着往下看。</p><p><strong>PS</strong>：<code>ms-user</code> 模块其实是我之前一直在 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务相关文章</a> 中使用的工程模块，这里只是重构了一下工程结构并且修改了一下名称而已。</p><p>因为 <code>ms-user</code> 包含了比较多的内容，其 pom 文件也相对复杂一些，这里粘贴一部分（MySQL和Swagger相关配置就不写了）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=User-Server</span><br><span class="line"></span><br><span class="line"># ------------------------</span><br><span class="line"># Actuator config</span><br><span class="line"># ------------------------</span><br><span class="line"># 可以访问任意控制点</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"># 配置独立的端口</span><br><span class="line">management.server.port=1012</span><br><span class="line"># 自定义访问控制点的路径</span><br><span class="line">management.endpoints.web.base-path=/monitor</span><br><span class="line">management.endpoint.shutdown.enabled=true</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------</span><br><span class="line"># Spring Security Default user name and password</span><br><span class="line"># -----------------------------------------------</span><br><span class="line">spring.security.user.name=admin</span><br><span class="line">spring.security.user.password=admin</span><br><span class="line">spring.security.user.roles=ACTUATOR_ADMIN</span><br><span class="line"></span><br><span class="line"># ------------------------------------------</span><br><span class="line"># 配置 spring boot admin</span><br><span class="line"># ------------------------------------------</span><br><span class="line">spring.boot.admin.client.url=http://localhost:8087</span><br><span class="line">management.endpoint.health.show-details=always</span><br><span class="line"># 告诉admin-server用户名和密码，否则监控不到</span><br><span class="line">spring.boot.admin.client.instance.metadata.user.name=$&#123;spring.security.user.name&#125;</span><br><span class="line">spring.boot.admin.client.instance.metadata.user.password=$&#123;spring.security.user.password&#125;</span><br></pre></td></tr></table></figure><p>这里要特别注意， <code>ms-user</code> 使用了security并且设置了用户名和密码，一定要告诉 Admin-Server，否则无法被监控到。也就是说如下的配置必须写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 告诉admin-server用户名和密码，否则监控不到</span><br><span class="line">spring.boot.admin.client.instance.metadata.user.name=$&#123;spring.security.user.name&#125;</span><br><span class="line">spring.boot.admin.client.instance.metadata.user.password=$&#123;spring.security.user.password&#125;</span><br></pre></td></tr></table></figure><p>紧接着我们启动 <code>ms-user</code> 这个服务，刷新一下浏览器，效果如下图：</p><p><img src="/upload/images/2020/05/03/3.png"></p><p>可以看到 <code>ms-user</code> 这个服务被如愿以偿的发现了。</p><h2 id="Admin-Server-使用-security"><a href="#Admin-Server-使用-security" class="headerlink" title="Admin-Server 使用 security"></a>Admin-Server 使用 security</h2><p>在  <code>ms-admin</code> 的 pom 文件中引入 security 模块，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 properties 文件，增加用户名和密码的配置，完整配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=Admin-Server</span><br><span class="line"># ---------------------------------</span><br><span class="line"># 配置该服务的独立端口</span><br><span class="line"># ---------------------------------</span><br><span class="line">server.port=8087</span><br><span class="line"></span><br><span class="line"># ---------------------------------</span><br><span class="line"># security 配置</span><br><span class="line"># ---------------------------------</span><br><span class="line">spring.security.user.name=admin</span><br><span class="line">spring.security.user.password=admin</span><br></pre></td></tr></table></figure><p>配置完成后，我们分别重新启动一下 <code>ms-admin</code>、<code>ms-admin-client</code> 这两个服务。</p><p>再次打开 <code>localhost:8087</code>，会出现如下界面：</p><p><img src="/upload/images/2020/05/03/4.png"></p><p>输入在 <code>properties</code> 文件中配置的用户名和密码，这里我配置的用户名和密码都是 <code>admin</code>，你也可以配置其他的。</p><p>输入之后可以看到如下界面，再次输入上面的用户名和密码即可。</p><p><img src="/upload/images/2020/05/03/5.png"></p><p>初次进入显示效果如下截图，居然没有发现 <code>ms-admin-client</code> 这个服务。</p><p><img src="/upload/images/2020/05/03/6.png"></p><p>这是因为没有在客户端配置进入 Admin-Server 的密码，安排上。</p><p>在 <code>ms-admin-client</code>  的 properties 中配置，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ------------------------------------------</span><br><span class="line"># 配置 spring boot admin</span><br><span class="line"># ------------------------------------------</span><br><span class="line">spring.boot.admin.client.url=http://localhost:8087</span><br><span class="line">management.endpoint.health.show-details=always</span><br><span class="line"># 配置 admin server 的用户名和密码，否则注册不上</span><br><span class="line">spring.boot.admin.discovery.instances-metadata.user.name=$&#123;spring.security.user.name&#125;</span><br><span class="line">spring.boot.admin.discovery.instances-metadata.user.password=$&#123;spring.security.user.password&#125;</span><br></pre></td></tr></table></figure><p>同理，在 <code>ms-user</code> 的配置文件 properties 中也增加相关的配置即可。</p><p><strong>记得继承自 <code>WebSecurityConfigurerAdapter</code> 写一个配置类</strong>，可以参考 <a href="https://github.com/anandvarkeyphilips/spring-boot-admin/blob/master/spring-boot-admin-samples/spring-boot-admin-server-with-security/src/main/java/de/codecentric/boot/admin/server/SpringBootAdminServerApplication.java">SpringBootAdminServerApplication</a> 示例代码，不然客户端有可能无法注册成功。</p><p>重新启动 <code>ms-admin</code> 服务然后登录进去再启动客户端，就可以看到如下界面：</p><p><img src="/upload/images/2020/05/03/7.png"></p><p>另外，Admin-Server 还可以集成 <code>spring-boot-starter-mail</code> 模块再简单的配置一下，就可以实现发送邮件的功能，这样服务的运行状态可以及时通知到对应的收件人了。</p><hr><p><strong>面朝大海，春暖花开。尚拙能成才，你没有比别人聪明，你只是更加努力罢了~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot Actuator Admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: Actuator实现服务监测</title>
      <link href="/2020/05/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Actuator%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%B5%8B/"/>
      <url>/2020/05/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Actuator%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringBoot Actuator 可以帮助我们监控 SpringBoot 应用的运行情况，服务上线后如何监控和管理自己的服务是我们要考虑的一个重要问题。</p><p>Actuator 是 SpringBoot 的一个附加组件（需要自己手动集成），Actuator 能帮助应用程序实现在各个环境运行时的监控。可以使用 HTTP 的各个请求路径来进行健康检查、审计、收集引用的运行情况，对于应用状态、内存、线程、堆栈等等都可以进行监控，比较全面的监控了 SpringBoot 应用的整个生命周期。对于微服务的管理十分有意义，在企业级应用中，对系统进行运行状态监控是不可或缺的。</p><p>Actuator 不仅支持 HTTP 方式访问，还支持 JMX（Java Management Extensions，即Java管理扩展）、SSH、Telnet 方式访问。Actuator 还支持端点扩展，扩展 Actuator 的端点（Endpoint） 可以自定义监控指标，实现更多的运维能力。</p><p>访问 spring-boot-actuator 给我们展现的是纯 JSON 格式的数据，对于非开发人员来说不够直观和不够人性化。<code>Spring Boot Admin</code> 就是用来解决这个问题的，使用 <code>Spring Boot Admin</code> 可以实现这些 JSON 接口数据的界面展现，方便运营人员查看和管理。本篇我们只学习 spring-boot-actuator 的使用，关于  <code>Spring Boot Admin</code> 下一篇再一起学习。</p><p>本篇主要内容：</p><ul><li>如何使用 spring-boot-actuator（算是简单入门）；</li><li>结合 spring-boot-security 增加对 spring-boot-actuator 的访问限制；</li></ul><p>更多关于微服务相关文章，可以通过 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务项目系列文章</a> 学习。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>在你的工程的 pom.xml 文件中，加入如下依赖就可以引入 spring-boot-actuator 组件，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待加载完成（就是对应的jar包文件下载完成且ide加载jar正常），可以看到多了如下两个jar包。</p><p><img src="/upload/images/2020/05/01/1.png"></p><p><code>actuator</code> 是其功能实现，<code>actuator-autoconfigure</code> 是其自动配置的实现。</p><p>启动工程，然后在浏览器打开 <code>http://localhost:8080/actuator</code>，可以看到如下 json 数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;health-path&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/info&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>你可以访问如下的 URL，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/actuator/health</span><br><span class="line">http://localhost:8080/actuator/info</span><br></pre></td></tr></table></figure><p>在 Actuator 的 2.x 版本中，大多数端点默认被禁掉了，且默认端点增加了 <code>/actuator</code> 前缀。默认暴露的两个端点为 <code>/actuator/health</code> 和  <code>/actuator/info</code>，正是如上可以访问的两个 URL.</p><p>如果想开启所有的断点可以被访问，需要在工程的 properties 文件中，增加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br></pre></td></tr></table></figure><p>再次访问 <code>http://localhost:8080/actuator</code>，就会有更多的URL可以被访问了。如 <code>http://localhost:8080/actuator/env</code>、<code>http://localhost:8080/actuator/beans</code> 等。</p><p>官方文档 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints">Spring Boot Actuator: Production-ready Features</a> 完整的介绍了相关的内容，大家可以自行查阅。</p><p>从上面的访问路径可以看出，默认访问 Actuator 所有的监控点路径都在<code>/actuator/*</code>，是否可以自定义呢？是的，可以自定义这个前缀，只需要在 properties 中配置如下内容即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.base-path=/monitor</span><br></pre></td></tr></table></figure><p>再次访问上面的 URL，就需要将 <code>actuator/</code> 换成 <code>monitor/</code> 了。</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>虽然 Actuator 提供了很方便的监控和管理服务的能力，但是试想一下让任何其他的服务都可以访问，会存在一些安全隐患，SpringBoot 提供了 <code>security </code> 模块，可以帮助我们更加安全的使用 Actuator。集成 <code>security</code> 也很简单，下面我们具体说说如何使用吧。</p><p>首先，需要在 pom 文件中，添加如下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其次，配置工程的 properties 文件，加入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.security.user.name=actuator-self</span><br><span class="line">spring.security.user.password=actuator-admin</span><br><span class="line">spring.security.user.roles=ACTUATOR_ADMIN</span><br></pre></td></tr></table></figure><p>用户名（name）和密码（password），可以根据自己的实际情况自定义。</p><p>最后，添加一个配置类 MSActuatorSecurityConfig，该类继承 WebSecurityConfigurerAdapter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.security.servlet.PathRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSActuatorSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .requestMatchers(EndpointRequest.toAnyEndpoint())</span><br><span class="line">                .hasRole(<span class="string">&quot;ACTUATOR_ADMIN&quot;</span>)</span><br><span class="line">                .requestMatchers(PathRequest.toStaticResources().atCommonLocations())</span><br><span class="line">                .permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下次再次访问  <code>http://localhost:8080/monitor</code>，就会提示你输入用户名和密码了。</p><p>下图是使用 Chrome 浏览器显示的效果。</p><p><img src="/upload/images/2020/05/01/2.png"></p><p>输入配置的用户名和密码登录就可以访问到数据了。</p><p>另外为了安全，可以单独设置 Actuator 的管理端口并配置不对外网开放，如下配置独立的端口 <code>1102</code>，然后可以在防火墙上做下限制即 <code>1102</code> 端口仅用于内网访问即可。</p><p>在 properties 中增加如下配置，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置独立的端口</span><br><span class="line">management.server.port=1012</span><br></pre></td></tr></table></figure><p>使用效果：</p><p><img src="/upload/images/2020/05/01/3.png"></p><hr><p><strong>人无千日好，花无百日红，早时不算计，过后一场空。~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot Actuator 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 结合MySQL实现登录注册</title>
      <link href="/2020/04/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%BB%93%E5%90%88MySQL%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/"/>
      <url>/2020/04/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%BB%93%E5%90%88MySQL%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>继 <a href="http://www.veryitman.com/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/">MySQL8.0.15在Win10上的折腾记</a> 和 <a href="http://www.veryitman.com/2019/12/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1-MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/">微服务: MySQL基本操作</a> 后，由于个人原因没能继续创作，从今天开始补上，继续前进💪。</p><p>本篇是 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务系列</a> 的第 N 篇，本篇结合 MySQL 和 SpringBoot 实现用户登录注册，算是一个小实战也是对之前知识点的一个小结。</p><p>在阅读本篇内容之前，需要大家做好如下几件事情：</p><ul><li>在本机安装了 MySQL，并且可以正常使用；如果你用的是 Windows10，可以参考 <a href="http://www.veryitman.com/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/">MySQL8.0.15在Win10上的折腾记</a> 这篇文章；</li><li>已经搭建好了 SpringBoot 的开发环境；可以参考 <a href="http://www.veryitman.com/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/">微服务: 想办法让项目运行起来</a> 来搭建环境；</li><li>能使用 SpringBoot 正确连接 MySQL，实现简单的增删改查（CRUD）；可以参考 <a href="http://www.veryitman.com/2019/12/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1-MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/">微服务: MySQL基本操作</a> 这篇文章；</li><li>理解跨域问题，请务必先阅读 <a href="%5Bhttp://www.veryitman.com/2019/08/31/%E8%B7%A8%E5%9F%9F%E5%92%8COPTIONS%E8%BF%99%E5%AF%B9%E6%AC%A2%E5%96%9C%E5%86%A4%E5%AE%B6/">跨域和OPTIONS这对欢喜冤家</a>；</li><li>树立信心，坚持不懈，不怕困难；</li></ul><p>本篇文章主要内容：</p><ul><li>网页端，提供注册、登录的入口，请求服务端提供的 API，请求采用 Ajax；</li><li>服务端，提供注册、登录的 API，处理用户注册和登录的请求，并能正确读写 MySQL 数据库；</li></ul><p>代码全部放在 <a href="https://github.com/veryitman/MSTutorial/tree/master">Github</a>，有需要的朋友们可以自行获取。</p><h2 id="登录注册流程图"><a href="#登录注册流程图" class="headerlink" title="登录注册流程图"></a>登录注册流程图</h2><p>本篇分享的用户注册和登录流程比较简单，看图说话。</p><p><img src="/upload/images/2020/04/11/7.png" alt="1568529858131"></p><h2 id="前端效果"><a href="#前端效果" class="headerlink" title="前端效果"></a>前端效果</h2><p>本篇中的前端页面很简单，我本人对前端的认知是个二半吊子，现学现卖，主要是配合接口做一些实例，没啥技术含量。使用前端开发，给我最大的感觉就是方便，简洁。</p><p><strong>1、注册页面</strong></p><p><img src="/upload/images/2020/04/11/1.png" alt="1568529858131"></p><p>注册成功会自动跳转到登录页面。</p><p><strong>2、登录页面</strong></p><p><img src="/upload/images/2020/04/11/2.png" alt="1568529858131"></p><p>登录失败会自动跳转到注册页面。</p><p>页面和逻辑的源代码对应分别如下</p><p><img src="/upload/images/2020/04/11/3.png" alt="1568529858131"></p><p><strong><font color=red>1</font></strong> -&gt; <code>ms_login.html</code> 是登录页面的 HTML 文件；</p><p><strong><font color=red>2</font></strong> -&gt; <code>ms_signup.html</code> 是注册页面的 HTML 文件；</p><p><strong><font color=red>3</font></strong> -&gt; <code>ms_user.js</code> 是 Ajax 的请求逻辑的 JavaScript 代码。</p><h2 id="配置-MySQL-的连接"><a href="#配置-MySQL-的连接" class="headerlink" title="配置 MySQL 的连接"></a>配置 MySQL 的连接</h2><p>既然要使用 MySQL，首先要在工程中配置跟 MySQL 相关的连接参数。 </p><p>在工程的 <code>application.properties</code> 文件中，配置下面参数即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># jdbc</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># charset=utf8mb4</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mzc_user?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line"># 设置为你自己 MySQL 的密码</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure><p>具体的这些参数含义在 <a href="http://www.veryitman.com/2019/12/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1-MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/">微服务: MySQL基本操作</a>  这篇文章中有详细的讲解。</p><h2 id="编写-API"><a href="#编写-API" class="headerlink" title="编写 API"></a>编写 API</h2><p>源文件 <code>MSSigninController</code> 实现了登录的 API，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signup&quot;)</span> <span class="comment">// 注意这里不要在signup前后加&quot;/&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSignupController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MSUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &#123;&quot;*&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/name&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">signup</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">        <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MSResponse</span>();</span><br><span class="line">        <span class="type">MSUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userName || <span class="literal">null</span> == userPwd || userName.length() &lt;= <span class="number">0</span> || userPwd.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">MSResponseEnum</span> <span class="variable">signupError</span> <span class="operator">=</span> MSResponseEnum.SignupInvalidInfo;</span><br><span class="line">            response.setMsg(signupError.getMsg());</span><br><span class="line">            response.setCode(signupError.getCode());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建user表</span></span><br><span class="line">            userService.createUserTable();</span><br><span class="line">            <span class="comment">// 检查用户数据库的‘user’表中是否有该用户？</span></span><br><span class="line">            List&lt;Map&gt; query_users = userService.queryUserByUserName(userName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == query_users || query_users.isEmpty()) &#123;<span class="comment">// 没有该用户的数据</span></span><br><span class="line">                user = MSUserUtil.createUser(userName, userPwd);</span><br><span class="line">                <span class="comment">// 插入一条用户数据到数据表中</span></span><br><span class="line">                userService.addUser(user);</span><br><span class="line">                response.setCode(MSResponseEnum.SUCCESS.getCode());</span><br><span class="line">                response.setMsg(MSResponseEnum.SUCCESS.getMsg());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 用户数据库的‘user’表中有该用户信息</span></span><br><span class="line">                <span class="comment">// 返回错误信息：该用户已经注册过了</span></span><br><span class="line">                <span class="type">MSResponseEnum</span> <span class="variable">signupError</span> <span class="operator">=</span> MSResponseEnum.SignupHasExistUser;</span><br><span class="line">                response.setMsg(signupError.getMsg());</span><br><span class="line">                response.setCode(signupError.getCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setResults(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源文件 <code>MSSignupController</code> 实现了注册的 API，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signin&quot;)</span> <span class="comment">// 注意这里不要在signin前后加&quot;/&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSigninController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MSUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &#123;&quot;*&quot;, &quot;http://localhost:8082&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/name&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">sigin</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">        <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MSResponse</span>();</span><br><span class="line">        <span class="type">MSUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userName || <span class="literal">null</span> == userPwd || userName.length() &lt;= <span class="number">0</span> || userPwd.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">MSResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSResponseEnum.Login4SiginInvalidInfo;</span><br><span class="line">            response.setCode(responseEnum.getCode());</span><br><span class="line">            response.setMsg(responseEnum.getMsg());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 检查用户数据库的‘user’表中是否有该用户？</span></span><br><span class="line">            List&lt;Map&gt; query_users = userService.queryUserByUserName(userName);</span><br><span class="line">            <span class="keyword">if</span> (query_users.isEmpty()) &#123;<span class="comment">// 没有该用户</span></span><br><span class="line">                <span class="type">MSResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSResponseEnum.LoginNoSuchUser;</span><br><span class="line">                response.setCode(responseEnum.getCode());</span><br><span class="line">                response.setMsg(responseEnum.getMsg());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 有这个用户</span></span><br><span class="line">                <span class="type">Map</span> <span class="variable">user_map</span> <span class="operator">=</span> query_users.get(<span class="number">0</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">query_user_name</span> <span class="operator">=</span> (String) user_map.get(<span class="string">&quot;accountName&quot;</span>);</span><br><span class="line">                <span class="comment">// 没有对应的用户名</span></span><br><span class="line">                <span class="keyword">if</span> (!query_user_name.equals(userName)) &#123;</span><br><span class="line">                    <span class="type">MSResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSResponseEnum.LoginNoSuchUser;</span><br><span class="line">                    response.setCode(responseEnum.getCode());</span><br><span class="line">                    response.setMsg(responseEnum.getMsg());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 查询到了该用户</span></span><br><span class="line">                    <span class="comment">// 将查询出来的map对象使用FastJson转换为MSUser对象</span></span><br><span class="line">                    user = JSON.parseObject(JSON.toJSONString(user_map), MSUser.class);</span><br><span class="line">                    <span class="type">MSResponseEnum</span> <span class="variable">rspEnum</span> <span class="operator">=</span> MSResponseEnum.SUCCESS;</span><br><span class="line">                    response.setCode(rspEnum.getCode());</span><br><span class="line">                    response.setMsg(rspEnum.getMsg());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setResults(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比于之前的代码逻辑，现在的代码无非就是加入了操作数据库的逻辑。代码比较简单，看注释就可以看明白。</p><p>操作数据库的代码，都在 <code>MSUserServiceImpl</code> 这个实现类中。我就不一一的粘贴代码了。有兴趣的朋友可以自行到 <a href="https://github.com/veryitman/MSTutorial/tree/master">Github</a> 下载。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>首先，启动工程，让工程在本地正常运行起来。如果你还没有搭建 SpringBoot 的开发环境，建议参考 <a href="http://www.veryitman.com/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/">微服务-想办法让项目运行起来</a> 这篇文章。</p><p>然后在浏览器打开注册页面，建议使用 Chrome 浏览器操作。如下图，我使用 <code>foobar</code> 用户名和 <code>foobar</code> 密码进行注册。</p><p><img src="/upload/images/2020/04/11/4.png" alt="1568529858131"></p><p>点击注册按钮，成功后用终端登录 MySQL 数据库，看看是否有数据。如下图，可以看到数据库和对应的表。</p><p><img src="/upload/images/2020/04/11/5.png" alt="1568529858131"></p><p>可以从下图看出，数据已经成功的写入数据库中了。</p><p><img src="/upload/images/2020/04/11/6.png" alt="1568529858131"></p><p>最后，打开登录界面，输入用户名称和密码都是 <code>foobar</code> 的就可以登录成功，说明从数据库读取数据也是正常的。</p><p>今天就说这么多吧，下次再见！</p><hr><p><strong>从现在做起，一切都还来得及。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC坑集之block作为函数参数</title>
      <link href="/2020/02/27/OC%E5%9D%91%E9%9B%86%E4%B9%8Bblock%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
      <url>/2020/02/27/OC%E5%9D%91%E9%9B%86%E4%B9%8Bblock%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>对于 OC（Objective-C，苹果推出的自家编程语言） 的争论一直不休，对于一门语言，我觉得只要能解决你的问题就够了。</p><p>评论一门编程语言的好坏之前，需要我们真正的去用它，OC 孰好孰坏，需要你自己去尝试。</p><p>OC 坑集，主要记载使用 OC 开发项目遇到的问题，尽量简洁明了，希望大家喜欢。</p><p><code>block</code> 语句块可以作为函数的参数, 在项目中都经常被作为回调来使用。</p><p>如果你还不熟悉 <code>block</code> 语法，请自行 google，这里不讲 <code>block</code> 语法。我们下面直接进入主题。</p><p><strong>创建一个 OC 类</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FoolBar</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)makeFool:(<span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *))callback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;FoolBar.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FoolBar</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)makeFool:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> *))callback</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;makeFool | callback.&quot;</span>);</span><br><span class="line">    callback(<span class="string">@&quot;This is a block parameter.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>main.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;FoolBar.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        FoolBar *fb = [[FoolBar alloc] init];</span><br><span class="line">        [fb makeFool:^(<span class="built_in">NSString</span> *) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家看到这里，应该觉得没什么问题。</p><p>我刚开始也是行事冲冲的，但编译器给了个大大的 Error, 大致意思是参数丢失。</p><p>经过一番思想上面的斗争，终于解决了问题。</p><p>在声明带有 <code>block</code> 语句的方法时，需要带上参数名称或者调用者自己写上参数名称。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)makeFool:(<span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *param))callback;</span><br></pre></td></tr></table></figure><p>重新给它整上，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;FoolBar.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        FoolBar *fb = [[FoolBar alloc] init];</span><br><span class="line">        [fb makeFool:^(<span class="built_in">NSString</span> *param) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;param = %@&quot;</span>, param);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>block</code> 作为函数参数的时候，建议使用 <code>typedef</code> 定义 <code>block</code>.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^OnFoolCallback)(<span class="built_in">NSString</span> *name);</span><br></pre></td></tr></table></figure><p>定义和实现</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)productFool:(OnFoolCallback)callback;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)productFool:(OnFoolCallback)callback</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;productFool | callback.&quot;</span>);</span><br><span class="line">    callback(<span class="string">@&quot;This is a block parameter: mark.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试和使用，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;FoolBar.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        FoolBar *fb = [[FoolBar alloc] init];</span><br><span class="line">        [fb makeFool:^(<span class="built_in">NSString</span> *param) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;param = %@&quot;</span>, param);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        [fb productFool:^(<span class="built_in">NSString</span> *name) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;name = %@&quot;</span>, name);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>盼望疫情早日结束，每个人都能回归到正常的生活当中去！</strong></p><p><img src="http://www.veryitman.com/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Objective-C block </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSL: 实战-RSA分段解密</title>
      <link href="/2020/01/05/OpenSSL-%E5%AE%9E%E6%88%98-RSA%E5%88%86%E6%AE%B5%E8%A7%A3%E5%AF%86/"/>
      <url>/2020/01/05/OpenSSL-%E5%AE%9E%E6%88%98-RSA%E5%88%86%E6%AE%B5%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇是继 <a href="http://www.veryitman.com/2019/12/29/OpenSSL-%E7%AE%80%E5%8D%95%E6%98%93%E4%B8%8A%E6%89%8B%E7%9A%84RSA%E5%8A%A0%E8%A7%A3%E5%AF%86/">OpenSSL: 简单易上手的RSA加解密</a> 后的补充篇，实战篇。</p><p>在实际项目中，并没有像上篇文章写的那么简单，实际情况要复杂的多。万变不离其宗，抽丝剥茧，复杂事务的背后一定是有其本质原因和原理的存在，而我们就是挖掘原理，探索本质的福尔摩斯。</p><p>今天这篇文章，带领大家参与到实际项目中运用RSA加解密，在阅读下面内容之前，期望大家可以下载 <code>openssl</code> 的源码，或者下载我 <a href="http://www.veryitman.com/2019/12/29/OpenSSL-%E7%AE%80%E5%8D%95%E6%98%93%E4%B8%8A%E6%89%8B%E7%9A%84RSA%E5%8A%A0%E8%A7%A3%E5%AF%86/">上篇文中</a> 的代码示例。</p><p>我下载的是 <a href="https://github.com/openssl/openssl/releases/tag/OpenSSL_1_1_0f">openssl-source-1.1.0f</a> 这个版本的源码，正好对应我从 <a href="https://www.npcglib.org/~stathis/blog/precompiled-openssl/">precompiled-openssl</a> 下载的编译版本。</p><p><img src="/upload/images/2020/01/05/1.png" alt="1"></p><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>该项目的开发语言仍然采用C语言来实现，我们借助 <code>openssl</code> 来模拟实际项目中的案例。</p><p>服务端使用 RSA 加密原始数据，然后采用 Base64 编码该加密数据经过 HTTP 传输给到客户端；</p><p>客户端接收到该数据，先使用 Base64 解码数据，然后再使用 RSA 解密数据，最终得到原始数据。</p><p><strong>这里特别注意，客户端收到的数据大小可能会大于 128 字节，我们知道 RSA 加密明文最大长度 117 字节，而解密的最大值是 128 字节，所以超过该大小需要分段解密数据。</strong></p><p>大概流程图如下：</p><p><img src="/upload/images/2020/01/05/2.png" alt="1"></p><p>很简单的一个项目，对吧，接着往下看吧 :)-</p><h2 id="解个小惑"><a href="#解个小惑" class="headerlink" title="解个小惑"></a>解个小惑</h2><p>也许有些朋友会问，为毛 RSA 加密的明文大小是 117 字节，而解密的最大字节数是 128 字节，两者一样不是更好吗，至少好理解呀？</p><p>得出上面结论的前提是我们RSA密钥长度是 1024 位即 128 字节（1024&#x2F;8&#x3D;128），同理如果是 512 位的密钥，那么最大的 RSA 解密字节长度应该是（512&#x2F;8）64 字节，最大加密的明文长度是（64-11）53 字节。</p><p>在 openssl 源码中，我们可以看到如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> RSA_PKCS1_PADDING_SIZE  11</span></span><br></pre></td></tr></table></figure><p>在 <code>rsa_sign.c</code> 文件中可以看到 RSA_sign 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">RSA_sign</span><span class="params">(<span class="type">int</span> type, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *m, <span class="type">unsigned</span> <span class="type">int</span> m_len,</span></span><br><span class="line"><span class="params">             <span class="type">unsigned</span> <span class="type">char</span> *sigret, <span class="type">unsigned</span> <span class="type">int</span> *siglen, RSA *rsa)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> encrypt_len, encoded_len = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *tmps = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *encoded = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rsa-&gt;meth-&gt;rsa_sign) &#123;</span><br><span class="line">        <span class="keyword">return</span> rsa-&gt;meth-&gt;rsa_sign(type, m, m_len, sigret, siglen, rsa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Compute the encoded digest. */</span></span><br><span class="line">    <span class="keyword">if</span> (type == NID_md5_sha1) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * NID_md5_sha1 corresponds to the MD5/SHA1 combination in TLS 1.1 and</span></span><br><span class="line"><span class="comment">         * earlier. It has no DigestInfo wrapper but otherwise is</span></span><br><span class="line"><span class="comment">         * RSASSA-PKCS1-v1_5.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (m_len != SSL_SIG_LENGTH) &#123;</span><br><span class="line">            RSAerr(RSA_F_RSA_SIGN, RSA_R_INVALID_MESSAGE_LENGTH);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        encoded_len = SSL_SIG_LENGTH;</span><br><span class="line">        encoded = m;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!encode_pkcs1(&amp;tmps, &amp;encoded_len, type, m, m_len))</span><br><span class="line">            <span class="keyword">goto</span> err;</span><br><span class="line">        encoded = tmps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (encoded_len &gt; RSA_size(rsa) - RSA_PKCS1_PADDING_SIZE) &#123;</span><br><span class="line">        RSAerr(RSA_F_RSA_SIGN, RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    encrypt_len = RSA_private_encrypt(encoded_len, encoded, sigret, rsa,</span><br><span class="line">                                      RSA_PKCS1_PADDING);</span><br><span class="line">    <span class="keyword">if</span> (encrypt_len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">    *siglen = encrypt_len;</span><br><span class="line">    ret = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">err:</span><br><span class="line">    OPENSSL_clear_free(tmps, (<span class="type">size_t</span>)encoded_len);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<code>RSA_PKCS1_PADDING</code> 这种填充模式是占用了 11 个字节的，那么 127+11 正好也是 128 字节。</p><p>每次RSA加密的明文的长度是受RSA填充模式限制的，如下表：</p><table><thead><tr><th>填充方式</th><th>输入</th><th>输出</th><th>备注</th></tr></thead><tbody><tr><td>RSA_PKCS1_PADDING</td><td>必须比RSA钥模长(modulus) 短至少11个字节, 也就是RSA_size(rsa) – 11，对于1024bit的密钥，RSA_size(rsa)&#x3D;128字节，即明文为128-11&#x3D;117字节；如果输入的明文过长，必须切割，然后填充。</td><td>和modulus一样长</td><td>最常用的填充方式</td></tr><tr><td>RSA_PKCS1_OAEP_PADDING</td><td>RSA_size(rsa) – 41</td><td>和modulus一样长</td><td>最优非对称填充OAEP，安全性是最高的</td></tr><tr><td>RSA_NO_PADDING</td><td>可以和RSA钥模长一样长，如果输入的明文过长，必须切割，然后填充。</td><td>和modulus一样长</td><td>-</td></tr></tbody></table><p>这里注意下面结论：</p><ul><li>在不同的padding模式下，使用相同长度的密钥可以加密的数据最大长度不同；</li><li>在不同密钥长度下，使用相同的padding模式可以加密的数据最大长度也不同；</li></ul><p>可以阅读 <a href="https://tools.ietf.org/html/rfc2313">rfc2313</a> 中关于 <code>PKCS #1: RSA Encryption Version 1.5</code> 的部分。</p><h2 id="开战"><a href="#开战" class="headerlink" title="开战"></a>开战</h2><blockquote><p>实战代码主要在 <code>main.c</code> 文件中的 <code>example_rsa3()</code> 函数中。</p></blockquote><p>原始数据是字符串 <code>www.veryitman.com</code>，如下还包括了公私钥。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始数据为字符串：www.veryitman.com</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> plainText[] = <span class="string">&quot;www.veryitman.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> publicKey[] = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line"><span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrPgCMJW17JN2DW7tZFk/FB6pU\n&quot;</span></span><br><span class="line"><span class="string">&quot;pLvLOo6G/EuND8XZptffXbyiY2VscMRhP+kKVeaLO9HuEYR3Zl78x8oR6prytstc\n&quot;</span></span><br><span class="line"><span class="string">&quot;/MueersWDxh4iGSHsZXGxA41hXrXLRElrSTRc43ea18o0zMxZoVZiR2JFt7QcgM+\n&quot;</span></span><br><span class="line"><span class="string">&quot;T6eOrvj59MhXv9O46QIDAQAB\n&quot;</span></span><br><span class="line"><span class="string">&quot;-----END PUBLIC KEY-----\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> privateKey[] = <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----\n&quot;</span></span><br><span class="line"><span class="string">&quot;MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKs+AIwlbXsk3YNb\n&quot;</span></span><br><span class="line"><span class="string">&quot;u1kWT8UHqlSku8s6job8S40Pxdmm199dvKJjZWxwxGE/6QpV5os70e4RhHdmXvzH\n&quot;</span></span><br><span class="line"><span class="string">&quot;yhHqmvK2y1z8y556uxYPGHiIZIexlcbEDjWFetctESWtJNFzjd5rXyjTMzFmhVmJ\n&quot;</span></span><br><span class="line"><span class="string">&quot;HYkW3tByAz5Pp46u+Pn0yFe/07jpAgMBAAECgYBj1YH8MtXhNVzveEuBZMCc3hsv\n&quot;</span></span><br><span class="line"><span class="string">&quot;vdq+YSU3DV/+nXN7sQmp77xJ8CjxT80t5VS38dy2z+lUImJYOhamyNPGHkC2y84V\n&quot;</span></span><br><span class="line"><span class="string">&quot;7i5+e6ScQve1gnwHqRKGBjtSCaYOqm9rTDECCTT1oMU26sfYznWlJqMrkJp1jWn7\n&quot;</span></span><br><span class="line"><span class="string">&quot;aAwr+3FcX2XhD74ZAQJBAN34Y6fmHLRPv21MsdgGqUjKgyFvJfLUmtFFgb6sLEWc\n&quot;</span></span><br><span class="line"><span class="string">&quot;k22J3BAFAcNCTLYHFZwMhL/nwaw9/7rIUJD+lcl6n3cCQQDFfrN14qKC3GJfoBZ8\n&quot;</span></span><br><span class="line"><span class="string">&quot;k9S6F7Ss514DDPzIuenbafhoUjZDVcjLw9EmYZQjpfsQ3WdNICUKRrDHZay1Pz+s\n&quot;</span></span><br><span class="line"><span class="string">&quot;YkKfAkB+OKfaquS5t/t/2LPsxuTuipIEqiKnMjSTOfYsidVnBEFlcZZc2awF76aV\n&quot;</span></span><br><span class="line"><span class="string">&quot;f/PO1+OJCO2910ebXBtMSCi++GbDAkEAmc7zNPwsVH4OnyquWJdJNSUBMSd/sCCN\n&quot;</span></span><br><span class="line"><span class="string">&quot;PkaMOrVtINHmMMq+dvMqEBoupRS/U4Ma0JYYQsiLJL+qof2AOWDNQQJAcquLGHLT\n&quot;</span></span><br><span class="line"><span class="string">&quot;eGDDLluHo+kkIGwZi4aK/fDoylZ0NCEtYyMtShQ3JmllST9kmb9NJX2gMsejsirc\n&quot;</span></span><br><span class="line"><span class="string">&quot;H6ObxqZPbka6UA==\n&quot;</span></span><br><span class="line"><span class="string">&quot;-----END RSA PRIVATE KEY-----\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>对数据进行私钥加密，示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 私钥加密</span></span><br><span class="line"><span class="type">int</span> encrypted_length = private_key_encrypt(plainText, len, privateKey, encrypted_str);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == encrypted_length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Private Encrypt failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私钥加密之后，进行 Base64 编码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *base64_content;</span><br><span class="line"><span class="type">size_t</span> encrypted_str_length = <span class="built_in">strlen</span>(encrypted_str);</span><br><span class="line"><span class="type">int</span> encode_res = mzc_base64_encode(encrypted_str, encrypted_str_length, &amp;base64_content);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != encode_res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Base64 encode failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Base64 encode content: %s\n\n&quot;</span>, base64_content);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Base64 encode content&#x27;s length: %i\n\n&quot;</span>, <span class="built_in">strlen</span>(base64_content));</span><br></pre></td></tr></table></figure><p>至此，上面两个步骤就模拟完成了服务端加密的过程。下面我们来继续模拟客户端解密的过程。</p><p>首先，对 Base64 编码之后的数据进行 Base64 解码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *base64DecodeOutput;</span><br><span class="line"><span class="type">size_t</span> decode_output_length;</span><br><span class="line"><span class="type">int</span> decode_res = mzc_base64_decode(base64_content, &amp;base64DecodeOutput, &amp;decode_output_length);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;base64 decode content: %s\n\n&quot;</span>, base64DecodeOutput);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;base64 decode content&#x27;s length: %i\n\n&quot;</span>, decode_output_length);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != decode_res)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Base64 decode failed\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下打印结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 decode content<span class="number">&#x27;</span>s length: <span class="number">160</span></span><br></pre></td></tr></table></figure><p>很明显，长度要大于 128，需要进行分段处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最大解密长度</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RSA_MAX_DECRYPT_SIZE 128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每段解密的长度</span></span><br><span class="line"><span class="type">int</span> chunk = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp_dstr[RSA_MAX_DECRYPT_SIZE];</span><br><span class="line"><span class="built_in">memset</span>(tmp_dstr, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(tmp_dstr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// （数据被）分段解密（公钥解密）</span></span><br><span class="line"><span class="keyword">while</span> (chunk &lt;= decode_output_length)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> decrypted_length = public_key_decrypt(base64DecodeOutput, RSA_MAX_DECRYPT_SIZE, publicKey, tmp_dstr);</span><br><span class="line">    <span class="built_in">memcpy</span>(decrypted_str, tmp_dstr, decrypted_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Current decrypted content length =%d\n&quot;</span>, decrypted_length);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == decrypted_length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Public Decrypt failed\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    chunk += decrypted_length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;......\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Final decrypted string =%s\n&quot;</span>, decrypted_str);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">Final decrypted <span class="built_in">string</span> =www.veryitman.com</span><br></pre></td></tr></table></figure><p>至此整个过程简单模拟结束。</p><p>大家如果感兴趣的话，可以实现分段加密的过程。我就不再演示这个过程了，后续加入到源代码中去。</p><hr><p><strong>问君能有几多愁，恰似一江春水向东流。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL VS2017 RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSL: 简单易上手的RSA加解密</title>
      <link href="/2019/12/29/OpenSSL-%E7%AE%80%E5%8D%95%E6%98%93%E4%B8%8A%E6%89%8B%E7%9A%84RSA%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
      <url>/2019/12/29/OpenSSL-%E7%AE%80%E5%8D%95%E6%98%93%E4%B8%8A%E6%89%8B%E7%9A%84RSA%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇文章是继 <a href="%5Bhttp://www.veryitman.com/2019/11/23/OpenSSL-%E7%94%A8VS2017%E5%88%9B%E5%BB%BAC%E5%B7%A5%E7%A8%8B/">OpenSSL: 用VS2017创建C工程</a>、<a href="http://www.veryitman.com/2019/11/23/OpenSSL-%E5%AE%8C%E6%88%90VS2017%E7%9A%84%E9%85%8D%E7%BD%AE/">OpenSSL: 完成VS2017的配置</a> 两篇文章的第3篇，前两篇分别跟大家分享了如何在 <code>visual studio2017</code> 中创建C工程，配置OpenSSL的开发环境以及使用 <code>openssl</code> 开源库实现base64的编解码。</p><p>本篇跟大家分享如何使用  <code>openssl</code> 开源库实现 RSA 的加密和解密，不过这一篇是对简单的数据进行加解密，下一篇继续跟大家分享复杂一点的 RSA 加解密过程以及实例代码。</p><p>2019 即将被画上句号，自己还有很多愿望没有实现。一拿起书就感觉困，一拿起手机觉得黑夜里阳光明媚，无药可救了呀！</p><h2 id="获取公、私钥"><a href="#获取公、私钥" class="headerlink" title="获取公、私钥"></a>获取公、私钥</h2><p>在 <a href="https://www.npcglib.org/~stathis/blog/precompiled-openssl/">precompiled-openssl</a> 获取的压缩包中，解压可以在 bin64或者bin（32位操作系统使用） 目录下面找到 <code>openssl.exe</code> 文件，双击打开即可。</p><h3 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h3><p>执行下面代码，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genrsa -out rsa_private_key.pem 1024</span><br></pre></td></tr></table></figure><p>此时在 bin64 目录下会生成 <code>rsa_private_key.pem</code> 文件，即私钥文件；</p><p>将 RSA 私钥转换成 <code>PKCS8</code> 格式，执行如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</span><br></pre></td></tr></table></figure><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>执行下面代码，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</span><br></pre></td></tr></table></figure><p>此时在 bin64 目录下会生成 <code>rsa_public_key.pem</code> 文件，即公钥文件；</p><p>用VS Code打开这两个文件，可以看到具体内容，在我的机器上生成的公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrPgCMJW17JN2DW7tZFk/FB6pU</span><br><span class="line">pLvLOo6G/EuND8XZptffXbyiY2VscMRhP+kKVeaLO9HuEYR3Zl78x8oR6prytstc</span><br><span class="line">/MueersWDxh4iGSHsZXGxA41hXrXLRElrSTRc43ea18o0zMxZoVZiR2JFt7QcgM+</span><br><span class="line">T6eOrvj59MhXv9O46QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>私钥，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKs+AIwlbXsk3YNb</span><br><span class="line">u1kWT8UHqlSku8s6job8S40Pxdmm199dvKJjZWxwxGE/6QpV5os70e4RhHdmXvzH</span><br><span class="line">yhHqmvK2y1z8y556uxYPGHiIZIexlcbEDjWFetctESWtJNFzjd5rXyjTMzFmhVmJ</span><br><span class="line">HYkW3tByAz5Pp46u+Pn0yFe/07jpAgMBAAECgYBj1YH8MtXhNVzveEuBZMCc3hsv</span><br><span class="line">vdq+YSU3DV/+nXN7sQmp77xJ8CjxT80t5VS38dy2z+lUImJYOhamyNPGHkC2y84V</span><br><span class="line">7i5+e6ScQve1gnwHqRKGBjtSCaYOqm9rTDECCTT1oMU26sfYznWlJqMrkJp1jWn7</span><br><span class="line">aAwr+3FcX2XhD74ZAQJBAN34Y6fmHLRPv21MsdgGqUjKgyFvJfLUmtFFgb6sLEWc</span><br><span class="line">k22J3BAFAcNCTLYHFZwMhL/nwaw9/7rIUJD+lcl6n3cCQQDFfrN14qKC3GJfoBZ8</span><br><span class="line">k9S6F7Ss514DDPzIuenbafhoUjZDVcjLw9EmYZQjpfsQ3WdNICUKRrDHZay1Pz+s</span><br><span class="line">YkKfAkB+OKfaquS5t/t/2LPsxuTuipIEqiKnMjSTOfYsidVnBEFlcZZc2awF76aV</span><br><span class="line">f/PO1+OJCO2910ebXBtMSCi++GbDAkEAmc7zNPwsVH4OnyquWJdJNSUBMSd/sCCN</span><br><span class="line">PkaMOrVtINHmMMq+dvMqEBoupRS/U4Ma0JYYQsiLJL+qof2AOWDNQQJAcquLGHLT</span><br><span class="line">eGDDLluHo+kkIGwZi4aK/fDoylZ0NCEtYyMtShQ3JmllST9kmb9NJX2gMsejsirc</span><br><span class="line">H6ObxqZPbka6UA==</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>紧接着我会使用这对公私钥进行编码。</p><h2 id="RSA-实战"><a href="#RSA-实战" class="headerlink" title="RSA 实战"></a>RSA 实战</h2><blockquote><p>RSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。</p><p>1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个相同的算法，但他的发现被列入机密，一直到1997年才被发表。</p><p>对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。</p><p>1983年麻省理工学院在美国为RSA算法申请了专利。这个专利2000年9月21日失效。由于该算法在申请专利前就已经被发表了，在世界上大多数其它地区这个专利权不被承认。</p></blockquote><p>新建头文件 <code>mzc_rsa.h</code>，声明几个函数，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 公钥解密 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">public_key_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *enc_data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *decrypted)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 私钥加密 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">private_key_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *encrypted)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 公钥加密 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">public_key_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *encrypted)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 私钥解密 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">private_key_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *enc_data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *decrypted)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的实现文件 <code>mzc_rsa.c</code>，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mzc_rsa.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/pem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/rsa.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/evp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/bio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/buffer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PADDING = RSA_PKCS1_PADDING;</span><br><span class="line"></span><br><span class="line">RSA *<span class="title function_">createRSA</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">int</span> public_token)</span></span><br><span class="line">&#123;</span><br><span class="line">RSA *rsa = <span class="literal">NULL</span>;</span><br><span class="line">BIO *keybio;</span><br><span class="line">keybio = BIO_new_mem_buf(key, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (keybio == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to create key BIO&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (public_token)</span><br><span class="line">&#123;</span><br><span class="line">rsa = PEM_read_bio_RSA_PUBKEY(keybio, &amp;rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">rsa = PEM_read_bio_RSAPrivateKey(keybio, &amp;rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rsa == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to create RSA&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rsa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">public_key_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *enc_data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *decrypted)</span></span><br><span class="line">&#123;</span><br><span class="line">RSA *rsa = createRSA(key, <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> result = RSA_public_decrypt(data_len, enc_data, decrypted, rsa, PADDING);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">private_key_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *encrypted)</span></span><br><span class="line">&#123;</span><br><span class="line">RSA *rsa = createRSA(key, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> result = RSA_private_encrypt(data_len, data, encrypted, rsa, PADDING);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">public_key_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *encrypted)</span></span><br><span class="line">&#123;</span><br><span class="line">RSA *rsa = createRSA(key, <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> result = RSA_public_encrypt(data_len, data, encrypted, rsa, PADDING);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">private_key_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *enc_data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *decrypted)</span></span><br><span class="line">&#123;</span><br><span class="line">RSA *rsa = createRSA(key, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> result = RSA_private_decrypt(data_len, enc_data, decrypted, rsa, PADDING);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里使用的 RSA 对齐模式是 <code>RSA_PKCS1_PADDING</code>。</p><p>在测试的主函数（main）中，使用明文 <code>www.veryitman.com</code> 作为示例进行加密和解密操作，我在下面只列出关键实现。具体代码可以去 <a href="https://github.com/veryitman/c-openssl">Github</a> 下载，<strong>注意</strong> clone <code>rsa-feature</code> 这个分支。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 公钥加密， 私钥解密 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//原始数据为字符串：www.veryitman.com</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> plainText[] = <span class="string">&quot;www.veryitman.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> publicKey[] = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line"><span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrPgCMJW17JN2DW7tZFk/FB6pU\n&quot;</span></span><br><span class="line"><span class="string">&quot;pLvLOo6G/EuND8XZptffXbyiY2VscMRhP+kKVeaLO9HuEYR3Zl78x8oR6prytstc\n&quot;</span></span><br><span class="line"><span class="string">&quot;/MueersWDxh4iGSHsZXGxA41hXrXLRElrSTRc43ea18o0zMxZoVZiR2JFt7QcgM+\n&quot;</span></span><br><span class="line"><span class="string">&quot;T6eOrvj59MhXv9O46QIDAQAB\n&quot;</span></span><br><span class="line"><span class="string">&quot;-----END PUBLIC KEY-----\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> privateKey[] = <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----\n&quot;</span></span><br><span class="line"><span class="string">&quot;MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKs+AIwlbXsk3YNb\n&quot;</span></span><br><span class="line"><span class="string">&quot;u1kWT8UHqlSku8s6job8S40Pxdmm199dvKJjZWxwxGE/6QpV5os70e4RhHdmXvzH\n&quot;</span></span><br><span class="line"><span class="string">&quot;yhHqmvK2y1z8y556uxYPGHiIZIexlcbEDjWFetctESWtJNFzjd5rXyjTMzFmhVmJ\n&quot;</span></span><br><span class="line"><span class="string">&quot;HYkW3tByAz5Pp46u+Pn0yFe/07jpAgMBAAECgYBj1YH8MtXhNVzveEuBZMCc3hsv\n&quot;</span></span><br><span class="line"><span class="string">&quot;vdq+YSU3DV/+nXN7sQmp77xJ8CjxT80t5VS38dy2z+lUImJYOhamyNPGHkC2y84V\n&quot;</span></span><br><span class="line"><span class="string">&quot;7i5+e6ScQve1gnwHqRKGBjtSCaYOqm9rTDECCTT1oMU26sfYznWlJqMrkJp1jWn7\n&quot;</span></span><br><span class="line"><span class="string">&quot;aAwr+3FcX2XhD74ZAQJBAN34Y6fmHLRPv21MsdgGqUjKgyFvJfLUmtFFgb6sLEWc\n&quot;</span></span><br><span class="line"><span class="string">&quot;k22J3BAFAcNCTLYHFZwMhL/nwaw9/7rIUJD+lcl6n3cCQQDFfrN14qKC3GJfoBZ8\n&quot;</span></span><br><span class="line"><span class="string">&quot;k9S6F7Ss514DDPzIuenbafhoUjZDVcjLw9EmYZQjpfsQ3WdNICUKRrDHZay1Pz+s\n&quot;</span></span><br><span class="line"><span class="string">&quot;YkKfAkB+OKfaquS5t/t/2LPsxuTuipIEqiKnMjSTOfYsidVnBEFlcZZc2awF76aV\n&quot;</span></span><br><span class="line"><span class="string">&quot;f/PO1+OJCO2910ebXBtMSCi++GbDAkEAmc7zNPwsVH4OnyquWJdJNSUBMSd/sCCN\n&quot;</span></span><br><span class="line"><span class="string">&quot;PkaMOrVtINHmMMq+dvMqEBoupRS/U4Ma0JYYQsiLJL+qof2AOWDNQQJAcquLGHLT\n&quot;</span></span><br><span class="line"><span class="string">&quot;eGDDLluHo+kkIGwZi4aK/fDoylZ0NCEtYyMtShQ3JmllST9kmb9NJX2gMsejsirc\n&quot;</span></span><br><span class="line"><span class="string">&quot;H6ObxqZPbka6UA==\n&quot;</span></span><br><span class="line"><span class="string">&quot;-----END RSA PRIVATE KEY-----\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> encrypted_str[<span class="number">128</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> decrypted_str[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要初始化，否则解密出来的字符串会有多余的乱码</span></span><br><span class="line"><span class="built_in">memset</span>(encrypted_str, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(encrypted_str));</span><br><span class="line"><span class="built_in">memset</span>(decrypted_str, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(decrypted_str));</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)plainText);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Encrypted length =%d\n&quot;</span>, len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥加密</span></span><br><span class="line"><span class="type">int</span> encrypted_length = public_key_encrypt(plainText, len, publicKey, encrypted_str);</span><br><span class="line"><span class="keyword">if</span> (encrypted_length == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Private Encrypt failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私钥解密</span></span><br><span class="line"><span class="type">int</span> decrypted_length = private_key_decrypt(encrypted_str, encrypted_length, privateKey, decrypted_str);</span><br><span class="line"><span class="keyword">if</span> (decrypted_length == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Public Decrypt failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Decrypted Text =%s\n&quot;</span>, decrypted_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Decrypted Length =%d\n&quot;</span>, decrypted_length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天到此为止，累了，睡觉了😜。</p><hr><p><strong>活着不是靠泪水搏取同情，而是靠汗水获得掌声~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL VS2017 RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中值得说的Handler之更新UI</title>
      <link href="/2019/12/21/Android%E4%B8%AD%E5%80%BC%E5%BE%97%E8%AF%B4%E7%9A%84Handler%E4%B9%8B%E6%9B%B4%E6%96%B0UI/"/>
      <url>/2019/12/21/Android%E4%B8%AD%E5%80%BC%E5%BE%97%E8%AF%B4%E7%9A%84Handler%E4%B9%8B%E6%9B%B4%E6%96%B0UI/</url>
      
        <content type="html"><![CDATA[<p>最近在看电视剧《庆余年》，被调皮的编剧逗得爱不释手，范闲同志从“潜龙勿用”直到大殿醉酒背诵唐诗300首，让众官瞠目结舌，也算是“飞龙在天”了，这一集(第27集)看的那叫一个过瘾。尤其范闲那句“我醉欲眠君且去，去你妈的…”，差点让我喷饭。</p><p>推荐大家周末可以看看，算是休闲一下吧！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>个人总是感觉 Android中更新 UI 很让人纠结！特此小结一下，算是抛砖引玉。</p><p>读这篇文章之前，假设你已经明白多线程、Handler 如何使用。</p><p>在文章的最后，<strong>附录一张草图，主要用于说明 Handler、Message、MessageQueue、Looper 之间的关系。</strong></p><h3 id="更新UI的骚操作"><a href="#更新UI的骚操作" class="headerlink" title="更新UI的骚操作"></a>更新UI的骚操作</h3><h3 id="1、在-onCreate-方法中开启线程更新-UI"><a href="#1、在-onCreate-方法中开启线程更新-UI" class="headerlink" title="1、在 onCreate() 方法中开启线程更新 UI"></a>1、在 onCreate() 方法中开启线程更新 UI</h3><p>直接上例子，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123; </span><br><span class="line"><span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123; </span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState); </span><br><span class="line">    setContentView(R.layout.main); </span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getId()); </span><br><span class="line">    tv = (TextView)findViewById(R.id.text); </span><br><span class="line">    <span class="comment">/*onCreate中开启新线程，更新UI。没有报错或者异常信息！*/</span> </span><br><span class="line">    btn = (Button)findViewById(R.id.btn); </span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; </span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; </span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getId()); </span><br><span class="line">            tv.setText(<span class="string">&quot;update UI is success!&quot;</span>); </span><br><span class="line">            btn.setText(<span class="string">&quot;update UI is success!&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">    thread.start(); </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>随便折腾，不会报错也不会报任何异常！</p><p>以为开启的线程和 UI 线程（主线程）是同一个线程，但是很不幸，他们的线程<code>id</code>风牛马不相及！</p><p>大家可以查一下 Android 源码，这个主要是因为在加载 Activity 的时候，还没有触发检查单线程的模型（即子线程不可以更新UI）。</p><p>如果你不相信的话，可以在上面的线程里面 <code>while true</code>，那么一定会报错的。</p><h3 id="2、在-Activity-生命周期方法中更新-UI"><a href="#2、在-Activity-生命周期方法中更新-UI" class="headerlink" title="2、在 Activity 生命周期方法中更新 UI"></a>2、在 Activity 生命周期方法中更新 UI</h3><p>如 Activity 的 <code>onResume</code>、<code>onStart</code>、反正是以 <code>on</code> 开头的回调方法中在非主线程中更新 UI，实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRestart</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onRestart(); <span class="comment">/*onRestart中开启新线程，更新UI*/</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            tv.setText(<span class="string">&quot;update UI is success!&quot;</span>);</span><br><span class="line">            btn.setText(<span class="string">&quot;update UI is success!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好意思，按下返回按钮在启动程序，或者按 Home 键再启动程序，就这么折腾几下，就会包异常！</p><p>异常信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UI.view.ViewRoot$CalledFromWrongThreadException: </span><br><span class="line">Only the original thread that created a view hierarchy can touch its views.</span><br></pre></td></tr></table></figure><p>大概意思是：只有在主线程中才可以进行更新 UI 的操作。</p><p>这个时候，大家都应该想到 <code>postInvalidate()</code> 这个方法了。修改实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRestart</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="built_in">super</span>.onRestart(); <span class="comment">/*onRestart中开启新线程，更新UI*/</span> </span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; </span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; </span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getId()); </span><br><span class="line">            tv.postInvalidate(); btn.postInvalidate(); </span><br><span class="line">            tv.setText(<span class="string">&quot;update UI is success!&quot;</span>); </span><br><span class="line">            btn.setText(<span class="string">&quot;update UI is success!&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">    thread.start(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>postInvalidate()</code> 方法，源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postInvalidate</span><span class="params">()</span> &#123; </span><br><span class="line">    postInvalidateDelayed(<span class="number">0</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postInvalidateDelayed</span><span class="params">(<span class="type">long</span> delayMilliseconds)</span> &#123; </span><br><span class="line">    <span class="comment">// We try only with the AttachInfo because there&#x27;s no point in invalidating </span></span><br><span class="line">    <span class="comment">// if we are not attached to our window </span></span><br><span class="line">    <span class="keyword">if</span> (mAttachInfo != <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain(); </span><br><span class="line">        msg.what = AttachInfo.INVALIDATE_MSG; </span><br><span class="line">        msg.obj = <span class="built_in">this</span>; </span><br><span class="line">        mAttachInfo.mHandler.sendMessageDelayed(msg, delayMilliseconds); </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>可以看出，<code>postInvalidate()</code> 本质是使用了 Handler 处理消息的机制！该方法可以在子线程中直接用来更新UI。对应的还有一个方法 **invalidate()**，稍候再说！</p><h3 id="3、在-Button-的事件中开启线程，更新-UI"><a href="#3、在-Button-的事件中开启线程，更新-UI" class="headerlink" title="3、在 Button 的事件中开启线程，更新 UI"></a>3、在 Button 的事件中开启线程，更新 UI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123; </span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState); </span><br><span class="line">        setContentView(R.layout.main); </span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getId()); </span><br><span class="line">        tv = (TextView)findViewById(R.id.text); </span><br><span class="line">        btn = (Button)findViewById(R.id.btn); </span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123; </span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123; </span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; </span><br><span class="line">                    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; </span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getId()); </span><br><span class="line">                    tv.setText(<span class="string">&quot;update UI is success!&quot;</span>); </span><br><span class="line">                    btn.setText(<span class="string">&quot;update UI is success!&quot;</span>); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); </span><br><span class="line">            thread.start(); </span><br><span class="line">        &#125;</span><br><span class="line">     &#125;); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p> Sorry，报错！即使你加上 <code>postInvalidate()</code> 方法，也会报这个错误。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI.view.ViewRoot$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2019/12/21/1.jpg" alt="1"></p><h3 id="4、使用-Handler-结合多线程更新-UI"><a href="#4、使用-Handler-结合多线程更新-UI" class="headerlink" title="4、使用 Handler 结合多线程更新 UI"></a>4、使用 Handler 结合多线程更新 UI</h3><p>a. 开启一个线程，在 run 方法中通知 Handler</p><p>b. Handler 中使用 handleMessage 方法更新 UI</p><h3 id="5、Handler-和-invalidate-方法结合多线程更新-UI"><a href="#5、Handler-和-invalidate-方法结合多线程更新-UI" class="headerlink" title="5、Handler 和 invalidate 方法结合多线程更新 UI"></a>5、Handler 和 invalidate 方法结合多线程更新 UI</h3><p>方法 <code>invalidate</code> 主要用在主线程中（即UI 线程中），<strong>不可以用于子线程。</strong>如果在子线程中需要使用 <code>postInvalidate</code> 方法。</p><p>Android 的 API 有说明：</p><blockquote><p>public void invalidate () Since: API Level 1 Invalidate the whole view.</p><p>If the view is visible, onDraw(Canvas) will be called at some point in the future.</p><p>This must be called from a UI thread. To call from a non-UI thread, call postInvalidate(). </p></blockquote><p>看看该方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invalidate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;</span><br><span class="line">            ViewDebug.trace(<span class="built_in">this</span>, ViewDebug.HierarchyTraceType.INVALIDATE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((mPrivateFlags &amp; (DRAWN | HAS_BOUNDS)) == (DRAWN | HAS_BOUNDS)) &#123;</span><br><span class="line">            mPrivateFlags &amp;= ~DRAWN &amp; ~DRAWING_CACHE_VALID;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ViewParent</span> <span class="variable">p</span> <span class="operator">=</span> mParent;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">AttachInfo</span> <span class="variable">ai</span> <span class="operator">=</span> mAttachInfo;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; ai != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Rect</span> <span class="variable">r</span> <span class="operator">=</span> ai.mTmpInvalRect;</span><br><span class="line">                r.set(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop); <span class="comment">// Don&#x27;t call invalidate -- we don&#x27;t want to internally scroll // our own bounds p.invalidateChild(this, r); &#125; &#125; &#125; </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>invalidate</code> 方法如果你直接在主线程中调用，是看不到任何更新的。需要与 Handler 结合！</p><p>Android  在 <code>onDraw</code> 事件处理绘图，而 <code>invalidate()</code> 函数可以再一次触发 <code>onDraw</code> 事件，然后再一次进行绘图动作。实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** Called when the activity is first created. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> </span><br><span class="line">        setContentView( <span class="keyword">new</span> <span class="title class_">View</span>(<span class="literal">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="type">Paint</span> <span class="variable">vPaint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Paint</span>();  <span class="comment">//绘制样式物件</span></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;           <span class="comment">//弧形角度</span></span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span> <span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">                System.out.println(<span class="string">&quot;this run &quot;</span> + (times++) +<span class="string">&quot; times!&quot;</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 设定绘图样式</span></span><br><span class="line">                vPaint.setColor( <span class="number">0xff00ffff</span> ); <span class="comment">//画笔颜色</span></span><br><span class="line">                vPaint.setAntiAlias( <span class="literal">true</span> );   <span class="comment">//反锯齿</span></span><br><span class="line">                vPaint.setStyle( Paint.Style.STROKE );</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 绘制一个弧形</span></span><br><span class="line">                canvas.drawArc(<span class="keyword">new</span> <span class="title class_">RectF</span>(<span class="number">60</span>, <span class="number">120</span>, <span class="number">260</span>, <span class="number">320</span>), <span class="number">0</span>, i, <span class="literal">true</span>, vPaint );</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 弧形角度</span></span><br><span class="line">                <span class="keyword">if</span>( (i+=<span class="number">10</span>) &gt; <span class="number">360</span> ) &#123;</span><br><span class="line">                    i = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 重绘, 再一次执行onDraw 程序</span></span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，发现 <code>times</code> 一直在被 <code>++</code>，说明 <code>onDraw</code> 被多次调用，并且一直在画图！</p><p>Android 的 API 有时候让人看的很郁闷很无语…..关于 <code>invalidate</code> 的使用，还待探索。革命尚未成功，同志仍需努力！</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>附录： Handler、Message、MessageQueue、Looper 之间的关系</strong></p><p><img src="/upload/images/2019/12/21/2.jpg" alt="1"></p><p><strong>这里说明</strong></p><ul><li><p>Looper 使用无限循环取出消息，是有 UI OS 控制的；</p></li><li><p>UI 线程是非安全的，即不要在子线程中更新 UI；</p></li><li><p>Looper 取出来的消息，Handler 可以通过 <code>what</code>、<code>obj</code>  等量来区别分别获取属于自己的消息，所以推荐使用这些内置变量。</p></li></ul><hr><p><strong>天生我材必有用，千金散尽还复来。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: MySQL基本操作</title>
      <link href="/2019/12/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1-MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1-MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇是 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务系列</a> 的第 N 篇，从本篇开始我们就要接触和学习数据库相关的知识了。</p><p>数据库我们选择 MySQL 数据库，免费且资料多，大部分公司都会使用该数据库。我是在 <code>Windows 10</code> 上面搭建的微服务开发环境，同理，MySQL 数据库也是在这个系统上面安装的并且使用的是 MySQL8.0 版本，如果你还没有安装或者在安装 MySQL8.0 遇到问题可以参考 <a href="http://www.veryitman.com/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/">MySQL8.0.15在Win10上的折腾记</a> 这篇文章。</p><p>今天主要跟大家分享如何使用 SpringBoot 结合 JDBC 连接和操作 MySQL 数据库，主要还是以实例为主。</p><h2 id="JDBC、ODBC、MySQL-Connectors"><a href="#JDBC、ODBC、MySQL-Connectors" class="headerlink" title="JDBC、ODBC、MySQL Connectors"></a>JDBC、ODBC、MySQL Connectors</h2><p>在说实例之前，带大家先了解一下标题中几个名词的概念。</p><p>JDBC（Java database connectivity，数据连接），是 Sun 公司编的一堆类和方法，都封装在 <code>java.sql</code> 包中，可以利用这些类和方法来把你的 Java 程序和任意的数据库连通。即通过使用 JDBC，Java 开发人员可以将 SQL 语句传送给几乎任何一种数据库。 </p><p>对应的还有 ODBC（ Open Database Connectivity， 开放数据库互连），ODBC 是 Microsoft 提出的数据库访问接口标准。开放数据库互连定义了访问数据库 API 的一个规范，Microsoft 的 ODBC 文档是用 C 语言描述的，许多实际的 ODBC 驱动程序也是用 C 语言写的。ODBC 提供了对 SQL 语言的支持，用户可以直接将 SQL 语句送给 ODBC。</p><p>JDBC 和 ODBC 都是用来连接数据库的启动程序，两者具有数据库独立性甚至平台无关性。</p><p><a href="https://www.mysql.com/products/connector/">MySQL Connectors</a> 是 MySQL 数据库的驱动（程序），有对各种语言的支持。<code>mysql-connector-java</code>（也称之为 Connector&#x2F;J 或者 mysql-connector-jdbc） 是 MySQL-Connectors 的 Java 版本的一个实现 ，用它可以连接 MySQL 系统。 </p><p>同理，还有 <code>mysql-connector-python</code>、<code>mysql-connector-c</code>、 <code>mysql-connector-ODBC</code>、<code>mysql-connector-jdbc</code> 等，如下图（来自 <a href="https://www.mysql.com/products/connector/">MySQL Connectors</a> 官网）：</p><p><img src="/upload/images/2019/12/07/1.png" alt="1568529858131"></p><p>可以使用下面的图简单描述一下JDBC和数据连接的示意图，如下图：</p><p><img src="/upload/images/2019/12/07/2.png" alt="1568529858131"></p><p>一图胜千言，Java 应用程序可以通过 JDBC 和数据库驱动程序连接、访问、操作数据库（MySQL、Oracle等）。</p><h2 id="配置-pom-文件"><a href="#配置-pom-文件" class="headerlink" title="配置 pom 文件"></a>配置 pom 文件</h2><p>我还是用 <a href="https://github.com/veryitman/MSTutorial">Github</a> 代码仓库的例子，大家可以自行 Clone 代码。</p><p>打开工程的 <code>pom.xml</code> 文件，增加 <code>mysql-connector-java</code> 和 <code>spring-boot-starter-jdbc</code> 依赖，从上面内容大家应该可以理解为什么要加入这两项了吧！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql-connector-java--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待 Maven 下载完成这两项依赖。</p><h2 id="配置-properties"><a href="#配置-properties" class="headerlink" title="配置 properties"></a>配置 properties</h2><p>打开 <code>application-dev.properties</code> 文件，增加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># jdbc</span><br><span class="line"># spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"># JDBC </span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 连接的数据库</span><br><span class="line"># spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mzc_user</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mzc_user?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line"># 数据库用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line"># 数据库密码</span><br><span class="line">spring.datasource.password=pwd123</span><br></pre></td></tr></table></figure><p>其中 <code>mzc_user</code> 是我创建的数据库文件名称，大家要根据自己的实际情况做相关的修改。配置 properties 注意以下几个问题。</p><h3 id="1、spring-datasource-driver-class-name-的配置"><a href="#1、spring-datasource-driver-class-name-的配置" class="headerlink" title="1、spring.datasource.driver-class-name 的配置"></a>1、spring.datasource.driver-class-name 的配置</h3><p>如果配置值为 <code>com.mysql.jdbc.Driver</code>，会报下面的警告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Loading class `com.mysql.jdbc.Driver&#x27;. This is deprecated. </span><br><span class="line">The new driver class is `com.mysql.cj.jdbc.Driver&#x27;. </span><br><span class="line">The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure><p>意思是这个类已经过时了，请使用最新的 <code>jdbc.driver</code> 修改数据源配置，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver<span class="operator">-</span>class<span class="operator">-</span>name<span class="operator">=</span>com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><h3 id="2、spring-datasource-url-的配置"><a href="#2、spring-datasource-url-的配置" class="headerlink" title="2、spring.datasource.url 的配置"></a>2、spring.datasource.url 的配置</h3><p>关于这个url 的配置，官方有更加详细的配置说明，可以参考 <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-jdbc-url-format.html">Connection URL Syntax</a> 和 <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html">Configuration Properties</a> 两篇文档。</p><p>如果配置为 <code>spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mzc_user</code>，会一直报如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The server time zone value &#x27;�й���׼ʱ��&#x27; is unrecognized or represents more than one time zone. </span><br><span class="line">You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</span><br></pre></td></tr></table></figure><p>解决这个问题，有如下3种解决方案。</p><p><strong>1、指定时区</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 北京时间东八区</span><br><span class="line">serverTimezone=GMT%2B8</span><br></pre></td></tr></table></figure><p>注意，<code>%2B</code> 是 <code>+</code> 的编码格式。<br>如果你设置 <code>serverTimezone=UTC</code>，连接不报错， 但在用java代码插入到数据库时间的时候却出现了问题。 </p><p>比如在 Java 代码里面插入的时间为 <code>2018-06-24 17:29:56</code>，但是在数据库里面显示的时间却为 <code>2018-06-24 09:29:56</code>，这样就有了8个小时的时差。UTC 代表的是全球标准时间 ，而我们使用的时间是北京时区也就是东八区，领先 UTC 八个小时。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 京时间东八区</span><br><span class="line">serverTimezone=GMT%2B8</span><br><span class="line"></span><br><span class="line">// 或者使用上海时间</span><br><span class="line">serverTimezone=Asia/Shanghai</span><br></pre></td></tr></table></figure><p><strong>2、修改 MySQL 配置文件</strong></p><p>我在 <code>Windows 10</code> 找到 MySQL 配置文件 <code>my.ini</code> ，如果你没有找到可以参考 <a href="http://www.veryitman.com/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/">MySQL8.0.15在Win10上的折腾记</a>  这篇文章，非 <code>Windows</code> 系统可能配置文件时 <code>my.cnf</code>。</p><p>在配置文件中，增加默认时区配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-time-zone=&#x27;+08:00&#x27;</span><br></pre></td></tr></table></figure><p>在 <code>my.ini</code> 或者 <code>my.cnf</code> 文件的 <code>[mysqld]</code> 下面增加上面配置，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"># Set default time-zone</span><br><span class="line">default-time-zone=&#x27;+08:00&#x27;</span><br><span class="line"></span><br><span class="line"># The TCP/IP Port the MySQL Server will listen on</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>修改配置文件之后，重启MySQL服务就可以了。</p><p><strong>3、修改数据库， 配置全局时区</strong> </p><p>切换到名称为 <code>mysql</code> 的数据库，然后执行下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%time_zone%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 设置全局时区，即时生效，作用于所有session</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> time_zone<span class="operator">=</span><span class="string">&#x27;+8:00&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2019/12/07/3.png" alt="1568529858131"></p><p>设置完成后，可以使用 <code>show variables like &#39;%time_zone%&#39;;</code> 看看是否修改成功。</p><p>你也可以执行，但是只能对当前的 session 生效，示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置当前session时区，即时生效，但仅作用于当前session</span><br><span class="line"><span class="keyword">set</span> time_zone<span class="operator">=</span><span class="string">&#x27;+8:00&#x27;</span>;</span><br></pre></td></tr></table></figure><p>我个人使用的是上述中的第<strong>1</strong>种方法，我也推荐大家使用这种方法，简单且无副作用。</p><p>这里有一篇坑记 <a href="https://my.oschina.net/purely/blog/1477281">jdbc mysql connector 6 时区问题</a>，关于设置 <code>time_zone</code> 的坑，大家可以看看。</p><h2 id="万事俱备，只欠代码"><a href="#万事俱备，只欠代码" class="headerlink" title="万事俱备，只欠代码"></a>万事俱备，只欠代码</h2><p>配置完成之后，我们可以写点测试代码了。</p><p>本节的代码主要集中在 <code>MSUserService</code>、<code>MSUserServiceImpl</code>、<code>MSDBTests</code> 中，其中 <code>MSUserService</code> 是接口，定义了一些数据库操作的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MSUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">createUser</span><span class="params">(MSUser user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Map&gt; <span class="title function_">queryUserByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Map&gt; <span class="title function_">queryUserByUserName</span><span class="params">(String userName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUserTable</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>MSUserServiceImpl</code> 则是  <code>MSUserService</code> 的实现类， <code>MSDBTests</code> 主要是测试类，用来测试操作 MySQL 数据表的如创建表、查询、删除等操作。大家自行 Clone 代码去看实现即可，我就不在这里占用篇幅贴代码了。</p><p>在本节代码中，新增加了两个注解的使用即 <code>@Service</code> 和 <code>@Slf4j</code>，<code>@Slf4j</code> 这个注解主要用来简化使用日志。而 <code>@Service</code> 注解承担了两个职责一是 Bean 的创建，二是将一个类标识为一个服务。后续我会再深入跟大家分享  <code>@Service</code> 这个注解，目前你只需要用上它就可以了。</p><p>在本节的例子中，用到的数据表（user）的数据结构大概如下：</p><p><img src="/upload/images/2019/12/07/4.png" alt="1568529858131"></p><p>启动 MySQL 服务，然后启动 <code>MSDBTests</code> 中的测试代码，就可以看到实际效果了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUserSQLTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MSUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MSUser</span>();</span><br><span class="line">    user.setUserID(<span class="number">1</span>);</span><br><span class="line">    user.setAccountName(<span class="string">&quot;mzc&quot;</span>);</span><br><span class="line">    user.setAccountPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    user.setNickName(<span class="string">&quot;veryitman&quot;</span>);</span><br><span class="line">    user.setMotto(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">25</span>);</span><br><span class="line">    user.setGender(MSUser.GENDER_MALE);</span><br><span class="line">    user.setPhone(<span class="string">&quot;17122036530&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加user数据</span></span><br><span class="line">    msUserService.createUser(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUserBySQLTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 根据user_id查询</span></span><br><span class="line">    List&lt;Map&gt; userJson = msUserService.queryUserByUid(<span class="number">1</span>);</span><br><span class="line">    logger.info(<span class="string">&quot;MSBlog Test, userJson by query user&#x27;s id: &quot;</span> + userJson.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据user_name查询</span></span><br><span class="line">    userJson = msUserService.queryUserByUserName(<span class="string">&quot;mzc&quot;</span>);</span><br><span class="line">    logger.info(<span class="string">&quot;MSBlog Test, userJson by query user&#x27;s name: &quot;</span> + userJson.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天就分享到这里，下次结合登录注册例子操作 MySQL 数据库。</p><hr><p><strong>做事情，不问能不能做成，要问应不应该做。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>短地址原理</title>
      <link href="/2019/11/24/%E7%9F%AD%E5%9C%B0%E5%9D%80%E5%8E%9F%E7%90%86/"/>
      <url>/2019/11/24/%E7%9F%AD%E5%9C%B0%E5%9D%80%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一个同事遇到一个问题，他说受限于第三方的服务，自己请求所带过去的字符串因为太长，无法从第三方服务获取信息，很是苦恼😴。后来我们商量了一下，最终借鉴短地址的思想解决了问题。道理很简单，因为我们请求中的附加字符串信息第三方服务只是透传回来给我们，我们只需要把这些附加信息进行字符压缩就可以了，这样请求带过去的字符串长度就满足了要求😊。</p><p>无论是写文章还是制作一些表格的时候，我会时常用到短地址。短地址的优势在于其短（字符少）、简洁，方便书写又不占位置。方便在社交网络和第三方平台上分享链接，投放广告。比如有人会在发朋友圈的时候带上短地址，还有一些营销短信里面也会带一些短地址链接。</p><p>有现成的短地址生成器，常用的短地址转换有 <a href="http://dwz.cn/">百度短网址转换</a>、<a href="https://goo.gl/">Google短网址转换</a> 和 <a href="http://dwz.wailian.work/">新浪短地址转换</a>，可惜的是谷歌关闭了该服务，官方发言如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On March 30, 2018, we turned down support for goo.gl URL shortener. </span><br><span class="line">From April 13, 2018, only existing users were able to create short links on the goo.gl console.</span><br><span class="line">Analytics data was available for up to one year, until March 30, 2019, when goo.gl was discontinued. </span><br><span class="line">Previously created links will continue to redirect to their intended destination. </span><br><span class="line">Please see this blog post for more details.</span><br></pre></td></tr></table></figure><p>我经常使用百度的短地址服务，在国内访问它是最快的也能满足我的工作和学习需求，它也提供 API 服务可以参考 <a href="https://dwz.cn/console/apidoc">短网址生成接口文档</a> 学习和了解。</p><p>我们先来了解一下 HTTP 协议中那些重定向的事。</p><h2 id="HTTP-请求重定向"><a href="#HTTP-请求重定向" class="headerlink" title="HTTP 请求重定向"></a>HTTP 请求重定向</h2><p>HTTP 中的 <code>301</code>、<code>302</code>、<code>303</code>、<code>307</code>、<code>308</code> 响应状态码，都表示重定向的响应。</p><p>其中，<code>301</code>、<code>308</code> 响应状态码表示永久重定向，<code>302</code>、<code>303</code>、<code>307</code> 表示临时重定向。</p><p>那我们来说一下什么是重定向？</p><p>重定向(Redirect)就是通过各种方法将各种网络请求重新定个方向转到其它位置（如：网页重定向、域名的重定向、路由选择的变化也是对数据报文经由路径的一种重定向）。</p><p>举个例子，你要去 A 机构办理一个证件，等你去了之后A机构的某人告诉你他们不再受理此事了，需要你去 B 机构办理，然后你就自己去了 B 机构。这个过程就类似于重定向。</p><p>那么，HTTP 协议中定义的这些30X响应状态码就好比 <code>A机构的某人</code> 它们告诉客户端，你需要访问另外一个地址了。</p><p>重定向做了两次 HTTP 请求， 第一次，客户端请求 A 服务器，A 响应告诉浏览器，你应该去 B 服务器访问。此时就去访问服务器 B，这个时候你可以看到浏览器中的网址变了，这就是第二次 HTTP 请求。</p><p><strong>重定向过程：</strong></p><p>Step-1、浏览器（客户端）发送 HTTP 请求；</p><p>Step-2、Web服务器A接收后发送 <code>302</code> 状态码响应，并在响应头中把对应的 <code>Location</code> 给浏览器；</p><p>Step-3、浏览器收到服务器返回的 <code>302</code> 响应码，就自动再发送一个新的 HTTP 请求（请求URL是新的 <code>Location</code> 中的地址）；</p><p>Step-4、Web服务器（可能是 A 也可能是其他服务器）根据此请求寻找资源并发送给浏览器，最终展示给用户。</p><p>关于 <code>Location</code> 可以看下面的截图（这是一个重定向的 HTTP 请求示例），它是被放在响应头中的，其值是需要重定向的网址 <code>http://www.veryitman.com</code>，从这个过程来看可以看出重定向是客户端（浏览器）行为。</p><p><img src="/upload/images/2019/11/24/1.png"></p><p>还有个叫转发的技术，这个和重定向是不一样的，转发是服务器行为，还拿上面的 A 机构例子来说，你要去 A 机构办理一个证件，等你去了之后 A 机构的某人告诉你他们不再受理此事了，但是 A 机构可以自己协调资源帮你完成而不需要你去其他机构办理了。这个过程就类似于转发。</p><h2 id="模拟重定向"><a href="#模拟重定向" class="headerlink" title="模拟重定向"></a>模拟重定向</h2><p>现在使用 SpringBoot 模拟一下重定向，我用的 SpringBoot 是 <code>2.2.0.RELEASE</code> 版本。</p><p><strong>①、</strong>新建 SpringBoot Web 工程，可以参考 <a href="http://www.veryitman.com/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/">微服务-想办法让项目运行起来</a> 这篇文章。</p><p><strong>②、</strong>修改 pom 文件，增加 <code>fastjson</code>，示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③、</strong>新建 <code>MSTestRedirectController</code> 文件，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;testredirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSTestRedirectController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/access/web&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/testredirect/index/realweb?parameter=coming&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/index/realweb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">real</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect happened：&quot;</span> + JSON.toJSONString(request.getParameterMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意几个问题：</p><ul><li><p>既然是重定向，该 Controller 不能使用 <code>@RestController</code> 注解而要使用 <code>@Controller</code> 注解；</p></li><li><p>这里使用了关键字 <code>redirect</code> 实现重定向；</p></li></ul><p><strong>④、</strong>启动工程，并在浏览器访问下面的网址</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/testredirect/access/web</span><br></pre></td></tr></table></figure><p>可以看到浏览器发生了重定向，截图如下：</p><p><img src="/upload/images/2019/11/24/2.png"></p><p>除了上面的方法可以实现重定向外还可使用 <code>HttpServletResponse</code> 的 <code>sendRedirect</code> 方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/access/web2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirect2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 方法1：自定义状态码方式</span></span><br><span class="line">        <span class="comment">// String url = &quot;http://localhost:8080/testredirect/index/realweb?parameter=coming&quot;;</span></span><br><span class="line">        <span class="comment">//response.setHeader(&quot;Location&quot;, url);</span></span><br><span class="line">        <span class="comment">//response.sendError(301);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方法2：sendRedirect，默认返回的状态码是 302</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/testredirect/index/realweb?parameter=coming&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求短地址过程"><a href="#请求短地址过程" class="headerlink" title="请求短地址过程"></a>请求短地址过程</h2><p>我拿网址 <code>http://www.veryitman.com/</code> 来举实例，使用百度短地址服务。</p><p>在 <a href="http://dwz.cn/">百度短地址页面</a> 去生成 <code>http://www.veryitman.com/</code> 对应的短地址，如下图所示：</p><p><img src="/upload/images/2019/11/24/3.png"></p><p>得到短地址是 <code>https://dwz.cn/hnmau4Zs</code> 复制该地址拷贝到浏览器（我用的是 Chrome 浏览器）的地址栏中，并打开 Chrome 的审查视图。切换到 Network 选项，此时回车打开短网址。</p><p><img src="/upload/images/2019/11/24/4.png"></p><p>HTTP 发送了 GET 请求（<strong>红色1</strong>），请求地址是  <code>https://dwz.cn/hnmau4Zs</code> ，服务器（百度的短地址服务）返回给 Chrome 浏览器 <code>302</code> 状态码，浏览器发现是该重定向码就再次用 <code>Location</code> 里面包含的地址发送了第二次请求即重定向请求。</p><p>你也可以使用微博的短地址服务，提醒一点，微博的短地址请求返回码是 <code>301</code> 而百度返回的是 <code>302</code> 响应码。<code>302</code> 状态码允许各种各样的重定向，一般情况下都会实现为到 GET 的重定向，但是不能确保 POST 会重定向为 POST，<code>302</code> 表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B；而 <code>301</code> 状态码表明目标资源被永久的移动到了一个新的 URI，任何未来对这个资源的引用都应该使用新的 URI。</p><h2 id="短地址原理"><a href="#短地址原理" class="headerlink" title="短地址原理"></a>短地址原理</h2><p>刚开始我很好奇，为什么我把长地址 A 转换为短地址 B，然后用 B 去访问居然还是 A 地址的内容，浏览器是怎么做到的？</p><p>通过上面的请求过程示例，相信大家应该大概理解了请求短地址的原理了。</p><p>在百度短地址服务中，我们将 <code>http://www.veryitman.com/</code> 转换为 <code>https://dwz.cn/hnmau4Zs</code>  ，此时百度短地址服务维持了 <code>短-长</code> 地址的映射关系了而且是唯一的，当我们去访问 <code>https://dwz.cn/hnmau4Zs</code> ，其实请求的是百度短地址服务，该服务将短地址对应的长地址（放在响应头的 <code>Location</code> 中）返回给我们的浏览器，并返回 302 状态码，此时浏览器就重定向到了 <code>http://www.veryitman.com/</code> 这个网址上了。</p><p><strong>简单总结一下其步骤如下：</strong></p><p>Step-1、用户在浏览器里输入 <code>https://dwz.cn/hnmau4Zs</code>  这个网址去访问;</p><p>Step-2、浏览器解析 DNS，获取该域名对应的 IP 地址;</p><p>Step-3、获取到 IP 后，浏览器发送 HTTP GET 请求查询 <code>hnmau4Zs</code> 并获取到 <code>https://dwz.cn/hnmau4Zs</code>  对应的长地址;</p><p>Step-4、HTTP 通过 <code>302</code> 状态码转到去请求对应的长地址  <code>http://www.veryitman.com/</code> 上面了。</p><p>我把 <code>http://www.veryitman.com/</code> 放到百度和微博的短地址生成分别是：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 百度短地址</span><br><span class="line">https://dwz.cn/hnmau4Zs</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 微博段地址</span><br><span class="line">http://1t.click/aMtD</span><br></pre></td></tr></table></figure><p>可以看出百度生成较复杂，首先协议变成了 <code>HTTPS</code>，其次生成代码是 8 位（<code>hnmau4Zs</code>），而微博生成的是 4 位（<code>aMtD</code>）代码。</p><p>短地址码一般都是由26个大写字母  <code>A-Z</code> 、26个小写字母 <code>a-z</code> 和10个数字  <code>0-9</code> 共62个字符随机组合而成，那么可以这样来生成短地址码，我们定义一个62进制，把这62个字符按照10进制数转成62进制数，那么就可以得到每个字符对应的62进制数了。同理，将短地址还原的时候把62进制转换为对应的10进制就可以了。</p><p>根据上面算法，可以看出百度可以支持 62^8 个短地址，微博可以支持 62^4 个短地址。</p><p>关于短地址生成的算法，大家可以用SpringBoot自己撸一个或者去网上找找别人已经实现的。</p><hr><p><strong>活着不是靠泪水搏取同情，而是靠汗水获得掌声~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Short-URL SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSL: 完成VS2017的配置</title>
      <link href="/2019/11/23/OpenSSL-%E5%AE%8C%E6%88%90VS2017%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/23/OpenSSL-%E5%AE%8C%E6%88%90VS2017%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2019/11/23/OpenSSL-%E7%94%A8VS2017%E5%88%9B%E5%BB%BAC%E5%B7%A5%E7%A8%8B/">OpenSSL: 用VS2017创建C工程</a>  中跟大家分享了如何在 Visual Studio 2017 中创建 C 工程和注意事项以及遇到问题的解决方案，今天我们开始在 Visual Studio 2017 中搭建 OpenSSL 的开发环境。</p><p>很多人在配置 OpenSSL 环境中遇到了不少问题，甚至还有放弃的。说实话，我也差点奔溃了:(，配置这些鬼东西确实有点复杂，说一句沃茨奥一点也不过分。</p><p>希望这篇文章能和你不期而遇，能够帮到你！写文不易，如果文中有任何错误之处还望大家不吝赐教。</p><h2 id="下载OpenSSL"><a href="#下载OpenSSL" class="headerlink" title="下载OpenSSL"></a>下载OpenSSL</h2><p>使用 OpenSSL 有两种方式，一是自己下载其源码按照配置去编译，然后使用编译后的库；另一种是使用别人已经编译好的库文件。</p><p>我使用的是第二种方法，在 <a href="https://www.npcglib.org/~stathis/blog/precompiled-openssl/">precompiled-openssl</a> 下载的 OpenSSL Library，下载完成后，解压。</p><p><img src="/upload/images/2019/11/23/14.png"></p><h2 id="设置VS2017"><a href="#设置VS2017" class="headerlink" title="设置VS2017"></a>设置VS2017</h2><blockquote><p>下面分几个步骤完成设置。</p></blockquote><h3 id="1、拷贝文件到工程中"><a href="#1、拷贝文件到工程中" class="headerlink" title="1、拷贝文件到工程中"></a>1、拷贝文件到工程中</h3><p>在工程目录下面新建 <code>vendor-openssl</code> 目录，用来存放 OpenSSL 的头文件和库文件，便于管理，你也可以取个其他的名称。</p><p>进入解压后的 <code>openssl-1.1.0f-vs2017</code> 目录，复制 <code>lib64</code> 和 <code>include64</code> 到 <code>vendor-openssl</code> 目录下，如下图所示：</p><p><img src="/upload/images/2019/11/23/15.png"></p><h3 id="2、添加OpenSSL头文件"><a href="#2、添加OpenSSL头文件" class="headerlink" title="2、添加OpenSSL头文件"></a>2、添加OpenSSL头文件</h3><p>打开工程的属性设置，打开方法如下：</p><p><img src="/upload/images/2019/11/23/16.png"></p><p><img src="/upload/images/2019/11/23/17.png"></p><p>按照上述截图的1、2、3、4点击 Edit，出现下面的编辑框，如下图：</p><p><img src="/upload/images/2019/11/23/18.png"></p><p>选择 <code>include64</code>目录，如下截图所示：</p><p><img src="/upload/images/2019/11/23/19.png"></p><p>点击OK即可完成头文件的添加。</p><h3 id="3、添加OpenSSL库路径"><a href="#3、添加OpenSSL库路径" class="headerlink" title="3、添加OpenSSL库路径"></a>3、添加OpenSSL库路径</h3><p>同理，打开属性设置，然后选择 <code>Linker/General</code>，如下图所示：</p><p><img src="/upload/images/2019/11/23/20.png"></p><p>点击Edit，选择 OpenSSL 的库路径，如图：</p><p><img src="/upload/images/2019/11/23/21.png"></p><h3 id="4、添加库名称"><a href="#4、添加库名称" class="headerlink" title="4、添加库名称"></a>4、添加库名称</h3><p>同理，打开属性设置，在 <code>Linker/Input</code> 中设置，如图：</p><p><img src="/upload/images/2019/11/23/22.png"></p><p>点击Edit，输入下面库的名称（编译后的OpenSSL库文件）：</p><p><img src="/upload/images/2019/11/23/23.png"></p><p>书写完每一个都要换行继续写下一个库名称，直到写完为止，如图：</p><p><img src="/upload/images/2019/11/23/24.png"></p><p>点击弹框的OK按钮，关闭所有弹框。</p><h2 id="base64编解码"><a href="#base64编解码" class="headerlink" title="base64编解码"></a>base64编解码</h2><p>在资源管理器视图中，新建源文件，分别添加 <code>mzc_base64.h</code>、<code>mzc_base64.c</code> 和 <code>main.c</code> 三个文件，如下图：</p><p><img src="/upload/images/2019/11/23/25.png"></p><p>这里我只给出测试的代码(main.c源码)，具体的编解码代码，大家可以去 <a href="https://github.com/veryitman/c-openssl/tree/base64-feature">GitHub</a> 查看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mzc_base64.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Encode To Base64</span></span><br><span class="line"><span class="type">char</span> *base64EncodeOutput;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Take the web&#x27;s url of my blog as example:http://veryitman.com</span></span><br><span class="line"><span class="type">char</span> *text = <span class="string">&quot;http:\/\/veryitman.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">mzc_base64_encode(text, <span class="built_in">strlen</span>(text), &amp;base64EncodeOutput);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Base64 encode output: %s\n&quot;</span>, base64EncodeOutput);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Decode From Base64</span></span><br><span class="line"><span class="type">char</span>* base64DecodeOutput;</span><br><span class="line"><span class="type">size_t</span> test;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *base64Encode_str = <span class="string">&quot;aHR0cDovL3ZlcnlpdG1hbi5jb20=&quot;</span>;</span><br><span class="line">mzc_base64_decode(base64Encode_str, &amp;base64DecodeOutput, &amp;test);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Base64 decode output: %s %d\n&quot;</span>, base64DecodeOutput, test);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Visual Studio 2017 中使用快捷键 <code>Ctrl+F5</code> 运行工程报错，报错如图：</p><p><img src="/upload/images/2019/11/23/26.png"></p><p>需要拷贝 <code>openssl-1.1.0f-vs2017</code> 目录中的bin64里面的内容：</p><p><img src="/upload/images/2019/11/23/27.png"></p><p>把这些文件放到可执行文件的目录中，如图：</p><p><img src="/upload/images/2019/11/23/28.png"></p><p>再次 <code>Ctrl+F5</code> 就可以正常执行了。</p><p><strong>注意：</strong>点击 <a href="https://github.com/veryitman/c-openssl/tree/base64-feature">源码文件</a> 可以获取本文的代码。</p><hr><p><strong>活着不是靠泪水搏取同情，而是靠汗水获得掌声~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL VS2017 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSL: 用VS2017创建C工程</title>
      <link href="/2019/11/23/OpenSSL-%E7%94%A8VS2017%E5%88%9B%E5%BB%BAC%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/11/23/OpenSSL-%E7%94%A8VS2017%E5%88%9B%E5%BB%BAC%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该系列文章给大家（主要是刚接触Visual Studio工具的C开发者）带来使用开发工具Visual Studio 2017进行OpenSSL编程，包括base64，AES、DES和RSA加解密等内容。</p><p>对于C&#x2F;C++的编程，我工作之后基本都是在Linux上面写，很少在Windows上面耕耘。最近收到几个小伙伴的邮件，有请教如何在Windows上面进行C编程的，也有问关于OpenSSL的基础知识的。说实话我也不是很熟悉Windows上面的C编程，但凭借着一股自信还是硬着头皮实践了一把，算是给大家一个交待。</p><p>在这里非常感谢网名为“为C奋斗”的建议，也感谢网上开源代码的作者们，如果没有他们的贡献，我可能根本坚持不下来把这些知识做以总结和分享。</p><p>写文不易，挑灯夜战，如果文中有任何错误之处还望大家不吝赐教。</p><p>该系列文章中相关代码我都托管在Github上面了，点击 <a href="https://github.com/veryitman/c-openssl">c-openssl</a> 可以获取。</p><h2 id="创建C工程"><a href="#创建C工程" class="headerlink" title="创建C工程"></a>创建C工程</h2><blockquote><p>这部分介绍如何在Visual Studio 2017中创建C工程。</p></blockquote><p>打开Visual Studio 2017，选择<code>File/New/Project...</code>，紧接着完成下面截图中的步骤即可完成工程创建。</p><p><img src="/upload/images/2019/11/23/1.png"></p><p><img src="/upload/images/2019/11/23/2.png"></p><p>点击OK稍等几秒就可以完成工程的创建，创建成功之后，该工程是一个空工程没有任何源文件，如图：</p><p><img src="/upload/images/2019/11/23/3.png"></p><h2 id="创建C文件"><a href="#创建C文件" class="headerlink" title="创建C文件"></a>创建C文件</h2><blockquote><p>该部分介绍如何在工程中手动创建C文件。</p></blockquote><p>需要手动创建C源码文件，右键点击 <code>Source Files</code></p><p><img src="/upload/images/2019/11/23/4.png"></p><p><img src="/upload/images/2019/11/23/5.png"></p><p><strong>注意：源码后缀是<code>.c</code>，不是<code>.cpp</code>.</strong></p><p>创建完成后，打开 <code>mzc_base64.c</code> 写上一段简单的代码，测试一下是否正常。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello OpenSSL, I&#x27;m coming.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接使用快捷键 <code>Ctrl+F5</code> 运行程序，可以看到弹出了系统的命令行并显示运行结果，截图如下：</p><p><img src="/upload/images/2019/11/23/6.png"></p><p>至此在Visual Studio 2017中成功创建了C工程 &#x3D;:）</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>有不少小伙伴跟我说，他们在创建的过程中遇到了这样或者那样的问题，我总结了一下分享给有需要的人。</p><h3 id="1、没有找到Windows-Desktop选项"><a href="#1、没有找到Windows-Desktop选项" class="headerlink" title="1、没有找到Windows Desktop选项"></a>1、没有找到<code>Windows Desktop</code>选项</h3><p>这种情况应该是没有在 Visual Studio 2017 中安装桌面开发组件，如图操作：</p><p><img src="/upload/images/2019/11/23/7.png"></p><p>打开 <code>Visual Studio Inistaller</code> 安装通用Windows平台开发组件，如图：</p><p><img src="/upload/images/2019/11/23/8.png"></p><p>安装完成后，再重新创建工程就有了该选项。</p><h3 id="2、编译错误，找不到printf函数"><a href="#2、编译错误，找不到printf函数" class="headerlink" title="2、编译错误，找不到printf函数"></a>2、编译错误，找不到<code>printf</code>函数</h3><p>出现这种错误，大部分原因是没有安装 <code>Windows10 SDK</code>。打开 <code>C:\Program Files (x86)\</code>  目录，看看是否有 <code>Windows Kits</code> 目录。</p><p>如果没有，就点击 <a href="https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk">Windows10 SDK</a> 下载，安装完成后，重新创建工程就可以了。</p><p>如果有该目录，在工程属性中设置一下，如图：</p><p><img src="/upload/images/2019/11/23/9.png"></p><p>打开属性视图，如下：</p><p><img src="/upload/images/2019/11/23/10.png"></p><p>配置你正确的 <code>Windows10 SDK</code> 目录即可，我安装的是下面的版本：</p><p><img src="/upload/images/2019/11/23/11.png"></p><h3 id="3、无法访问头文件"><a href="#3、无法访问头文件" class="headerlink" title="3、无法访问头文件"></a>3、无法访问头文件</h3><p>点击系统库的头文件，显示如下提示：</p><p><img src="/upload/images/2019/11/23/12.png"></p><p>在头文件上面右键，可以看到跳转的几个选项都是不可用的状态，如下图：</p><p><img src="/upload/images/2019/11/23/13.png"></p><p>出现这样的情况不要怕，这是VS的病，只能等Microsoft去根治了。我们使用 <code>Open Document</code> 代替，快捷键是<code>Ctrl+Shift+G</code>，一样可以打开对应的头文件。</p><hr><p><strong>生命不是要超越别人，而是要超越自己~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL VS2017 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8.0.15在Win10上的折腾记</title>
      <link href="/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
      <url>/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="安装和配置-MySQL"><a href="#安装和配置-MySQL" class="headerlink" title="安装和配置 MySQL"></a>安装和配置 MySQL</h2><p>我在 <code>Windows 10</code> 上面使用 <code>MySQL Instller</code> 安装的 MySQL-8.0.15，安装完成后，启动和使用 MySQL 遇到了不少问题，特此记录踩坑记。</p><p>只要你的网络稳定，按照默认安装，整个安装过程还算顺利。</p><p>安装过程中需要设置密码，我设置的账号和密码都是 <code>root</code>，所以下面的操作都是基于这个账号和密码进行的。</p><p>安装完成后，将 <code>mysql server</code> 的 <code>bin 目录</code>加入到系统的 <code>path</code> 变量中去，如图：</p><p><img src="/upload/images/2019/11/10/1.png" alt="1568529858131"></p><p>系统环境变量 <code>path</code> 中加入 <code>%MySQL_Home%\bin</code> 即可。</p><p>加入成功之后，就可以使用 <code>mysql</code> 命令了。</p><p><strong>题外话</strong>，我们在命令行使用的 <code>mysql</code> 命令其实是对应 <code>MySQL Server 8.0\bin\mysql.exe</code>，可以使用 <code>where</code> 命令看一下其可执行文件的位置，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">where</span> mysql</span></span><br><span class="line">C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe</span><br></pre></td></tr></table></figure><p>同理， <code>mysqld</code> 命令对应的是 <code>mysqld.exe</code>可执行文件。</p><p>查看安装的 <code>mysql-server</code> 版本，可以执行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p>可以得到下面的输出，可以看出当前版本是 <code>8.0.15</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe  Ver 8.0.15 for Win64 on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure><p>我用的命令行终端工具是 <code>Git bash</code>（安装Git客户端就自带该工具，个人觉得挺好用的，[嘿哈]）。</p><p>用管理员身份运行 <code>Git bash</code>，然后在该终端工具中执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --install</span><br></pre></td></tr></table></figure><p>如果不用管理员身份运行终端的话，会报类似下面的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install/Remove of the Service Denied!</span><br></pre></td></tr></table></figure><p>运行成功的话，可以看到如下提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Service successfully installed.</span><br></pre></td></tr></table></figure><p>再次启动 MySQL80，<strong>一定要用管理员身份启动终端，否则会报 <code>发生系统错误</code> 这样的错误</strong>（如果你是使用管理员身份启动终端的还是报这个错误，也有可能是该服务已经启动了），执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MySQL80</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里使用的是 <code>MySQL80</code>，这个是服务的名称 （安装时候我设置的服务名称） ，不是 <code>mysql</code>，下面会讲解为什么这样做，如果你没有这个 <code>MySQL80</code> 服务只需要启动名称为 <code>mysql</code> 的服务即可。</p><p>如果出现类似 “MYSQL 服务无法启动” 的提示，可以在 Windows 的任务管理器中找找是否已经启动了 <code>mysqld</code> 服务，可以手动关闭后再来启动。</p><p>如果始终启动失败，可以执行下面的命令： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure><p>启动成功后，显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL80 服务正在启动 .</span><br><span class="line">MySQL80 服务已经启动成功。</span><br></pre></td></tr></table></figure><p>可以使用下面命令查看是否成功启动 <code>MySQL80</code> 服务，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr &quot;3306&quot;</span><br></pre></td></tr></table></figure><p>看到如下提示表示启动成功，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       10344</span><br><span class="line">TCP    0.0.0.0:33060          0.0.0.0:0              LISTENING       10344</span><br><span class="line">TCP    [::]:3306              [::]:0                 LISTENING       10344</span><br><span class="line">TCP    [::]:33060             [::]:0                 LISTENING       10344</span><br><span class="line">TCP    [::1]:3306             [::1]:56962            TIME_WAIT       0</span><br></pre></td></tr></table></figure><p>登录 <code>MySQL80</code> 服务，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">mysql -uroot -proot</span></span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 1045 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)</span><br></pre></td></tr></table></figure><p>很不幸的是，登录失败（ERROR 1045）。</p><p>那我们就来解决这个问题，这个版本的 MySQL 和之前的 8.0.x 版本解决方案不同，网上找过很多解决方案有修改配置文件的，忙了半天还是没有搞定，最后在 StackOverflow 上面找到方案，结合个人实践总结了一下，还烦请大家务必往下看。</p><h2 id="解决登录-MySQL-受限"><a href="#解决登录-MySQL-受限" class="headerlink" title="解决登录 MySQL 受限"></a>解决登录 MySQL 受限</h2><p>在看下面内容之前，务必完成文中前面说的步骤，否则下面的内容对你来说没有太大价值。</p><p>新版本的 MySQL 加强了安全方便的因素，所以使用新版本比较费劲，如果你不想折腾，可以安装 MySQL 的 5.x 版本。</p><p><strong>Step-1</strong>：停止 MySQL80 服务</p><p>使用快捷键 <code>win+R</code> 输入 <code>services.msc</code>，打开如下视图并找到 MySQL80 服务：</p><p><img src="/upload/images/2019/11/10/2.png" alt="1568529858131"></p><p>停止 MySQL80 服务，或者在命令行执行 <code>net stop MySQL80</code> 命令。</p><p><strong>Step-2</strong>：另一种方式启动 MySQL80 服务</p><p>使用管理员身份运行终端1，并执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --console --skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure><p>此时可以成功启动 <code>MySQL80</code> 服务，但是在 Windows 的服务中是看不到的，不用理会。继续。</p><p><strong>Step-3</strong>：启动另一个终端2</p><p>上述步骤启动完成后，再用管理员身份运行另一个 Windows 的终端2(CMD)，用系统自带的或者 Git Bash 都可以，但是如果使用 Git Bash 的话，必须在登录mysql 的时候使用 <strong>winpty</strong>（Git Bash自带的工具）命令，否则登录会卡住不动。命令使用如下：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winpty mysql <span class="operator">-</span>uroot <span class="operator">-</span>proot</span><br></pre></td></tr></table></figure><p><strong>Step-4</strong>：终端登录 mysql</p><p>执行下面命令登录服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p root</span><br></pre></td></tr></table></figure><p>如下图可以登录成功，如下截图：</p><p><img src="/upload/images/2019/11/10/3.png" alt="1568529858131"></p><p><strong>Step-5</strong>：置空密码</p><p>在上述命令行状态下，执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>Step-6</strong>：退出 mysql 服务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><p><strong>Step-7</strong>：关闭 mysqld 启动的 MySQL80 服务</p><p>需要关闭以 <code>-console --skip-grant-tables --shared-memory</code> 启动的 MySQL80 服务，直接在终端1中 <code>ctrl+c</code> 即可。</p><p><strong>Step-8</strong>：启动 MySQL80 服务</p><p>使用<strong>Step-1</strong>步骤中的方式打开 Windows 的服务启动或者在终端1中执行  <code> net start MySQL80</code> 启动 MySQL80 服务。</p><p><strong>Step-9</strong>： 无密码登录 mysql</p><p>在步骤 <strong>Step-5</strong> 中已将密码置空，现在可以无密码状态登录 mysql 服务，输入登录命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br></pre></td></tr></table></figure><p>登录成功后，修改密码（永远不过期的密码）执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;newpwd123&#x27;</span> PASSWORD EXPIRE NEVER;</span><br></pre></td></tr></table></figure><p>我把原来的密码修改为 <code>newpwd123</code>，你可以根据自己的爱好设置为其他的密码。</p><p>如果在此步骤出现类似下面的错误:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span><br></pre></td></tr></table></figure><p>请执行下面的SQL语句，如下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><strong>Step-10</strong>：退出 mysql，重新登录</p><p>退出 mysql，然后重新使用修改过的密码登录 mysql，完事。</p><h2 id="MySQL配置文件？"><a href="#MySQL配置文件？" class="headerlink" title="MySQL配置文件？"></a>MySQL配置文件？</h2><p>这也是个神奇的问题，最后在 MySQL 的官方手册里找到了 Answer。</p><p>在 Windows 系统中 C 盘有个隐藏的文件夹，我们来揭开它的神秘面纱。</p><p>打开 C 盘文件，按照下面1、2、3顺序就可以看到 <code>ProgramData </code>文件夹，如下：</p><p><img src="/upload/images/2019/11/10/4.png" alt="1568529858131"></p><p>进入该文件夹，就可以看到 MySQL 的配置文件，如下：</p><p><img src="/upload/images/2019/11/10/5.png" alt="1568529858131"></p><p>上面我们已经说过，启动 MySQL80 服务就默认使用的是该配置文件，可以在 Windows 服务中点击 MySQL80 查看其属性，可以看到下面的描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可执行文件的路径：</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 8.0\bin\mysqld.exe&quot; --defaults-file=&quot;C:\ProgramData\MySQL\MySQL Server 8.0\my.ini&quot; MySQL80</span><br></pre></td></tr></table></figure><p>其中，<code>--defaults-file=&quot;C:\ProgramData\MySQL\MySQL Server 8.0\my.ini&quot;</code> 就是指定配置文件路径的。</p><p>而在 Windows 服务中点击 MySQL，看到的属性是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可执行文件的路径：</span><br><span class="line">&quot;C:\Program Files\MySQL\MySQL Server 8.0\bin\mysqld.exe&quot; MySQL</span><br></pre></td></tr></table></figure><p>并没有指定配置文件，这也是为什么让大家启动的时候执行 <code>net start MySQL80</code> 的原因。</p><p>顺便修改一下配置文件，把默认编码改为 <code>utf-8</code>，如下配置（记得是在[client]和[mysql]标签下）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">pipe=</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">socket=MYSQL</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-beep</span><br><span class="line"><span class="meta"># </span><span class="language-bash">设置默认编码</span></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h2 id="还有奇葩的错误"><a href="#还有奇葩的错误" class="headerlink" title="还有奇葩的错误"></a>还有奇葩的错误</h2><blockquote><p>会持续记录各种奇葩错误。</p></blockquote><p>1、<strong>ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost’ (10061)</strong></p><p>登录 mysql 服务，报上面的错误，说明没有启动成功 MySQL80 服务，最大的可能是你修改了配置文件要么是格式错了要么是配置的东西 mysql 不认。</p><p>只能把配置文件修改正确才能启动服务。</p><hr><p><strong>我们要学会做自己精神领域内的君王，不要成为别人情绪世界里面的奴隶。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL Win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 部署服务</title>
      <link href="/2019/10/31/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/10/31/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务系列</a> 文章中，跟大家从环境搭建、Web工程创建、提供Restful接口、热部署、Git使用以及Swagger生成文档分享了SpringBoot的入门知识。今天继续分享如何使用IDEA和maven对工程进行打包操作，然后发布代码到服务器进行部署的过程。</p><p>大家有任何问题，或者文中有不正确的地方欢迎留言评论，共同进步，再次感谢大家的阅读。</p><h2 id="IDEA-打包"><a href="#IDEA-打包" class="headerlink" title="IDEA 打包"></a>IDEA 打包</h2><p>在 <code>File/Project Structure</code> 打开视图，或者使用快捷键 <code>Ctrl+Alt+Shift+S</code> 打开视图。</p><p><img src="/upload/images/2019/10/31/1.png" alt="1568529858131"></p><p>打开的视图如下：</p><p><img src="/upload/images/2019/10/31/2.png" alt="1568529858131"></p><p>按照 1、2、3  步骤打开下面视图，如下：</p><p><img src="/upload/images/2019/10/31/3.png" alt="1568529858131"></p><p>配置该视图的内容，分别设置 <code>Main Class</code> 和 选择 <code>JAR files</code>，如下：</p><p><img src="/upload/images/2019/10/31/4.png" alt="1568529858131"></p><p>这里特别要注意，选择生成 <code>MANIFEST.MF</code> 文件目录放到 <code>resources</code> 下面，默认会放在 <code>main\java</code> 目录下。</p><p>如果不修改这个目录，最终运行生成的 jar 文件，会报下面的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invalid or corrupt jarfile &#123;project_name&#125;.jar</span><br></pre></td></tr></table></figure><p>配置完成后，点击 OK 关闭对话框即可。</p><p>接下来需要编译，点击 IDEA 的 Build 菜单，选择 <code>Build Artifacts...</code>，如下截图：</p><p><img src="/upload/images/2019/10/31/5.png" alt="1568529858131"></p><p>点击  <code>Build Artifacts...</code> 后出现视图</p><p><img src="/upload/images/2019/10/31/6.png" alt="1568529858131"></p><p>第一次直接选择 Build 选项，后续可以选择 Rebuild 或者 Clean 选项，根据你的需要进行选择即可。</p><p>等待 IDEA 打包完成后，在工程文件中会生成 <code>out</code> 目录和 resources 目录下面生成 <code>META-INF</code> 目录和对应的文件，如下图所示：</p><p><img src="/upload/images/2019/10/31/7.png" alt="1568529858131"></p><p>在 <code>springboot_jar</code> 目录下面有打包成功的 jar 文件，即 <code>springboot.jar</code> 文件，另外也将 tomcat 等一些其他依赖包都打包到一起了。</p><p>打开终端，执行 <code>java -jar springboot.jar</code> 就可以运行该项目了。</p><p><img src="/upload/images/2019/10/31/8.png" alt="1568529858131"></p><p>如果发现由于端口被占用而无法启动的情况，可以查看端口占用情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 8080</span><br></pre></td></tr></table></figure><p>查到类似如下结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       18948</span><br><span class="line">TCP    [::]:8080              [::]:0                 LISTENING       18948</span><br></pre></td></tr></table></figure><p>这里演示的进程ID是 18948，强制关闭端口进程即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill -F -PID 18948</span><br></pre></td></tr></table></figure><h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><p>我使用虚拟机（Ubuntu）来简单介绍一下部署过程。虚拟机是 VMWare 其版本是 <code>15.0.2</code>，Ubuntu 系统版本是 <code>19.04</code>。如何安装虚拟机、如何在虚拟机中安装 Ubuntu 系统以及如何在 Ubuntu 中安装 Java 环境请大家自行查找资料完成，这里不赘述。</p><p>可以通过上面的方式（IDEA打包）完成后，将生成的 <code>springboot_jar</code> 目录拷贝到虚拟机的用户目录下，然后通过 <code>java -jar springboot_jar/springboot.jar</code> 来启动服务。</p><p>我们还可以通过 IDEA 的 maven 工具进行打包，步骤如下：</p><p>1、打开工程的maven视图</p><p><img src="/upload/images/2019/10/31/9.png" alt="1568529858131"></p><p>2、按照标红的1、2、3、4操作即可</p><p>成功后在 target 目录会生成对应的可执行的 jar 文件，该 jar 包包括了所有的 SpringBoot 相关的包如下图：</p><p><img src="/upload/images/2019/10/31/10.png" alt="1568529858131"></p><p>同理，复制 <code>springboot-0.0.1-SNAPSHOT.jar</code> 到虚拟机的用户目录，通过 <code>java -jar springboot-0.0.1-SNAPSHOT.jar</code> 运行服务即可。</p><p>查看 Ubuntu 的主机IP地址，可以通过 <code>ifconfig</code> 来获取，也可以在设置里面查找其IP地址。 <code>ifconfig</code> 需要按照 <code>net-tools</code>，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure><p>我的虚拟机的IP地址是 <code>192.168.142.128</code>，即 <code>http://192.168.142.128:8080</code> 是 Ubuntu 的 IP 地址和 Tomcat 的运行端口，回到 Windows 主机上面访问虚拟机的服务，通过下面图可以看出是成功的。</p><p><img src="/upload/images/2019/10/31/11.png" alt="1568529858131"></p><p>这里只是简单的介绍了一下如何将自己写的 SpringBoot 服务部署到服务器上面，在你的实际项目中部署没这么简单，我算是抛砖引玉吧，后续随着学习的深入我再跟大家分享一下在实际大项目中部署遇到的一些问题。</p><hr><p><strong>生活并没有那么复杂，要是你喜欢，大可以说我是在探索生命。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot mvn package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看《银河补习班》有感</title>
      <link href="/2019/10/26/%E7%9C%8B%E3%80%8A%E9%93%B6%E6%B2%B3%E8%A1%A5%E4%B9%A0%E7%8F%AD%E3%80%8B%E6%9C%89%E6%84%9F/"/>
      <url>/2019/10/26/%E7%9C%8B%E3%80%8A%E9%93%B6%E6%B2%B3%E8%A1%A5%E4%B9%A0%E7%8F%AD%E3%80%8B%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/10/26/1.png"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>写这个话题，情不自禁的想起上学考试的作文题目，既有字数限制又要能表达中心思想，好不容易吭哧吭哧地写完了，结果作文分数也不一定理想，毕竟老师的心情指数变幻莫测。</p><p>看完电影《银河补习班》心中五味杂陈，想想自己陪孩子的时间屈指可数，从他出生到现在已经7个多年头了，大部分时间都是他妈妈陪着，我这个做父亲的跟马皓文比起来不止差一个银河系。</p><p>电影中搞笑片段不算多但恰到好处，马飞母亲的扮演者任素汐（看过他主演的电影《驴得水》，冷幽默风格的一部电影）和马飞后爹的扮演者梁超戏份不多但几乎担当了电影中搞笑的全部内容。特别是梁超那句 “儿子，你别的不多，就是爸爸多”，让人即感动又好笑。我相信每个人的上学生涯中都会遇到类似“闫主任”这样角色的老师，严厉的像个自私鬼，在片中简直就像一个名副其实的大反派，那句“莫名其妙、荒谬绝伦”搭配闫主任的短裤简直绝了。</p><p>电影的剧情有点理想化，但里面的很多道理值得我们去学习和反思，这是一部送给儿子和父亲的电影。</p><h2 id="重要的是让孩子看你做什么"><a href="#重要的是让孩子看你做什么" class="headerlink" title="重要的是让孩子看你做什么"></a>重要的是让孩子看你做什么</h2><p>很多朋友觉得我的字写的还算不错，高中时候我的确经常参加书法比赛也拿过很多名次，但是我总是感觉自己的字写的很一般还需要更加努力。所以上学的时候只要有写字的机会我就会利用上，比如出黑板报，帮老师在黑板上面抄题，这些活我都很乐意干。后面参加工作了，自己也保持着写日记的习惯，用笔在笔记本上面写出来的字感觉特别亲切，那些字就好比有温度的灵魂。</p><p><img src="/upload/images/2019/10/26/2.png"></p><p>在写字方面特别要感谢我的父亲，记得刚上初中那会，父亲从外地打工回来特地给我买了一本字帖，最让我感动的是他刚下车就亲自送到学校来了，一直倔强且不善于表达爱的他递给我字帖的那一刻，我才明白真正的爱不是经常挂在嘴边的而是在心里在行动上，请相信不管一个多平凡的爸爸，都会以自己的方式爱你。父亲的字写的比我好，那时候我就树立了一个目标：“将来一定要像父亲一样，把字写好，不能给他丢人“，现在想想自己挺幼稚的。</p><p>电影里面有个片段，深夜里马飞突然睡醒了，看到还在工作的马皓文说：“爸爸，我可以不睡觉吗？”，马皓文说：“那是你自己的事，以后这种事不用问我”。</p><p>每个人都会经历初为人父人母，难免自己也会犯下一些错误，就像电影里面马皓文对自己的儿子马飞说：“对不起！爸爸也是第一次做爸爸”，看到这里我不禁潸然泪下，感觉特别真诚。我和老婆约定一定不要在孩子面前吵架，不要在孩子面前随便发脾气，如果那样做了会给他们心灵上面造成一定的伤害，孩子们的学习模仿能力都比较强，大人的坏脾气会影响到孩子。周末有时间，我都会故意在孩子面前看书，他看我看的那么认真也忍不住过来凑热闹，时间久了他也爱上了看书，他的第一个书架就是这么来的，书架上面的书有些是图书馆借来的，有些是我和老婆买给他的，有些是他和其他小朋友换来的。</p><h2 id="一定要做自己做喜欢的事情"><a href="#一定要做自己做喜欢的事情" class="headerlink" title="一定要做自己做喜欢的事情"></a>一定要做自己做喜欢的事情</h2><p><img src="/upload/images/2019/10/26/4.png"></p><p>今年国庆节放假当天，我六点半起床准备做早餐，发现儿子一个人坐在客厅写作业，我当时惊呆了，这小子怎么这么早就起床了居然还在写作业，如果按照我以前的脾气一定会批评他。就悄悄走过去，轻轻的拍拍他的肩膀说：“你怎么这么勤奋呀？”，他头也不回的说：“今天你不是要带我去玩吗，我想先把作业写完”，我忽然一愣，原来我有过这个承诺，我说：“行，你写完之后给我检查一下，如果问题不大我们今天就早早出发”，他自信的说：”没问题“。</p><p>小的时候家里比较贫寒，我又比较喜欢读书，白天除了上学外其他时间几乎都需要帮助父母干农活，也只有晚上有时间来读书和写作业。北方的冬天很冷，有时候连电我都舍不得用，偷偷的点上蜡烛，母亲经常半夜起来看我，她也没有说我什么，只是告诉我不要太晚了，后来她还给我准备了一个小火炉。每次考试结果不管是好还是差，她总是告诉我要继续努力。如果你已经是一名学生的家长了，看到孩子在努力不要轻易打断他，你只需要鼓励和支持Ta就好了。喜欢电影中的一句台词：“孩子都有一个神奇的感受器，能知道你是不是真的爱TA”。</p><p>现在社会竞争压力确实很大，父母为了孩子也是操碎了心，担心孩子将来怎么办，于是各种学习资料，补习班把孩子压得气喘吁吁。作为父母不督促孩子学习和进步，是我们的失职，但是过度的压迫孩子就是在犯罪，每个孩子都有自己的爱好和梦想，我们应该教导他要努力去实现自己的目标，而不是告诉他你只有考上清华北大才能继续自己的人生，就像电影里面说的：</p><blockquote><p>“你有没有想过长大要干什么”？</p><p>“清华北大啊，妈妈说的”。</p><p>“清华北大只是过程，不是目的”。</p><p>“等你长大了一定要做自己喜欢的事情”。</p></blockquote><p>只有做自己喜欢的事才有可能创造奇迹！</p><h2 id="需要独立思考的能力"><a href="#需要独立思考的能力" class="headerlink" title="需要独立思考的能力"></a>需要独立思考的能力</h2><p>我家那个小子很喜欢拼图，喜欢一个人默默无闻的在房间拯救各种卡片，仿佛只有他才能让散装的奥特曼复活。每次拼装完成他都要过来炫耀一番，当然我也会给他一个大大的赞。</p><p>我们在网上买一些东西，只要他在家他都会要求去拆装。记得上次买了一个吸尘器，我打电话给我老婆说等我回来组装。没过一会，我老婆告诉我说，你儿子已经组装好了。我回来一看组装虽然没有那么完美，但是对于一个不到6岁的孩子来说已经很不错了。之前总是担心孩子做任何事一定做不好，所以处心积虑的避开他，生怕他要自己去做，自从自己看过几期关于孩子如何独立的课程后大大的改变了我的想法。</p><p>记得自己小时候，父母都很忙。看到他们太累了就想着自己一定要学会做饭，于是自己就从下面条开始，慢慢的从洗碗洗锅变成了一个小厨师，妈妈为了这个事骄傲了很久。父母不能总是阻止孩子去做他感兴趣的事情，我们只需要做好引导即可，放心，他们很靠谱！就拿孩子跌倒这件事来说，很多爷爷奶奶看到孩子不小心摔倒就迫不及待的去抱起来，其实这是不对的，我们应该引导孩子如何自己站起来，Ta下次就知道即使跌倒也要自己爬起来。</p><p>孩子在生活中也会遇到一些问题，孩子们有自己的小世界，别以为他们就没有烦恼和困难。在遇到问题的时候，我们不要直接自以为是的给出答案，问问Ta能不能再动动脑筋想想其他办法？</p><blockquote><p>我们的孩子到底需要怎么样的教育？答案是：孩子需要培养独立思考，勇敢面对这个世界、做自己喜欢事情的教育。</p></blockquote><p><img src="/upload/images/2019/10/26/3.png"></p><p>在马飞遇到暴雨而被困住的情况下，马皓文歇斯底里的说：“我是爸爸，动动你的脑子，看看你周围有什么，你一定能出来的”，结果奇迹出现了，马飞自救了。虽然有点夸张，但是它告诉我们如果不是父亲的引导不是儿子的自信和思考这将是一场悲剧，至少我看哭了。</p><p>银河补习班，到底给我们补了什么？</p><p>每个人心中都有自己的答案，对我来说至少让我认识到了陪伴和鼓励很重要！</p><p>记得让孩子做自己喜欢的事情，你只需要鼓励和相信他！</p><hr><p><strong>真正的人生难题，不会像考卷那样，会自动跳出ABCD四个选项，有且只有一种标准答案。而是会有EFGHIJK的岔路，甚至能开出XYZ的脑洞。~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: Swagger生成Markdown文档</title>
      <link href="/2019/10/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E7%94%9F%E6%88%90Markdown%E6%96%87%E6%A1%A3/"/>
      <url>/2019/10/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E7%94%9F%E6%88%90Markdown%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>国庆放假期间，看了一部 2018年上映的电影 《本杰明.巴顿奇事》，豆瓣评分 8.9。影片讲述了一出生便拥有80岁老人形象的本杰明·巴顿，随着岁月的推移逐渐变得年轻，最终回到婴儿形态，并在苍老的恋人黛茜怀中离世的奇异故事。 如果没有看过这部影片的小伙伴抽时间可以去看看，里面有很多关于人生的哲理。</p><p>本次文章封面图来自该电影。</p><p><img src="/upload/images/2019/10/13/1.jpg" alt="1568529858131"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文章 <a href="http://www.veryitman.com/2019/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E8%AE%A9%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%A4%9A%E6%8A%BD%E4%B8%80%E6%94%AF%E7%83%9F/">微服务: Swagger让你可以多抽一支烟</a> 给大家分享了如何在自己的 SpringBoot 工程中集成 Swagger 以及如何使用 Swagger 生成在线文档。今天跟大家分享以下如何使用 Swagger 生成离线的 Markdown 格式的文档，在阅读下面内容之前，还是希望大家能看一下 <a href="http://www.veryitman.com/2019/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E8%AE%A9%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%A4%9A%E6%8A%BD%E4%B8%80%E6%94%AF%E7%83%9F/">微服务: Swagger让你可以多抽一支烟</a> 这篇文章。</p><p>本人是一个热爱 Markdown 的狂热分子，无论是写日记还是工作笔记我都会使用 Markdown工具来做，那种所见即所得的感觉有点暗爽。自己在网上也找了很多关于如何使用 Swagger 生成 Markdown 格式的文档，大多数文章都比较陈旧，好不容易找到一篇自认为还可以的文章去实践发现还是存在一些问题，于是经过摸索诞生了此文。</p><h2 id="集成-swagger2markup"><a href="#集成-swagger2markup" class="headerlink" title="集成 swagger2markup"></a>集成 swagger2markup</h2><p>插件 <code>Swagger2Markup</code> 可以帮助我们将 Swagger 文档转换为离线的 Markdown 格式的文档，<code>Swagger2Markup</code> 介绍如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swagger2Markup converts a Swagger JSON or YAML file into several AsciiDoc or GitHub Flavored Markdown documents which can be combined with hand-written documentation. </span><br></pre></td></tr></table></figure><p>可以在 <a href="https://mvnrepository.com/search?q=swagger2markup">mvnrepository</a> 仓库中搜索 <code>swagger2markup</code>，如图：</p><p><img src="/upload/images/2019/10/13/2.png" alt="1568529858131"></p><p>我使用的是第一个，当前版本是 <code>1.3.3</code>，在工程的 pom 文件中，需要集成 <code>swagger</code> 和 <code>swagger2markup</code>，示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger2markup--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.swagger2markup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger2markup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你认为这样就可以了，那你接下来无法完成编译工作，因为根本下载不了 <code>swagger2markup</code>，还需要在 pom 文件中添加如下内容，示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--不加这个，swagger2markup 找不到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jcenter-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>jcenter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jcenter.bintray.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><p>插件集成成功之后，接下来我们就可以去实现生成 Markdown 文档的梦想了，有点小鸡冻…</p><p>单元测试代码示例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.github.swagger2markup.Swagger2MarkupConfig;</span><br><span class="line"><span class="keyword">import</span> io.github.swagger2markup.Swagger2MarkupConverter;</span><br><span class="line"><span class="keyword">import</span> io.github.swagger2markup.builder.Swagger2MarkupConfigBuilder;</span><br><span class="line"><span class="keyword">import</span> io.github.swagger2markup.markup.builder.MarkupLanguage;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockHttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MvcResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateMarkdownFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Swagger2MarkupConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swagger2MarkupConfigBuilder</span>()</span><br><span class="line">        .withMarkupLanguage(MarkupLanguage.MARKDOWN)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">apiUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/v2/api-docs&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定文件名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">markdownFileName</span> <span class="operator">=</span> <span class="string">&quot;src/docs/markdown/generated/MSBlog_Server_API&quot;</span>;</span><br><span class="line">        Swagger2MarkupConverter.from(apiUrl)</span><br><span class="line">        .withConfig(config)</span><br><span class="line">        .build()</span><br><span class="line">        <span class="comment">//指定生成目录下生成指定文件</span></span><br><span class="line">        .toFile(Paths.get(markdownFileName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完成后，可以运行 <code>generateMarkdownFile</code> 这个方法，右键该方法，出现弹框如下图：</p><p><img src="/upload/images/2019/10/13/3.png" alt="1568529858131"></p><p>直接选择 <code>Run generateMarkdownFile</code> 即可开始。</p><p>不出意外的话，会失败并且报如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to read the Swagger source</span><br></pre></td></tr></table></figure><p>我们要从 <code>http://localhost:8080/v2/api-docs</code> 读取内容，<strong>所以首先需要将主工程运行起来即运行项目</strong>。运行成功之后，再来执行测试代码就可以成功了。</p><p>生成的文件如下：</p><p><img src="/upload/images/2019/10/13/4.png" alt="1568529858131"></p><p>此时的我情不自禁的哼起了：“只要人人都献出一点爱，世界将变成美丽的人间” 的歌词，卧槽+n…总算可以了。</p><p>同理，也可以使用下面的方法生成 <code>adoc</code> 格式（这种格式的文档需要使用其他工具生成 PDF 或者 HTML 文件）的文档，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateDocsFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Swagger2MarkupConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swagger2MarkupConfigBuilder</span>()</span><br><span class="line">        .withMarkupLanguage(MarkupLanguage.ASCIIDOC)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该地址不要写错</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">apiUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/v2/api-docs&quot;</span>);</span><br><span class="line">    <span class="comment">// 指定目录</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dirName</span> <span class="operator">=</span> <span class="string">&quot;src/docs/markdown/generated&quot;</span>;</span><br><span class="line">    Swagger2MarkupConverter.from(apiUrl)</span><br><span class="line">        .withConfig(config)</span><br><span class="line">        .build()</span><br><span class="line">        <span class="comment">//指定生成目录</span></span><br><span class="line">        .toFolder(Paths.get(dirName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你在使用 <code>generateDocsFile()</code> 这个方法发生如下的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: nl/jworks/markdown_to_asciidoc/Converter</span><br></pre></td></tr></table></figure><p>需要在你的 <code>settings.xml</code> 文件（一般在 <code>C:\Users\username\.m2</code> 目录下面，如果没有就新建一个吧）中增加阿里的镜像，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/jcenter<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存，然后去 IDEA 中重新运行测试方法即可。</p><p>如果你之前修改过 <code>settings.xml</code> 文件的位置，可以参考 <a href="https://blog.csdn.net/fengqing5578/article/details/82854495">idea设置maven配置文件setting.xml的位置</a> 这篇文章去找到该文件再修改。</p><p>打烊，手工！</p><hr><p><strong>一件事无论太晚或者太早，都不会阻拦你成为你想成为的那个人，这个过程没有时间的期限，只要你想，随时都可以开始~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot Swagger Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: Swagger让你可以多抽一支烟</title>
      <link href="/2019/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E8%AE%A9%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%A4%9A%E6%8A%BD%E4%B8%80%E6%94%AF%E7%83%9F/"/>
      <url>/2019/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E8%AE%A9%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%A4%9A%E6%8A%BD%E4%B8%80%E6%94%AF%E7%83%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://swagger.io/">Swagger</a>，可用于生成、描述、调用和可视化 RESTful 风格接口的API，是一套规范和完整的开发框架，并且能对接口进行单独测试。</p><p>另外， <a href="https://github.com/swagger-api">Swagger</a> 在 Github 上面是开源的。</p><p>无论对于后端开发，还是前端开发以及测试同事，Swagger 都可以基本满足使用需求。</p><p>在 SpringBoot 中集成 Swagger，后端同事写完接口就可以自动生成API文档，可以给到前端同事看，测试同事可以直接测试该接口。</p><p>在本篇中，跟大家分享如下内容：</p><p>1、在 SpringBoot 中项目如何集成 Swagger？</p><p>2、如何使用 Swagger，如何在不同的环境中开启和关闭 Swagger？</p><p>3、如何将同类的接口使用 Swagger 注解进行聚合？</p><p>更多关于 SpringBoot 的文章，可以点击 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务项目系列文章</a> 了解，完整代码示例请前往 <a href="https://github.com/veryitman/MSTutorial">Github</a> 查看。</p><h2 id="集成-Swagger"><a href="#集成-Swagger" class="headerlink" title="集成 Swagger"></a>集成 Swagger</h2><p>在 <a href="https://mvnrepository.com/">MavenEwpository</a> 搜索 <code>Springfox</code>，可以找到 <code>Swagger2</code> 和 <code>Swagger UI</code>，如图所示。</p><p><img src="/upload/images/2019/09/22/1.png" alt="1568529858131"></p><p>截止到目前， <code>Swagger2</code> 和 <code>Swagger UI</code> 最新版本是 <code>2.9.2</code> 版本。</p><p>修改工程的pom文件，增加 <code>Swagger2</code> 和 <code>Swagger UI</code> 的依赖，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为我的项目已经集成了 <code>starter-web</code>，如下 pom 文件中的 dependency：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样默认会集成 <code>com.fasterxml.jackson.core:</code> 相关的库，不需要额外再去集成 <code>jackson-databind</code> 了，如下图所示：</p><p><img src="/upload/images/2019/09/22/2.png" alt="1568529858131"></p><p>否则你需要单独增加 <code>jackson-databind</code> 的依赖，同样的道理你可以在  <a href="https://mvnrepository.com/">MavenEwpository</a> 搜索 <code>jackson-databind</code> 选择合适的版本即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工程已经集成了 <code>Swagger</code>，接下来我们看看如何使用。</p><h2 id="使用-Swagger"><a href="#使用-Swagger" class="headerlink" title="使用 Swagger"></a>使用 Swagger</h2><h4 id="1、创建Swagger配置"><a href="#1、创建Swagger配置" class="headerlink" title="1、创建Swagger配置"></a>1、创建Swagger配置</h4><p>新建一个配置类 <code>MSSwaggerConfig</code>，该文件名称和位置你可以放到你的工程的任意目录，根据自己的项目目录来放置即可。</p><p><code>MSSwaggerConfig</code> 示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">msblogDocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2);</span><br><span class="line"><span class="type">String</span> <span class="variable">pkgName</span> <span class="operator">=</span> <span class="string">&quot;com.veryitman.springboot.controller&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> docket.apiInfo(msblogAPIInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(pkgName))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">msblogAPIInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfoBuilder</span> <span class="variable">apiInfoBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">apiTitle</span> <span class="operator">=</span> <span class="string">&quot;MSBlog Server API&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">apiDes</span> <span class="operator">=</span> <span class="string">&quot;API for MSBlog&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">apiVersion</span> <span class="operator">=</span> <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">homePage</span> <span class="operator">=</span> <span class="string">&quot;http://veryitman.com&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">emailUrl</span> <span class="operator">=</span> <span class="string">&quot;veryitman@126.com&quot;</span>;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;itman&quot;</span>, homePage, emailUrl);</span><br><span class="line">        <span class="keyword">return</span> apiInfoBuilder.title(apiTitle).description(apiDes)</span><br><span class="line">                .version(apiVersion)</span><br><span class="line">                .contact(contact)</span><br><span class="line">                .license(<span class="string">&quot;Apache 2.0&quot;</span>)</span><br><span class="line">                .licenseUrl(<span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得添加 <code>@Configuration</code>、 <code>@EnableSwagger2</code> 这两个注解。</p><p>对于 <code>apis(RequestHandlerSelectors.basePackage(pkgName))</code> 目的是只扫描指定包名下面 Controller 的 Swagger 注解，这样就不会去扫描其他包下面的类了。</p><p>对于这个配置类，主要是用来生成一些摘要信息，如图：</p><p><img src="/upload/images/2019/09/22/3.png" alt="1568529858131"></p><h4 id="2、注解-Controller"><a href="#2、注解-Controller" class="headerlink" title="2、注解 Controller"></a>2、注解 Controller</h4><p>在 <a href="http://www.veryitman.com/2019/09/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E5%BD%95/">微服务-简单的用户名注册和登录</a> 给大家分享了如何写注册和登录的API，今天还是拿注册的例子来进行 Swagger 的演示。</p><p>下面代码是用户注册的示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signup&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSignupController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &#123;&quot;*&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/name&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;用户注册&quot;, httpMethod = &quot;POST&quot;, notes = &quot;用户名和密码注册&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;username&quot;, value = &quot;注册的用户名&quot;, required = true),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;userpwd&quot;, value = &quot;注册的密码&quot;, required = true)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">signup</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">       <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如下的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;用户注册&quot;, httpMethod = &quot;POST&quot;, notes = &quot;用户名和密码注册&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;注册的用户名&quot;, required = true),</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;userpwd&quot;, value = &quot;注册的密码&quot;, required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>这些注解就是 Swagger 的注解，<code>@ApiOperation</code> 说明了该接口的用途，<code>@ApiImplicitParams</code> 中有两个 <code>@ApiImplicitParam</code> 用来对接口的参数进行说明。</p><p>如果接口只有一个参数，可以直接使用 <code>@ApiImplicitParam</code> 注解即可。</p><h4 id="3、在线文档"><a href="#3、在线文档" class="headerlink" title="3、在线文档"></a>3、在线文档</h4><p>配置完成之后，可以启动 SpringBoot 项目，在浏览器中打开下面地址，就可以看到生成的在线文档了。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/swagger-ui.html#/</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2019/09/22/4.png" alt="1568529858131"></p><p>点击对应的 Controller 就可以看到对应接口的详细说明了，并且还可以对接口进行测试。</p><h2 id="分环境开启-Swagger"><a href="#分环境开启-Swagger" class="headerlink" title="分环境开启 Swagger"></a>分环境开启 Swagger</h2><p>在实际项目中，我们一般只会在开发和测试环境使能 Swagger，在沙盒和生成环境会关闭 Swagger，那如何控制呢？</p><p>在工程的 <code>Resources</code> 目录下面，新建几个跟环境相关的 properties 文件。</p><p>这些文件的命令要满足 <code>application-&#123;profile&#125;.properties</code> 的格式，其中 <code>&#123;profile&#125;</code> 你可以自定义名字，如下我自定义了4个环境，分别是开发、生产、沙盒和测试环境。</p><p><img src="/upload/images/2019/09/22/5.png" alt="1568529858131"></p><p>我们知道，在 <code>application-&#123;profile&#125;.properties</code> 中配置的选项与在  <code>application.properties</code> 中配置的选项如果名称相同，优先会使用  <code>application-&#123;profile&#125;.properties</code> 中配置。</p><p>在  <code>application.properties</code> 中配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置使用哪个环境</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"># 默认不启用 swagger</span><br><span class="line">swagger.enable=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>对应的在 <code>application-dev.properties</code> 和 <code>application-test.properties</code> 中开启 swagger，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启用 swagger</span><br><span class="line">swagger.enable=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>选项配置完成后，我们在代码中使用该选项，修改 <code>MSSwaggerConfig</code> 如下(只列出了修改部分的关键代码)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;swagger.enable&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enableSwagger;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">msblogDocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).enable(enableSwagger);</span><br><span class="line"><span class="type">String</span> <span class="variable">pkgName</span> <span class="operator">=</span> <span class="string">&quot;com.veryitman.springboot.controller&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> docket.apiInfo(msblogAPIInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 只扫描指定包名下面的Controller中的Swagger注解</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(pkgName))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中读取配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;swagger.enable&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> enableSwagger;</span><br></pre></td></tr></table></figure><p>然后调用 Docket 的 <code>enable(enableSwagger)</code> 方法来决定是否开启 Swagger，如果配置不开启，效果图如下：</p><p><img src="/upload/images/2019/09/22/6.png" alt="1568529858131"></p><p>还有其他方式来控制在不同环境下配置 Swagger 是否开启，比如可以结合注解 <code>@Profile</code> 通过不同的 profile 给 Swagger 的依赖设置不同的 scope，还可以使用注解 <code>@ConditionalOnProperty(name = &quot;swagger.enable&quot;, havingValue = &quot;true&quot;)</code>，大家自行选择适合自己项目的方案即可，目的都是一样。</p><h2 id="聚合接口"><a href="#聚合接口" class="headerlink" title="聚合接口"></a>聚合接口</h2><p>在上面实例中，我们可以看到登录和注册都属于用户模块，使用注解 <code>@API</code> 可以聚合显示这些接口。</p><p>在登录和注册的 Controller 中可以添加下面注解，从而来聚合显示接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value=&quot;xxx&quot;, tags=&quot;用户模块&quot;)</span></span><br></pre></td></tr></table></figure><p>注册 Controller 添加注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value=&quot;signup&quot;, tags=&quot;用户模块&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signup&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSignupController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录 Controller 添加注解，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Api(value=&quot;signin&quot;, tags=&quot;用户模块&quot;)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;signin&quot;)</span><br><span class="line">public class MSSigninController &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="/upload/images/2019/09/22/7.png" alt="1568529858131"></p><hr><p><strong>你眼睛看到的不一定是事实的全部~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot Swagger doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 简单的用户名注册和登录</title>
      <link href="/2019/09/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E5%BD%95/"/>
      <url>/2019/09/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><p>在本篇中我们要完成一个目标：<strong>提供注册、登录的接口给前端或者客户端来使用</strong>。</p><p>涉及到的内容主要有下面几个：</p><p><strong>1、</strong>SpringBoot 中常用的注解如何使用？</p><p><strong>2、</strong> 如何对接口进行单元测试？</p><p>其他相关的微服务文章，可以点击 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/">微服务项目系列文章</a> 了解。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>控制器 <code>Controller</code> 是 Spring 中最基本的组件，主要是处理跟用户交互的，一般每个业务逻辑都会有一个 <code>Controller</code>，提供 HTTP 请求接口，用户请求接口进行数据访问。</p><p>跟 Controller 相关的几个注解主要有 <code>@Controller</code>，<code>@RestController</code>，<code>@RequestMapping</code>，<code>@PathVariable</code>，<code>@RequestParam</code>，<code>@GetMapping</code> 等。</p><ul><li><code>@Controller</code>：标注 <code>Controller</code> 类，处理  HTTP 请求。</li><li><code>@RestController</code>：标注 <code>Controller</code> 类，Spring 4 新加注解，相当于 <code>@Controller</code> + <code>@ResponseBody</code> ，主要是为了使  HTTP 请求返回数据格式为 <code>json</code> 格式，正常情况下都是使用这个注解。</li><li><code>@RequestMapping</code>：配置 URL 映射，即请求的地址。</li><li><code>@PathVariable</code>，<code>@RequestParam</code> ，<code>@QueryParam</code> ，<code>@PathParam</code> 注解，可以参考 <a href="http://www.veryitman.com/2019/08/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%AD%A6%E4%B9%A0%E5%87%A0%E4%B8%AA%E5%AE%B9%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84URL%E6%B3%A8%E8%A7%A3/">微服务: 学习几个容易混淆的URL注解</a> 这篇文章。</li><li><code>@GetMapping</code>，<code>@PostMapping</code>，<code>@PutMapping</code> 称之为组合注解，它们等价于 <code>@RequestMapping</code> 单独指定映射再指定请求方法。举个例子，如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/signup/name&quot;, method = RequestMethod.POST)</span></span><br></pre></td></tr></table></figure><p>等价于下面的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/signup/name&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="编写实体"><a href="#编写实体" class="headerlink" title="编写实体"></a>编写实体</h2><p>不管是登录还是注册，都是每个用户进行的操作，我们先定义用户实体类 <code>MSUser</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSUser</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String userID;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账号名称，用于登录，不可以修改</span></span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账号密码</span></span><br><span class="line">    <span class="keyword">private</span> String accountPwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 昵称默认和accountName一致，可以修改</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 座右铭；格言；箴言</span></span><br><span class="line">    <span class="keyword">private</span> String motto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以看到，在实体类  <code>MSUser</code> 中，我们用到了注解 <code>@Data</code> ，该注解来源于 <code>lombok</code>，需要自己在IDEA中安装该插件，安装方法请大家自行搜索解决。</p><p>注解 <code>@Data</code> 相当于给我们自动实现了 <code>Get</code> 、<code>Setter</code>、<code>toString</code>、 <code>equals</code> 和 <code>hashCode</code> 方法以及构造方法，不需要我们自己再去写这些代码。</p><p>HTTP 的请求响应结果，也可以被封装为实体类，如下 <code>MSResponse</code> 就是用来承载HTTP返回的响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSResponse</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h2><p>一般来说，用户注册需要将用户的信息存下来，存到数据库中方便后续使用这份数据，这个行为称之为 <code>数据持久化</code> ，现在我们不做这个操作，只是纯粹的提供接口让用户可以注册、登录我们的系统，后续再来考虑和实现数据持久化。</p><p>这个阶段注册功能只提供 <code>用户名+密码</code> 的方式，该请求是个 <code>POST</code> 请求，主要核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signup&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSignupController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &#123;&quot;*&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/name&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">signup</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">        <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MSResponse</span>();</span><br><span class="line">        <span class="type">MSUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userName || <span class="literal">null</span> == userPwd || userName.length() &lt;= <span class="number">0</span> || userPwd.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">MSResponseEnum</span> <span class="variable">signupError</span> <span class="operator">=</span> MSResponseEnum.SignupInvalidInfo;</span><br><span class="line">            response.setMsg(signupError.getMsg());</span><br><span class="line">            response.setCode(signupError.getCode());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.setCode(MSResponseEnum.SUCCESS.getCode());</span><br><span class="line">            response.setMsg(MSResponseEnum.SUCCESS.getMsg());</span><br><span class="line">            user = MSUserUtil.createUser(userName, userPwd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setResults(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，登录功能也只提供 <code>用户名+密码</code> 的方式，该请求是个 <code>GET</code> 请求，主要核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSigninController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &#123;&quot;*&quot;, &quot;http://localhost:8082&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/name&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">sigin</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">        <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MSResponse</span>();</span><br><span class="line">        <span class="type">MSUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userName || <span class="literal">null</span> == userPwd || userName.length() &lt;= <span class="number">0</span> || userPwd.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">MSResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSResponseEnum.Login4SiginInvalidInfo;</span><br><span class="line">            response.setCode(responseEnum.getCode());</span><br><span class="line">            response.setMsg(responseEnum.getMsg());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            user = MSUserUtil.createUser(userName, userPwd);</span><br><span class="line">            <span class="type">MSResponseEnum</span> <span class="variable">rspEnum</span> <span class="operator">=</span> MSResponseEnum.SUCCESS;</span><br><span class="line">            response.setCode(rspEnum.getCode());</span><br><span class="line">            response.setMsg(rspEnum.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setResults(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>在 IDEA 中新建 SpringBoot 工程后，默认就会创建一个测试目录。</p><p>即 <code>test</code> 目录下会有 <code>SpringbootApplicationTests</code> 类文件，其中 pom 文件中已经添加好了 <code>spring-boot-starter-test</code> 启动器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>springboot－test</code> 包中已经包括了 <code>junit</code> 和 <code>mockito</code> 类库，不需要我们额外再去添加这些库。</p><p>借助于 <code>MockMvc</code> 我们可以对接口进行简单的单元测试了。主要的测试核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 登录的接口测试，GET 请求 */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signinTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//直接写接口的映射地址就可以了，不需要写host和port</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;/signin/name?username=itman&amp;userpwd=123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">MvcResult</span> <span class="variable">mvcResult</span> <span class="operator">=</span> mvc.perform(MockMvcRequestBuilders.get(url)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON)) <span class="comment">//断言返回结果是json</span></span><br><span class="line">                .andReturn();</span><br><span class="line"></span><br><span class="line">        <span class="type">MockHttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> mvcResult.getResponse();</span><br><span class="line">        <span class="comment">//HTTP响应的返回码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> response.getStatus();</span><br><span class="line">        <span class="comment">//HTTP响应的内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contentAsString</span> <span class="operator">=</span> response.getContentAsString();</span><br><span class="line"></span><br><span class="line">        System.err.println(status);</span><br><span class="line">        System.err.println(contentAsString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册的接口测试，POST 请求 */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signupTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;/signup/name&quot;</span>;</span><br><span class="line">        <span class="type">MvcResult</span> <span class="variable">mvcResult</span> <span class="operator">=</span> mvc.perform(MockMvcRequestBuilders.post(url)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .param(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;itman&quot;</span>)</span><br><span class="line">                .param(<span class="string">&quot;userpwd&quot;</span>, <span class="string">&quot;123567&quot;</span>))</span><br><span class="line">                .andReturn();</span><br><span class="line">        <span class="type">MockHttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> mvcResult.getResponse();</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> response.getStatus();</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentAsString</span> <span class="operator">=</span> response.getContentAsString();</span><br><span class="line">        System.err.println(status);</span><br><span class="line">        System.err.println(contentAsString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面编写的测试代码中，解释一下几个用到的注解和类。</p><p><strong>1、@RunWith(SpringRunner.class)</strong> ，<code>SpringRunner</code> 是 <code>SpringJUnit4ClassRunner</code> 的简写，用于提供测试时的 Spring 应用上下文信息。</p><p><strong>2、MockMvc</strong> ，<code>MockMvc</code> 是测试 Spring MVC 应用程序的主要入口，为我们的测试提供了一个模拟的应用上下文的环境。</p><p><strong>3、@Autowired</strong>，可以对类成员变量、方法及构造函数进行标注，完成自动装配。不需要手动创建该对象，这个跟 Spring 的 IOC 机制有关。</p><p>代码写好之后，就可以进行单元测试了，直接在 <code>signinTest</code> 或者 <code>signupTest</code> 右键运行即可，不需要启动整个工程。如下图所示：</p><p><img src="/upload/images/2019/09/15/1.png" alt="1568529858131"></p><p>运行之后，可以在输出的控制台中看到信息：</p><p><img src="/upload/images/2019/09/15/2.png" alt="1568529940948"></p><h2 id="前端请求"><a href="#前端请求" class="headerlink" title="前端请求"></a>前端请求</h2><p>在 <a href="http://www.veryitman.com/2019/08/31/%E8%B7%A8%E5%9F%9F%E5%92%8COPTIONS%E8%BF%99%E5%AF%B9%E6%AC%A2%E5%96%9C%E5%86%A4%E5%AE%B6/">跨域和OPTIONS这对欢喜冤家</a> 和 <a href="http://www.veryitman.com/2019/09/08/%E5%87%8F%E5%B0%91%E8%B7%A8%E5%9F%9F%E4%B8%AD%E7%9A%84OPTIONS%E8%AF%B7%E6%B1%82/">减少跨域中的OPTIONS请求</a> 这两篇文章中，已经跟大家分享过如何在前端页面中进行接口访问了，其中也重点讲解了如何在 SpringBoot 中解决跨域问题，这里不再赘述，感兴趣的朋友可以去看看这两篇文章。</p><p>文中的完整示例代码都在 <a href="https://github.com/veryitman/MSTutorial">Github</a> 上面，需要的可以自行clone，感谢您的阅读。</p><hr><p><strong>临渊羡鱼不如按退而结网~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot 微服务 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减少跨域中的OPTIONS请求</title>
      <link href="/2019/09/08/%E5%87%8F%E5%B0%91%E8%B7%A8%E5%9F%9F%E4%B8%AD%E7%9A%84OPTIONS%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/09/08/%E5%87%8F%E5%B0%91%E8%B7%A8%E5%9F%9F%E4%B8%AD%E7%9A%84OPTIONS%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇是继 <a href="http://www.veryitman.com/2019/08/31/%E8%B7%A8%E5%9F%9F%E5%92%8COPTIONS%E8%BF%99%E5%AF%B9%E6%AC%A2%E5%96%9C%E5%86%A4%E5%AE%B6/">跨域和OPTIONS这对欢喜冤家</a> 后的一篇文章，在本篇中我们继续探索跨域中的 OPTIONS 请求，主要分享一下：</p><ul><li><p>SpringBoot 中除了 <code>CrossOrigin</code> 注解外还有哪些方式可以解决跨域问题？</p></li><li><p>如何使用 SpringBoot 结合 CORS 减少 OPTIONS 请求？</p></li></ul><p>阅读下面内容之前，强烈建议先阅读之前的 <a href="http://www.veryitman.com/2019/08/31/%E8%B7%A8%E5%9F%9F%E5%92%8COPTIONS%E8%BF%99%E5%AF%B9%E6%AC%A2%E5%96%9C%E5%86%A4%E5%AE%B6/">跨域和OPTIONS这对欢喜冤家</a> 这篇文章。</p><p>文中使用的代码都可以在 <a href="https://github.com/veryitman/MSTutorial">Github</a> 找到，大家根据需要自行采纳。</p><h2 id="用上-Nginx"><a href="#用上-Nginx" class="headerlink" title="用上 Nginx"></a>用上 Nginx</h2><p>这次使用 Nginx 作为 Web 容器，在本地将HTML跑起来，上次是在 Chrome 中直接打开 HTML 文件的方式来验证跨域问题的。我们知道只要端口不同也会造成跨域问题，那么只需要在 Nginx 中配置一个端口不同于服务端口的虚拟主机就可以达到目的了。</p><p>由于我是在 Win10 上面做的例子，包括 Nginx 也是 Windows 版本的，如果没有安装的小伙伴请去 <a href="http://nginx.org/">下载Nginx</a> 直接解压即可。</p><p>我把 Nginx 解压放到：<code>D:\portable\nginx-1.15.12</code> 这个目录，你可以解压到你认为比较合适的地方。</p><p>打开 Nginx 的配置文件 <code>nginx.conf</code> 即在 <code>安装目录\conf</code> 下面，增加一个虚拟主机配置项，修改完成后保存配置文件即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义虚拟主机，可以同时配置多个虚拟主机</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8082</span>; <span class="comment"># 不同于服务端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># 文件路径，注意路径分隔符是 `/` 不是 `\`</span></span><br><span class="line">            <span class="attribute">root</span>   E:/examples/cors-options;</span><br><span class="line">            <span class="comment"># 默认页面</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>E:/examples/cors-options;</code> 是我的 HTML 文件(<code>options.html</code> )路径，你要根据自己实际HTML路径来配置这个选项，否则后面无法打开该文件。</p><p>这里我把这个文件命名为 <code>options.html</code>，HTML文件内容大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>options-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./jquery.json.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getReq</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/signin/name?username=jack&amp;userpwd=123&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">token</span>: <span class="string">&quot;yu7rX98xxxx_iii^ddd&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">userId</span>: <span class="number">123</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">openid</span>: <span class="number">231232</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">done</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">fail</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getReq()&quot;</span>&gt;</span>用户名登录-GET<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在启动 Nginx，启动 Nginx 很简单，打开 Windows 终端或者 Git 的终端(如果你安装了 Git 的话，即使没有安装我也强烈建议你安装，因为太好用了)，然后 cd到 Nginx 的安装目录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> nginx.exe</span><br></pre></td></tr></table></figure><p>打开 Chrome 浏览器，输入下面的网址进行访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8082/options.html</span><br></pre></td></tr></table></figure><p>不出意外的话，可以看到显示一个按钮的视图，顺便把 Chrome 的审查视图(Ctrl+Shift+i)打开，大概是下面截图的样子。</p><p><img src="/upload/images/2019/09/08/1.png"></p><h2 id="指定域名列表"><a href="#指定域名列表" class="headerlink" title="指定域名列表"></a>指定域名列表</h2><p>Nginx 配置完成，文件也可以正常的打开，那我们就来试试是否跟预想的一致？</p><p>SpringBoot 关键示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signin&quot;)</span> <span class="comment">// 注意这里不要在signin前后加&quot;/&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSigninController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/name&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">sigin</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 SpringBoot 服务（默认运行在8080端口不同于网页运行端口8082）完成后，点击 Chrome 视图中的按钮进行请求，截图如下：</p><p><img src="/upload/images/2019/09/08/2.png"></p><p>可以看到跟我们预期一致，的确造成了跨域请求，并且进行了 OPTIONS 请求。</p><p>在 SpringBoot 的某个方法上面添加 <code>CrossOrigin</code> 注解可以解决跨域问题，并且可以指定域名列表，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSigninController</span> &#123;</span><br><span class="line"><span class="comment">// 指定域名列表</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &#123;&quot;http://localhost:8082&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/name&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">sigin</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务后，再去验证一下发现请求就可以通过了。</p><p><img src="/upload/images/2019/09/08/3.png"></p><p>如果你感兴趣，可以修改一下 <code>CrossOrigin</code> 注解中的域名列表端口号，再去请求就会失败。</p><p>使用  <code>CrossOrigin</code> 注解指定域名列表，可以从更小的粒度上面控制跨域请求。</p><p>那么除了使用  <code>CrossOrigin</code> 注解意外，在 SpringBoot 中还可以怎样解决跨域问题呢？</p><h2 id="解决跨域的其他计策"><a href="#解决跨域的其他计策" class="headerlink" title="解决跨域的其他计策"></a>解决跨域的其他计策</h2><p>目前除了使用  <code>CrossOrigin</code> 注解，还可以使用下面几种方法来解决跨域问题。</p><h3 id="1、自定义Filter"><a href="#1、自定义Filter" class="headerlink" title="1、自定义Filter"></a>1、自定义Filter</h3><p>自定义 <code>Filter</code> 可以解决跨域问题，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSCorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;HTTP&#x27;s OPTIONS Coming&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置所有的请求域名都可以</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置允许的请求方法</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置缓存时间单位为秒，在改时间内不需要再发送预检验请求，即缓存该结果</span></span><br><span class="line">        <span class="comment">// 设置为0就相当于不设置缓存，即每次都会有OPTIONS请求</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置允许跨域请求包含content-type头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Filter has been used.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们是通过设置 <code>Access-Control-Allow-Origin</code> 允许所有的域名(通配符*)都可以访问，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以设置指定域名才可以，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8082&quot;</span>);</span><br></pre></td></tr></table></figure><p>那我们需要思考一下了，<code>setHeader</code> 方法只能设置一个指定的域名，如果我想设置多个域名怎么办？</p><p>首先告诉你通过下面的方式肯定不行，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8082&quot;</span>);</span><br><span class="line">response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8083&quot;</span>);</span><br></pre></td></tr></table></figure><p>具体原因大家可以看一下源码就秒懂了。</p><p>有一个解决方案，把可以通过跨域访问的域名做成数组也是大家在业务上面经常说的白名单，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置多个域名支持，类似白名单</span></span><br><span class="line">String[] allowDomain = &#123;<span class="string">&quot;http://localhost:8082&quot;</span>, <span class="string">&quot;http://localhost:8083&quot;</span>, <span class="string">&quot;http://localhost:8085&quot;</span>, <span class="string">&quot;http://localhost:8087&quot;</span>&#125;;</span><br><span class="line"><span class="type">Set</span> <span class="variable">allowedOrigins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(Arrays.asList(allowDomain));</span><br><span class="line"><span class="type">String</span> <span class="variable">originHeader</span> <span class="operator">=</span> ((HttpServletRequest) req).getHeader(<span class="string">&quot;Origin&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;originHeader: &quot;</span> + originHeader);</span><br><span class="line"><span class="keyword">if</span> (allowedOrigins.contains(originHeader)) &#123;</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, originHeader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来思考一个问题，上面那种方式自定义Filter会对所有URL即全局的请求都起作用了，能否对指定URL进行过滤呢？</p><p>做过Spring的同学肯定知道，我们可以设置 <code>WebFilter</code>，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123; &quot;/signin/name&quot; &#125;)</span></span><br></pre></td></tr></table></figure><p>这样修改后，需要修改一下SpringBoot相关的代码，首先去掉 <code>Component</code> 注解，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123; &quot;/signin/name&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSCorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要在 Application 中添加 <code>ServletComponentScan</code> 注解，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结合 Filter 我们可以做出更细粒度更多功能来解决和控制跨域问题。Filter 这种方式对跨域的 GET 和 POST 请求都是支持的。</p><h3 id="2、WebMvcConfigurationSupport"><a href="#2、WebMvcConfigurationSupport" class="headerlink" title="2、WebMvcConfigurationSupport"></a>2、WebMvcConfigurationSupport</h3><p>在 SpringBoot 中还可以自定义配置来解决跨域问题，通过继承 <code>WebMvcConfigurationSupport</code> 配置 CROS，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSCorsConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.addCorsMappings(registry);</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以指定 URL 和域名，修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSCorsConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.addCorsMappings(registry);</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/signin/name&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:8082&quot;</span>, <span class="string">&quot;http://localhost:8083&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置后，只允许请求域名是 <code>http://localhost:8082</code> 和 <code>http://localhost:8082</code> 并且请求服务端URL是 <code>/signin/name</code> 的请求才可以使用 CORS 机制。</p><h3 id="3、CorsFilter"><a href="#3、CorsFilter" class="headerlink" title="3、CorsFilter"></a>3、CorsFilter</h3><p>这种方法早在 <code>SpringBoot1.x</code> 版本中使用，使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSCorsFilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CorsConfiguration <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许任何域名使用</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许任何头</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许任何HTTP方法</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        corsConfiguration.setMaxAge(<span class="number">60L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source;</span><br><span class="line">        source = <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, getConfig());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方式跟上面的解决方法基本都是大同小异，大家根据实际情况选择使用，对提供的方法举一反三即可。</p><h2 id="减少OPTIONS请求"><a href="#减少OPTIONS请求" class="headerlink" title="减少OPTIONS请求"></a>减少OPTIONS请求</h2><p>虽然我们支持网页对服务端进行 OPTIONS 请求，但是请求如果多了势必会影响服务器性能。</p><p>如果在没有必要的情况下尽量减少由于跨域请求带来的 OPTIONS 请求，我们可以通过设置缓存时间来解决这个问题。</p><p>比如使用自定义 Filter 的方式设置600秒的缓存时间，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;600&quot;</span>);</span><br></pre></td></tr></table></figure><p>在大家进行测试的时候，记得不要勾选 Chrome 审查视图中 Network 选项中 <code>Disable cache</code> 这一项，否则每次都会进行 OPTIONS 请求，给你造成设置服务端缓存时间没有效果的假象。</p><h2 id="常用Nginx命令"><a href="#常用Nginx命令" class="headerlink" title="常用Nginx命令"></a>常用Nginx命令</h2><p>下面给出Windows版本的Nginx常用命令。</p><p>1、启动 Nginx</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">start</span> nginx.exe</span><br></pre></td></tr></table></figure><p>2、验证配置是否正确</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.<span class="attribute">exe</span> -t</span><br></pre></td></tr></table></figure><p>3、修改配置文件后，重新加载</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.<span class="attribute">exe</span> -s reload</span><br></pre></td></tr></table></figure><p>4、快速关闭</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.<span class="attribute">exe</span> -s stop</span><br></pre></td></tr></table></figure><p>5、正常关闭退出</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.<span class="attribute">exe</span> -quit</span><br></pre></td></tr></table></figure><p>6、查看Nginx版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.<span class="attribute">exe</span> -V</span><br></pre></td></tr></table></figure><hr><p><strong>坚持做好一件事，需要付出比常人更多的努力~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP OPTIONS CORS SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域和OPTIONS这对欢喜冤家</title>
      <link href="/2019/08/31/%E8%B7%A8%E5%9F%9F%E5%92%8COPTIONS%E8%BF%99%E5%AF%B9%E6%AC%A2%E5%96%9C%E5%86%A4%E5%AE%B6/"/>
      <url>/2019/08/31/%E8%B7%A8%E5%9F%9F%E5%92%8COPTIONS%E8%BF%99%E5%AF%B9%E6%AC%A2%E5%96%9C%E5%86%A4%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>相信做过前端开发的同事，包括做小程序或者小游戏的码友们应该都看过类似下面的错误，这个错误是由于 JavaScript 代码向服务器发送了 HTTP 请求引起的。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://www.xxx.com/yyy&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy:</span><br><span class="line">Response to preflight request doesn&#x27;t pass access control check: </span><br><span class="line">No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>如果是第一次遇到，你肯定会觉得很好奇，忍不住会去一探究竟~</p><p>还有些同事会遇到另一个神奇的错误，即发送GET或者POST请求之前，居然先给服务器发送了一个 OPTIONS 请求，让人不可思议的是这个 OPTIONS 请求是自动发的，服务器在没有任何设置的条件下直接将这个请求夭折掉，如下返回 <code>403</code> 错误，也可能是其他错误。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS http://www.xxx.com/yyy 403</span><br></pre></td></tr></table></figure><p>引起这些问题的罪魁祸首就是 <code>跨域</code> ，今天我跟大家一起以实际的例子来看看这个神奇的 <code>跨域</code> 问题。</p><p>文中使用的代码都可以在 <a href="https://github.com/veryitman/MSTutorial">Github</a> 找到，大家根据需要自行采纳。</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong>同源策略</strong></h2><p><strong>域</strong>，是指由 <code>协议</code> + <code>域名</code> + <code>端口号</code> 组成的一个虚拟概念。</p><p>如果两个域的 <code>协议</code>、<code>域名</code>、<code>端口号</code> 都一样，就称他们为同域，但是只要三者之中有一个不一样，就不是同域。</p><p>那么 <code>跨域请求</code> 简单来说，就是在一个域内请求了另一个域的资源，由于域不一致会有安全隐患如 <code>CSRF</code> （Cross-site request forgery）攻击。</p><p>在百度百科里面是这样定义 <code>同源策略</code> 的，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同源策略（SOP，Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。</span><br><span class="line"></span><br><span class="line">可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</span><br></pre></td></tr></table></figure><p>听起来，这玩意挺高大上的，简单理解 <code>同源策略</code> 就是一种安全策略，为了安全而生的一种限制措施。它是由 <a href="https://baike.baidu.com/item/Netscape/2778944">Netscape</a> 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略，也是必须遵守的一个策略。</p><p>那么 <code>同源策略</code> 中的 <code>同源</code> 是指 <code>域名</code>，<code>协议</code>，<code>端口</code> 三者必须相同，如果有任何一个不同就会引起跨域。</p><p>下表给出了相对 <code>http://a.xx.com/yy/zz.html</code> 同源检测的示例:</p><table><thead><tr><th align="left">URL</th><th align="left">结果</th><th align="left">原因</th></tr></thead><tbody><tr><td align="left"><code>http://a.xxx.com/ff/other.html</code></td><td align="left">成功</td><td align="left">域名、协议、端口(默认80)一致</td></tr><tr><td align="left"><code>http://a.xxx.com/gg/hh/another.html</code></td><td align="left">成功</td><td align="left">域名、协议、端口(默认80)一致</td></tr><tr><td align="left"><code>https://a.xxx.com/secure.html</code></td><td align="left">失败</td><td align="left">不同协议 ( HTTPS和HTTP )</td></tr><tr><td align="left"><code>http://a.xxx.com:81/dir/etc.html</code></td><td align="left">失败</td><td align="left">不同端口 ( 81和80)</td></tr><tr><td align="left"><code>http://a.wpq.com/yy/other.html</code></td><td align="left">失败</td><td align="left">不同域名 ( xxx和wpq)</td></tr><tr><td align="left"><code>http://123.21.122.12/dir</code></td><td align="left">失败</td><td align="left">域名IP不等同于域名</td></tr><tr><td align="left"><code>http://xx.xxx.com/dir2/</code></td><td align="left">失败</td><td align="left">主域相同，子域不同</td></tr></tbody></table><p>简单来说，HTML 代码运行在一个web主机上面（假设域名是 <code>http://a.xx.com/yy/zz.html</code>），而HTML代码中有需要请求服务器某 API 接口（<code>http://api.user.com/name</code>）的，那么就会造成跨域问题。</p><p>同源策略会影响：</p><p>（1） Cookie、LocalStorage 和 IndexDB 无法读取；</p><p>（2） DOM 无法获得；</p><p>（3） AJAX 请求不能正常发送，有可能还会引起 OPTIONS 请求；</p><h2 id="OPTIONS请求"><a href="#OPTIONS请求" class="headerlink" title="OPTIONS请求"></a><strong>OPTIONS请求</strong></h2><p>大家所熟知的HTTP请求最多的应该就是 GET 和 POST 请求，这两种请求也是软件开发中用的最多的。</p><blockquote><p>GET：向特定的资源发出请求，一般对服务器来说是一个只读的请求，不会对资源进行写操作。</p><p>POST：向指定资源提交数据进行处理请求，例如提交表单或者上传文件，数据被包含在请求体（body）中，该请求可能会对服务器资源进行读写操作。</p></blockquote><p>除了这两种请求外，HTTP还有其他种类的请求，如下：</p><blockquote><p>PUT：向指定资源位置上传其最新内容，一般用于资源的整体更新，而下面的 PATCH 用于资源的部分更新。</p><p>DELETE：请求服务器删除所标识的资源。</p><p>HEAD：向服务器索要与 GET 请求相一致的响应，只不过响应体将不会被返回，可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</p><p>TRACE：回显服务器收到的请求，主要用于测试或诊断。</p><p>OPTIONS：返回服务器针对特定资源所支持的 HTTP 请求方法。也可以利用向Web服务器发送 ‘*’ 的请求来测试服务器的功能性。该请求不会修改服务器资源，相对比较安全。</p><p>CONNECT：是 <code>HTTP/1.1</code> 协议预留的，能够将连接改为管道方式的代理服务器。通常用于 SSL 加密服务器的链接与非加密的 HTTP 代理服务器的通信。</p><p>PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新。当资源不存在时，PATCH 会创建一个新的资源，而 PUT 只会对已存在的资源进行更新。</p></blockquote><p>其中 GET, POST 和 HEAD 方法是 HTTP1.0 定义的三种请求方法，在 HTTP1.1 又新增了六种请求方法，即 OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。如果想了解更多 HTTP 历史的朋友，可以阅读我之前的写的一篇文章 <a href="http://www.veryitman.com/2018/09/16/HTTP-%E6%BC%94%E8%BF%9B%E5%8F%B2/">HTTP 演进史</a>，嘿哈🙋‍。</p><p>再说一下 <code>OPTIONS</code> 请求，该请求与 <code>HEAD</code> 请求有点类似，一般也是用于客户端查看服务器的性能。</p><p><code>OPTIONS</code> 方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用来代替资源名称，向服务器发送 <code>OPTIONS</code> 请求，可以测试服务器功能是否正常。JavaScript 的 <a href="http://itbilu.com/javascript/js/VkiXuUcC.html">XMLHttpRequest</a> 对象进行<code>CORS</code>跨域资源共享时，就是使用 <code>OPTIONS</code> 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</p><p>那么需要满足哪些条件才会触发 <code>OPTINS</code> 请求呢？</p><h2 id="实例验证"><a href="#实例验证" class="headerlink" title="实例验证"></a><strong>实例验证</strong></h2><p>在没有回答上面的问题之前，我们还是来做个实验吧~</p><p>你需要将 Chrome 浏览器的审查视图打开，最好把 <code>Disable Cache</code> 也勾选上禁止 Chrome 使用网络缓存，这样才不会影响下面的实验。</p><p><img src="/upload/images/2019/08/31/4.png" alt="img"></p><p>下面是 <code>Springboot</code> 关于登录的一个示例代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;signin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSSigninController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/name&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> MSResponse <span class="title function_">sigin</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">        <span class="type">MSResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MSResponse</span>();</span><br><span class="line">        <span class="type">MSUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == userName || <span class="literal">null</span> == userPwd || userName.length() &lt;= <span class="number">0</span> || userPwd.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">MSResponseEnum</span> <span class="variable">responseEnum</span> <span class="operator">=</span> MSResponseEnum.Login4SiginInvalidInfo;</span><br><span class="line">            response.setCode(responseEnum.getCode());</span><br><span class="line">            response.setMsg(responseEnum.getMsg());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            user = MSUserUtil.createDefaultUser(userName, userPwd);</span><br><span class="line">            <span class="type">MSResponseEnum</span> <span class="variable">rspEnum</span> <span class="operator">=</span> MSResponseEnum.SUCCESS;</span><br><span class="line">            response.setCode(rspEnum.getCode());</span><br><span class="line">            response.setMsg(rspEnum.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setResults(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你大可不必去了解这个代码的具体逻辑，现在你只需要知道他是用来给 JavaScript 调用的一个登录API即可。</p><p>再来一个 HTML 文件，模拟请求登录的API，请求 HTTP 使用 Ajax，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getReq</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/signin/name?username=jack&amp;userpwd=123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      &#125;).<span class="title function_">done</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125;).<span class="title function_">fail</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用 Chrome 浏览器直接打开这个HTML文件即可，然后启动 Java 服务，在浏览器中点击按钮进行 GET 请求。</p><p>此时请求会报下面的错误：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:8080/signin/name?username=jack&amp;userpwd=123&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>确实是造成了跨域请求，导致请求失败。</p><p>但是令人遗憾的是并没有看到发出 OPTIONS 请求，使用 Fiddler 抓包，可以看到只有 GET 请求，如图所示：</p><p><img src="/upload/images/2019/08/31/1.png" alt="img"></p><p>难道是自己写代码的姿势不对吗？！</p><p>其实，在 HTML 中使用 HTTP 请求，发生 OPTIONS 请求是需要几个条件的：</p><ul><li>1、必须是跨域请求</li><li>2、自定义了请求头</li><li>3、请求头中的 <code>content-type</code> 是 <code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code>，<code>text/plain</code> 之外的格式</li></ul><p><strong>满足1和2或者满足1和3就会发生 OPTIONS 请求</strong>，首先我们确定了上面的示例是跨域请求，但是不满足后面的两个条件之一。</p><p>我们修改一下HTML代码增加一个 <code>content-type</code>，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getReq</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/signin/name?username=jack&amp;userpwd=123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;).<span class="title function_">done</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125;).<span class="title function_">fail</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>此时在浏览器中（需要使用 Chrome 的审查视图）可以看到报错信息：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS http://localhost:8080/signin/name?username=jack&amp;userpwd=123 403</span><br><span class="line"></span><br><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:8080/signin/name?username=jack&amp;userpwd=123&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy: Response to preflight request doesn&#x27;t pass access control check: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>抓包工具中也可以看到发生了 OPTIONS 请求，如下图： </p><p><img src="/upload/images/2019/08/31/2.png" alt="img"></p><p>也可以自定义 Header 头来进行验证，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getReq</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/signin/name?username=jack&amp;userpwd=123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="attr">token</span>: <span class="string">&quot;yu7rX98xxxx_iii^ddd&quot;</span>,</span><br><span class="line">            <span class="attr">userId</span>: <span class="number">123</span>,</span><br><span class="line">            <span class="attr">openid</span>: <span class="number">231232</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).<span class="title function_">done</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125;).<span class="title function_">fail</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>验证结果和上面一致，也会发生 OPTIONS 请求。</p><h2 id="再聊OPTIONS"><a href="#再聊OPTIONS" class="headerlink" title="再聊OPTIONS"></a><strong>再聊OPTIONS</strong></h2><p>在 <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC2616-HTTP&#x2F;1.1</a> 中关于 OPTIONS 有详细的描述，感兴趣的可以看一下 <code>9.2 OPTIONS</code> 小节。</p><p>OPTIONS 请求方法的主要用途有两个：</p><p>1、获取服务器支持的 HTTP 请求方法；</p><p>2、用来检查服务器的性能，如上面例子中的AJAX进行跨域请求时的预检，需要向另外一个域名的资源发送一个 HTTP OPTIONS 请求头，用以判断实际发送的请求是否安全；</p><p>HTT P的 OPTIONS 请求，有很多地方也被称之为预请求或者预检请求，换句话说就是试探性的请求不算是正式请求。</p><p>为了避免对服务器产生一些副作用，类似上面例子中的网页中的请求就会产生 OPTIONS 请求，也算是一种对服务器的保护。只有当服务器允许后，浏览器才会发出正式的请求，否则不发送正式请求。</p><p>我们可以使用 <code>curl</code> 模拟 OPTIONS 请求，例如下面请求谷歌：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -v -X OPTIONS https://www.google.com</span><br></pre></td></tr></table></figure><p>可以看到请求的响应情况：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt; HTTP/2 405</span><br><span class="line">&lt; allow: GET, HEAD</span><br><span class="line">&lt; date: Sat, 31 Aug 2019 02:17:03 GMT</span><br><span class="line">&lt; content-type: text/html; charset=UTF-8</span><br><span class="line">&lt; server: gws</span><br><span class="line">&lt; content-length: 1592</span><br><span class="line">&lt; x-xss-protection: 0</span><br><span class="line">&lt; x-frame-options: SAMEORIGIN</span><br><span class="line">&lt; alt-svc: quic=&quot;:443&quot;; ma=2592000; v=&quot;46,43,39&quot;</span><br><span class="line">&lt;</span><br><span class="line">&#123; [5 bytes data]</span><br><span class="line">100  1592  100  1592   0   0  13606   0 --:--:-- --:-- 13606HTTP/2 405</span><br><span class="line"><span class="attribute">allow</span><span class="punctuation">: </span>GET, HEAD</span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sat, 31 Aug 2019 02:17:03 GMT</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>gws</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>1592</span><br><span class="line"><span class="attribute">x-xss-protection</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">x-frame-options</span><span class="punctuation">: </span>SAMEORIGIN</span><br><span class="line"><span class="attribute">alt-svc</span><span class="punctuation">: </span>quic=&quot;:443&quot;; ma=2592000; v=&quot;46,43,39&quot;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot-解决跨域"><a href="#SpringBoot-解决跨域" class="headerlink" title="SpringBoot 解决跨域"></a><strong>SpringBoot 解决跨域</strong></h2><p>话说，同源策略引起了跨域问题，本身是为了安全起见为何我们还要去解决这个问题呢？这是因为 Web 前端是我们自己开发的，也就是说我们是知道自己的 Web 请求是安全的（类似于白名单客户），就需要让它顺利访问后端服务，所以解决这个跨域问题势在必行。</p><p>解决跨越的问题，在网上有很多的路子，目前大概有下面几种解决方案，如下：</p><ul><li>JSONP<ul><li>简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。但它仅支持GET方法不支持POST等其他请求方法，而且可能会遭受XSS攻击。</li></ul></li><li>CORS</li><li>postMessage</li><li>websocket</li><li>Node 中间件代理</li><li>Nginx 反向代理</li><li>window.name+iframe</li><li>location.hash+iframe</li><li>document.domain+iframe</li></ul><p>今天我们使用 SpringBoot 自带的注解来解决这个问题😃。</p><p>在说解决方案之前，还是先了解一下 CORS（Cross-origin resource sharing），其全称是”跨域资源共享”，是 W3C 的一个标准。</p><p>CORS 允许浏览器向跨源服务器发出 XMLHttpRequest 请求，从而克服了AJAX只能同源使用的限制。</p><p>CORS 需要浏览器和服务器同时支持。幸运的是目前几乎所有的浏览器都支持该功能，唯一美中不足的是IE浏览器的版本不能低于IE10。</p><p>实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。SpringBoot 自带注解 <code>CrossOrigin</code> 可以用来解决跨域问题。</p><p>修改一下 Controller 的代码，增加 <code>CrossOrigin</code> 注解，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/name&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> MSResponse <span class="title function_">sigin</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String userName, <span class="meta">@RequestParam(value = &quot;userpwd&quot;)</span> String userPwd)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务，抓包工具可以看到 OPTIONS 和 GET 请求都正常执行，返回码都是200。 </p><p><img src="/upload/images/2019/08/31/3.png" alt="img"></p><p>可以针对某个方法添加 <code>CrossOrigin</code> 注解，也可以对整个 Controller 添加该注解。</p><p>关于 <code>CrossOrigin</code> 注解，大家可以自行实践，这里不再赘述。</p><hr><p><strong>一直坚持在学习的路上努力~</strong></p><p><img src="/upload/me/qrcode_wx.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP OPTIONS CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳绳的故事</title>
      <link href="/2019/08/24/%E8%B7%B3%E7%BB%B3%E7%9A%84%E6%95%85%E4%BA%8B/"/>
      <url>/2019/08/24/%E8%B7%B3%E7%BB%B3%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>夏天的太阳永远都是那么强劲有力，南方尤为突出。整个地面都冒着热气，像一双无形的双手紧紧地抱着你，马路上反射的光纵然你火眼金金也会心生敬畏。不知道你有没有发现，即使这么热的天，篮球场上还有很多“战士”奋不顾身的拼个你死我活。倒不是他们不怕热不怕累，而是因为他们喜欢这项运动更愿意为了这项运动而付出。</p><p><img src="/upload/images/2019/08/24/1.png" alt="1"></p><p>讲一个听来的故事~</p><p>公司将要进行跳绳比赛，各个小组积极备战，需要大家一起努力配合才能把绳跳好。</p><p>组长发现刚开始大家都很难保持动作的一致性，经过一番练习之后，大部分人能动作一致了，还有一小部分人做起来有点困难。</p><p>组长试着让有经验的人带着那些跳不好节奏的人，这样又练习了一段时间，绝大部分人已经能很好的配合了，其余跟不少节奏或者怎么都调教不好的人只能去啦啦队那里呐喊助威了。</p><hr><p>在我们团队中也一样，有人能带着大家往前走，自然就会有人拖住大家的后腿，我曾今把这种现象叫做“相对论”。在团队中，发现有人掉队了或者很吃力的在前进，试着去调整一下他的工作或者找人帮帮他，经过一段时间的调整如果还是没有好转，只能让他另谋高就了，对大家都好。</p><p>虽然很残忍，但事实确实如此！</p><p>我们能做的就是找好自己的位置，并且在这个位置上发挥自己最大的价值。</p><hr><p><strong>时间可以改变一切，但你得做点什么！</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 团队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还有你不知道的Java枚举特性(下篇)</title>
      <link href="/2019/08/11/%E8%BF%98%E6%9C%89%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Java%E6%9E%9A%E4%B8%BE%E7%89%B9%E6%80%A7-%E4%B8%8B%E7%AF%87/"/>
      <url>/2019/08/11/%E8%BF%98%E6%9C%89%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Java%E6%9E%9A%E4%B8%BE%E7%89%B9%E6%80%A7-%E4%B8%8B%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇是博文 <a href="http://www.veryitman.com/2019/08/09/%E8%BF%98%E6%9C%89%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Java%E6%9E%9A%E4%B8%BE%E7%89%B9%E6%80%A7%28%E4%B8%8A%E7%AF%87%29/">还有你不知道的Java枚举特性(上篇)</a> 的下篇，可以点击下面的链接前往。</p><p>本篇主要内容：</p><ul><li>Java 枚举是一个特殊的类，聊聊其方法的重写</li><li>如何使用接口来组织 Java 枚举？</li><li>如何使用枚举实现 Java 的单例模式</li><li>JDK 数据结构中关于枚举的集合 <code>EnumSet</code> 和字典 <code>EnumMap</code></li></ul><h2 id="重写枚举的方法"><a href="#重写枚举的方法" class="headerlink" title="重写枚举的方法"></a>重写枚举的方法</h2><p>所有的枚举类都继承自 <code>Enum</code>，在这个父类当中 <code>toString</code>、<code>equals</code> 和<code>hashCode</code> 的三个方法，可以看一下，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123; </span><br><span class="line"><span class="type">return</span> <span class="variable">this</span> <span class="operator">=</span>= other;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出在这三个方法当中，我们只能重写 <code>toString</code> 方法，另外两个方法都是 <code>final</code> 修饰的方法，不可以被子类重写。</p><p>我们在自定义的枚举中，可以重写  <code>toString</code> 方法的，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;red color&quot;</span>),</span><br><span class="line">    GREEN(<span class="string">&quot;green color&quot;</span>),</span><br><span class="line">    BLUE(<span class="string">&quot;blue color&quot;</span>),</span><br><span class="line">    YELLOW(<span class="string">&quot;yellow color&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Color(String name) &#123;</span><br><span class="line">        _name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String _name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this.name: &quot;</span> + _name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>Enum</code> 的源码，可以在博文 <a href="http://www.veryitman.com/2019/03/16/Java-%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%9C%AC%E8%B4%A8/">Java 枚举的本质</a> 中的文末翻阅。</p><p>对于 Java 中所有枚举都是继承自 <code>Enum</code>，大家可以去使用 <code>javap</code> 命令反编译看看，如下代码是 <code>javap</code> 后的简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">com</span>.veryitman.Color <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Enum&lt;com.veryitman.Color&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.veryitman.Color RED;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.veryitman.Color GREEN;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.veryitman.Color BLUE;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.veryitman.Color YELLOW;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> com.veryitman.Color[] values();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> com.veryitman.Color <span class="title function_">valueOf</span><span class="params">(java.lang.String)</span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>Color</code> 是继承自 <code>java.lang.Enum</code> 的，<code>Enum</code> 是一个抽象类并实现了 <code>Comparable</code> 和 <code>Serializable</code> 这两个接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Enum</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt;&gt; <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;E&gt;, Serializable </span><br></pre></td></tr></table></figure><h2 id="使用接口组织枚举"><a href="#使用接口组织枚举" class="headerlink" title="使用接口组织枚举"></a>使用接口组织枚举</h2><p>当我们定义的枚举过多且又有很多嵌套，可以使用接口来组织这些枚举，将其归类，这样一来不仅代码看起来很规范，并且也很好管理代码。</p><p>如下示例，使用接口 <code>MobileTool</code> 来组织两个枚举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MobileTool</span> &#123;</span><br><span class="line">        <span class="keyword">enum</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">MobileTool</span> &#123;</span><br><span class="line">            HUAWEI, iPhone, OPPO, XIAOMI</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">enum</span> <span class="title class_">Pad</span> <span class="keyword">implements</span> <span class="title class_">MobileTool</span> &#123;</span><br><span class="line">            iPad, WEPad, sPad</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单的可以这样使用，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MobileTool</span> <span class="variable">mphone</span> <span class="operator">=</span> MobileTool.Phone.HUAWEI;</span><br><span class="line">mphone = MobileTool.Phone.iPhone;</span><br><span class="line"></span><br><span class="line"><span class="type">MobileTool</span> <span class="variable">mpad</span> <span class="operator">=</span> MobileTool.Pad.iPad;</span><br><span class="line">mpad = MobileTool.Pad.sPad;</span><br></pre></td></tr></table></figure><h2 id="枚举实现单例模式"><a href="#枚举实现单例模式" class="headerlink" title="枚举实现单例模式"></a>枚举实现单例模式</h2><p>在 <code>Effective Java</code> 这本书籍中，作者有个这样下面的描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;This approach is functionally equivalent to the public field approach, except that it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. While this approach has yet to be widely adopted, a single-element enum type is the best way to implement a singleton.&quot;</span></span><br></pre></td></tr></table></figure><p>核心的意思是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用枚举实现单例的方法虽然还没有广泛采用，但单元素的枚举类型已经成为实现 Java 单例模式的最佳方法。</span><br></pre></td></tr></table></figure><p>我们用枚举实现一下单例模式，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">INSTANCE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printFoo</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Foo here.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比 Java 中其他的单例实现方式，此时此刻你会发现，枚举实现单例的代码会精简很多。</p><p>那么，枚举实现单例模式到底有哪些优势呢？或者换句话说，就这样实现单例靠谱吗？</p><p>经过大量例子和 Java 编程专家的讲解，枚举实现单例模式相当靠谱，它具有以下一些特点：</p><p>1、枚举实现的单例模式是线程安全的</p><p>本质上面来讲，枚举实现的单例之所以是线程安全的，这个跟 Java 的类加载机制有关。从上面反编译的代码来看，枚举是 <code>final class</code> 并且每个枚举值都是 <code>static</code> 的，这里牵扯到 <code>ClassLoader</code> 的相关知识，如果有兴趣建议大家去研究一下。</p><p>总之，对于我们任何一个枚举在第一次被真正用到之时，会被 Java 虚拟机加载并且完成初始化，而这个初始化过程是线程安全的，所以你需要记住枚举实现的单例模式是多线程安全的就可以了。</p><p>2、枚举可解决反射&#x2F;反序列化问题</p><p>我们知道，一般的单例模式都存在两个问题，一个是可以通过反射调用，另一个就是可以通过序列化和反序列化来破坏单例。</p><p>一般解决反射调用可以通过私有构造方法中做处理，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Foo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> == flag) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不能反复创建&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>了解序列化原理的同学，可以通过在单例类中实现 <code>readResolve</code> 方法就可以避免反序列化攻击这个问题了。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 的枚举的反序列化实现并不是通过反射实现的，也就是说枚举的序列化和反序列化是有经过特殊定制和处理的，这就可以避免反序列化过程中由于反射而导致的单例被破坏问题。</p><p>总之，枚举实现的单例模式不仅可以防止反射破坏，还可以防止序列化破坏单例。</p><p>除枚举实现单这种方式以外，我一般使用下面两种方式来实现单例模式。</p><p><strong>饿汉式的单例模式写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Foo</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Foo</span> <span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Foo <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态内部类实现单例模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FooHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Foo</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Foo</span> <span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Foo <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> FooHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="枚举集合"><a href="#枚举集合" class="headerlink" title="枚举集合"></a>枚举集合</h2><p><code>EnumSet</code> 是一个专为枚举设计的集合类，<code>EnumSet</code> 中的所有元素都必须是指定枚举类型的枚举值。</p><p><code>EnumSet</code> 类结构图如下：</p><p><img src="/upload/images/2019/08/11/1.png" alt="1"></p><p><code>EnumSet</code> 是一个抽象类，无法被实例化，但是可以通过静态方法获取该类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">EnumSet</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt;&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Cloneable</span>, java.io.Serializable</span><br></pre></td></tr></table></figure><p><code>EnumMap</code> 类结构图如下：</p><p><img src="/upload/images/2019/08/11/2.png" alt="1"></p><p><code>EnumMap</code> 定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMap</span>&lt;K <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;K&gt;, V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K, V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Cloneable</span><br></pre></td></tr></table></figure><p><code>EnumSet</code> 保证集合中的元素不重复；<code>EnumMap</code> 中的  key 是 enum 类型，而 value 则可以是任意类型。</p><p>关于这两个数据结构的使用方法，大家可以参考 JDK 手册。</p><hr><p><strong>赠人玫瑰，手留余香~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还有你不知道的Java枚举特性(上篇)</title>
      <link href="/2019/08/09/%E8%BF%98%E6%9C%89%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Java%E6%9E%9A%E4%B8%BE%E7%89%B9%E6%80%A7(%E4%B8%8A%E7%AF%87)/"/>
      <url>/2019/08/09/%E8%BF%98%E6%9C%89%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Java%E6%9E%9A%E4%B8%BE%E7%89%B9%E6%80%A7(%E4%B8%8A%E7%AF%87)/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>博文 <a href="http://www.veryitman.com/2019/03/16/Java-%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%9C%AC%E8%B4%A8/">Java 枚举的本质</a> 跟大家一起学习了 Java 语言中枚举到底是什么，探索其本质和原理。用一句话来概括其本质就是：“Java 中的枚举是一个特殊的 Java 类”，有兴趣的同学可以点击了解上面那篇文章。</p><p>今天跟大家一起学习和总结一下 Java 中的枚举的其他特性和用途，由于内容较多，这次的分享分为两篇文章来写，欢迎大家拍砖、指正和交流！</p><p>本篇主要内容：</p><ul><li>Java switch 语句支持枚举类型以及注意事项</li><li>Java 枚举的常量使用</li><li>如何在自定义枚举中自定义成员变量和成员方法、静态方法</li><li>Java 枚举实现接口</li></ul><p>下篇主要内容：</p><ul><li>Java 枚举是一个特殊的类，聊聊其方法的重写</li><li>如何使用接口来组织 Java 枚举？</li><li>JDK 数据结构中关于枚举的集合 <code>EnumSet</code> 和字典 <code>EnumMap</code></li></ul><h2 id="switch-语句支持枚举"><a href="#switch-语句支持枚举" class="headerlink" title="switch 语句支持枚举"></a>switch 语句支持枚举</h2><p>JDK1.5 才开始有枚举类型，同时可爱的 Java 组织丰富了 <code>switch</code> 语句，即支持枚举。</p><p>我们还是动手写个例子~</p><p>定义一个枚举 <code>Color</code>，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED(<span class="string">&quot;red color&quot;</span>, <span class="number">0</span>), </span><br><span class="line">GREEN(<span class="string">&quot;green color&quot;</span>, <span class="number">1</span>),</span><br><span class="line">BLUE(<span class="string">&quot;blue color&quot;</span>, <span class="number">2</span>), </span><br><span class="line">YELLOW(<span class="string">&quot;yellow color&quot;</span>, <span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">Color(String name, <span class="type">int</span> id) &#123;</span><br><span class="line">_name = name;</span><br><span class="line">_id = id;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String _name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> _id;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _id;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title function_">getColor</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(max);</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> Color.RED;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> Color.GREEN;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> Color.BLUE;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> Color.YELLOW;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> Color.BLUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为枚举 <code>Color</code> 提供了一个静态方法 <code>getColor</code>，可以获取随机的颜色值。</p><p>那么，可以结合 <code>switch</code> 语句这样使用，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Color.values().length;</span><br><span class="line"><span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> Color.getColor(len);</span><br><span class="line"><span class="keyword">switch</span> (color) &#123;</span><br><span class="line"><span class="keyword">case</span> RED:</span><br><span class="line">System.out.println(<span class="string">&quot;select &quot;</span> + <span class="string">&quot;RED&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> GREEN:</span><br><span class="line">System.out.println(<span class="string">&quot;select &quot;</span> + <span class="string">&quot;GREEN&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BLUE:</span><br><span class="line">System.out.println(<span class="string">&quot;select &quot;</span> + <span class="string">&quot;BLUE&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> YELLOW:</span><br><span class="line">System.out.println(<span class="string">&quot;select &quot;</span> + <span class="string">&quot;YELLOW&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;select &quot;</span> + <span class="string">&quot;unknow!!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<code>switch</code> 语句中条件值是 <code>Color</code> 对象。</p><p>这里提醒大家要注意一个问题，如果 <code>case</code> 的条件带上类的名字，代码是无法通过编译的。如下面的代码（错误示例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">case</span> Color.RED:</span><br><span class="line">System.out.println(<span class="string">&quot;select &quot;</span> + <span class="string">&quot;RED&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>编译的错误信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: An <span class="keyword">enum</span> <span class="title class_">switch</span> <span class="keyword">case</span> label must be the unqualified name of an enumeration constant</span><br></pre></td></tr></table></figure><p>即 <code>switch</code> <code>case</code> 语句结合枚举使用时，只能写枚举类定义的变量名称，不能加类名。</p><h2 id="当常量使用"><a href="#当常量使用" class="headerlink" title="当常量使用"></a>当常量使用</h2><p>一般在 Java 中我们定义常量最常用的方式就是使用下面的方式，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_NAME_LENGTH</span> <span class="operator">=</span> <span class="number">0x1112</span>;</span><br></pre></td></tr></table></figure><p>有了枚举之后，也可以使用枚举来定义常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    YELLOW, BLANK, RED, GREEN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以把一些相关的常量放到定义的枚举当中了。</p><h2 id="自定义方法、成员变量"><a href="#自定义方法、成员变量" class="headerlink" title="自定义方法、成员变量"></a>自定义方法、成员变量</h2><p>上面的例子中自定义的一个枚举 <code>Color</code>，大家可以看到可以给它添加成员变量 <code>_id</code>、<code>_name</code>，构造方法和其他方法 <code>getColor</code>（静态方法）。</p><p>如果这部分很难理解，建议去阅读 <a href="http://www.veryitman.com/2019/03/16/Java-%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%9C%AC%E8%B4%A8/">Java 枚举的本质</a> 这篇文章。</p><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><p>所有的枚举类都继承自 <code>Enum</code>，因为 Java 不支持多继承，所以枚举无法继承其它类。</p><p>枚举既然是和 Java 的普通类基本一样，那么，枚举当然也可以实现接口。</p><p>下面是枚举 <code>Color</code> 实现接口 <code>Paint</code> 的例子，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Paint</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">Paint</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;red color&quot;</span>),</span><br><span class="line">    GREEN(<span class="string">&quot;green color&quot;</span>),</span><br><span class="line">    BLUE(<span class="string">&quot;blue color&quot;</span>),</span><br><span class="line">    YELLOW(<span class="string">&quot;yellow color&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Color(String name) &#123;</span><br><span class="line">        _name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String _name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current paint color: &quot;</span> + _name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以采用匿名内部类的方式，让每个枚举值实现接口 <code>Paint</code> 的方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">Paint</span> &#123;</span><br><span class="line">        RED(<span class="string">&quot;red color&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Current paint color: &quot;</span> + RED._name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        GREEN(<span class="string">&quot;green color&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Current paint color: &quot;</span> + GREEN._name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        BLUE(<span class="string">&quot;blue color&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Current paint color: &quot;</span> + BLUE._name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        YELLOW(<span class="string">&quot;yellow color&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Current paint color: &quot;</span> + YELLOW._name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Color(String name) &#123;</span><br><span class="line">            _name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String _name;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Current paint color: &quot;</span> + _name);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写个方法测试一下，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Color color : Color.values()) &#123;</span><br><span class="line">        color.setColor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Current paint color: red color</span><br><span class="line">Current paint color: green color</span><br><span class="line">Current paint color: blue color</span><br><span class="line">Current paint color: yellow color</span><br></pre></td></tr></table></figure><hr><p><strong>人生没有永远的赢家，切勿大喜大悲，要以平常心对待一切~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java enum switch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 学习几个容易混淆的URL注解</title>
      <link href="/2019/08/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%AD%A6%E4%B9%A0%E5%87%A0%E4%B8%AA%E5%AE%B9%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84URL%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/08/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%AD%A6%E4%B9%A0%E5%87%A0%E4%B8%AA%E5%AE%B9%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84URL%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="了解-URL"><a href="#了解-URL" class="headerlink" title="了解 URL"></a>了解 URL</h2><p>首先，大家需要知道下面这三个东西的定义：</p><blockquote><p>URI，Universal Resource Identifier，统一资源标志符</p><p>URL，Universal Resource Locator，统一资源定位符</p><p>URN，Universal Resource Name，统一资源名称</p></blockquote><p>在 WWW 上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫 URL，它是 WWW 的统一资源定位标志，就是指网络地址。</p><p>URL 是 URI 的子集，所有的 URL 都是 URI，但不是每个 URI 都是 URL，还有可能是 URN，他们的关系可以用下面的图来表示：</p><p><img src="/upload/images/2019/08/04/1.png"></p><p>换句话说，URI 分为三种，URL 或者 URN 或者是 URL 和 URI 的组合。</p><p>不管怎么说，大家平时使用HTTP请求的地址基本都是称之为 URL，所以暂时不必要纠结于三者的区别之中而无法自拔，搞懂 URL 的组成部分和规范才是重点。</p><p>URL 由三部分组成即资源类型、存放资源的主机域名和资源文件名。</p><p>URL 的一般语法格式为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</span><br></pre></td></tr></table></figure><p>具体参数释义如下：</p><ul><li><p>scheme：传送协议有些地方也写作protocol，如http、https、ftp等</p></li><li><p>user:password：访问资源需要的凭证信息，可省略</p></li><li><p>host：服务器地址，通常为域名，有时为IP地址</p></li><li><p>port：端口号，以数字方式表示，一般使用端口默认值80，可省略</p></li><li><p>path：路径，以“&#x2F;”字符区别路径中的每一个目录名称</p></li><li><p>query：查询，GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“&#x3D;”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题</p></li><li><p>fragment：片段，以“#”字符为起点</p></li></ul><p>常用的 URL 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.veryitman.com/article/name=itman&amp;pwd=123</span><br><span class="line"></span><br><span class="line">http://www.veryitman.com/article/1/2</span><br></pre></td></tr></table></figure><p>大部分的编程语言都会有针对 URL 处理的系统函数库，最常用的如 <code>URLEncode</code>、<code>URLDecode</code> 针对 URL 编解码的类。</p><p>下面跟大家分享一下在 SpringBoot 中经常使用的 <code>RequestParam</code>、<code>QueryParam</code>、<code>PathVariable</code> 和 <code>PathParam</code> 这三个注解。</p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>注解 @RequestParam 可以从每个 HTTP Request 中获取参数，该注解支持下面四种参数：</p><ul><li>defaultValue 如果本次请求没有携带这个参数，或者参数为空，那么就会启用默认值</li><li>name 绑定本次参数的名称，要跟 URL 上面的一样，否则会请求失败</li><li>required 用来标示对应的参数是不是必须的，默认是 true，如果对某个参数做可选值可以设置该值为 false</li><li>value 是 name 属性的一个别名，value 和 name 只能出现一个否则会请求报错</li></ul><p>下面是注解 @RequestParam 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestParam &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重点说一下 value 这个值，举个例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/friends&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrieds</span><span class="params">(<span class="meta">@RequestParam(value = &quot;page&quot;)</span> String page, <span class="meta">@RequestParam(value = &quot;pageSize&quot;)</span> String pageSize)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Get friend list. &quot;</span> + <span class="string">&quot;page: &quot;</span> + page + <span class="string">&quot; - pagesize: &quot;</span> + pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法有两个参数，分别是 <code>page</code> 和 <code>pageSize</code>，注意这里的参数 <code>pageSize</code> 是大写的，在注解 @RequestParam 中对应的 value 值也是大写的 <code>pageSize</code>，现在启动工程后，请求一下下面的地址。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/friends?page=1&amp;pageSize=2</span><br></pre></td></tr></table></figure><p>这个时候可以正常访问且能返回正确的结果，假如我们将 @RequestParam 中对应的 value 值改为小写的 <code>pagesize</code> 再来使用上面的地址访问呢？</p><p>就会报下面的错误，如图所示：</p><p><img src="/upload/images/2019/08/04/2.png"></p><p>所以需要修改访问地址，即将 <code>pageSize</code> 改为 <code>pagesize</code>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/friends?page=1&amp;pagesize=2</span><br></pre></td></tr></table></figure><p>那我们再思考另外一个问题，是否可以修改注解 <code>@RequestParam</code> 中对应的value值的 page 和 pageSize 为其他的比如 xx、yy？</p><p>动手试试就知道了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/friends&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrieds</span><span class="params">(<span class="meta">@RequestParam(value = &quot;xx&quot;)</span> String page, <span class="meta">@RequestParam(value = &quot;yy&quot;)</span> String pageSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Get friend list. &quot;</span> + <span class="string">&quot;page: &quot;</span> + page + <span class="string">&quot; - pagesize: &quot;</span> + pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数本身的参数名称 page 和 pageSize 没有做任何修改，只是将注解中的修改为 <code>xx</code> 和 <code>yy</code> 了，再次访问下面的URL：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/friends?xx=1&amp;yy=2</span><br></pre></td></tr></table></figure><p>一如既往的正常~ 所以，对于注解 <code>@RequestParam</code> 的参数，URL中对应的参数一定要和value对应。</p><h2 id="QueryParam"><a href="#QueryParam" class="headerlink" title="@QueryParam"></a>@QueryParam</h2><p>这个跟 @RequestParam 基本一致，都是以键值对的方式来或者参数。</p><p>只不过，该注解需要在 pom 文件中导入依赖，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.ws.rs&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsr311-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后在工程类中需要导入包，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.ws.rs.QueryParam;</span><br></pre></td></tr></table></figure><p>注解 @QueryParam 源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> QueryParam &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Defines the name of the HTTP query parameter whose value will be used</span></span><br><span class="line"><span class="comment">     * to initialize the value of the annotated method argument, class field or</span></span><br><span class="line"><span class="comment">     * bean property. The name is specified in decoded form, any percent encoded</span></span><br><span class="line"><span class="comment">     * literals within the value will not be decoded and will instead be </span></span><br><span class="line"><span class="comment">     * treated as literal text. E.g. if the parameter name is &quot;a b&quot; then the </span></span><br><span class="line"><span class="comment">     * value of the annotation is &quot;a b&quot;, &lt;i&gt;not&lt;/i&gt; &quot;a+b&quot; or &quot;a%20b&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 @QueryParam 只有 value 一个属性，value 对应的值要和函数参数保持一致，否则可能请求会得不到预期的响应结果，这个跟注解 @RequestParam 是不一样的。下面给个示例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/friends&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrieds</span><span class="params">(<span class="meta">@QueryParam(value = &quot;page&quot;)</span> String page, <span class="meta">@QueryParam(value = &quot;pageSize&quot;)</span> String pageSize)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Get friend list. &quot;</span> + <span class="string">&quot;page: &quot;</span> + page + <span class="string">&quot; - pageSize: &quot;</span> + pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器请求下面的地址即可。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/friends?page=1&amp;pageSize=2</span><br></pre></td></tr></table></figure><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>注解 @PathVariable 与上面的刚说的注解 @RequestParam 是不同的，@PathVariable 需要从 URI 中获取参数，比如下面的例子，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/friends/&#123;page&#125;/&#123;pagesize&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrieds</span><span class="params">(<span class="meta">@PathVariable(value = &quot;page&quot;)</span> String page, <span class="meta">@PathVariable(value = &quot;pagesize&quot;)</span> String pageSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Get friend list. &quot;</span> + <span class="string">&quot;page: &quot;</span> + page + <span class="string">&quot; - pagesize: &quot;</span> + pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 @RequestMapping 中写了 <code>&#123;page&#125;/&#123;pagesize&#125;</code>，二者带上了 <code>&#123;&#125;</code> 这样 @PathVariable 才能识别。</p><p>请求下面的地址，可以正常访问。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/friends/1/2</span><br></pre></td></tr></table></figure><p>相当于 page&#x3D;1，pagesize&#x3D;2，所以注解 @PathVariable 是从URI 中匹配参数的，他不是以键值对方式获取对应的值。</p><p>@PathVariable 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PathVariable &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有三个属性 value、name 和 required，其中 value 也是 name 的别名。</p><h2 id="PathParam"><a href="#PathParam" class="headerlink" title="@PathParam"></a>@PathParam</h2><p>注解  @PathParam 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.websocket.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PathParam &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，@PathVariable 和 @RequestParam 是 <code>org.springframework.x</code> 包下面的即属于spring框架，而 @PathParam 属于 <code>javax.websocket.x</code> 包下面的。</p><p>注解 @PathParam 只有一个属性 value，没有其他属性了。@PathParam 里面的value对应的值一定要和函数参数名称一致（包括大小写），示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/friends&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrieds</span><span class="params">(<span class="meta">@PathParam(value = &quot;page&quot;)</span> String page, <span class="meta">@PathParam(value = &quot;pageSize&quot;)</span> String pageSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Get friend list. &quot;</span> + <span class="string">&quot;page: &quot;</span> + page + <span class="string">&quot; - pageSize: &quot;</span> + pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中请求下面的地址，请求和响应都是正常的。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/friends?page=1&amp;pageSize=2</span><br></pre></td></tr></table></figure><p>如果 @PathParam 中 value 对应的值和函数参数不一致，请求得不到预期的响应。现在修改 value 的 <code>pageSize</code> 为 <code>pagesize</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/friends&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrieds</span><span class="params">(<span class="meta">@PathParam(value = &quot;page&quot;)</span> String page, <span class="meta">@PathParam(value = &quot;pagesize&quot;)</span> String pageSize)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Get friend list. &quot;</span> + <span class="string">&quot;page: &quot;</span> + page + <span class="string">&quot; - pageSize: &quot;</span> + pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中请求下面的地址：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/friends?page=1&amp;pagesize=2</span><br></pre></td></tr></table></figure><p>就会得到下面的结果，如下图所示：</p><p><img src="/upload/images/2019/08/04/3.png"></p><p>但是你使用 <code>http://localhost:8080/friends?page=1&amp;pageSize=2</code> 对于上面的代码请求和响应也是正常的，这就说明注解 @PathParam 中请求的 URL 参数是以函数参数为主的，他和注解 @QueryParam 、@RequestParam 都是以键值对方式获取对应的值。</p><p>所以，注解 @PathParam 中 value 对应的值和函数参数尽量保持一致。</p><hr><p><strong>学海无涯苦作舟~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot 微服务 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 立志做个伟大的项目</title>
      <link href="/2019/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AB%8B%E5%BF%97%E5%81%9A%E4%B8%AA%E4%BC%9F%E5%A4%A7%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AB%8B%E5%BF%97%E5%81%9A%E4%B8%AA%E4%BC%9F%E5%A4%A7%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在开篇 <a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%AD%A5%E6%AD%A5%E4%B8%BA%E8%90%A5">微服务: 步步为营</a> 里面我们已经定下一个小目标（以终为始的策略），即使用 <code>Spring Boot</code> 写 API 提供给 iOS、Android 客户端或者网页端来调用。</p><p>接下来我们开始完成我们这个超级梦想吧！在启航之前，我们还是给这个 App 起个名字吧，该 App 就是给用户展示 Blog 的，所以暂且称之为 <code>MSBlog</code> 吧！</p><hr><p>朋友做了一个关于 <a href="https://www.cbedai.net/androidbluetooth">人工智能的教程</a>，教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！点 <strong><a href="https://www.cbedai.net/androidbluetooth">这里</a></strong> 可以跳转到教程，对人工智能感兴趣的同学可以了解一下。</p><h2 id="原型图"><a href="#原型图" class="headerlink" title="原型图"></a>原型图</h2><p>项目 <code>MSBlog</code> 的原型图是用 <a href="https://balsamiq.com/wireframes/desktop/">Balsamiq Mockups 3</a> 画的，这个画图工具使用起来非常简单，画出来的效果也相当凑合！</p><p><strong>1、登录、注册页面</strong></p><p>登录和注册页面相对比较简单，第一个版本我们只支持用户名登录，后面再支持其他登录方式。</p><p>下图左边是登录页面，右边是注册页面，如图所示：</p><p><img src="/upload/images/2019/07/03/1.png"></p><p><strong>2、四个Tab页面</strong></p><p>这四个主页面，分别是首页、文章分类、好友、个人页面，如下图所示：</p><p><img src="/upload/images/2019/07/03/2.png"></p><p>上面的原型图只做了登录、注册和 Tab 主页面，从这几个页面已经可以看出这个 App 的构造了。</p><p><strong>1</strong>、首页（Home）：主要展示推荐的文章，以及广告展示页（Banner）。</p><p><strong>2</strong>、分类（Category）：文章分类，按照评论数、发布时间、热度对所有文章进行分类。</p><p><strong>3</strong>、好友（Friends）：App 中所有的好友，需要支持本地搜索。</p><p><strong>4</strong>、个人（Profile）：个人中心，基本是任何一个 App 的标配。</p><h2 id="项目计划"><a href="#项目计划" class="headerlink" title="项目计划"></a>项目计划</h2><p>从上面的原型图中，我们基本了解接下来要做什么了。</p><p>首先，把登录、注册页面搞定，接着再把四个 Tab 页面搞起来，对于 App 初学者来说，这个压力着实不小了，没关系慢慢来，一步一个脚印的走下去。</p><p>无论是哪个页面，都需要服务端提供相关的接口（API）和数据，简单描述一下吧，如下：</p><p><strong>1</strong>、登录（Signin）：需要服务端提供登录接口，即支持用户名和密码登录的API能力。</p><p><strong>2</strong>、注册（Signup）：需要服务端提供注册的接口，即支持用户名和密码注册的API能力。</p><p><strong>3</strong>、首页（Home）：需要提供查询推荐文章的API，后期需要考虑智能推荐。</p><p><strong>4</strong>、分类（Category）：需要提供查询所有文章分类的API。</p><p><strong>5</strong>、好友（Friends）：需要提供查询每个人所有好友的API。</p><p><strong>6</strong>、个人（Profile）：需要提供当前登录用户的所有信息，如用户名、头像、昵称等信息。</p><p>第一步，先把这登录注册做好，服务端把登录、注册的 API 准备好；</p><p>第二步，然后再做 Tab 页面，服务端把其他 API 准备好；</p><p>第三步，客户端和服务端联调数据，确保我们能正常使用客户端。</p><p>客户端先从 iOS 开始，Android 版本的 <code>MSBlog</code> 后续再补上，iOS 客户端的项目采用 MVC 的架构，开发语言采用 <code>Swift</code>（Swift版本为5.0），IDE 采用高大上的 <code>Xcode</code>，项目代码使用 <code>Git</code> 来管理，用 <code>Github</code> 作为代码仓库。</p><p>到这里，是不是觉得自己还有很多东西需要学习比如 <code>Swift</code> 编程语言。当然了，如果你会 <code>Flutter</code> 或者 <code>Javascript</code> 也可以写客户端代码。别担心，我从容的告诉你，编程语言这个东西没有你想象中的那么难，多动手写就可以了，遇到不会就去查手册。世上本没有路，走的多了就有了，对于编程也一样，写的多了就能融会贯通，举一反三。真正难的是你不动手总是在那里埋怨！</p><p>后期有可能会使用 <code>Flutter</code> 来写这个 App，待定。</p><hr><p>祝好，加油！是时候动手写起来了！</p><hr><p><strong>改变，从你我相识开始~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot 微服务 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务：本地热部署</title>
      <link href="/2019/06/30/%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%9A%E6%9C%AC%E5%9C%B0%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/06/30/%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%9A%E6%9C%AC%E5%9C%B0%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在项目开发中，难免会经常修改代码来验证一些问题，如果每次修改都需要进行重新关闭、启动这样的操作会让人有点不爽，如果能实现代码的热部署就好了。</p><p>所谓热部署，就是在应用正在运行的时候升级软件，却不需要重新启动应用。通俗来讲，热部署就是在修改代码后，不需要重新启动服务器，就可以加载修改后的代码，看到修改后的效果。对于 IDEA 来说，热部署就是不需要反复的通过开始、停止来进行项目的启动，而是修改代码保存后自动加载修改后的代码。</p><p>Spring Boot 提供了热部署能力。可以使用 <code>Spring Boot Loader</code> 的方式，也可以使用 <code>Spring Boot Devtools </code>的方式来进行，二者实现方式是不同的，大致总结如下：</p><p><strong>Spring Boot Loader：真正的热部署。</strong></p><p><strong>Spring Boot Devtools：重新部署来实现热部署。</strong></p><p>这两种热部署也是本地热部署，真正的远程服务器热部署方案另有方案，这个不是今天分享的点后续牵涉到部署方案再说！今天只分享如何使用 devtools 实现 Spring Boot 项目的热部署。</p><hr><p>朋友做了一个关于 <a href="https://www.cbedai.net/androidbluetooth">人工智能的教程</a>，教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！点 <strong><a href="https://www.cbedai.net/androidbluetooth">这里</a></strong> 可以跳转到教程，对人工智能感兴趣的同学可以了解一下。</p><h2 id="spring-boot-devtools"><a href="#spring-boot-devtools" class="headerlink" title="spring-boot-devtools"></a>spring-boot-devtools</h2><p>在 IDEA 中使用 devtools 需要修改 IDEA 的设置和工程的 pom 文件，具体操作步骤如下。</p><p><strong>1、修改pom.xml文件，增加devtools</strong></p><p>在 <code>pom.xml</code> 文件中的 <code>dependency</code> 下增加 devtools，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Devtools--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 build 标签下增加 <code>configuration/fork</code> 配置，如果没有该项配置，devtools 不会起作用，即应用不会重启。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、修改IDEA编译选项</strong></p><p>在IDEA中打开 <code>File/Settings</code>，如下图所示：</p><p><img src="/upload/images/2019/06/30/1.png" alt="1555860471904"></p><p><strong>3、修改IDEA中的Registry</strong></p><p>在 IDEA 中 <code>Help/Find Action...</code>，打开下面的对话框，输入registry 进行搜索，如下图：</p><p><img src="/upload/images/2019/06/30/2.png" alt="1555860471904"></p><p>双击 Registry，出现下面弹框，如图操作，选中 <code>Compiler autoMake allow when app running</code> 即可。</p><p><img src="/upload/images/2019/06/30/3.png" alt="1555860471904"></p><p>也可以使用快捷键 <code>ctrl + shift + alt + /</code> 打开 Registry，如图：</p><p><img src="/upload/images/2019/06/30/4.png" alt="1555860471904"></p><p><strong>4、重新启动项目</strong></p><p>重新运行项目进行验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Greate user!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器打开：<a href="http://localhost:8080/user">http://localhost:8080/user</a> 可以看到效果。</p><p>修改原来的 <code>user</code> 方法和增加一个 <code>user2</code> 方法，再来验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Greate user, welcome!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">user2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Greate user!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别在浏览器打开：<a href="http://localhost:8080/user">http://localhost:8080/user</a> 和  <a href="http://localhost:8080/user2">http://localhost:8080/user2</a></p><p><img src="/upload/images/2019/06/30/6.png" alt="1555860471904"></p><p><img src="/upload/images/2019/06/30/7.png" alt="1555860471904"></p><p>现在不需要在 IDEA 中重新启动、关闭这种麻烦操作了。</p><p>如果你足够细心就会发现，使用 devtools 后，每次修改控制台自动的重新启动了 Spring Boot 项目，所以 devtools 是使用了重新部署的方式从而实现了热部署的功能。</p><h2 id="注意几个问题"><a href="#注意几个问题" class="headerlink" title="注意几个问题"></a>注意几个问题</h2><h4 id="1、代码修改不会立即生效"><a href="#1、代码修改不会立即生效" class="headerlink" title="1、代码修改不会立即生效"></a>1、代码修改不会立即生效</h4><p>随着工程越来越大，修改代码或者配置后需要稍等几秒钟（一般3s以内）就会自动重新启动工程，控制台就会看到日志的输出。</p><h4 id="2、代码修改后控制台没有自动的重新启动工程"><a href="#2、代码修改后控制台没有自动的重新启动工程" class="headerlink" title="2、代码修改后控制台没有自动的重新启动工程"></a>2、代码修改后控制台没有自动的重新启动工程</h4><p>这个就需要按照这篇文章说的，重新检查一下如下设置：</p><ul><li>pom 文件，检查一下是否把必要的配置被修改了。</li><li>IDE 的设置是否和本文一致。</li></ul><hr><p><strong>改变，从你我相识开始~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot 微服务 热部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认知</title>
      <link href="/2019/06/23/%E8%AE%A4%E7%9F%A5/"/>
      <url>/2019/06/23/%E8%AE%A4%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>任何时候都不要轻易的开口说：“这不可能”，就跟在任何情况下都不要轻易说放弃一样重要。</p><p>在很多场合下，你这么一说不仅暴露了你的学识，而且还会暴露你的心态。特别是程序员，在产品说要实现xxx功能或者UE说要实现yyy效果的时候，很容易用“这个无法实现”这样的语句来“抗拒”需求。</p><p>我记得有这样一件小事。</p><p>程序员A说：“这个框架已经限制了，无法实现这个功能，别白费力气了!”。</p><p>程序员B说：“我们可以再试试，或许还有其他办法呢？”。</p><p>A显得很不耐烦，说到：“你要是不相信我，你就自己搞吧，我不管了!”。</p><p>B没有和A继续争论而是默默地转去想办法解决问题。功夫不负有心人，下午B就找到了解决方案，这个方案不仅简单而且高效，只需要在框架的基础上简单封装一下就好。</p><p>这样的场景，我相信参加过工作的开发大大们经常遇到。之所以我们说出一些类似“不可能”的华语，要么是心态不对，要么是认知不够。很多人在工作当中面对复杂事情的时候会说“这不可能”或者“这绝不可能”的话，可能你都没有思考过就随口说出来了，一方面显得自己知识不足，另一方面会拒别人于千里之外。</p><p>刚入职场的程序员和工作已久且爱思考的程序员有着很不一样的认知。刚入职场的程序员或者工程师，面对产品经理提出的需求基本都是一一顺从，无论需求是否合理，他们都会老老实实的把需求转化为一行行的代码，稍微有点想法的估计因为“胆小”而不敢发声。随着职场的磨练，业务能力的增强他们开始有了自己的想法和思考，敢于产品经理“抗衡”了，对于不合理的需求会与产品大大们针锋相对，有时候你会发现产品需求会议俨然一场分崩离析的内战。项目做的多了，编程能力、业务能力和沟通能力又上了一层楼，优秀的程序员们不仅能挑出不合理的需求（伪需求）而且还能提出更合理的需求帮助产品更上一层楼，提升产品的逼格和实用性，不仅减少了开发成本而且还提升了团队作战的士气，更重要的是产品经理以后不敢小瞧你了，你自己也会获得无行的成就感。经历事情（如项目经历），思考和总结事情的发展、经过、结局，从而不断的提高自己的业务水平是提升自我认知的一个有效途径。</p><p>年轻时候的嬴政敢爱敢恨，个性很强，下面是吕不韦和嬴政的一段对话。</p><blockquote><p>吕不韦：我为了王上的千秋大业，有些事情，王上一时不可理解。<br>嬴政：不可理解？有些事情，还要使劲才能理解呀？<br>吕不韦：我只能告诉你，当一个人还不够成熟的时候，他所看到的事情，未必是真实的。<br>嬴政：未必真实？那我看到的是什么？<br>吕不韦：你看到的，只是真实的影子。<br>嬴政：那就请仲父告诉我，如何才能理解你的真实？<br>吕不韦：王上现在还没这个能力！</p></blockquote><p>统一六国之后，嬴政面对李斯感慨：“如今天下已经一统，那么大秦现如今的仲父又是谁呢？”可见吕不韦在嬴政心中的地位举足轻重，非同一般。</p><p>我从 “深入理解Linux内核” 这本书中，看到了这样一段话:</p><blockquote><p>Linux 是非抢占式（nonpreemptive）内核。</p></blockquote><p>自从接触Linux以来，在个人的认知中Linux都是抢占式的。那么为什么这里却说它是非抢占式的呢？</p><p>这本书又很权威，难道是自己错了？我就硬着头皮又去找相关的资料，结果算是搞清楚了来龙去脉。</p><p>Linux分为内核抢占和用户抢占，Linux内核版本2.4支持内核抢占但不支持用户抢占，一直到Linux内核版本2.6才都支持内核抢占和用户抢占，”深入理解Linux内核” 这本书是基于Linux内核版本2.4之前讲解的，所以说法并没有错误。</p><p>活到老学到老，讲的是人无论在那个阶段都不应该放弃学习，因为只有不断的学习才能提高自己的认知。对于新鲜事物，我们一定要保持敬畏之心，因为你没有这方面的经验，虚心请教和借鉴才能避免一定的损失。我记得有一次参加一个技术培训，老师提问：“谁能简单解释一下什么是 <a href="https://baike.baidu.com/item/%E5%A2%A8%E8%8F%B2%E5%AE%9A%E5%BE%8B/746284?fr=aladdin">墨菲定律</a> ？”，我看了一下全场，半分钟没有人回答，于是自己就斗胆站起来说了：“你总是担心的事情，它总会发生的。”，老师满意的点了点头，我相信当时会场中有能比我解释更好的人，可能是他不敢也有可能是他不屑于回答。说这个事情并不是要彰显我自己有多么厉害，而是要告诉大家多读书是提高自我认知能力的一种方式。</p><blockquote><p>墨菲定律主要内容有四个方面：</p><p>一、任何事都没有表面看起来那么简单；</p><p>二、所有的事都会比你预计的时间长；</p><p>三、会出错的事总会出错；</p><p>四、如果你担心某种情况发生，那么它就更有可能发生。</p><p>“墨菲定律”的根本内容是“凡是可能出错的事有很大几率会出错”，指的是任何一个事件，只要具有大于零的机率，就不能够假设它不会发生。</p></blockquote><p>对于人的认知大概可以分为四个阶段，如下图所示：</p><p><img src="/upload/images/2019/06/23/1.png" alt="1559469918269"></p><p>以后工作中或者生活中遇到一些自己不知道的事情，首先要摆正心态，然后去找比你更强的人来请教。这样做的话，你即结交了朋友又学到了知识，两全其美，何乐而不为呢？</p><hr><p><strong>知之为知之，不知为不知~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 自我成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: Git入门</title>
      <link href="/2019/06/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Git%E5%85%A5%E9%97%A8/"/>
      <url>/2019/06/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Git%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><p>如果你还没有Github账号，赶紧点击 <a href="https://github.com/">这里</a> 去创建一个，很简单，然后下载  <a href="https://git-scm.com/download/gui/windows">Git GUI</a> 安装即可，如果你还不会这些操作，请行动起来去搜索对应的方法，这里不再赘述。</p><p>在项目开发过程中，除了写代码之外，还需要对代码进行管理。在说如何管理代码之前，先跟大家分享几个实际开发中关于代码管理的场景。</p><p><strong>案例1：入门的小旺</strong></p><p>小旺是名入门不久开发之路的编程狂魔，对代码有颗执着的心。平时编写的代码全部放在自己的那台Macbook Pro上面，有一天小旺不小心把自己编写的重要代码给删除了，万恶的 <code>rm -fr code</code> 呀！心中一万头草泥马奔驰而过。这让小旺伤透了脑筋，只能熬夜硬着头皮再把它给码起来，自己犯的错只能默默地承受着。</p><p><strong>案例2：新手小李和小刚</strong></p><p>小李和小刚是一对编程搭档（公司只有他们两个Android开发，相依为命吧），两位都是开发的新手。每次小李和小刚分别提交代码到仓库，都要经历一场惨目忍睹的博弈。所谓的博弈指的是两位要花很长时间来解决代码冲突的问题，哎，除了写代码还要解决这些无聊的问题，烦！</p><p>如果小旺知道使用Git管理代码，也可以避免误删的风险。</p><p>小李和小刚要比小旺机智，至少知道代码要提交到仓库，当然小李和小刚工作经验丰富，公司也要求代码必须提交。但是二位却没有用好代码管理工具，从而带来了一些烦恼。</p><p>是的，管理代码很重要，无论使用SVN还是Git，至少你要熟练掌握其中一个，我建议还是直接学习Git吧，毕竟现在大多数公司都在用它。</p><p>在 <code>Spring Boot</code> 系列的文章中，使用 <code>Github</code> 作为我们的代码管理仓库，使用Git工具进行代码的提交、修改、合并和删除以及对分支的管理和使用。</p><h2 id="Git-提交"><a href="#Git-提交" class="headerlink" title="Git 提交"></a>Git 提交</h2><p>把在 <a href="http://www.veryitman.com/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/">微服务: 想办法让项目运行起来</a> 写好的代码提交到代码仓库中，这样即使本地代码被误删也可以从远程找回来，安全。假如你更换一台电脑进行编程也可以从远程仓库拉下代码进行编程，随时随地撸代码。</p><p>提交代码，很简单，windows上面安装git工具即可。我使用的是 <a href="https://git-scm.com/download/gui/windows">Git GUI</a>，它自带 <code>Git Bash</code>，有种Unix终端的风范，贼亲切！</p><p>我比较喜欢使用命令行来进行操作，打开工程目录，如下：</p><p><img src="/upload/images/2019/06/09/1.png" alt="1555860042560"></p><p>然后在空白地方右键，会显示 <code>Git Bash</code>，选他就会打开命令终端工具，如下图所示：</p><p><img src="/upload/images/2019/06/09/2.png" alt="1555860285254"></p><p>在终端操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">添加所有文件</span></span><br><span class="line">git add -A *</span><br><span class="line"><span class="meta"># </span><span class="language-bash">提交到本地仓库并加上注释</span></span><br><span class="line">git commit -m &quot;Create a greate project&quot;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">推送到远程master分支</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>如果你之前没有进行任何git提交的话，首次提交会提示你输入用户名和密码，此时你输入自己的github账号和密码即可。</p><p>三步操作完成后，工程也就提交成功了。为了验证提交是否成功，你也可以到远程仓库(使用浏览器打开你的仓库地址)刷新看看有没有刚才提交的内容，如果网络不好就等会在瞅瞅。</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>为了不影响主干(master)上面的代码，我们可以创建一个个人分支来进行开发，例如我的个人分支 <code>veryitman-feature</code> 分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git chekcout -b veryitman-feature</span><br></pre></td></tr></table></figure><p>上面的git命令意思是在本地创建一个名为 <code>veryitman-feature</code> 的分支。</p><p><strong>注意：<code>git chekcout -b xxx</code> 相当于进行下面两步操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch xxx</span><br><span class="line"></span><br><span class="line">git checkout xxx</span><br></pre></td></tr></table></figure><p>主干 <code>master</code> 本身也是一个分支，只是开发者为了协助和代码管理方便创建了各自的分支，等代码测试或者验收通过再从自己的分支合并代码到主干 <code>master</code> 上面，所以一般  <code>master</code> 分支上面的代码都会认为是相对理性、安全的代码。</p><p>分支的存在是为了方便代码的管理，类似于SVN的trunk、tag、branch文件夹管理代码一样。</p><p>创建完成后，提交分支到远程仓库即可，终端操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin veryitman-feature</span><br></pre></td></tr></table></figure><p>去远程代码仓库中，刷新页面后，在Branch可以看到刚才创建的  <code>veryitman-feature</code> 分支，如下图所示：</p><p><img src="/upload/images/2019/06/09/3.png" alt="1555860471904"></p><p>也可以使用下面的方式进行创建和推送分支代码，操作步骤如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">在本地创建新的veryitman-feature分支</span> </span><br><span class="line">git branch veryitman-feature</span><br><span class="line"><span class="meta"># </span><span class="language-bash">切换到新的veryitman-feature分支</span>    </span><br><span class="line">git checkout veryitman-feature</span><br><span class="line"><span class="meta"># </span><span class="language-bash">将新的分支推送到仓库</span></span><br><span class="line">git push origin veryitman-feature</span><br></pre></td></tr></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>在上面的操作中，大家已经看到我们创建了 <code>veryitman-feature</code> 分支，加上原来默认的 <code>master</code> 分支，一共是两个分支了。</p><p>一般来说，<code>master</code> 分支上面的代码应该是经过测试并且稳定的版本，保证其稳定不会出错。而其他分支如上面的  <code>veryitman-feature</code> 是我们需要进行开发的个人分支，不保证其稳定性（因为在开发嘛）。等  <code>veryitman-feature</code>  开发完成再合并到 <code>master</code> 分支上面，关于分支的合并操作，后续再说吧！</p><p><code>Git</code> 支持在分支之间自由切换，比如你在  <code>veryitman-feature</code>  分支，提交完成代码后，可以切换到 <code>master</code> 分支。切换分支的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>如果再想从 <code>master</code> 分支切换到  <code>veryitman-feature</code>  也可以，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git chekcout veryitman-feature</span><br></pre></td></tr></table></figure><p>切换分支一般用在下面几个场景中：</p><ul><li>合并代码</li><li>多分支开发</li><li>修复问题</li></ul><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p><code>Git</code> 提供了可以删除分支的方法和命令。</p><p>删除分支分为两类，一个是仅仅删除本地分支，另一个是删除远程分支。</p><p>删除本地分支意思是删除已经存储在你本地计算机上面的文件，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">在本地删除veryitman-feature分支</span></span><br><span class="line">git branch -d veryitman-feature</span><br></pre></td></tr></table></figure><p>删除远程分支意思是删除存在 <code>GitHub</code> 上面的代码文件，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">在github远程端删除veryitman-feature分支</span></span><br><span class="line">git push origin --delete veryitman-feature</span><br></pre></td></tr></table></figure><hr><p>关于Git的使用还有很多，今天先说这么多，用到的时候再补充。现在最重要的是需要你去注册一个 <code>Github</code> 账号折腾起来，熟能生巧，动手实践才是王道！</p><hr><p><strong>改变，从你我相识开始~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot SpringCloud 微服务 Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调侃C中的define</title>
      <link href="/2019/06/08/%E8%B0%83%E4%BE%83C%E4%B8%AD%E7%9A%84define/"/>
      <url>/2019/06/08/%E8%B0%83%E4%BE%83C%E4%B8%AD%E7%9A%84define/</url>
      
        <content type="html"><![CDATA[<h2 id="二狗子"><a href="#二狗子" class="headerlink" title="二狗子"></a>二狗子</h2><p>二狗子这个名字，在大街小巷，在电视剧中几乎都能听到。我也不知道老一辈的父母为什么这么喜欢给自己的孩子取这样的名字，唯一能让我信服的理由是：顺口！大叔大伯们之所以叫这个名字还有一个理由，之前孩子多，希望孩子像小狗儿一样好喂养。</p><p>正好我们村有个孩子也叫二狗子，大名叫张力万，无论是叫二狗子还是叫张力万，都指的是同一个人。我们大多数情况下还是叫他二狗子，他也习惯了倒也觉得亲切，叫张力万一般都是在正式场合。</p><p>有些企业文化中规定：“不允许在公司直接喊同事的名字，每个人必须有个英文名”。比如二狗子入职到这样的企业，大家不允许喊他二狗子或者张力万，于是二狗子又有了一个英文名：“Jack”，你看 “Jack” 这个名字既符合企业文化又听起来高大尚。</p><p>无论是 “二狗子“ 还是 “Jack“ 都是张力万的别名。</p><p>在 C 语言中，关键字 <code>define</code> 和 <code>typedef</code> 就可以用来取别名，但是二者又有不同点，今天主要分享一下 <code>define</code> 的用法。</p><p>下面是使用 <code>define</code> 来模拟别名，示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Zhangliwan1 <span class="string">&quot;二狗子&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Zhangliwan2 <span class="string">&quot;Jack&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Zhangliwan <span class="string">&quot;张力万&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我们村的%s可以叫他%s也可以叫他%s\n&quot;</span>, Zhangliwan, Zhangliwan1, Zhangliwan2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们村的张力万可以叫他二狗子也可以叫他Jack</span><br></pre></td></tr></table></figure><h2 id="虚构一下"><a href="#虚构一下" class="headerlink" title="虚构一下"></a>虚构一下</h2><p><a href="https://baike.baidu.com/item/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87/7267171">丹尼斯·里奇</a> 一个伟大而低调的牛人，是Unix之父、C语言之父。</p><p><img src="/upload/images/2019/06/08/1.png"></p><p>丹尼斯·里奇还将Unix的设计原则定为 <code>KISS 原则</code> 即 Keep it simple stupid，保持简单和直接，所以Unix一直都是经典中的经典。这也说明丹尼斯·里奇不仅是一个优秀的工程师，还是一个优秀的产品经理。</p><p>我在想，当初丹尼斯·里奇和肯·汤普逊在实验室里没事也会讨论C语言的事情。</p><p>丹尼斯·里奇：“老兄，你看我们现在的语言是不是过于复杂了？”</p><p>肯·汤普逊：“的确有点复杂，我有个大胆的想法，不知当讲不当讲？”</p><p>丹尼斯·里奇：“你还跟我墨迹啥，有话直接说呗，呵呵！”</p><p>肯·汤普逊：“嗯，我们可以开发一门新的语言，他要足够的简单、高效。”</p><p>丹尼斯·里奇：“想法是挺好的，那就开干吧！”</p><p>于是C语言诞生了。</p><p>肯·汤普逊：“你有没有觉得我们在定义常量的时候不太方便？”</p><p>丹尼斯·里奇：“是呀，这样你看行不行，弄个预处理器可以让我们任意定义常量，暂时称他为 ‘宏’ 吧！”</p><p>肯·汤普逊：“我觉得完全没有问题，来，徒手写一个。”</p><p>丹尼斯·里奇：“哈哈，给力！”</p><p>于是 <code>define</code> 就有了。</p><p>以上纯属个人猜想，并不是冒犯两位大师，本故事纯属虚构，如有雷同，纯属巧合。Unix和C语言的大道至简，对后代科学的发展奠定了不可磨灭的贡献和影响。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>关键字 <code>define</code> 是 C 语言中的预处理命令，它用于宏定义，在大多数定义下可以提高代码的可读性，为编程提供方便。</p><p>在 C 语言中预处理命令以 “#” 号开头，如 <code>#include</code>、<code>#ifdef</code>、<code>#endif</code> 和宏定义命令 <code>#define</code> 等。</p><p>关键字 <code>define</code> 的用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 新类型名 原类型名</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INTEGER int</span></span><br><span class="line">INTEGER a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415927</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UserName <span class="string">&quot;user_name&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(x, y) (x)&gt;(y)?(x):(y);</span></span><br></pre></td></tr></table></figure><p>在 C 语言中，关键字 <code>define</code> 的定义的常量都会在预处理阶段将用到的别名直接被原样替换掉。例如在编写源程序时，所有用到 3.1415927 的地方都可用 PI 代替，而编译时，将先由预处理程序进行宏代换即用 3.1415927 去置换所有的宏名 PI，然后再进行编译。</p><p>关键字 <code>define</code> 还可以结合 “#”、“##”、“#@” 使用。</p><ul><li><p>符号 “#”，表示将其字符串化。</p></li><li><p>符号 “##”，表示连接变量。</p></li><li><p>符号 “#@”，表示将其字符化。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M(x) x##x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L(x) #x</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// M(1): 11, L(1): &quot;1&quot;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;M(1): %i, L(1): %s\n&quot;</span>, M(<span class="number">1</span>), L(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我使用 “#@” 定义，无论是GCC编译器还是Clang编译器都无法通过编译，错误信息：“ ‘#’ is not followed by a macro parameter ”，但是在 Visual Studio 中编译就没有问题。示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> K(x) #@x</span></span><br></pre></td></tr></table></figure><p>关键字 <code>define</code> 给我们写代码带来了一定的便利，但是如果过多的乱用它也会代码不小的麻烦，比如下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> square(x) x*x</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">i = <span class="number">64</span>/square(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义宏 <code>square(x)</code> 本来是求某个数的平方，按理说 64&#x2F;16 结果应该是 4，但是运行程序你会发现结果是 64.</p><p>我们把上面的例子展开，因为 <code>define</code> 是直接原样替换，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">64</span>/<span class="number">4</span>*<span class="number">4</span>;</span><br><span class="line">i = <span class="number">16</span>*<span class="number">4</span>;</span><br><span class="line">i = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p>修改一下程序中 <code>define</code> 的定义，结果就对了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> square(x) (x*x)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">i = <span class="number">64</span>/square(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实最安全的做法是这样定义，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> square(x) (&#123;    \</span></span><br><span class="line"><span class="meta">typeof(x) y = (x);  \</span></span><br><span class="line"><span class="meta">y*y;                \</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>可以在C文件的开头，也可以在方法体里面，还可以在方法的声明前都可以使用 <code>define</code> 关键字。</p><p>定义在文件开头：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="string">&quot;name&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Define NAME: %s\n&quot;</span>, NAME);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义在方法中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">play</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Define NAME: %s\n&quot;</span>, NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意，定义在方法中，并不是指该宏定义 <code>NAME</code> 只能用在该方法里面，其他地方照样可以使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">play</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Define NAME: %s\n&quot;</span>, NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意：该方法一定是在define定义之后才能使用NAME */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">eat</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Define NAME: %s\n&quot;</span>, NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>在C语言中或者在类C语言中如Objective-C和C++中，我们会经常用到条件编译语句，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NAME</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>大家在做一些跨平台开发工作的时候，也会用到条件编译语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ANDROID</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PLAYFORM 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PLAYFORM 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>还有就是类似防止重复包含（重复定义）头文件，也会用到条件编译，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __Header_Person_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __Header_Person_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>下面是来自Linux Kernel里面的代码片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_ALPHA_GENERIC)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GAMMA_BIASalpha_mv.sys.t2.gamma_bias</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(CONFIG_ALPHA_GAMMA)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GAMMA_BIAS_GAMMA_BIAS</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GAMMA_BIAS0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>既然我们可以定义宏，那么是否可以取消宏定义呢？答案是当然可以。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">play</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Define NAME: %s\n&quot;</span>, NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NAME</span></span><br><span class="line"><span class="comment">// 取消宏定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">eat</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Compile errror: Use of undeclared identifier &#x27;NAME&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Define NAME: %s\n&quot;</span>, NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这份 <a href="https://gcc.gnu.org/onlinedocs/cpp/Macors.html#Macros">GNU Macors</a> 在线文档介绍了很多关于宏定义的知识，可以点击前往学习。</p><hr><p><strong>时间可以改变一切，但你得做点什么！</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> define typedef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回忆高考</title>
      <link href="/2019/06/07/%E5%9B%9E%E5%BF%86%E9%AB%98%E8%80%83/"/>
      <url>/2019/06/07/%E5%9B%9E%E5%BF%86%E9%AB%98%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/06/07/1.jpeg" alt="1"></p><h2 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h2><p>转眼间，我人生中的高考距今已十几年有余了，那时候意气风发，踌躇满志，随时迎接高考的灵魂拷问。幸运的是自己跌跌撞撞的考上了大学，阴差阳错的变成了一名程序猿。</p><p>今天是2019年高考的第一天，作为一名 “资深” 的程序猿我还是想用编程的方式来记录这一天，算是对学子们的祝福和对自己的高中生活的一点回忆吧。</p><p>祝所有高考中的学者们都能如愿以偿的考上自己心中的那所大学，你们的人生即将辉煌，加油！</p><h2 id="不期而遇"><a href="#不期而遇" class="headerlink" title="不期而遇"></a>不期而遇</h2><p>在我们那个年代特别是在我们老家人多且穷，谁能上大学简直就是 “光宗耀祖” 的事情，然而很多人对学习的欲望并不强，他们大部分都向往着外面的世界。其实，我也很渴望外面的世界，有过逃离那种压抑的高中生活的想法。但是回过头仔细想想出去后环境难道就没有障碍吗？生活就能如日中天吗？不可能的，尤其是对农村出来的孩子来说没有学历想在大城市中好好的活下去犹如天方夜谭。出来工作这么多年，生活的艰辛印证了我当初的想法。</p><p>凡事不忘初心，每当你想放弃的时候就好好想想当初自己为什么这么做。</p><p>我记得高考结束的那天下午，父母一起来学校准备接我回家，这是上高中三年以来第一次父母一起来学校。我知道父母是担心我，他们没有问我考的怎么样，让我把被子收拾一下跟他们回家。我怕他们担心就告诉他们：“别担心，我感觉自己考的还可以”，我永远忘不了父母那一刻展露出的欣慰的笑容。</p><p>高考结束的那一夜我没有和父母一起回家，而是跟同学们在网吧守了一夜等着高考试题的答案出来，想给自己和父母一个交代，那个晚上陪受煎熬。</p><p>这是我人生中第一次真正的接触电脑，也是第一次感觉到要上大学的喜悦。</p><h2 id="基础很重要"><a href="#基础很重要" class="headerlink" title="基础很重要"></a>基础很重要</h2><p>大家应该听说过这样的话题：“兄弟，把数学学那么好干什么，你上街买菜会用对数(log)跟大妈算账吗，买鸡蛋需要开根号吗？”。</p><p>听上去好像很有道理的样子，但是这里不完全合理。</p><p>首先，说话者是抱着一种嫉妒的心态而不是学习的心态，很消极的一种说法。</p><p>其次，说话者把数学知识的使用的范畴建立在买菜买鸡蛋的基础上了，假如你要搞算法扎实的数学基础和思维必须要具备，否则寸步难行，随着机器学习、AI 和大数据分析的发展，数学知识成为了一个必备学科。</p><p>再者，随着时代和科技的发展，说不定卖菜的大爷大妈们用的数学知识让你应接不暇。</p><p>所以，好好学习并没有错。基本学科能让你扎实自己的基础，拓展自己的思维。</p><h2 id="学点编程"><a href="#学点编程" class="headerlink" title="学点编程"></a>学点编程</h2><p>几年前国外、国内的很多人都在说：“以后编程是人人都应该具备的基本技能，就像会骑车子一样那么简单！”。</p><p>对于这个 “以后” 谁也没有给出具体期限，就好比我小时候羡慕别人家有彩色电视一样，没想到过了几年这个东西居然也出现在了自己的家中，如获至宝，欣喜若狂。</p><p>现在很多教育机构已经提供了针对儿童编程的课程，大多是可视化编程。有孩子的家长们也许都发现了现在的孩子接受面和接受能力都远超我们那代人，这跟社会环境、家庭环境和营养饮食都有一定的关系，再加上兴趣班的催化让现在大多数孩子变得有点 “鬼机灵”。比如你的电脑莫名其妙的被打开并且还能自动被播放动画片，还有你明明设置的 iPad 密码很复杂竟然也能让他们给 “破解”，最气愤的是他居然可以趁你不注意用你的零钱给对方发了红包~</p><p>如果有条件的话，家长们可以孩子接触编程知识，培养他们思考问题的习惯。培养学习编程知识，不一定非要买个高端的 PC 或者昂贵的 iPad，可以从搭积木和一些简单的数学知识开始，也可以让他参加一些例如机器人课的兴趣班，参观参观科技博物馆之类的。</p><p>高考的学子们，无论高考结果如何，不要刻意的去强迫自己，因为人生的路还有很长，及时的调整心态后面比高考更难的 ”考试试题“ 还等着你们呢！</p><p>高考结束了，如果你是理科的学生建议大家可以去看看编程方面的知识，懂点编程的知识对你以后的工作还是很有好处的。把编程当做一种乐趣而不是工作，这样才有可能创造无限的可能。</p><p>祝大家金榜题名，端午安康！</p><hr><p><strong>时间可以改变一切，但你得做点什么！</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高考 端午 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 想办法让项目运行起来</title>
      <link href="/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/"/>
      <url>/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h2><p>最新的 <code>Spring Boot</code> 发布版本是 <code>2.1.4</code>，需要JDK版本最小为8即 <code>JDK8</code>，构建工程的工具 <code>Maven</code> 最小版本为3.3，<code>Gradle</code> 最小版本为4.4，当然了 <code>Maven</code> 和 <code>Gradle</code> 任选一个即可，接下来分享的文章中基本都使用 <code>Maven</code> 来构建工程。</p><p>1、Spring Boot 2.1.4</p><p>2、JDK8</p><p>3、IntelliJ IDEA2019 收费版</p><p>有稳定可用的网络，保证工程构建和一些依赖的下载。</p><p>具体 <code>Spring Boot</code> 对其他工具的版本要求，可以参考这里的 <a href="https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/reference/htmlsingle/#getting-started-system-requirements">getting-started-system-requirements</a> 文章内容。</p><p>建议大家使用Chrome作为默认浏览器，测试、调试API数据和安装对应的插件很方便。</p><h2 id="认识-Github"><a href="#认识-Github" class="headerlink" title="认识 Github"></a>认识 Github</h2><p>如果你还没有 <code>Github</code> 账号，就去注册一个，打开 <a href="https://github.com/">这个地址</a> 即可。</p><p>注册完成后，可以新建一个 <code>Repo</code>(可以存放代码的仓库)，本文涉及的所有代码都放在 <a href="https://github.com/veryitman/MSTutorial/tree/master">Github</a> 上面。</p><p>Spring Boot 系列文章也会跟大家一起学习 <code>Git</code> 的使用。</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>新建工程，打开IDEA，File&#x2F;New&#x2F;Project，下一步即可</p><p><img src="/upload/images/2019/06/02/1.png"></p><p>填写工程信息，然后下一步</p><p><img src="/upload/images/2019/06/02/2.png"></p><p><strong>这里注意：Artifact 要求是全是小写字母，否则无法创建工程。</strong></p><p>选择依赖，<code>Core</code> 中选择 <code>Lombok</code>，这个使用起来比较方便，建议大家选择，不选也可以的。</p><p><img src="/upload/images/2019/06/02/3.png"></p><p>紧接着在 <code>Web</code> 中选择 <code>Web</code> 即可，下一步 </p><p><img src="/upload/images/2019/06/02/4.png"></p><p>保存工程，启动后在右小角提示下面内容，直接 <code>Enable Auto-Import</code> 和 <code>Enable plgins</code> 即可，如果你之前安装过 <code>Lombok</code> 插件，这里也不会提示  <code>Enable plgins</code> 了。</p><p> <img src="/upload/images/2019/06/02/5.png"></p><p>然后安装  <code>Lombok</code> 插件，点击 <code>ok</code> 即可。</p><p><img src="/upload/images/2019/06/02/6.png"></p><p>等待IDEA构建完成，工程显示如下：</p><p><img src="/upload/images/2019/06/02/7.png"></p><p>如果你的工程加载其他库加载失败，可以重新导入，操作如下：</p><p><img src="/upload/images/2019/06/02/8.png"></p><h2 id="Run起来"><a href="#Run起来" class="headerlink" title="Run起来"></a>Run起来</h2><p>直接运行已经构建成功的工程。</p><p><img src="/upload/images/2019/06/02/9.png"></p><p>打开浏览器，输入 <a href="http://localhost:8080/">http://localhost:8080/</a> 能看到下面的内容：</p><p><img src="/upload/images/2019/06/02/10.png"></p><p>说明工程已经成功运行起来了，你距离伟大的目标越来越近了。</p><p>为了让浏览器显示一个正常的语句，我们需要增加点东西。</p><p>新建一个 <code>MSUserController</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.veryitman.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSUserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Greate user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开浏览器，输入 <a href="http://localhost:8080/user">http://localhost:8080/user</a> 能看到下面的内容：</p><p><img src="/upload/images/2019/06/02/11.png"></p><h2 id="说点神奇的"><a href="#说点神奇的" class="headerlink" title="说点神奇的"></a>说点神奇的</h2><p><strong>1、创建工程还有其他方式吗？</strong></p><p>除了使用IDEA提供的方法来创建 <code>Spring Boot</code> 工程，也可以使用官方提供的 <a href="https://start.spring.io/">Spring Initializr</a> 来创建工程。</p><p>本质上，IDEA是集成了 <a href="https://start.spring.io/">Spring Initializr</a> 这个工具，所以二者同宗同源。</p><p><strong>2、为什么点个按钮就Run起来了？</strong></p><p> <code>Spring Boot</code>  已经内置了 <code>Tomcat</code> 服务器作为 Web Server，所以可以直接跑起来。</p><p><img src="/upload/images/2019/06/02/12.png"></p><p> <code>Spring Boot</code> 就是这么简单，约定大于配置的思想贯彻其始终。</p><hr><p><strong>改变，从你我相识开始~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot SpringCloud 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务: 步步为营</title>
      <link href="/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%AD%A5%E6%AD%A5%E4%B8%BA%E8%90%A5/"/>
      <url>/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%AD%A5%E6%AD%A5%E4%B8%BA%E8%90%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/05/28/1.png"></p><p>上图是我从 <a href="https://spring.io/">spring.io</a> 首页介绍截图过来的，简洁而不失霸气！</p><p>最近两年，<code>Spring Boot</code> 伴随着微服务的发展而越发火热，很多公司也纷纷开始使用 <code>Spring Boot</code> 和 <code>Spring Cloud</code> 来开发自己的服务，Java开发的浪潮愈发汹涌。这年头不知道微服务不知道 <code>Spring Boot</code> 就感觉生活缺点什么似的。我们还是抱着学习的心态来学习一下这个时代宠儿吧，不要盲目吹捧就可以了。</p><p>由 <a href="https://pivotal.io/cn/open-source">Pivotal</a> 提供的 <code>Spring Boot</code> 是一套基于Java语言的开发框架，之前的 <code>Spring</code> 框架配置比较复杂，设计 <code>Spring Boot</code> 目的是用来简化 <code>Spring</code> 的开发过程，一定程度的去尽力解放程序员，换句话说  <code>Spring Boot</code> 是建立在 <code>Spring</code> 基础之上的。<code>Spring Boot</code> 更像是一个框架仓库，它拥有你基本想要的东西，简单到只需要你添加配置就可以，并且 <code>Spring Boot</code> 可以帮你处理各个库之间的依赖兼容问题，不用我们去关心这些问题。“<strong>约定优于配置</strong>” 的思想贯穿 <code>Spring Boot</code> 的始终，约定优于配置（Convention Over Configuration），也被称之为按约定编程，它是一种软件设计范式、思想，约定优于配置旨在减少开发人员需做决定的数量、获得简单的好处，而又不失灵活性，对于我们来说是一种编程的新体验。</p><p>为了自己学习，也为了方便想学习  <code>Spring Boot</code> 的小伙伴，准备搞一套 <code>Spring Boot</code> 系列文章来滋润一下无聊的生活。</p><p><code>Spring Boot</code> 系列文章我准备采用以终为始的方式来分享，所谓的以终为始就是我们先给自己顶个目标，然后再想方案来完成目标，细化每个实施步骤。 </p><p>至于什么是 <a href="https://www.martinfowler.com/articles/microservices.html">微服务</a>，什么是  <code>Spring Boot</code> 大家可以去网上搜索了解，后续分享的文章中我也会渗透式的分享一下相关的知识。这里强调一点，微服务不等于  <code>Spring Boot</code> 或者  <code>Spring Cloud</code>，他们只是实现微服务的一种手段而已。</p><p><strong>学习要求</strong></p><p>1、你得会Java基础知识，至少会用JDK的基本类。如果不会，赶紧去补补，学习没那么难，只要你别太懒！</p><p>2、你要使用过IDEA这个无与伦比的集成开发工具，放弃 Eclipse 吧！不是它不好，只是IDEA太优秀。</p><p>3、英语要凑合，有没有四级证书真的无所谓，官方文档大多都是英文的却都是精华。</p><p>4、坚强的毅力，乐观的心态，很多困难都是纸老虎，当你搞定它了之后你就知道自己有多厉害了。</p><p>5、多运动多思考，身体是革命的本钱，其他的都是扯淡！</p><p><strong>以终为始</strong></p><p>大目标：基于 <code>Spring Cloud</code> 构建微服务开发一个APP。</p><p>实施计划：</p><p><strong>1</strong>、了解和学习 <code>Spring Boot</code></p><p>目标：使用 <code>Spring Boot</code> 构建一个简单的服务，客户端或者WEB端可访问该服务。</p><p>如果你不会移动开发，可以使用C&#x2F;C++、C#或者JS来开发一个客户端，哪怕终端程序也是可以的。</p><p>刚开始学习的时候，如果遇到不理解的知识点先记下来，不要因为这些东西阻挡你的学习，等学到一定的时候再回过头来研究，这就好比你刚上球场学习打篮球一样，能先稳稳的拿住球再传给队友就很了不起了，得不得分那是后面的事情。</p><p>在这一部分，我们做好登录和注册即可。</p><p><strong>2</strong>、深入学习 <code>Spring Boot</code></p><p>继续学习 <code>Spring Boot</code> 的知识，用户完成了注册，然后登录进入我们的APP需要给他们展示更加丰富的场景。这个时候需要配合后台服务进行开发工作，借助这次机会可以更加深入的学习和认识 <code>Spring Boot</code>了。</p><p><strong>3</strong>、 了解和学习  <code>Spring Cloud</code> </p><p>在这个阶段，需要使用  <code>Spring Cloud</code> 改造我们已经开发的单体应用服务了。</p><p>微服务的关键不是如何将你的服务拆的如何 “微”，而是如何做好服务治理。于是在 <code>Spring Boot</code> 基础之上便有了 <code>Spring Cloud</code>，它是完全基于 <code>Spring Boot</code> 开发的，对外提供了在微服务架构中如何做好服务治理的一套解决方案。</p><p>学习完  <code>Spring Boot</code> 之后需要了解一些关于  <code>Spring Cloud</code>  的知识，进入 <code>Spring Cloud</code>  的世界一窥究竟，这部分我们一起学习如何做服务治理，服务部署等知识。</p><p><strong>4</strong>、做一次架构师 </p><p>综合  <code>Spring Boot </code> 和  <code>Spring Cloud</code> 相关的知识，我们重新梳理一下之前做的东西。把整个系统串起来，画出流程图和架构图。</p><p>设计包括服务本身的设计、数据库和缓存等设计。</p><p><strong>5</strong>、完善和优化服务</p><p>借鉴业界好的案例对我们的服务进行优化，包括数据库、缓存、API和其他设计做一次重构，并对我们这个微项目进行一次复盘。</p><p>最重要的是要奖励一下自己。</p><hr><p><code>Spring Boot</code> 系列文章我会努力坚持写下去，希望能帮到大家。</p><p>干就完了！</p><p><strong>改变，从你我相识开始~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot SpringCloud 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务项目系列文章</title>
      <link href="/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/"/>
      <url>/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>狂风暴雨的那个周末，突发奇想，想把微服务相关的内容分享给大家，思前想后还是决定用项目的形式来推进否则很难进行下去，于是就有了项目的这些文章（持续更新中…）。</p><p>他们都是有生命的，对我来说。</p><hr><h2 id="项目开篇"><a href="#项目开篇" class="headerlink" title="项目开篇"></a>项目开篇</h2><ul><li><p><a href="http://www.veryitman.com/2019/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%AD%A5%E6%AD%A5%E4%B8%BA%E8%90%A5/">微服务: 步步为营</a></p><blockquote><p>学习微服务的计划。</p></blockquote></li></ul><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p><a href="http://www.veryitman.com/2019/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%83%B3%E5%8A%9E%E6%B3%95%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/">微服务: 想办法让项目运行起来</a></p><blockquote><p>使用IDEA搭建第一个SpringBoot项目。</p></blockquote><p><a href="http://www.veryitman.com/2019/06/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Git%E5%85%A5%E9%97%A8/">微服务: Git入门</a></p><blockquote><p>写过的代码就是自己的财富，需要把他管理起来，代码管理我用Git管理工具。</p></blockquote><p><a href="http://www.veryitman.com/2019/06/30/%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%9A%E6%9C%AC%E5%9C%B0%E7%83%AD%E9%83%A8%E7%BD%B2/">微服务: 本地热部署</a></p><blockquote><p>如何热部署项目，不需要每次都手动重启。</p></blockquote><p><a href="http://www.veryitman.com/2019/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AB%8B%E5%BF%97%E5%81%9A%E4%B8%AA%E4%BC%9F%E5%A4%A7%E7%9A%84%E9%A1%B9%E7%9B%AE/">微服务: 立志做个伟大的项目</a></p><blockquote><p>确定学习微服务的项目。</p></blockquote><p><a href="http://www.veryitman.com/2019/08/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%AD%A6%E4%B9%A0%E5%87%A0%E4%B8%AA%E5%AE%B9%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84URL%E6%B3%A8%E8%A7%A3/">微服务: 学习几个容易混淆的URL注解</a></p><blockquote><p>学习跟URL相关的几个注解，如 @RequestParam、@QueryParam、@PathVariable、@PathParam。</p></blockquote><p><a href="http://www.veryitman.com/2019/09/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E5%BD%95/">微服务: 简单的用户名注册和登录</a></p><blockquote><p>写注册和登录的接口，并完成接口的单元测试。</p></blockquote><p><a href="http://www.veryitman.com/2019/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E8%AE%A9%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%A4%9A%E6%8A%BD%E4%B8%80%E6%94%AF%E7%83%9F/">微服务-Swagger让你可以多抽一支烟</a></p><blockquote><p>接口编码完成之后，结合 Swagger 可以同时完成文档的编写。</p></blockquote><p><a href="http://www.veryitman.com/2019/10/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Swagger%E7%94%9F%E6%88%90Markdown%E6%96%87%E6%A1%A3/">微服务-Swagger生成Markdown文档</a></p><blockquote><p>如何生成离线文档。</p></blockquote><p><a href="http://www.veryitman.com/2019/10/31/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/">微服务: 部署服务</a></p><blockquote><p>如何部署已经写好的服务。</p></blockquote><p><a href="http://www.veryitman.com/2019/11/10/MySQL8-0-15%E5%9C%A8Win10%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE%E8%AE%B0/">MySQL8-0-15在Win10上的折腾记</a></p><blockquote><p>安装MySQL。</p></blockquote><p><a href="http://www.veryitman.com/2019/12/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1-MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/">微服务: MySQL基本操作</a></p><blockquote><p>使用MySQL数据库。</p></blockquote><p><a href="http://www.veryitman.com/2020/04/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%BB%93%E5%90%88MySQL%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/">微服务: 结合MySQL实现登录注册</a></p><blockquote><p>前端登录注册界面访问 API，读写数据库实现数据的存储和读取实战。</p></blockquote><p><a href="http://www.veryitman.com/2020/05/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Actuator%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%B5%8B/">微服务: Actuator实现服务监测</a></p><blockquote><p>如何安全的使用 Actuator。</p></blockquote><p><a href="http://www.veryitman.com/2020/05/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Admin%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%B5%8B%E5%92%8C%E7%AE%A1%E7%90%86/">微服务: Admin与服务监测和管理</a></p><blockquote><p>如何使用 spring-admin（client&amp;server）实现服务管理和监测。</p></blockquote><p><a href="http://www.veryitman.com/2020/05/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%85%8D%E7%BD%AENginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/">微服务-配置Nginx反向代理</a></p><blockquote><p>Nginx 作为反向代理的实践知识。</p></blockquote><p><a href="http://www.veryitman.com/2020/07/16/ngrok%E8%AE%A9%E6%9C%8D%E5%8A%A1%E8%BF%91%E5%9C%A8%E5%92%AB%E5%B0%BA/">ngrok让服务近在咫尺</a></p><blockquote><p>ngrok 实现内网穿透。</p></blockquote><p><a href="http://www.veryitman.com/2020/08/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1-ConfigurationProperties%E9%85%8D%E7%BD%AE/">微服务-ConfigurationProperties配置</a></p><blockquote><p>properties 到 Bean 的转换。</p></blockquote><p><a href="http://www.veryitman.com/2020/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%A4%9A-Module-%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B/">微服务-多-Module-管理工程</a></p><blockquote><p>管理工程，规范工程。</p></blockquote><p><a href="http://www.veryitman.com/2020/11/15/Win10-%E5%AE%89%E8%A3%85-Redis/">Win10-安装-Redis</a></p><p><a href="http://www.veryitman.com/2020/12/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1-SpringBoot-%E9%9B%86%E6%88%90-Redis/">微服务-SpringBoot-集成-Redis</a></p><blockquote><p>Redis 的简单使用。</p></blockquote><h2 id="Spring-Boot-番外篇"><a href="#Spring-Boot-番外篇" class="headerlink" title="Spring Boot 番外篇"></a>Spring Boot 番外篇</h2><ul><li><p><a href="http://www.veryitman.com/2019/08/31/%E8%B7%A8%E5%9F%9F%E5%92%8COPTIONS%E8%BF%99%E5%AF%B9%E6%AC%A2%E5%96%9C%E5%86%A4%E5%AE%B6/">跨域和OPTIONS这对欢喜冤家</a></p><blockquote><p>解决跨域问题。</p></blockquote></li><li><p><a href="http://www.veryitman.com/2019/09/08/%E5%87%8F%E5%B0%91%E8%B7%A8%E5%9F%9F%E4%B8%AD%E7%9A%84OPTIONS%E8%AF%B7%E6%B1%82/">减少跨域中的OPTIONS请</a></p><blockquote><p>如何减少跨域请求，使用 SpringBoot 完成实例。</p></blockquote></li><li><p><a href="http://www.veryitman.com/2019/11/24/%E7%9F%AD%E5%9C%B0%E5%9D%80%E5%8E%9F%E7%90%86/">短地址原理</a></p><blockquote><p>实例（SpringBoot）讲解短地址实现原理。</p></blockquote></li></ul><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><p>待更新😜</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="Android-相关"><a href="#Android-相关" class="headerlink" title="Android 相关"></a>Android 相关</h3><ul><li><p><a href="http://www.veryitman.com/2020/06/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Android%E5%AE%A2%E6%88%B7%E7%AB%AF-%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E5%92%8C%E7%99%BB%E5%BD%95/">微服务-Android客户端-实现注册和登录</a> </p><blockquote><p>使用Android实现MSBlog项目，本篇实现了工程框架的搭建、注册和登录功能。</p></blockquote></li></ul><h3 id="iOS-相关"><a href="#iOS-相关" class="headerlink" title="iOS 相关"></a>iOS 相关</h3><p>待更新😜</p><p><strong>不经历风雨怎么见彩虹，没有人能够随随便便成功~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot SpringCloud 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员这个职业</title>
      <link href="/2019/05/25/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%99%E4%B8%AA%E8%81%8C%E4%B8%9A/"/>
      <url>/2019/05/25/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%99%E4%B8%AA%E8%81%8C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>今天想跟大家聊聊关于程序员职业的话题~</p><p><img src="/upload/images/2019/05/25/1.jpg"></p><hr><h2 id="谣言可畏"><a href="#谣言可畏" class="headerlink" title="谣言可畏"></a>谣言可畏</h2><p>如果你是做编程这个行业的，一定会听到很多人抱怨这个行业太辛苦了，网上也流行着这么一句话：“程序员挣得多，死得早”，简直扎心！</p><p>关于 “程序员挣得多，死得早” 这句话其实是不完全合理的。</p><p>我记得几年前，一个加班的周末我一个人坐电梯上去正好碰到一位送水的大爷。大爷瞄了我一眼说：”小伙子这个点再这里还上班的一定是搞编程的吧？“。我点了点头：”大爷，行家呀，没想到被你一眼识破“。大爷接着说道：”这个行业好呀，挣得多，你们一个月最少也有好几万吧？“，我当时被大爷说出来的数字吓了一跳，那可是我不吃不喝一年的工资呀！我尴尬的笑着说：”大爷，你真逗！“，然后简单聊了几句就下了电梯，大爷的话久久不能让我释怀，感觉自己做了一份假工作。</p><p>“挣得多” 完全是谣言，“死得早” 倒是有可能，想想都疼。关于程序员，加班到是家常便饭，在你职业生涯的早期加班是因为自己能力不足，随着你 “键”步如飞能力的提升，自以为不用再这么拼命了，谁曾想…新的编程语言横穿出世，新的技术层出不穷，如果不学习不努力只能被这个行业给淘汰掉。</p><p>如果你有足够好的运气能遇到好的项目，遇到好的团队，肯定能从中获益，比如你在支付宝、或者在王者荣耀团队，或者你在微信，又或者你在今日头条。</p><p>好的运气并不是每个人都有，因为好的运气更需要好的自己，你要做好充分的准备去迎接 ”好运气“ 的到来。</p><h2 id="建立人脉"><a href="#建立人脉" class="headerlink" title="建立人脉"></a>建立人脉</h2><p>和你相处的同事当中，肯定会有诙谐幽默的型的，理智理性型的，还有感情用事说话很直接的类型的人，也许还有小肚鸡肠卑鄙小人型的。直到我读到明朝历史，我才知道皇帝还可以几十年不上朝的，称其为 ”无为而治“。所以，世界那么大，遇到形形色色的人是一件再正常不过的事情，没什么大惊小怪的。</p><p>不过我接触的程序员的同事中，幽默诙谐的人不多，和这类人一起工作你会觉得很开心。这类人更容易缓解团队紧张而又沉闷的氛围，更容易被人选为组长。我建议大家该放松的时候就放松，别整天摆着脸给人一种 ”欠你钱“ 的错觉。</p><p>和同事搞好关系，可以给你日后的工作带来很大的帮助。比如，你在工作中遇到阻碍或者困难，同事们都会帮你出谋划策，哪怕一个小小的提示可能就能让你灵光一闪，轻松解决问题。你在公司的时间久了，除了和同部门的同事处理好关系，还有跟其他部门的同事多接触。开发和质量管理部、运维中心、设计部以及业务部门多少都会有一些工作上的接触，不妨跟他们多咨询一些非你本专业的知识，这样既可以学到知识又可以结交朋友，职场的交际能力是门大学问。</p><p>不知道你有没有发现，公司很多的业务主管都是公司有交际能力的老员工来担当？为什么呢，因为这些人在公司待的时间久，沟通能力有强，所以很多跨部门的协调工作他都能轻而易举的搞定。</p><p>除了自己要加强交际能力，还有加强自己的技术能力以及技术影响力，比如你带头在短时间内解决了一个遗留很久的问题，这个会很快让你成为大家心目中的技术佼佼者。</p><p>另外，自己要多去帮助别人，当你有困难的时候有人帮助你，那么当别人有困难的时候你也要能及时的帮助别人，这样大家彼此才能建立信任感，送人玫瑰手留余香，很简单的道理。</p><h2 id="自我定位"><a href="#自我定位" class="headerlink" title="自我定位"></a>自我定位</h2><p>也许有一天，你被公司高层盯上了。高层觉得你很不错，各方面都比较优秀，决定选你为部门负责人。</p><p>作为部门负责人，你新官上任可千万别乱放火，你要知道水能载舟亦能覆舟！很多人当上部门领导后，喜欢动用人事部门开始进行裁员行动，有些很优秀的员工都被他给赶走了。大哥，这不是封建社会了，你以为自己是秦始皇吗？！切！</p><p>就跟大家上学选班长一样，大家为什么选你做班长？一般是因为你学习努力成绩优秀并且能带动大家一起学习和进步，在工作当中也一样，选你做负责人，是让你能带领团队一起作战拿下公司定下的目标，让你帮助大家解决问题而不是让你仗势欺人，摆出一副高高在上的姿态让人难以 ”望其项背“。</p><p>特别是技术出身的部门领导，一定要做好自我定位。除了帮大家帮团队解决问题，你自己的技术能力不能落下也就是说不能丧失编程的能力，否则你连最后保住饭碗的能力都没有了。</p><p>万一，那天你做了管理者，要想清楚你能做什么以及你不能做什么，最重要的是找好自我定位，别忘了你以前也是一个程序员。</p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaIO中神奇的flush</title>
      <link href="/2019/05/19/JavaIO%E4%B8%AD%E7%A5%9E%E5%A5%87%E7%9A%84flush/"/>
      <url>/2019/05/19/JavaIO%E4%B8%AD%E7%A5%9E%E5%A5%87%E7%9A%84flush/</url>
      
        <content type="html"><![CDATA[<p>这篇文章在之前已经写过，只是没有在公众号发布过。该文阅读量已经达到了 <strong>36553</strong> 次了，有必要分享给大家。</p><p><img src="/upload/images/2019/05/19/1.png" alt="1"></p><p>后续我会陆续的把一些大家评论比较多并且很好的知识点在公众号分享给大家，希望和大家在编程的道路上一起进步，把苦涩的日子变得有趣一点。</p><p>无意中发现了一个巨牛的人工智能教程，忍不住分享一下给大家。教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以跳转到教程。</p><h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><p>Java IO 流的设计不得不让人拍案叫绝，佩服设计者鬼斧天工的手法。</p><p>如果你是 Java 初学者，我敢保证第一次接触 Java 的 IO 类，一定会 ”狂晕！”，倒不是因为它有多么难学而是太多让人难以琢磨，让人有种 “不识庐山真面目” 的感觉，当你用心学完之后也会收获 “只缘身在此山中” 的顿悟。</p><p>在 Java 编程的日子中尤其是在网络编程中，几乎离不开 Java 的 IO 流，所以学好和用好它是很有必要的。</p><p>关于 Java 的 IO 流的分类，可以去找找相关的资料，今天跟大家分享一下其中比较神奇的 <code>flush</code> 方法。</p><h2 id="flush-与-OutputStream"><a href="#flush-与-OutputStream" class="headerlink" title="flush 与 OutputStream"></a>flush 与 OutputStream</h2><p>该类实现了 Flushable 接口，所以重写了 flush 方法，看看 flush() 源码，会更加的让你明白：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123; &#125; </span><br></pre></td></tr></table></figure><p>Sorry，该实现为空。这里的 <code>flush()</code> 居然是一个空方法，什么也没做。看清楚啊，该方法不是抽象方法，是一个实实在在的方法。除了方法体中一无所有，其它还好！看JDK的API如何解释吧！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flush </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span><br><span class="line">刷新此输出流并强制写出所有缓冲的输出字节。</span><br><span class="line">flush 的常规协定是：如果此输出流的实现已经缓冲了以前写入的任何字节，则调用此方法指示应将这些字节立即写入它们预期的目标。 </span><br><span class="line">如果此流的预期目标是由基础操作系统提供的一个抽象（如一个文件），则刷新此流只能保证将以前写入到流的字节传递给操作系统进行写入，但不保证能将这些字节实际写入到物理设备（如磁盘驱动器）。</span><br><span class="line">OutputStream 的 flush 方法不执行任何操作。</span><br><span class="line">指定者： 接口 Flushable 中的 flush </span><br><span class="line">抛出： IOException - 如果发生 I/O 错误。  </span><br></pre></td></tr></table></figure><p>开始，我安慰自己，该类是一个抽象类，它的子类肯定重写了该方法。</p><p>好吧，<code>OutputStream</code> 的直接子类有：<code>ByteArrayOutputStream</code> 、<code>FileOutputStream</code>、<code>FilterOutputStream</code>、<code>ObjectOutputStream</code> 、<code>OutputStream</code>、<code>PipedOutputStream</code> 等几个类。</p><p><strong>注意：这里的子类 <code>OutputStream</code> 是包 <code>org.omg.CORBA.portable</code> 的。</strong></p><p>对于 <code>FileOutputStream</code>、<code>ByteArrayOutputStream</code>、<code>org.omg.CORBA.portable.OutputStream</code> 类它们的 <code>flush()</code> 方法均是从父类继承的 <code>flush</code> 方法。</p><p><code>FilterOutputStream</code> 类重写了 <code>flush()</code> 方法，但是实质还是调用父类的 <code>flush()</code> 方法。<code>ObjectOutputStream</code>、<code>PipedOutputStream</code> 类重写了 <code>flush()</code> 方法。</p><p>JDK 中，有两大类IO流即字节流和字符流（包括输入和输出），这些流类中有些是带有缓冲区功能的有些是没有的。<code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code> 是字节缓冲区类；<code>BufferedReader</code> 和 <code>BufferedWriter</code> 是字符缓冲区类<strong>。</strong></p><p>来举两个小例子，第一个例子主要是使用非缓冲区的 IO 流向文本中写入指定的字符串，第二个例子是使用带有缓冲区的 IO 流向文本中写入一定的字节数据。</p><p><strong>1、例子1：向文本中写入字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream; </span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream; </span><br><span class="line"><span class="keyword">import</span> java.io.File; </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;text.txt&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fos);</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;java io&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这段代执行后，会在当前目录下产生 1KB 的文件（内容为 <code>java io</code>）。</p><p>特别注意，这里没有调用 <code>flush</code> 方法，只是调用了 <code>writeBytes</code> 方法。调用流程图如下：</p><p><img src="/upload/images/2019/05/19/2.png" alt="1"></p><p><strong>2、例子2：向文本中写入一定字节的数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream; </span><br><span class="line"><span class="keyword">import</span> java.io.File; </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;text.txt&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123; </span><br><span class="line">            file.createNewFile(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file); </span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos); </span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">8</span>]; </span><br><span class="line">        bos.write(b); </span><br><span class="line">        bos.flush(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>这段代执行后，会在当前目录下产生 8KB 字节的文件。调用关系如下：</p><p><img src="/upload/images/2019/05/19/3.png" alt="1"></p><p>现在我们修改第二个例子的代码，主要修改两个地方</p><p>（1）、注释掉调用 <code>flush()</code> 方法；</p><p>（2）、将 byte 大小改为 1024 大小。</p><p>修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        bos.write(b);</span><br><span class="line">        <span class="comment">//bos.flush();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>OK，再次运行代码，额的神啊？？？文件大小居然是0字节。</p><p>why？</p><p>仔细的你会发现，第一个例子中的代码中并没有调用 <code>flush()</code> 方法，居然可以正常的写入。为什么第二个就不可以呢？还是从源码入手找答案吧！</p><p><code>DataOutputStream</code> 继承 <code>FilterOutputStream</code> ，实现了 <code>DataOutput</code> 接口。我们知道 <code>FilterOutputStream</code> 类重写了 <code>flush()</code> 方法，但是实质还是调用父类的 <code>flush()</code> 方法。<code>DataOutputStream</code> 类的 <code>flush()</code> 方法效仿其父类 <code>FilterOutputStream</code> 的做法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123; </span><br><span class="line">    out.flush(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，即使你在第一个例子的代码后面加上 <code>dos.flush()</code> 结果也是正常的，与不加是一样的效果，因为它们的父类 <code>flush()</code> 方法均为空，这就是为什么第一个代码的神奇所在。</p><p>再看看第二个代码的 “病因” 在哪里？先看看 <code>BufferedOutputStream</code> 类的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedOutputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterOutputStream</span></span><br></pre></td></tr></table></figure><p>再看看，它的 <code>flush()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;         </span><br><span class="line">    flushBuffer(); </span><br><span class="line">    out.flush();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** Flush the internal buffer */</span>    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">flushBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;   </span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;     </span><br><span class="line">        out.write(buf, <span class="number">0</span>, count);     </span><br><span class="line">        count = <span class="number">0</span>;        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>不错，该类重写了 <code>flush()</code> 方法，不像前面几个类那样不是继承就是山寨父类的 <code>flush()</code> 方法。<code>BufferedOutputStream</code>  类是一个使用了缓冲技术的类，这种类一把都会自己实现 <code>flush()</code> 方法。</p><p>那么，有人会问使用这种类的时候，难道必须使用 <code>flush()</code> 方法吗，当然不是喽？？！！不过有个前提，你的字节数据必须不能小于 8KB。实例代码，<strong>注意没有 <code>flush()</code>方法。</strong></p><p><strong>（1）、写入的数据不小于8KB</strong></p><p>如下示例代码，byte 大小改为 8KB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream; </span><br><span class="line"><span class="keyword">import</span> java.io.File; </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;text.txt&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123; </span><br><span class="line">            file.createNewFile(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file); </span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos); </span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">8</span>]; </span><br><span class="line">        bos.write(b); </span><br><span class="line">        <span class="comment">//bos.flush(); </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>执行代码，会产生大小为 8KB 的文本文件。</p><p><strong>（2）、修改默认缓冲区大小</strong></p><p>如下示例代码，修改一下构造 <code>BufferedOutputStream</code> 的方法，设置默认缓冲区大小为 1024。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;text4.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">    file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos, <span class="number">1024</span>);</span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">bos.write(b);</span><br><span class="line"><span class="comment">//bos.flush();</span></span><br></pre></td></tr></table></figure><p>执行代码，会产生 1KB 大小的文本文件。</p><p>这里提醒一下，如果你的文件读写没有达到预期目的，十之八九是因为你没有调用 <code>flush()</code> 或者 <code>close()</code> 方法。</p><p>另外，字符流类大多数都实现了 <code>flush()</code> 或者 <code>close()</code> 方法，只不过，它们调用的是 <code>StreamEncoder</code> 类的该方法。该类位于 <code>sun.nio.cs</code> 包下面，其源码在我们JDK中是没有的。</p><p>可以点击 <a href="http://www.docjar.com/html/api/sun/nio/cs/StreamEncoder.java.html">StreamEncoder.java</a> 查看源码。</p><h2 id="flush-与-Writer"><a href="#flush-与-Writer" class="headerlink" title="flush 与 Writer"></a>flush 与 Writer</h2><p>该类 <code>Writer</code> 是一个抽象类，声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Writer</span> <span class="keyword">implements</span> <span class="title class_">Appendable</span>, Closeable, Flushable</span><br></pre></td></tr></table></figure><p><code>Writer</code> 类的 <code>flush()</code> 方法是一个抽象方法，其子类一般都实现了该方法。</p><p>所以，一般使用字符流之后需要调用一下 <code>flush()</code> 或者 <code>close()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>细节请看JDK的API，或者Java的源码以及上面的 <code>StreamEncoder</code> 类源码。</p><p>今天就说到这里吧，本文主要借助Java IO中字节流与字符流的 <code>flush()</code> 方法，来说明学编程语言看源码和思考是很重要的。</p><p>总之，不管你使用哪种流（字符、字节、具有缓冲的流）技术，不妨调用一下 <code>flush()</code> 或者 <code>close()</code> 方法，防止数据无法写到输出流中。</p><hr><p><strong>学习没有一蹴而就的方法，坚持思考、练习才是王道~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flush OutputStream JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 生成 RSA 公钥和私钥</title>
      <link href="/2019/05/11/macOS-%E7%94%9F%E6%88%90-RSA-%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5/"/>
      <url>/2019/05/11/macOS-%E7%94%9F%E6%88%90-RSA-%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5/</url>
      
        <content type="html"><![CDATA[<p>如果你没有安装 <code>openssl</code>，请先使用 brew 安装它。</p><h2 id="生成-RSA-私钥"><a href="#生成-RSA-私钥" class="headerlink" title="生成 RSA 私钥"></a>生成 RSA 私钥</h2><p>在 macOS 终端输入下面命令，会生成1024位的私钥，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rsa_private.pem 1024</span><br></pre></td></tr></table></figure><p>执行成功后，在当前目录会生成 <code>rsa_private.pem</code> 文件了。</p><p><strong>注意：这里生成的是 <code>PKCS1</code> 格式的文件，也称之为传统的私钥格式。</strong></p><h2 id="生成-RSA-公钥"><a href="#生成-RSA-公钥" class="headerlink" title="生成 RSA 公钥"></a>生成 RSA 公钥</h2><p>得到私钥后，执行如下命令可以得到公钥，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private.pem -out rsa_public.pem -pubout </span><br></pre></td></tr></table></figure><p>执行成功后，在当前目录会生成 <code>rsa_public.pem</code> 的文件，这个就是公钥。</p><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><blockquote><p>有些后端服务需要 <code>PKCS8</code> 格式的密钥，可以使用 openssl 工具把 <code>PKCS1</code> 和 <code>PKCS8</code> 进行互转。</p></blockquote><p><code>PKCS</code> 全称是 <code>Public-Key Cryptography Standards</code>，是由 RSA 实验室与其它安全系统开发商为促进公钥密码的发展而制订的一系列标准。</p><p>把 RSA 私钥转 <code>PKCS1</code> 转换为 <code>PKCS8</code> 格式，执行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_private.pem -outform PEM -nocrypt -out rsa_private_pkcs8.pem</span><br></pre></td></tr></table></figure><p>把 RSA 私钥 <code>PKCS8</code> 格式转换为 <code>PKCS1</code> 格式，执行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private_pkcs8.pem -out pkcs1.pem</span><br></pre></td></tr></table></figure><p>以上生成的 RSA(pem) 文件，可以使用 vim、vscode 等文本编辑器打开查看。</p><p>无论是 <code>PKCS1</code> 还是 <code>PKCS8</code>，它们都是 PEM 编码存储的格式。</p><h2 id="PEM-格式"><a href="#PEM-格式" class="headerlink" title="PEM 格式"></a>PEM 格式</h2><p>PEM 格式既是对 <a href="http://fileformats.archiveteam.org/wiki/DER">DER</a> 编码转码为 <code>Base64</code> 字符格式，通过解码，将会还原为 DER 格式。即 PEM 是建立在 DER 编码之上的一种格式。</p><p>总之，PEM 是明文格式，可以包含证书或者是密钥，其内容通常是以类似 <code>—–BEGIN …—–</code> 开头，以 <code>—–END …—–</code> 为结尾的这样的格式，如下示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXQIBAAKBgQDX+VXh+9zZBC3jRLcLyGGygb/vuiQj13x9ElH9pQmUg29UJ0q1</span><br><span class="line">hcSFuoKmt4id8jyj82fI2PMISzoGucqQFm9HXIV65UcgeUx7REDhgZOBmSCWZ2lW</span><br><span class="line">e2Fnf/htyiy9YVEN4jL7H+b67cIcEDHgYZLtPvSZgyr0UyOMC+E40kTcnQIDAQAB</span><br><span class="line">AoGBAKKsYD7l6VPgrPuY31LVrJi62ComB2Cjx1WhffZR3+RoF2vImNtkB0E+2Xff</span><br><span class="line">l9x3/6ry1IMove3KTzadrHBZJZi1Y6lmHE95uv0O4p16ETnqvKzO8MkcH3qVQe1Z</span><br><span class="line">EyNd/wXr4A8DW3ZlNP/QIPOgzK949yTiP53wapiRwExEf7nhAkEA7CbbdoslRzhQ</span><br><span class="line">9YY1Sdbmc7NHpZdKhkgZwOVJZBoRwfHtSnFcpQUlOzLGCOxP+tGn5mpzhmpDFeUR</span><br><span class="line">bv7mgaQvtQJBAOogUtiJbffk0p3uu7r5nCBmC6BqbG8yVqBVk+r/gS5iHBeBQVyp</span><br><span class="line">FGYYLPQ9daHWluNku07MhqarPcXytEk7ekkCQDBjofK/fmsCkixNTNwNiflJUiVO</span><br><span class="line">W/n6CjTphslZQhIGNb5cTkSOMlvYApZPffACR+pCA9wWKBrzbkgVOTx1XUUCQQDE</span><br><span class="line">KJLg47wkLy6brhLss6ewqW7iV3hEfhuAOFM3WB1mvEKnGt+lf/AcXfMEK54sGzvO</span><br><span class="line">h2475jaG3ABkoiWVGeUpAkAgckc/Pf7KVRF/mDVruMJBbJLYL4H4s78nssFQ4d9V</span><br><span class="line">yXKsIM/AHUxZ5ZKiC7vtEtaGrTLAiuIuQZzBgGpSHX/e</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>以下是证书文件名称，来自维基百科 <a href="https://zh.wikipedia.org/wiki/X.509">X.509</a> 的截图。<br><img src="/upload/images/2019/05/11/1.jpg"></p><hr><p><strong>要始终保持学习的激情~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA OpenSSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C函数中返回字符数组</title>
      <link href="/2019/05/10/C%E5%87%BD%E6%95%B0%E4%B8%AD%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/"/>
      <url>/2019/05/10/C%E5%87%BD%E6%95%B0%E4%B8%AD%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>在阅读本篇文章之前，建议大家看一下下面2篇文章：</p><ul><li><a href="http://www.veryitman.com/2019/03/07/%E4%B8%8D%E8%A7%81%E5%BE%97%E4%BD%A0%E4%BC%9A%E8%AE%A1%E7%AE%97C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/">不见得你会计算C字符串长度</a></li><li><a href="http://www.veryitman.com/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/">双宿双飞的 malloc 和 free</a></li></ul><p>这篇文章主要分享三个点：</p><p>1、为什么作为局部变量的字符数组不能直接返回，而字符指针却可以?</p><p>2、当字符数组是局部变量的时候，函数如何返回它？</p><p>3、字符数组(char [])和字符指针(char *)如何互转？</p><h2 id="局部变量的字符数组"><a href="#局部变量的字符数组" class="headerlink" title="局部变量的字符数组"></a>局部变量的字符数组</h2><p>在C中如果我们直接返回字符数组，编译会直接报警告。如下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">fork_user_name</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[] = <span class="string">&quot;veryitman&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Xcode中编译警告信息是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address of stack memory associated with local variable &#x27;name&#x27; returned</span><br></pre></td></tr></table></figure><p>在Linux上面GCC编译显示警告是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: function returns address of local variable [-Wreturn-local-addr]</span><br></pre></td></tr></table></figure><p>无论哪种警告信息，基本意思都是告诉我们不应该返回一个局部变量 <code>name</code> 的地址（函数内部的变量在栈内存上）。</p><p>如果我们修改一下代码，将 <code>char</code> 改为指针变量 <code>char *</code> ，示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">fork_user_name2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *name = <span class="string">&quot;veryitman&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是Linux的GCC还是Xcode的Clang编译器都不会报出警告。</p><p>首先我们要知道，常量是放在数据段里面的。</p><p>这里比较特殊，局部变量 <code>name</code> 保存在栈中，但是字符串 <code>veryitman</code> 的值是一个常量，保存在常量区。即便函数返回了，数据段里面的常量数据也还不会消亡，它会直到程序结束才会消失，其内存空间直到程序运行结束才会被释放。 所以，返回的地址是一个实际存在的有效地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">fork_user_name</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[] = <span class="string">&quot;veryitman&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">fork_user_name2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *name = <span class="string">&quot;veryitman&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fork_user_name: %s\n&quot;</span>, fork_user_name());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fork_user_name2: %s\n&quot;</span>, fork_user_name2());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用GCC编译、运行后的打印结果，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fork_user_name: (null)</span><br><span class="line">fork_user_name2: veryitman</span><br></pre></td></tr></table></figure><p>总之，在函数中的局部变量只要是返回类似 <code>int[]</code>、<code>char[]</code>、<code>long[]</code> 地址的，都是不正确的做法。</p><h2 id="一切皆有可能"><a href="#一切皆有可能" class="headerlink" title="一切皆有可能"></a>一切皆有可能</h2><p>下面例子是不正确的，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">v_string</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> rest[<span class="number">10</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> rest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1、使用 static</strong></p><p>在C语言中，用 <code>static</code> 限定外部变量与函数，该外部变量或者函数除了对该所在的文件可见外，其他文件都无法访问。 而用 <code>static</code> 声明内部变量，则该变量是某个特定函数的局部变量，只能在该函数中使用。但它与自动变量不同的是，不管其所在函数是否被调用，它一直存在，而不像自动变量那样，随着所在函数的被调用和退出而存在和消失。换句话说，<code>static</code> 类型的内部变量是一种只能在某个特定函数中使用但一直占据存储空间的变量。</p><p>所以使用static修饰一下，就没有问题了。示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">v_string</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> rest[<span class="number">10</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> rest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、使用 malloc</strong></p><p>这种方式可以解决这个问题，是因为使用 <code>malloc</code> 分配的内存是在堆上而不是在栈内存上面。但是要记得将其在调用方使用 <code>free</code> 释放申请的内存空间，否则容易造成内存泄漏问题。</p><p>具体可以看看 <a href="%5Bhttp://www.veryitman.com/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/%5D(http://www.veryitman.com/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/)">双宿双飞的 malloc 和 free</a> 这篇文章。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">v_string</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    p = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、全局变量</strong></p><p>这个很好理解。全局变量在程序真个生命周期中都是有效的，所以使用全局变量也可以解决类似问题。</p><p>但是这种方案就会让这个封装的方法不够内聚，因为它依赖了全局变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> g_rest[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> * <span class="title function_">v_string</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(g_rest, <span class="string">&quot;verytiamn&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> g_rest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、返回形参指针变量</strong></p><p>在Linux Kernel(内核源码版本5.0.7)中，函数 <code>strcpy</code> 的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __HAVE_ARCH_STRCPY</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * strcpy - Copy a %NUL terminated string</span></span><br><span class="line"><span class="comment"> * @dest: Where to copy the string to</span></span><br><span class="line"><span class="comment"> * @src: Where to copy the string from</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> strcpy</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *tmp = dest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((*dest++ = *src++) != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="comment">/* nothing */</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(<span class="built_in">strcpy</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>参考内核实现，我们可以修改一下自己的代码，示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">v_string</span><span class="params">(<span class="type">char</span> *s1, <span class="type">char</span> *s2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *tmp = s1;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里补充另外一个知识点，函数 <code>strcpy</code> 在glibc和Linux Kernel中实现不一样。</p><p>在glibc的新版中(2.29版本)，本质是调用了函数 <code>memcpy</code>， 实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> strcpy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STRCPY</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> STRCPY strcpy</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Copy SRC to DEST.  */</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">STRCPY</span> <span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcpy</span> (dest, src, <span class="built_in">strlen</span> (src) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_builtin_def (<span class="built_in">strcpy</span>)</span><br></pre></td></tr></table></figure><p>包括 <code>strncpy</code> 在glibc和Linux Kernel中实现也不一样，有兴趣的可以去看看源码。</p><h2 id="字符数组和字符指针的互转"><a href="#字符数组和字符指针的互转" class="headerlink" title="字符数组和字符指针的互转"></a>字符数组和字符指针的互转</h2><h3 id="char-转-char"><a href="#char-转-char" class="headerlink" title="char [] 转 char *"></a>char [] 转 char *</h3><p>这种情况下，可以直接进行赋值，示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c_str_array[] = <span class="string">&quot;veryitman.com&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p_str;</span><br><span class="line">    p_str = c_str_array;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p_str: %s\n&quot;</span>, p_str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="char-转-char-1"><a href="#char-转-char-1" class="headerlink" title="char * 转 char []"></a>char * 转 char []</h3><p>是不是也可以直接进行赋值呢？撸段代码看看，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c_str_array[] = <span class="string">&quot;veryitman.com&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p_str = <span class="string">&quot;veryitman.com&quot;</span>;</span><br><span class="line">    c_str_array = p_str;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c_str_array: %s\n&quot;</span>, c_str_array);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很遗憾，编译报错，GCC编译错误截图如下：</p><p><img src="/upload/images/2019/05/10/1.png" alt="1557417012236"></p><p>Clang编译错误如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array type &#x27;char [14]&#x27; is not assignable</span><br></pre></td></tr></table></figure><p>可以考虑使用 <code>strncpy</code> 来实现，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c_str_array[] = <span class="string">&quot;veryitman.com&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p_str = <span class="string">&quot;veryitman.com&quot;</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>(c_str_array, p_str, <span class="built_in">strlen</span>(p_str));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c_str_array: %s\n&quot;</span>, c_str_array);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间可以改变一切，但你得做点什么！</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> strcpy char[] </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双宿双飞的 malloc 和 free</title>
      <link href="/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/"/>
      <url>/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>函数 <code>malloc</code> 和 <code>free</code> 是一对好朋友，几乎是形影不离。有 <code>malloc</code> 的地方就应该有 <code>free</code> 的存在。</p><p>今天跟大家聊聊 <code>malloc</code> 和 <code>free</code> 这对好基友，这两个函数都是对堆内存进行管理的函数，另外还有 <code>calloc</code>、<code>realloc</code>、<code>reallocf</code>、<code>valloc</code> 等堆内存管理函数。</p><h2 id="void"><a href="#void" class="headerlink" title="void *"></a>void *</h2><p>在进行下面话题之前，我们先回忆一下 <code>void *</code> 是什么？</p><p><code>void *</code> 表示未确定类型的指针。C&#x2F;C++规定，<code>void *</code> 类型可以强制转换为任何其它类型的指针。</p><p><code>void *</code> 也被称之为无类型指针，<code>void *</code> 可以指向任意类型的数据，就是说可以用任意类型的指针对 <code>void *</code> 赋值，如下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *p1;</span><br><span class="line"><span class="type">int</span> *p2;</span><br><span class="line">p1 = p2;</span><br></pre></td></tr></table></figure><p>但一般不会反过来使用，如下示例在有些编译器上面可以编译通过，有些就不行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *p1;</span><br><span class="line"><span class="type">int</span> *p2;</span><br><span class="line">p2 = p1;</span><br></pre></td></tr></table></figure><p>可以修改一下代码，将 <code>void *</code> 转换为对应的指针类型再进行赋值，如下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *p1;</span><br><span class="line"><span class="type">int</span> *p2;</span><br><span class="line">p2 = (<span class="type">char</span> *)p1;</span><br></pre></td></tr></table></figure><p>由于 GNU 和 ANSI 对 <code>void *</code> 类型指针参与运算的规定不一样，所以为了兼容二者并且让程序有更好的兼容性，最好还是将 <code>void *</code> 转换为有明确类型的指针再参与运算，如下示例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *pd;</span><br><span class="line"><span class="type">char</span> *pc = (<span class="type">char</span> *)pd;</span><br><span class="line">pc ++;</span><br><span class="line">pc += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p><code>malloc</code> 向系统申请分配指定 <code>size</code> 个字节的内存空间，即 <code>malloc</code> 函数用来从堆空间中申请指定的 <code>size</code> 个字节的内存大小，返回类型是 <code>void *</code> 类型，如果成功，就会返回指向申请分配的内存，否则返回空指针，所以 <code>malloc</code> 不保证一定成功。</p><p>查看函数手册或者直接在Linux、macOS等Unix系统上面直接 <code>man malloc</code> 会显示对应的函数信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The malloc() function allocates size bytes of memory and returns a pointer to the allocated memory.</span><br><span class="line"></span><br><span class="line">If successful, malloc() function return a pointer to allocated memory.  </span><br><span class="line">If there is an error, they return a NULL pointer and set errno to ENOMEM.</span><br></pre></td></tr></table></figure><p>另外需要注意一个问题，使用 <code>malloc</code> 函数分配内存空间成功后，<code>malloc</code> 不会对数据进行初始化，里边数据是随机的垃圾数据，所以一般结合 <code>memset</code> 函数和 <code>malloc</code> 函数 一起使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *arr;</span><br><span class="line">arr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != arr) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr: %p\n&quot;</span>, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *arr;</span><br><span class="line">arr = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != arr) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="string">&#x27;\0&#x27;</span>, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr string: %s\n&quot;</span>, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了安全起见，建议可以考虑使用 <code>calloc()</code> 函数，后面会提到它。</p><p>函数 <code>free</code>、<code>malloc</code>、<code>calloc()</code> 都被包含在 <code>stdlib.h</code> 头文件中，当然了 <code>malloc.h</code> 头文件也有对应的函数声明，实现在 <code>malloc.c</code> 文件中。</p><p>关于 <code>malloc</code> 函数中的 <code>size</code> 参数务必要大于指针本身的数值，在32位操作系统上，指针占用4字节的大小；在64位操作系统上，指针占用8字节的大小。</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br></pre></td></tr></table></figure><p>我们知道在 C 语言中， 堆上的内存空间不会自动释放（Java 有自动回收机制，而 C 语言没有），直到调用 <code>free</code> 函数，才会释放堆上的存储空间，即 <code>free</code> 函数会释放指针指向的内存分配空间。</p><p>下面是函数手册查到关于 <code>free</code> 函数的资料：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The free() function deallocates the memory allocation pointed to by ptr.</span><br><span class="line">If ptr is a NULL pointer, no operation is performed.</span><br></pre></td></tr></table></figure><p>对于 <code>free</code> 函数我们要走出一个误区，不要以为调用了 <code>free</code> 函数，变量就变为 <code>NULL</code> 值了。本质是 <code>free</code> 函数只是割断了指针所指的申请的那块内存之间的关系，并没有改变所指的地址（本身保存的地址并没有改变）。如下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *pchar = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(pchar, <span class="string">&quot;blog&quot;</span>);</span><br><span class="line">    <span class="comment">/* pchar所指的内存被释放，但是pchar所指的地址仍然不变 */</span></span><br><span class="line">    <span class="built_in">free</span>(pchar);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 该判断没有起到防错作用，此时 pchar 并不为 NULL */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(pchar, <span class="string">&quot;it&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pchar: %s&quot;</span>, pchar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确且安全的做法是对指针变量先进行 <code>free</code> 然后再将其值置为 <code>NULL</code>，如下下面示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *pchar = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(pchar, <span class="string">&quot;blog&quot;</span>);</span><br><span class="line">    <span class="comment">/* pchar所指的内存被释放，但是pchar所指的地址仍然不变 */</span></span><br><span class="line">    <span class="built_in">free</span>(pchar);</span><br><span class="line">    <span class="comment">/* 将其置为 NULL 值 */</span></span><br><span class="line">    pchar = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 该判断没有起到防错作用，此时 pchar 并不为 NULL */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(pchar, <span class="string">&quot;it&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pchar: %s&quot;</span>, pchar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>free</code> 只能释放alloc的内存空间，对于其他非alloc的指针变量使用free会出现错误，如下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0x2010</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><p>运行后直接跪了，报类似下面的错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pointer being freed was not allocated.</span><br></pre></td></tr></table></figure><p>另外，告诉大家一个秘密，<code>free</code> 一个空指针没问题。如下例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><p>代码可以正常运行，在 <code>free</code> 函数源码为证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* free(0) has no effect */</span></span><br><span class="line"><span class="keyword">if</span> (mem == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>NULL</code> 在源码（在 <code>morecore.c</code> 文件中）中定义就是0，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NULL</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="malloc、free-小结"><a href="#malloc、free-小结" class="headerlink" title="malloc、free 小结"></a>malloc、free 小结</h2><p><strong>1、连续内存块</strong></p><p><code>malloc</code> 函数申请的是连续的一块内存，如果所申请的内存块大于目前堆上剩余内存块，则内存分配会失败，函数返回 <code>NULL</code> 值。</p><p><strong>注意：上面说的 <code>堆上剩余内存块</code> 不是所有剩余内存块之和，而是连续的内存。</strong></p><p><strong>2、双宿双飞才好</strong></p><p>调用 <code>malloc</code> 函数多余 <code>free</code> 函数会发生内存泄漏，这个很好理解，因为申请过的内存没有被释放完。调用 <code>malloc</code> 函数少于<code>free</code> 函数，肯定会出错。换句话说，在程序中 <code>malloc</code> 的使用次数务必要和 <code>free</code> 相等，否则必有隐患或者发生错误。</p><p>如下面的例子 <code>free</code> 两次指针变量就会在运行时报错： <code>malloc: *** error for object 0x10071be90: pointer being freed was not allocated</code>，也称之为 <code>double free</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *pchar = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">free</span>(pchar);</span><br><span class="line"><span class="built_in">free</span>(pchar);</span><br></pre></td></tr></table></figure><p>对指针变量进行 <code>free</code> 之后，一定要记得对其赋值为 <code>NULL</code>，否则该指针就是一个野指针，这个在上面已经说明。</p><p><strong>3、0字节的内存有毒</strong></p><p>使用 <code>malloc</code> 函数也可以申请0字节的内存，该函数的返回值并不是 <code>NULL</code>，而是返回一个正常的内存地址，所以如果使用这种方式申请的内存很危险，如下面的例子，指针 <code>pchar</code> 是一个使用 <code>malloc</code> 函数创建的占用0字节的内存空间的一个指针变量，<code>if (NULL == pchar)</code> 并没有生效，而是执行了 <code>else</code> 语句中的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *pchar = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pchar) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc 0 byte memory failed.\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc 0 byte successfully and pchar: %s.\n&quot;</span>, pchar);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pchar: %s.\n&quot;</span>, pchar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这中方式的指针类似于一个野指针，可以使用但有风险，不知道这个指针后面的内存空间被谁使用着，要是被核心进程使用，会造成相应程序的崩溃。</p><p><strong>4、调皮的free</strong></p><p>使用非alloc方式创建的内存，使用 <code>free</code> 函数会报错，这个要注意。另外，<code>free</code> 空指针没有影响。</p><h2 id="calloc、realloc、reallocf、valloc"><a href="#calloc、realloc、reallocf、valloc" class="headerlink" title="calloc、realloc、reallocf、valloc"></a>calloc、realloc、reallocf、valloc</h2><p><strong>1、calloc 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> count, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>在堆上，分配 <code>n*size</code> 个字节，并初始化为0，返回 <code>void *</code>类型，返回值情况跟 <code>malloc</code> 一致。</p><p>函数 <code>malloc()</code> 和函数 <code>calloc()</code> 的主要区别是前者不能初始化所分配的内存空间，而后者能。如果由 <code>malloc()</code> 函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0；反之，如果这部分内存曾经被分配过，则其中可能遗留有各种各样的数据。也就是说，使用 <code>malloc()</code> 函数的程序开始时(内存空间还没有被重新分配)能正常进行，但经过一段时间(内存空间还已经被重新分配)可能会出现问题。 </p><p>函数 <code>calloc()</code> 会将所分配的内存空间中的每一位都初始化为零，也就是说，如果你是为字符类型或整数类型的元素分配内存，那么这些元素将保证会被初始化为0；如果你是为指针类型的元素分配内存，那么这些元素通常会被初始化为空指针；如果你为实型数据分配内存，则这些元素会被初始化为浮点型的零。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The calloc() function contiguously allocates enough space for count objects that are size bytes of memory each and returns a pointer to the allocated memory.</span><br><span class="line"></span><br><span class="line">The allocated memory is filled with bytes of value zero.</span><br></pre></td></tr></table></figure><p><strong>2、realloc() 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p><code>realloc()</code> 会将 <code>ptr</code> 所指向的内存块的大小修改为 <code>size</code>，并将新的内存指针返回。假设之前内存块的大小为 n，如果 size &lt;&#x3D; n，那么截取的内容不会发生变化，如果 size &gt; n，那么新分配的内存不会被初始化。</p><p>对于上面说的新的内存指针地址可能变也可能不变，假如原来alloc的内存后面还有足够多剩余内存的话，realloc后的内存&#x3D;原来的内存+剩余内存，realloc还是返回原来内存的地址即不会创建新的内存。假如原来alloc的内存后面没有足够多剩余内存的话，realloc将申请新的内存，然后把原来的内存数据拷贝到新内存里，原来的内存将被free掉，realloc返回新内存的地址。</p><p>另外要注意，如果 ptr &#x3D; NULL，那么相当于调用 malloc(size)；如果 ptr !&#x3D; NULL且size &#x3D; 0，那么相当于调用 free(ptr)。</p><p>当调用 <code>realloc</code> 失败的时候，返回NULL，并且原来的内存不改变，不会释放也不会移动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">The realloc() function tries to change the size of the allocation pointed to by ptr to size, and returns ptr. </span><br><span class="line"></span><br><span class="line">If there is not enough room to enlarge the memory allocation pointed to by ptr, realloc() creates a new allocation, copies as much of the old data pointed to by ptr as will fit to the new allocation, frees the old allocation, and returns a pointer to the allocated memory.  </span><br><span class="line"></span><br><span class="line">If ptr is NULL, realloc() is identical to a call to malloc() for size bytes.  </span><br><span class="line"></span><br><span class="line">If size is zero and ptr is not NULL, a new, minimum sized object is allocated and the original object is freed.  </span><br><span class="line"></span><br><span class="line">When extending a region allocated with calloc(3), realloc(3) does not guarantee that the additional memory is also zero-filled.</span><br></pre></td></tr></table></figure><p>看一下源码的关键部分，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * __libc_realloc (<span class="type">void</span> *oldmem, <span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 省略... </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> REALLOC_ZERO_BYTES_FREES</span></span><br><span class="line">  <span class="keyword">if</span> (bytes == <span class="number">0</span> &amp;&amp; oldmem != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    __libc_free (oldmem); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出，如果 <code>oldmem</code> 不为NULL且 <code>bytes</code> 为0的情况下，会自动进行 <code>free</code> 操作。如下面的例子运行后会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *pre_ptr = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="type">int</span> bytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> != pre_ptr) &#123;</span><br><span class="line">        <span class="type">void</span> *ptr = <span class="built_in">realloc</span>(pre_ptr, bytes);</span><br><span class="line">        <span class="comment">// 对pre_ptr进行了double free，这种条件下源码中会进行一次free</span></span><br><span class="line">        <span class="built_in">free</span>(pre_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以为了保险起见，要对 <code>bytes</code> 进行判断再做处理。</p><p>传递给 <code>realloc</code> 的指针变量必须是先前通过 <code>malloc()</code>、 <code>calloc()</code> 或 <code>realloc()</code> 等alloc分配的，否则会报 <code>pointer being realloc&#39;d was not allocated.</code> 错误。如下例子（运行直接报错）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">void</span> *newP = <span class="built_in">realloc</span>(p, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>3、reallocf() 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">reallocf</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p><code>reallocf()</code> 函数是由 FreeBSD 实现的，它会在任何情况下释放输入的指针（即使是再分配失败之后）。<code>reallocf()</code> 一样会调用 <code>realloc</code> 函数，但是只有我们在获得空的指针之后才会调用 <code>free</code> 函数。</p><p>下面是 <code>reallocf</code> 函数具体的实现部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">reallocf</span><span class="params">(<span class="type">void</span> *p, <span class="type">size_t</span> size)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr = <span class="built_in">realloc</span>(p, size);</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The reallocf() function is identical to the realloc() function, except that it will free the passed pointer when the requested memory cannot be allocated.</span><br><span class="line"></span><br><span class="line">This is a FreeBSD specific API designed to ease the problems with traditional coding styles for realloc causing memory leaks in libraries.</span><br></pre></td></tr></table></figure><p><strong>4、valloc() 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">valloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>这个函数是最少见也是最少用的一个函数。</p><p><code>malloc</code> 或 <code>realloc</code> 返回的是以8字节对齐的内存地址，在64bits上是16字节对齐。然而 <code>memalign</code> 或 <code>valloc</code> 可以更大的粒度进行字节对齐。</p><p><code>valloc</code> 是一个废弃的函数，分配 <code>size</code> 大小的字节，返回已分配的内存地址指针，其内存地址将是页大小(page size)的倍数，如果分配失败返回 <code>NULL</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The valloc() function allocates size bytes of memory and returns a pointer to the allocated memory. </span><br><span class="line"></span><br><span class="line">The allocated memory is aligned on a page boundary.</span><br></pre></td></tr></table></figure><p>说了这么多，接下来我们看一下例子，如下代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对其分配内存，这个时候pchar值是随机的垃圾值</span></span><br><span class="line"><span class="type">char</span> *pchar = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line"><span class="comment">// 手动初始化pchar的值，下面的方法则不需要</span></span><br><span class="line"><span class="built_in">memset</span>(pchar, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// calloc分配内存，会自动设置为0，不需要memset</span></span><br><span class="line"><span class="type">char</span> *pchar_orig = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">12</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原内存基础上，在堆内存空间中连续增加内存</span></span><br><span class="line"><span class="comment">// 如果原内存没有连续空间可拓展，realloc会新分配一个空间，将原有内存copy到新空间，然后释放原内存  </span></span><br><span class="line"><span class="comment">// 注意：realloc和malloc，只分配内存不进行赋值操作</span></span><br><span class="line"><span class="type">char</span> *pchar_dest = (<span class="type">char</span> *)<span class="built_in">realloc</span>(pchar_orig, <span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 相当于 malloc(60)</span></span><br><span class="line"><span class="type">char</span> *pchar_ini = (<span class="type">char</span> *)<span class="built_in">realloc</span>(<span class="literal">NULL</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(pchar);</span><br><span class="line">pchar = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(pchar_orig);</span><br><span class="line">pchar_orig = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(pchar_dest);</span><br><span class="line">pchar_dest = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(pchar_ini);</span><br><span class="line">pchar_ini = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="glibc-与-libc"><a href="#glibc-与-libc" class="headerlink" title="glibc 与 libc"></a>glibc 与 libc</h2><p>上面说过这些内存管理函数都在头文件 <code>stdlib.h</code> 中，函数实现都在 <code>malloc.c</code> 文件中，这些都可以在 <code>glibc</code> 中找到对应的代码，我下载的 <code>glibc</code> 是 <code>2.29</code> 这个版本。</p><p>libc 是 <code>Stantard C Library</code> 的简称，它是符合ANSI C标准的一个标准函数库。libc库提供C语言中所使用的宏，类型的定义，字符串操作符，数学计算函数以及输入输出函数等。正如ANSI C是C语言的标准一样，libc只是一个函数库标准，每个操作系统都会按照该标准对标准库进行具体实现。通常我们所说的libc是特指某个操作系统的标准库，比如：在Linux操作系统下所说的libc即glibc。glibc是类Unix操作系统中使用最广泛的libc库，它的全称是GNU C Library.</p><p><code>glibc</code>是 Linux 下的 C 函数库。<code>libc</code> 库是Linux下的ANSI C的函数库也泛指一切符合C规范的库，<code>glibc</code> 是Linux下的GNU C函数库，是一种 <code>libc</code> 的实现。<code>glibc</code> 本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准C库。Linux下面的标准C库不仅有这一个，如 <a href="https://www.uclibc.org/">uclibc</a>、klibc，但是 <code>glibc</code> 无疑是用得最多的，用 <code>glibc</code> 作为系统的C函式库，是GNU&#x2F;Linux演进的一个重要里程碑，可以查看 <a href="https://en.wikipedia.org/wiki/GNU_C_Library">维基百科</a> 对 <code>glibc</code> 的介绍。</p><p>还有比如Android的Bionic库也是一种libc的实现，只是在Android上面使用罢了。Bionic是Google为Android操作系统提供的BSD标准C库的衍生库，专门为移动计算而精心设计的，针对移动设备上有限的CPU周期和可用内存进行了裁剪以提高工作效率。</p><p>这里也说一下基本的C语言函数库，这个库可以根据头文件划分为 15 个部分，其中包括：</p><ul><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-assert-h.html">assert.h</a>：包含宏和信息，用于进行诊断，帮助程序调试；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-ctype-h.html">ctype.h</a>：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-errno-h.html">errno.h</a>：定义用来报告错误条件的宏；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-float-h.html">float.h</a>：包含系统的浮点数大小限制；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-math-h.html">math.h</a>：包含数学库函数的函数原型；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-stddef-h.html">stddef.h</a>：包含执行某些计算 C 所用的常见的函数定义；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html">stdio.h</a>：包含标准输入输出库函数的函数原型，以及他们所用的信息；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-stdlib-h.html">stdlib.h</a>：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-string-h.html">string.h</a>：包含字符串处理函数的函数原型；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-time-h.html">time.h</a>：包含时间和日期操作的函数原型和类型；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-stdarg-h.html">stdarg.h</a>：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-signal-h.html">signal.h</a>：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-setjmp-h.html">setjmp.h</a>：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-locale-h.html">locale.h</a>：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</p></li><li><p>文件 <a href="https://www.runoob.com/cprogramming/c-standard-library-limits-h.html">limits.h</a>：决定了各种变量类型的各种属性。定义在该头文件中的宏限制了各种变量类型（比如 char、int 和 long）的值；</p></li></ul><p>在 <code>glibc</code> 库中可以找到 <code>malloc.c</code> 文件(路径是 <code>glibc-2.29/malloc/malloc.c</code> )，从中可以看到如下别名的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">strong_alias (__libc_calloc, __calloc) weak_alias (__libc_calloc, <span class="built_in">calloc</span>)</span><br><span class="line">strong_alias (__libc_free, __free) strong_alias (__libc_free, <span class="built_in">free</span>)</span><br><span class="line">strong_alias (__libc_malloc, __malloc) strong_alias (__libc_malloc, <span class="built_in">malloc</span>)</span><br><span class="line">strong_alias (__libc_memalign, __memalign)</span><br><span class="line">weak_alias (__libc_memalign, memalign)</span><br><span class="line">strong_alias (__libc_realloc, __realloc) strong_alias (__libc_realloc, <span class="built_in">realloc</span>)</span><br><span class="line">strong_alias (__libc_valloc, __valloc) weak_alias (__libc_valloc, valloc)</span><br><span class="line">strong_alias (__libc_pvalloc, __pvalloc) weak_alias (__libc_pvalloc, pvalloc)</span><br><span class="line">strong_alias (__libc_mallinfo, __mallinfo)</span><br><span class="line">weak_alias (__libc_mallinfo, mallinfo)</span><br><span class="line">strong_alias (__libc_mallopt, __mallopt) weak_alias (__libc_mallopt, mallopt)</span><br></pre></td></tr></table></figure><p> <code>__malloc</code> 是  <code>__libc_malloc</code> 的别名，<code>malloc</code> 也是  <code>__libc_malloc</code> 的别名。其他以此类推。</p><p>所以看 <code>malloc</code> 函数的源码，直接看 <code>__libc_realloc</code> 函数实现即可，看 <code>free</code> 的源码可以看 <code>__libc_free</code> 的实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *</span><br><span class="line">__libc_realloc (<span class="type">void</span> *oldmem, <span class="type">size_t</span> bytes)</span><br></pre></td></tr></table></figure><p>也可以在线查看 <code>glibc</code> 的源码，点击 <a href="https://code.woboq.org/userspace/glibc/">这里</a> 前往欣赏！</p><p>以后要是有人问你在哪里可以下载libc的源码，你就可以告诉他libc只是一个标准，不同的平台上面有不同的libc实现，比如glibc，bionic等。</p><hr><p><strong>锄禾日当午，汗滴禾下土，五一节快乐~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> malloc free </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Objective-C实现抽象类</title>
      <link href="/2019/04/21/%E7%94%A8Objective-C%E5%AE%9E%E7%8E%B0%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2019/04/21/%E7%94%A8Objective-C%E5%AE%9E%E7%8E%B0%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/04/21/1.jpg"></p><p>插图的花是我上个月发工资当天晚上加班回家的路上从一个老人家那里买的，一枝独秀！</p><p>上周在微信公众号发布的一篇名为 <a href="%5Bhttp://www.veryitman.com/2019/04/14/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/%5D(http://www.veryitman.com/2019/04/14/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/)">反向代理</a> 的文章，居然真被微信给封掉了，当时在写的时候我还在想是不是会被微信给封杀掉，真是怕什么来什么，完全符合墨菲定律！那篇文章我就是想给大家分享一下如何设置 <code>Nginx</code> 的反向代理，其中的一些概念可能是因为牵涉到了敏感词汇，本无恶意！</p><p>不说这件事情了，还是回到今天分享的主题上面来吧~</p><p>在软件设计或者架构设计领域，架构师都会跟大家强调对业务一定要抽象，把具体的业务场景抽象为程序实现很考验一个人的编程和思维能力。所以在面向对象的编程中，抽象是一种必备的能力。</p><p>设计框架的时候，一般我们都会约定一些协议，各个模块在交互通信中能够遵守和实现这些协议，就可以保证通信的畅通性，就好比大家遵守排队规则一样，一个一个来就不会乱。</p><p>协议可以使用接口的形式或者抽象类的形式都可以定义，不同的编程语言有不同的形式。例如，在Java中提供给开发者的有接口 <code>Interface</code>  还有抽象类 <code>Abstract</code>，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 接口 */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ISeverListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">covertService</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象类 */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractServer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title function_">destroyService</span><span class="params">(String serverID)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>C++</code> 中也有抽象类，示例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">disp</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>Objective-C</code> 中提供了协议 <code>protocol</code>，没有提供抽象类的东西，但是我们可以借助 <code>protocol</code> 模拟实现抽象类。</p><p><strong>DownloaderProtocol.h 协议</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DownloaderProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@required</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)checkDownloader;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)startDownload:(<span class="keyword">id</span>)url;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stopDownload;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deleteAllDownloadFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>AbstractDownloader.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;DownloaderProtocol.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AbstractDownloader</span> : <span class="title">NSObject</span> &lt;<span class="title">DownloaderProtocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadUrl:(<span class="built_in">NSString</span> *)url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>AbstractDownloader.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;AbstractDownloader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AbstractMethodNotImplemented() \</span></span><br><span class="line"><span class="meta">@throw [NSException exceptionWithName:NSInternalInconsistencyException \</span></span><br><span class="line"><span class="meta">reason:[NSString stringWithFormat:@<span class="string">&quot;You must override %@ in a subclass.&quot;</span>, NSStringFromSelector(_cmd)] \</span></span><br><span class="line"><span class="meta">userInfo:nil]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AbstractDownloader</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSAssert</span>(![<span class="keyword">self</span> isMemberOfClass:[AbstractDownloader <span class="keyword">class</span>]], <span class="string">@&quot;AbstractDownloader is an abstract class, you should not instantiate it directly.&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)checkDownloader</span><br><span class="line">&#123;</span><br><span class="line">    AbstractMethodNotImplemented();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)startDownload:(<span class="keyword">id</span>)url</span><br><span class="line">&#123;</span><br><span class="line">    AbstractMethodNotImplemented();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stopDownload</span><br><span class="line">&#123;</span><br><span class="line">    AbstractMethodNotImplemented();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deleteAllDownloadFile</span><br><span class="line">&#123;</span><br><span class="line">    AbstractMethodNotImplemented();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadUrl:(<span class="built_in">NSString</span> *)url</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;AbstractDownloader&#x27;s url = %@&quot;</span>, url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>从上面的代码可以看出 </code>AbstractMethodNotImplemented()<code>是模拟抽象类的关键，有了这个宏动议之后，凡是需要继承</code>AbstractDownloader<code> 必须要实现对应的方法，否则会报错。</code>ImageDownloader<code> 继承 AbstractDownloader</code> 并且实现对应的方法，示例如下：</p><p><strong>ImageDownloader.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;AbstractDownloader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ImageDownloader</span> : <span class="title">AbstractDownloader</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>ImageDownloader.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ImageDownloader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ImageDownloader</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)checkDownloader</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ImageDownloader checkDownloader...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)startDownload:(<span class="keyword">id</span>)url</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ImageDownloader startDownload...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stopDownload</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ImageDownloader stopDownload...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deleteAllDownloadFile</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;ImageDownloader deleteAllDownloadFile...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这样做的话，团队相关的开发人员就知道自己继承自 <code>AbstractDownloader</code> 应该做什么了。</p><p>这里只是给大家提供一种设计思路，有更好的思路欢迎交流，感谢每一位关注者、阅读者。</p><p><strong>一直致力于让开发变得更美好的公众号~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS 抽象类 Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu19安装Swift5</title>
      <link href="/2019/04/20/Ubuntu19%E5%AE%89%E8%A3%85Swift5/"/>
      <url>/2019/04/20/Ubuntu19%E5%AE%89%E8%A3%85Swift5/</url>
      
        <content type="html"><![CDATA[<h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><p>通过实践，分享如何在 <code>Ubuntu19</code> 下面如何安装 <code>Swift5</code>.</p><h2 id="安装必备库"><a href="#安装必备库" class="headerlink" title="安装必备库"></a>安装必备库</h2><p>在使用 <code>apt-get</code> 之前，有必要做一次更新，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>更新完成后，安装对应的库文件，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git cmake ninja-build clang python uuid-dev libicu-dev icu-devtools libbsd-dev libedit-dev libxml2-dev libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config libblocksruntime-dev libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync</span><br></pre></td></tr></table></figure><p>然后再安装下面的库，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install clang libicu-dev libpython2.7</span><br></pre></td></tr></table></figure><p>最后，一定要安装下面的库，执行安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libtinfo5</span><br><span class="line">sudo apt install python-dev</span><br></pre></td></tr></table></figure><p>否则会报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/lldb: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line">/bin/lldb: error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><h2 id="下载-Swift"><a href="#下载-Swift" class="headerlink" title="下载 Swift"></a>下载 Swift</h2><p>下载 <code>Swift</code> 源码，使用 <code>wget</code> 下载即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://swift.org/builds/swift-5.0-release/ubuntu1804/swift-5.0-RELEASE/swift-5.0-RELEASE-ubuntu18.04.tar.gz</span><br></pre></td></tr></table></figure><p>下载成功后，解压源文件，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf swift-5.0-RELEASE-ubuntu18.04.tar.gz</span><br></pre></td></tr></table></figure><p>为了使用方便，可以对解压后的文件重新命名，这里我改为了 <code>swift5.0</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv swift-5.0-RELEASE-ubuntu18.04 swift5.0</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>将 swift 对应的加入到环境变量中，编辑 <code>~/.bashrc</code> 文件即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加下面内容在文件最后，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/username/developer/swift_linux/swift5.0/usr/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>/home/username/developer/swift_linux/swift5.0/usr/bin</code> 是你自己解压后的目录。</p><p>为了验证 <code>Swift</code> 是否安装成功，可以让 <code>~/.bashrc</code> 文件 立即生效，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>在终端执行以下下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swift -version</span><br></pre></td></tr></table></figure><p>成功会显示如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Swift version 5.0 (swift-5.0-RELEASE)</span><br><span class="line">Target: x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure><p>Done.</p><p><strong>人生总是在不断的上演着重逢和离别~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift linux Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理</title>
      <link href="/2019/04/14/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2019/04/14/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="本篇内容概要"><a href="#本篇内容概要" class="headerlink" title="本篇内容概要"></a>本篇内容概要</h2><p>不知道大家有没有问过别人，或者是自己偷偷在网上搜过类似 “什么是正向和反向代理“ 类似的问题，即使问过、搜过是不是也很懵？</p><p><strong>总结一句粗话：正向代理就是代理客户端的代理服务，反向代理就是代理服务端的代理服务。</strong></p><p>那我们今天就来掰扯掰扯这个问题。</p><h2 id="VPN-和正向代理"><a href="#VPN-和正向代理" class="headerlink" title="VPN 和正向代理"></a>VPN 和正向代理</h2><p>小明：“你昨天看了我给你发的视频链接了吗？超级好看哟！”。<br>小丽：“哦，那个链接根本打不开呀，看个pi！”，小明失望的看了看小丽。<br>小明：“好吧，肯定是你没有使用 VPN 软件，所以你看不了…”。</p><p>相信你也有经历过类似的场景，朋友给了一个需要你拥有 VPN 才能打开的链接，无论你是万兆光纤也好还是亿兆光纤也罢，死活都无法打开。</p><p>这里所说的 VPN 就是人们通常所说的正向代理服务器，VPN(虚拟私人网络 <code>Virtual Private Network</code>)，是一种加密通讯技术。VPN 有很多的具体实现，比如 <code>PPTP</code>、<code>L2TP</code>、<code>IPSec</code> 和 <code>openvpn</code>。VPN 不是为了翻墙而生的，他只是一中技术，就好比菜刀本来是用来切菜的道理一样。使用 VPN 来爬楼梯基本已经作废了，但当大家谈及 fanqiang 的时候说得最多的还是 “你有好用的 VPN 吗？”，所以把 VPN 当成 fanqiang 工具的代名词也情有可原。</p><p>如果你有了 fanqiang 软件就可以轻松访问全世界的网站了，特别是程序员，可以在知识的海洋里遨游。简单来说正向代理服务器类似于下面图所示：<br><img src="/upload/images/2019/04/14/1.jpg"></p><h2 id="反向代理和-Nginx"><a href="#反向代理和-Nginx" class="headerlink" title="反向代理和 Nginx"></a>反向代理和 Nginx</h2><p>这里可以给大家举个例子，假如你想让电信公司给你安装宽带或者网络电视，这个时候你可能需要打电话咨询一下相关的内容，于是你拿起了手机给电信公司打电话，经过一番复杂操作后终于可以等待人工服务了。电信的人工客服人员有很多，系统会根据一定的规则给你分配一个人，接下来可能是美眉也可能是汉子为你服务，究竟是谁给你提供语音服务取决与系统的分配，而不是你可以决定的。</p><p>系统分配和调度的功能就类似于反向代理服务器，对用户来说没有感知。类似于下面图所示：<br><img src="/upload/images/2019/04/14/2.jpg"></p><p>在软件设计中，服务端开发经常会用到反向代理服务器，比如 <code>Nginx</code>、<code>Apache</code> 等，它们经常也被用作为 WEB 服务器，<code>Nginx</code> 被当做代理服务器比较多，所谓的代理服务器是架设在 WEB 服务器和网络中断(比如手机客户端)之间的服务器，换句话说，<code>Nginx</code> 提供了反向代理服务的能力。</p><p>由于 <code>Nginx</code> 和 <code>Apache</code> 各自的优势，现在很多开发者选择让两者在服务器中共存。在服务器端让 <code>Nginx</code> 在前 <code>Apache</code> 在后，由 <code>Nginx</code> 做负载均衡和反向代理，并且处理静态文件，将动态请求交给 <code>Apache</code> 去处理。</p><p>下图是一个典型的 <code>Nginx</code> 作为反向代理服务器部署 <code>ELK</code> 的架构图，如下：<br><img src="/upload/images/2019/04/14/3.jpg"></p><p>用 <code>Nginx</code> 的反向代理，用户可以从外部访问到 <code>Kibana</code>，并且它本身具有负载均衡的作用，也能够提高了其性能。</p><p>再看一个微服务架构中的架构图（在网关前面也部署了 Nginx），如下图所示：<br><img src="/upload/images/2019/04/14/4.jpg"></p><p>关于 <code>Nginx</code> 作为负载均衡器的配置和实例，下一次跟大家分享。你现在只需要聚焦在 <code>Nginx</code> 作为反向代理服务器上面的功能即可。</p><h2 id="Nginx-配置反向代理"><a href="#Nginx-配置反向代理" class="headerlink" title="Nginx 配置反向代理"></a>Nginx 配置反向代理</h2><p><code>Nginx</code> 本身已经提供了反向代理服务的能力，下面我们结合实例给大家分享一下，假设你本机已经安装了 <code>Nginx</code> 并且会基本的操作命令。</p><p><strong>1、启动 Nginx</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>在浏览器打开 <code>http://localhost:80</code>，确保 <code>Nginx</code> 启动成功。</p><p><strong>2、配置 host</strong></p><p>我们配置一下本机的 host，vim 编辑即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>增加下面一行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.ithome.com</span><br></pre></td></tr></table></figure><p>在浏览器打开 <code>http://www.ithome.com:80</code>，跟刚才显示一样的WEB 界面。</p><p><strong>3、配置 Nginx</strong></p><p>编辑 <code>Nginx</code> 配置，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在 <code>http &#123;</code> 节点下增加下面内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  <span class="comment"># 监听80端口号</span></span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 监听访问的域名</span></span><br><span class="line">  server_name www.ithome.com;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 根据访问路径配置</span></span><br><span class="line">  location / &#123;</span><br><span class="line">      <span class="comment"># 设置 http 版本</span></span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="comment"># 把请求转发到 https://www.baidu.com</span></span><br><span class="line">      proxy_pass https://www.baidu.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动 <code>Nginx</code>，重新加载配置文件，操作命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>在浏览器打开 <code>http://www.ithome.com:80</code>，此时打开的是百度首页。至此，简单的配置 <code>Nginx</code> 作为反向代理服务器的功能已经完成，当然想配置好 <code>Nginx</code> 还需要大家多去实践和看官方技术手册。</p><p><code>proxy_pass</code> 默认使用的是 <code>http 1.0</code>，可以通过 <code>proxy_http_version </code>指令让它使用 <code>http 1.1</code>，以便开启 <code>keepalive</code> 之类的功能。<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version">官方说明</a> 如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sets the HTTP protocol version <span class="keyword">for</span> proxying. By default, version 1.0 is used. </span><br><span class="line"></span><br><span class="line">Version 1.1 is recommended <span class="keyword">for</span> use with keepalive connections and NTLM authentication.</span><br></pre></td></tr></table></figure><p>另外，nginx 还可以设置透明代理，可以参考 <a href="https://www.nginx.com/blog/ip-transparency-direct-server-return-nginx-plus-transparent-proxy/">IP Transparency and Direct Server Return with NGINX and NGINX Plus as Transparent Proxy</a> 这篇文章。</p><h2 id="附录：Nginx-命令"><a href="#附录：Nginx-命令" class="headerlink" title="附录：Nginx 命令"></a>附录：Nginx 命令</h2><p><strong>1、查看 nginx 的配置信息</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p>注意：是大写字母 <code>V</code>。</p><p><strong>2、查看 nginx 版本信息</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p><strong>3、启动 nginx</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p><strong>4、查看 nginx 进程</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure><p><strong>5、重启 nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>6、完美停止 nginx</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /var/run/nginx.pid`</span><br></pre></td></tr></table></figure><p><strong>7、快速停止 nginx</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -TERM `<span class="built_in">cat</span> /var/run/nginx.pid`</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -INT `cat /var/run/nginx.pid`</span><br></pre></td></tr></table></figure><p><strong>8、完美停止工作进程，主要用于平滑升级</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -WINCH `<span class="built_in">cat</span> /var/run/nginx.pid`</span><br></pre></td></tr></table></figure><p><strong>9、强制停止 nginx</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -9 nginx</span><br></pre></td></tr></table></figure><p><strong>10、检查 nginx.conf 修改是否正确</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p><strong>11、停止 nginx 的命令</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://laravelacademy.org/post/9336">图解正向代理、反向代理、透明代理：可能是你见过的讲解最透彻的代理技术教程</a></li><li><a href="https://www.nginx.cn/doc/standard/httpproxy.html">HttpProxy模块</a></li></ul><hr><p><strong>不经历风雨怎么见彩虹，没有人能够随随便便成功~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx VPN 代理服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 自动装箱、拆箱引起的耗时</title>
      <link href="/2019/04/07/Java-%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1%E5%BC%95%E8%B5%B7%E7%9A%84%E8%80%97%E6%97%B6/"/>
      <url>/2019/04/07/Java-%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1%E5%BC%95%E8%B5%B7%E7%9A%84%E8%80%97%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/04/07/1.jpeg" alt="1"></p><h2 id="耗时问题"><a href="#耗时问题" class="headerlink" title="耗时问题"></a>耗时问题</h2><p>在说 Java 的自动装箱和自动拆箱之前，我们先看一个例子。</p><p>这个错误我在项目中犯过(尴尬)，拿出来共勉！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getCounterResult</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startCountTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> getCounterResult();</span><br><span class="line">    <span class="type">long</span> <span class="variable">endCountTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result + <span class="string">&quot;, and take up time : &quot;</span> + (endCountTime - startCountTime) / <span class="number">1000</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我的电脑(macOS 64位系统，配置较高)，打印结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = 2305843005992468481, and take up time : 12s</span><br></pre></td></tr></table></figure><p>居然使用了 <code>12s</code>，是可忍<code>叔</code>不可忍，再正常不过的代码怎么会耗时这么久呢？如果在配置差一点的电脑上运行耗时会更久(惊呆了.jpg)。</p><p>我们不妨先阅读下面的内容，再来分析、解决上述耗时的问题。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>自从 jdk1.5 之后就有了自动装箱(Autoboxing)和自动拆箱(AutoUnboxing)。</p></blockquote><p><strong>自动装箱</strong>，就是 Java 自动将原始(基本)类型转换成对应的封装器(对象)类型的过程，比如将 <code>int</code> 的变量转换成 <code>Integer</code> 对象，这个过程叫做装箱。</p><p><strong>自动拆箱</strong>，就是 Java 自动将封装器(对象)类型转换成基本类型的过程，如将 <code>Integer</code> 对象转换成 <code>int</code> 类型值，这个过程叫做拆箱。</p><p>之所以称之为自动装箱和拆箱，是因为这些操作并非人工(程序猿)操作的，而是 Java 自带的一个特性。</p><p>下表是 Java 中的基本类型和对应的封装类型的对应表：</p><p>基本类型|封装器类<br>—|—|—<br>int|Integer<br>byte|Byte<br>long|Long<br>float|float<br>double|Double<br>char|Character<br>boolean|Boolean</p><p><strong>自动装箱示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br></pre></td></tr></table></figure><p><strong>自动拆箱示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">7</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> b;</span><br></pre></td></tr></table></figure><h2 id="Integer-x2F-int-自动拆箱和装箱"><a href="#Integer-x2F-int-自动拆箱和装箱" class="headerlink" title="Integer&#x2F;int 自动拆箱和装箱"></a>Integer&#x2F;int 自动拆箱和装箱</h2><p>下面这段代码是 <code>Integer</code> 的源码中 <code>valueOf</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</span></span><br><span class="line"><span class="comment"> * required, this method should generally be used in preference to</span></span><br><span class="line"><span class="comment"> * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</span></span><br><span class="line"><span class="comment"> * to yield significantly better space and time performance by</span></span><br><span class="line"><span class="comment"> * caching frequently requested values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method will always cache values in the range -128 to 127,</span></span><br><span class="line"><span class="comment"> * inclusive, and may cache other values outside of this range.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">  <span class="comment">// 如果i的值大于-128小于127则返回一个缓冲区中的一个Integer对象</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 否则返回 new 一个Integer 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在执行下面的这句代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>上面的代码等同于下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>结合上面的源码可以看出来，如果数值在 <code>[-128，127]</code> 之间(双闭区间)，不会重新创建 <code>Integer</code> 对象，而是从缓存中(常量池)直接获取，从常量池中获取而不是堆栈操作，读取数据要快很多。</p><p>我们再来看一下常见的基础面试题(请给出打印结果)，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// ⓵</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">121</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">121</span>);</span><br><span class="line">System.out.println(a == b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⓶</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">121</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">121</span>;</span><br><span class="line">System.out.println(c == d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⓷</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line">System.out.println(e == f);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⓸</span></span><br><span class="line"><span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">50</span>);</span><br><span class="line">System.out.println(g == h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析结果：</strong></p><p>⓵: false, 两个对象进行比较分别指向了不同堆内存<br>⓶: true, 自动装箱且数值在 [-128，127] 之间(双闭区间)<br>⓷: false, 自动装箱且数值不在 [-128，127] 之间(双闭区间)<br>⓸: true, 自动拆箱且数值在 [-128，127] 之间(双闭区间)</p><h2 id="解析耗时问题"><a href="#解析耗时问题" class="headerlink" title="解析耗时问题"></a>解析耗时问题</h2><p>类 <code>Long</code> 对应的也有一个 <code>valueof</code> 方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">    <span class="keyword">return</span> LongCache.cache[(<span class="type">int</span>)l + offset];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Long</span>(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个和 <code>Integer</code> 的很像，道理上面说过，这里不再赘述。</p><p>在开篇的例子中，<code>getCounterResult</code> 方法有下面这句代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br></pre></td></tr></table></figure><p>很明显我们声明了一个 <code>Long</code> 的对象 <code>sum</code>，由于自动装箱，这句代码并没有语法上面的错误，编译器当然也不会报错。上面代码等同于如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> Long.valueof(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在 <code>for</code> 循环中，超过 <code>[-128，127]</code> 就会创建新的对象，这样不断的创建对象，不停的申请堆内存，程序执行自然也就比较耗时了。</p><p>修改一下代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getCounterResult</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 修改为普通的基本类型数据</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startCountTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> getCounterResult();</span><br><span class="line">    <span class="type">long</span> <span class="variable">endCountTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result + <span class="string">&quot;, and take up time : &quot;</span> + (endCountTime - startCountTime) / <span class="number">1000</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行时间大大缩短。</p><hr><p><strong>优柔寡断，是人生最大的负能量。对，别犹豫了赶紧扫码关注~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动拆箱 自动装箱 autoboxing unboxing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dumpdecrypted 砸壳：导出头文件</title>
      <link href="/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
      <url>/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="导出头文件"><a href="#导出头文件" class="headerlink" title="导出头文件"></a>导出头文件</h2><p>在 <a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/">iOS 逆向: dumpdecrypted 砸壳记</a>中已经给大家分享了对 ipa 文件如何砸壳了， 接下来就可以导出其头文件了。</p><p>这里需要用到 <code>class-dump</code> 工具。如果你使用 class-dump, 出现如下错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot find offset <span class="keyword">for</span> address 0xxxxxxxxx <span class="keyword">in</span> stringAtAddress</span><br></pre></td></tr></table></figure><p>报这种错误说明你即将 dump 的文件是 <code>OC</code> 和 <code>Swift</code> 混编的项目，<code>class-dump</code> 这个工具对它们无能为力。</p><p>还好, 伟大的程序员们给我们解决了这个问题。</p><p>去获取 <a href="https://github.com/BlueCocoa/class-dump">class-dump 改进版</a> 源码, 然后使用 <code>Xcode</code> 编译即可.</p><p>编译完成后生成的 <code>class-dump</code> 就可以拿来使用了.</p><p>改变其可执行的权限:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x class-dump</span><br></pre></td></tr></table></figure><p>查看 decrypted 文件的 arm 架构:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class-dump --list portkey-prod.decrypted </span><br></pre></td></tr></table></figure><p>显示为：<code>arm64</code></p><p>开始 dump:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> portkey-header</span><br><span class="line"></span><br><span class="line">class-dump -H portkey-prod.decrypted -o portkey-header/</span><br></pre></td></tr></table></figure><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>dumpdecrypted 砸壳出现了问题, 错误信息如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dyld: could not load inserted library <span class="string">&#x27;dumpdecrypted.dylib&#x27;</span> because no suitable image found.  Did find:</span><br><span class="line">dumpdecrypted.dylib: required code signature missing <span class="keyword">for</span> <span class="string">&#x27;dumpdecrypted.dylib&#x27;</span></span><br></pre></td></tr></table></figure><p>解决方案, 重新签名 <code>dumpdecrypted</code> 后将其拷贝到 <code>Documents</code> 目录.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 列出可签名证书, 找到 mac 上面已经安装的证书</span></span><br><span class="line">security find-identity -v -p codesigning</span><br><span class="line"></span><br><span class="line"><span class="comment">## 为 dumpecrypted.dylib 签名</span></span><br><span class="line">codesign --force --verify --verbose --sign <span class="string">&quot;iPhone Developer: xxx xxxx (xxxxxxxxxx)&quot;</span> dumpdecrypted.dylib</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>iPhone Developer: xxx xxxx (xxxxxxxxxx)</code> 为你自己本机安装的开发者证书名称.</p><h2 id="看到的工具"><a href="#看到的工具" class="headerlink" title="看到的工具"></a>看到的工具</h2><ul><li><p><a href="https://github.com/Maximus-/class-dump-swift">class-dump-swift</a> 针对 Swift 的工具。这个需要自己先编译 llvm，然后才能使用.</p></li><li><p><a href="https://github.com/AloneMonkey/dumpdecrypted">dumpdecrypted</a>, 比较自动化的一个版本，但我使用这个没有砸壳成功(估计是需要针对这个文件进行签名)。</p></li><li><p><a href="https://github.com/KJCracks/Clutch">Clutch</a></p></li></ul><h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote><p>基于 iOS10.3.1 进行的实践。</p></blockquote><ul><li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/">iOS 逆向: dumpdecrypted 砸壳记</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/">iOS 逆向: 砸壳</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/">iOS 逆向: 查看系统文件目录和结构</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a></p></li><li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/">dumpdecrypted 砸壳：导出头文件</a></p></li></ul><p><strong>一个神奇的二维码~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oh-my-zsh 配置</title>
      <link href="/2019/04/03/oh-my-zsh-%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/03/oh-my-zsh-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/04/03/1.jpg"></p><p>喜欢使用终端的朋友都知道在 linux、macOS 上面默认使用的是 <code>bash shell</code>，虽然 bash 比较强大，但是比起 zsh 还是稍逊一筹。zsh 虽然好用但配置比较复杂，于是乎 <code>oh-my-zsh</code> 就诞生了，它统一管理 zsh 的配置。</p><p><code>macOS</code> 上面安装 <a href="https://ohmyz.sh/">oh-my-zsh</a> 后，感觉敲命令更爽了，特别是在进行 <code>git</code> 操作的时候，很方便。</p><p>安装比较简单，可以在终端通过 <code>curl</code> 也可以通过 <code>wget</code> 方式，安装方法如下。</p><p><strong>1、通过 curl 方式</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2、通过 wget 方式</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><code>oh-my-zsh</code> 支持 linux、macOS 和 windows，但是在 linux 和 macOS 上面支持最好。</p><p>安装成功后，原来在系统 shell 配置的环境变量需要让 <code>oh-my-zsh</code> 知道，配置一下 <code>~/.zshrc</code> 文件，在该文件中的 <code>User configuration</code> 下面增加下面两行配置就可以了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>配置完成后保存文件，在终端执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>这样之前配置的环境变量在 <code>oh-my-zsh</code> 下就生效了。</p><p><code>oh-my-zsh</code> 支持三方插件和主题配置，默认的配置已经够用了，有兴趣的可以自行探索。</p><hr><p><strong>工欲善其事必先利其器</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh git tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Follow your heart</title>
      <link href="/2019/03/24/Follow-your-heart/"/>
      <url>/2019/03/24/Follow-your-heart/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/03/24/1.jpeg"></p><p>今天不聊技术，聊聊人生~</p><p>最近天气像疯了一样，气温反复无常，时冷时热，让人有点应接不暇。</p><p>正好刚搬完家，家里很多东西需要购买，首先考虑的是给自己买对舒服的桌椅。实体店里面的桌椅实在是贵的离谱，动辄告诉我说是实木哟，现在低价处理之类的，还好我不是很傻。最后索性就在网上购买了，性价比也比较高，我也算是来了一把沉浸式的疯狂购物体验。</p><p>现在物流服务很是贴心，关注对应的公众号就可以及时告诉你当前物流的进度。相比之前，无论是送货速度还是服务都有显著提升，主要是实惠。</p><p>网上淘的这个桌子比较重，要想自己把这个桌子弄到家还是相当费劲的。快递员看出了我的窘境，说：“我这个推车反正现在也闲着，你先拿去用吧！”，我连忙道谢，有了这个推车搬起来就容易多了。</p><p>不到十分钟的时间，我就把货送到家了。心理一直想别人也许这会需要急着用车，就赶紧下楼，走到楼下拐角的时候，突然被一个人喊住，我回头一看是一个陌生的快递员。</p><p>他语调比较高：“喂，先生，你那个车子放到我这里就可以了，是我们的！”。<br>我瞄了他一眼，说道：“你是哪个快递公司的，我不是从你手上拿的车呀！”，这哥们依旧强势：“我是xx快递，这车就是我们的。”。</p><p>我心想这两个快递员是不是认识，这个车子原本就是眼前这个气势汹汹的人的？</p><p>心理正在犯着嘀咕，决定还是要物归原主。</p><p>我没有再理他，继续朝着原来收快递的地方走去，把车还给了主人。我顺便问道：“刚才有个xx快递的小哥说车子是他的？”，他说：“可能是他看错了，你看这车子上面有我们公司的标记呢”。我仔细一看果然是，庆幸自己没有把车交给别人。</p><p>人生中，仿佛也有很多类似上面的场景，假如你遇到了会怎么处理呢？</p><p>就拿婚姻来说，你认定的自己的另一半就是这辈子要娶或者要嫁的那个人，但是你身边的朋友或者家人并不看好你们，甚至他们压根不承认你的另一半，你又会怎么办？</p><p>我觉得遇到这样的事情，要听从自己的内心(Follow your heart)，不要因为别人的三言两语，你就轻易放弃当初的选择，而应该更加理性的做出判断，相信自己的判断不会错，只有这样你才不会后悔，至少爱过。</p><p>学习、工作和生活也是一样，既定了目标就应该勇往直前，在路上遇到的任何困难那是再正常不过的，别人的冷嘲热讽也好，打击刺激也罢，你要做的就是坚守你自己的内心，一帆风顺得到的幸福终究会昙花一现。</p><p>~ 充满酸甜苦辣的人生才值得回味，不是吗？</p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 枚举的本质</title>
      <link href="/2019/03/16/Java-%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>/2019/03/16/Java-%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文跟大家一起探讨一下 Java 枚举的本质，这篇文章的内容是我在 <code>2012年09月05日</code> 发布到 CSDN 上面的一篇博文 <a href="https://blog.csdn.net/veryitman/article/details/7945020">Java 枚举：理解枚举本质</a>，虽然已经不在 CSDN 上面耕耘了，但偶尔也会去看看朋友们的留言，毕竟感情在那里！今天偶然看到有小伙伴评论这篇文章，一时兴起就想再次分享给大家。</p><p><img src="/upload/images/2019/03/16/1.jpg" alt="1"></p><p>学习编程语言，会用只是最基本的要求，了解和熟悉其实现、运行机制才使得你有别于常人！</p><h2 id="C-枚举"><a href="#C-枚举" class="headerlink" title="C 枚举"></a>C 枚举</h2><p>在 C 语言中，可以这样来定义枚举，如下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">color</span> &#123;</span></span><br><span class="line">RED=<span class="number">0</span>, GREEN, BLUE, YELLOW</span><br><span class="line">&#125; col;</span><br></pre></td></tr></table></figure><p>关键字 <code>enum</code> 定义枚举，在定义枚举的同时，声明该枚举变量 col.</p><p><strong>注意：C 语言中枚举成员的值是根据上下文自动加 1 的（GREEN &#x3D; 1，BLUE &#x3D; 2 等）。</strong></p><p>C 语言中 <code>switch</code> 语句支持枚举类型，如下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">color</span> &#123;</span></span><br><span class="line">RED=<span class="number">0</span>, GREEN, BLUE, YELLOW</span><br><span class="line">&#125; col;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0=red, 1=green, 2=blue, 3=yellow. seclect:\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cl);</span><br><span class="line"></span><br><span class="line">col=(<span class="keyword">enum</span> color) cl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(col) &#123;</span><br><span class="line"><span class="keyword">case</span> RED:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the color is red\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> GREEN:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the color is green\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BLUE:</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;the color is blue\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> YELLOW:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the color is yellow\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">defalut:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;no this color\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-枚举"><a href="#Java-枚举" class="headerlink" title="Java 枚举"></a>Java 枚举</h2><p>那么，Java 里面的枚举与其类似，但是又不是完全一样。Java 语言中定义枚举也是使用 <code>enum</code> 关键字，如下示例是 Java 语言的枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED, GREEN, BLUE, YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述定义了一个枚举类型 <code>Color</code>（可以说是类，编译之后是 Color.class）.</p><p>上面的定义，还可以改成下面的这种形式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED(), GREEN(), BLUE(), YELLOW();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里你可能会觉得迷茫（如果你是初学者的话），为什么这样子也可以，why？</p><p>其实，枚举的成员就是枚举对象，只不过它们是静态常量而已。</p><p>使用 <code>javap</code> 命令（<code>javap 文件名&lt;没有后缀.class&gt;</code>）可以反编译 <code>class</code> 文件，如下：<br>​​​​<img src="/upload/images/2019/03/16/2.png" alt="1"></p><p>我们可以使用普通类来模拟枚举，下面定义一个 <code>Color</code> 类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">GREEN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">BLUE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">YELLOW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合上图反编译的结果，做一下对比，你是否看出了一点端倪（坏笑），如果没有看出来，那就接着往下看吧。</p><p>如果按照这个逻辑，是否还可以为其添加另外的构造方法？答案是肯定的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED(<span class="string">&quot;red color&quot;</span>, <span class="number">0</span>), GREEN(<span class="string">&quot;green color&quot;</span>, <span class="number">1</span>), </span><br><span class="line">BLUE(<span class="string">&quot;blue color&quot;</span>, <span class="number">2</span>), YELLOW(<span class="string">&quot;yellow color&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Color(String name, <span class="type">int</span> id) &#123;</span><br><span class="line">_name = name;</span><br><span class="line">_id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String _name;</span><br><span class="line"><span class="type">int</span> _id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为 <code>Color</code> 声明了两个成员变量，并为其构造带参数的构造器。</p><p>如果你这样创建一个枚举:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED(<span class="string">&quot;red color&quot;</span>, <span class="number">0</span>), GREEN(<span class="string">&quot;green color&quot;</span>, <span class="number">1</span>), </span><br><span class="line">BLUE(<span class="string">&quot;blue color&quot;</span>, <span class="number">2</span>), YELLOW(<span class="string">&quot;yellow color&quot;</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器就会报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The constructor EnumDemo.Color(String, int) is undefined</span><br></pre></td></tr></table></figure><p>到此，你应该看明白了，枚举和普通的 Java 类很像。</p><p>对于类来讲，最好将其成员变量私有化，并且为成员变量提供 <code>get</code>、<code>set</code> 方法。</p><p>按照这个原则，可以进一步写好 <code>enum Color</code>，如下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED(<span class="string">&quot;red color&quot;</span>, <span class="number">0</span>), GREEN(<span class="string">&quot;green color&quot;</span>, <span class="number">1</span>),</span><br><span class="line">BLUE(<span class="string">&quot;blue color&quot;</span>, <span class="number">2</span>), YELLOW(<span class="string">&quot;yellow color&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Color(String name, <span class="type">int</span> id) &#123;</span><br><span class="line">_name = name;</span><br><span class="line">_id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String _name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> _id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">_name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">_id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 Java 设计枚举的目的是提供一组常量，方便开发者使用。如果我们冒然的提供 <code>set</code> 方法（外界可以改变其成员属性），好像有点违背了设计的初衷。</p><p>那么，我们应该舍弃 <code>set</code> 方法，保留 <code>get</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED(<span class="string">&quot;red color&quot;</span>, <span class="number">0</span>), GREEN(<span class="string">&quot;green color&quot;</span>, <span class="number">1</span>),</span><br><span class="line">BLUE(<span class="string">&quot;blue color&quot;</span>, <span class="number">2</span>), YELLOW(<span class="string">&quot;yellow color&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Color(String name, <span class="type">int</span> id) &#123;</span><br><span class="line">_name = name;</span><br><span class="line">_id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String _name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> _id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于普通的基本类可以将其实例化，那么，能否实例化枚举呢？</p><p>在回答这个问题之前，先来看看 <code>Color.class</code> 文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">RED(<span class="string">&quot;red color&quot;</span>, <span class="number">0</span>), GREEN(<span class="string">&quot;green color&quot;</span>, <span class="number">1</span>),</span><br><span class="line">BLUE(<span class="string">&quot;blue color&quot;</span>, <span class="number">2</span>), YELLOW(<span class="string">&quot;yellow color&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String _name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> _id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Color</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._name = name;</span><br><span class="line"><span class="built_in">this</span>._id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，编译器淘气的为其构造方法加上了 <code>private</code>，那么也就是说，我们无法实例化枚举。</p><p>所有枚举类都继承了 <code>Enum</code> 类的方法，包括 <code>toString</code>、<code>equals</code>、<code>hashcode</code> 等方法。因为 <code>equals</code>、<code>hashcode</code> 方法是 <code>final</code> 的，所以不可以被枚举重写（只可以继承），但可以重写 <code>toString</code> 方法。</p><p><strong>文末的附录中提供了 <code>Enum</code> 的源码，有兴趣可以查看阅读！</strong></p><p>那么，使用 Java 的类来模拟一下枚举，大概是这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mark.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;red color&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">GREEN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;green color&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">BLUE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;blue color&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">YELLOW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;yellow color&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String _name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> _id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Color</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">_name = name;</span><br><span class="line">_id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> _id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Color&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;Color&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Color&gt;();</span><br><span class="line">list.add(RED);</span><br><span class="line">list.add(GREEN);</span><br><span class="line">list.add(BLUE);</span><br><span class="line">list.add(YELLOW);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;the color _name=&quot;</span> + _name + <span class="string">&quot;, _id=&quot;</span> + _id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>Enum.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidObjectException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the common base class of all Java language enumeration types.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Neal Gafter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> %I%, %G%</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Enum</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt;&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;E&gt;, Serializable &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of this enum constant, as declared in the enum declaration.</span></span><br><span class="line"><span class="comment">     * Most programmers should use the &#123;<span class="doctag">@link</span> #toString&#125; method rather than</span></span><br><span class="line"><span class="comment">     * accessing this field.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the name of this enum constant, exactly as declared in its</span></span><br><span class="line"><span class="comment">     * enum declaration.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;b&gt;Most programmers should use the &#123;<span class="doctag">@link</span> #toString&#125; method in</span></span><br><span class="line"><span class="comment">     * preference to this one, as the toString method may return</span></span><br><span class="line"><span class="comment">     * a more user-friendly name.&lt;/b&gt;  This method is designed primarily for</span></span><br><span class="line"><span class="comment">     * use in specialized situations where correctness depends on getting the</span></span><br><span class="line"><span class="comment">     * exact name, which will not vary from release to release.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the name of this enum constant</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment">     * in the enum declaration, where the initial constant is assigned</span></span><br><span class="line"><span class="comment">     * an ordinal of zero).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * Most programmers will have no use for this field.  It is designed</span></span><br><span class="line"><span class="comment">     * for use by sophisticated enum-based data structures, such as</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> java.util.EnumSet&#125; and &#123;<span class="doctag">@link</span> java.util.EnumMap&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> ordinal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment">     * in its enum declaration, where the initial constant is assigned</span></span><br><span class="line"><span class="comment">     * an ordinal of zero).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * Most programmers will have no use for this method.  It is</span></span><br><span class="line"><span class="comment">     * designed for use by sophisticated enum-based data structures, such</span></span><br><span class="line"><span class="comment">     * as &#123;<span class="doctag">@link</span> java.util.EnumSet&#125; and &#123;<span class="doctag">@link</span> java.util.EnumMap&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the ordinal of this enumeration constant</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">ordinal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sole constructor.  Programmers cannot invoke this constructor.</span></span><br><span class="line"><span class="comment">     * It is for use by code emitted by the compiler in response to</span></span><br><span class="line"><span class="comment">     * enum type declarations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name - The name of this enum constant, which is the identifier</span></span><br><span class="line"><span class="comment">     *               used to declare it.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordinal - The ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment">     *         in the enum declaration, where the initial constant is assigned</span></span><br><span class="line"><span class="comment">     *         an ordinal of zero).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Enum</span><span class="params">(String name, <span class="type">int</span> ordinal)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.ordinal = ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the name of this enum constant, as contained in the</span></span><br><span class="line"><span class="comment">     * declaration.  This method may be overridden, though it typically</span></span><br><span class="line"><span class="comment">     * isn&#x27;t necessary or desirable.  An enum type should override this</span></span><br><span class="line"><span class="comment">     * method when a more &quot;programmer-friendly&quot; string form exists.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the name of this enum constant</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns true if the specified object is equal to this</span></span><br><span class="line"><span class="comment">     * enum constant.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> other the object to be compared for equality with this object.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  true if the specified object is equal to this</span></span><br><span class="line"><span class="comment">     *          enum constant.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>==other;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a hash code for this enum constant.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a hash code for this enum constant.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Throws CloneNotSupportedException.  This guarantees that enums</span></span><br><span class="line"><span class="comment">     * are never cloned, which is necessary to preserve their &quot;singleton&quot;</span></span><br><span class="line"><span class="comment">     * status.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> (never returns)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CloneNotSupportedException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compares this enum with the specified object for order.  Returns a</span></span><br><span class="line"><span class="comment">     * negative integer, zero, or a positive integer as this object is less</span></span><br><span class="line"><span class="comment">     * than, equal to, or greater than the specified object.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * Enum constants are only comparable to other enum constants of the</span></span><br><span class="line"><span class="comment">     * same enum type.  The natural order implemented by this</span></span><br><span class="line"><span class="comment">     * method is the order in which the constants are declared.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(E o)</span> &#123;</span><br><span class="line"><span class="type">Enum</span> <span class="variable">other</span> <span class="operator">=</span> (Enum)o;</span><br><span class="line"><span class="type">Enum</span> <span class="variable">self</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></span><br><span class="line">      self.getDeclaringClass() != other.getDeclaringClass())</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line"><span class="keyword">return</span> self.ordinal - other.ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the Class object corresponding to this enum constant&#x27;s</span></span><br><span class="line"><span class="comment">     * enum type.  Two enum constants e1 and  e2 are of the</span></span><br><span class="line"><span class="comment">     * same enum type if and only if</span></span><br><span class="line"><span class="comment">     *   e1.getDeclaringClass() == e2.getDeclaringClass().</span></span><br><span class="line"><span class="comment">     * (The value returned by this method may differ from the one returned</span></span><br><span class="line"><span class="comment">     * by the &#123;<span class="doctag">@link</span> Object#getClass&#125; method for enum constants with</span></span><br><span class="line"><span class="comment">     * constant-specific class bodies.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the Class object corresponding to this enum constant&#x27;s</span></span><br><span class="line"><span class="comment">     *     enum type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title function_">getDeclaringClass</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">zuper</span> <span class="operator">=</span> clazz.getSuperclass();</span><br><span class="line"><span class="keyword">return</span> (zuper == Enum.class) ? clazz : zuper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the enum constant of the specified enum type with the</span></span><br><span class="line"><span class="comment">     * specified name.  The name must match exactly an identifier used</span></span><br><span class="line"><span class="comment">     * to declare an enum constant in this type.  (Extraneous whitespace</span></span><br><span class="line"><span class="comment">     * characters are not permitted.) </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> enumType the &lt;tt&gt;Class&lt;/tt&gt; object of the enum type from which</span></span><br><span class="line"><span class="comment">     *      to return a constant</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name the name of the constant to return</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the enum constant of the specified enum type with the</span></span><br><span class="line"><span class="comment">     *      specified name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the specified enum type has</span></span><br><span class="line"><span class="comment">     *         no constant with the specified name, or the specified</span></span><br><span class="line"><span class="comment">     *         class object does not represent an enum type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &lt;tt&gt;enumType&lt;/tt&gt; or &lt;tt&gt;name&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *         is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;T&gt;&gt; T <span class="title function_">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span><br><span class="line"><span class="params">                                                String name)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> enumType.enumConstantDirectory().get(name);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Name is null&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">            <span class="string">&quot;No enum const &quot;</span> + enumType +<span class="string">&quot;.&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * prevent default deserialization</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,</span><br><span class="line">        ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;can&#x27;t deserialize enum&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObjectNoData</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;can&#x27;t deserialize enum&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * enum classes cannot have finalize methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS java enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json-c</title>
      <link href="/2019/03/10/json-c/"/>
      <url>/2019/03/10/json-c/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/json-c/json-c">json-c</a> 是 C 语言写的一套构建和解析 JSON 的库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSON-C implements a reference counting object model that allows you to easily construct JSON objects in C, output them as JSON formatted strings and parse JSON formatted strings back into the C representation of JSON objects. </span><br><span class="line">It aims to conform to RFC 7159.</span><br></pre></td></tr></table></figure><p>使用 C 语言编写的 JSON 库还有很多，可以在 <a href="http://www.json.org/json-zh.html">介绍 JSON</a> 中查找到，除了 C语言的还有其他语言编写的 JSON 开源库。</p><p>所有发布的 <code>json-c</code> 库版本在 <a href="https://github.com/json-c/json-c/releases">这里</a> 都可以找到，本篇编译的是 <a href="https://github.com/json-c/json-c/releases/tag/json-c-0.13.1-20180305">json-c-0.13.1-20180305</a> 这个版本。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><strong>一、下载、解压</strong></p><p>直接下载最新版本 <a href="https://github.com/json-c/json-c/releases/tag/json-c-0.13.1-20180305">json-c-0.13.1-20180305</a>，截止到本文发布该版本为最新版本。</p><p>解压刚才下载好的文件，解压后将文件夹重命名为 <code>json-c-src</code>，当然你也可以不重名它。</p><p>打开 macOS 终端，进入 <code>json-c-src</code> 文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> json-c-src</span><br></pre></td></tr></table></figure><p><strong>二、源码编译</strong></p><p>在编译之前，确保你已经在 macOS 中安装了下面的工具：</p><p><strong>1、</strong>gcc, clang, 或者其他 C 编译器；<br><strong>2、</strong>libtool 工具，版本不能低于 2.2.6b；<br><strong>3、</strong>autoconf 工具，版本不能低于 2.64 (autoreconf)；<br><strong>4、</strong>automake工具，版本不能低于 1.13；</p><p>如果没有安装上面的工具，可以使用 <code>Homebrew</code> 进行安装。</p><p>在桌面新建个文件夹 <code>json-c</code>，这个文件夹用来放待会编译后的文件（库和头文件）。</p><p>执行下面的命令开始配置和编译，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/Users/man/Desktop/json-c</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>注意：<code>/Users/man/Desktop/json-c</code> 要写绝对路径，否则编译报错。</p><p>如果要支持多线程，可以加上 <code>--enable-threading</code> 这个选项，即：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-threading --prefix=/Users/man/Desktop/json-c</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>编译成功后，在 <code>json-c</code> 会生成对应的库和头文件，如下：<br><img src="/upload/images/2019/03/10/1.jpg"></p><p><img src="/upload/images/2019/03/10/2.jpg"></p><h2 id="使用-json-c"><a href="#使用-json-c" class="headerlink" title="使用 json-c"></a>使用 json-c</h2><p>编译成功后，可以试用一下 <code>json-c</code> 这个库了，我把 <code>libjson-c.a</code> 和对应的 <code>include</code> 文件夹放进 macOS 工程，编译无法通过，报错，然后换为 <code>libjson-c.4.dylib</code> 编译通过但是运行报错，意思是无法加载该库。</p><p>同样道理，在 iOS 工程上面直接使用这两个库也是无法使用。</p><p>于是我就使用 <code>lipo</code> 来查看一下库所支持的架构，看一下下面的结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ lipo -info libjson-c.a </span><br><span class="line"></span><br><span class="line">Non-fat file: libjson-c.a is architecture: x86_64</span><br><span class="line"></span><br><span class="line">$ lipo -info libjson-c.4.dylib </span><br><span class="line"></span><br><span class="line">Non-fat file: libjson-c.4.dylib is architecture: x86_64</span><br></pre></td></tr></table></figure><p>可以看出两个库均可以支持 x86_64，按道理是可以支持 macOS 和 iOS 模拟器运行的，macOS 上面可以使用 <code>set | grep &quot;MACHTYPE&quot;</code> 命令查看其操作系统架构。</p><p><code>libjson-c.a</code> 是静态库，<code>libjson-c.4.dylib</code> 是动态库，可以使用 <code>file</code> 命令查看。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ file libjson-c.a </span><br><span class="line"></span><br><span class="line">libjson-c.a: current ar archive</span><br><span class="line"></span><br><span class="line">$ file libjson-c.4.dylib </span><br><span class="line"></span><br><span class="line">libjson-c.4.dylib: Mach-O 64-bit dynamically linked shared library x86_64</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：显示 <code>ar archive</code> 表示是静态库。</p><p>最后自己没有找到好的办法，只能采取第二个办法，源码直接放进 Xcode 工程里面编译使用。</p><p>在放进 Xcode 工程之前，需要将下载的源码进行配置操作，即：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>这样会产生对应 <code>config.h</code> 等文件，然后将源码中所有 <code>.h</code> 和 <code>.c</code> 的文件拷贝至工程中即可编译使用了。</p><p><strong>注意</strong>：如果不执行 <code>./configure</code> 操作，拷贝的源文件不全，无法通过编译。</p><p>简单例子，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;json-c/json.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    json_object *jsonObj = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    jsonObj = json_tokener_parse(<span class="string">&quot;&#123; \&quot;uid\&quot;: 12, \&quot;name\&quot;: \&quot;foobar\&quot;, \&quot;isComer\&quot;: 1, \&quot;age\&quot;: 21, \&quot;extras\&quot;: [ 11, 52, 3, \&quot;unknow\&quot;, 75 ] &#125;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *jsonString = json_object_to_json_string(jsonObj);</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">&quot;obj.to_string()=%s\n&quot;</span>, jsonString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>对应输出结果，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.to_string()=&#123; &quot;uid&quot;: 12, &quot;name&quot;: &quot;foobar&quot;, &quot;isComer&quot;: 1, &quot;age&quot;: 21, &quot;extras&quot;: [ 11, 52, 3, &quot;unknow&quot;, 75 ] &#125;</span><br></pre></td></tr></table></figure><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>Objective-C 已经提供了关于 JSON 的库了，干嘛还折腾 json-c  呢？</p><p>的确，自从 iOS 5.0+，macOS 10.7+ 之后，<code>Foundation</code> 框架已经提供了 <code>NSJSONSerialization</code>，我主要是好奇 <code>json-c</code> 这个库，看他的跨平台能力而已。</p><p>关于 <code>NSJSONSerialization</code> 可以查看 <a href="https://developer.apple.com/documentation/foundation/nsjsonserialization?language=objc">API 文档</a>。</p><hr><p>本次分享，告辞！</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C json json-c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不见得你会计算C字符串长度</title>
      <link href="/2019/03/07/%E4%B8%8D%E8%A7%81%E5%BE%97%E4%BD%A0%E4%BC%9A%E8%AE%A1%E7%AE%97C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/"/>
      <url>/2019/03/07/%E4%B8%8D%E8%A7%81%E5%BE%97%E4%BD%A0%E4%BC%9A%E8%AE%A1%E7%AE%97C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C 字符串"></a>C 字符串</h2><p>在 C 语言中，字符串实际上是使用字符 <code>&#39;\0&#39;</code> 终止的一维字符数组。</p><p>以下几种方式表示的都是 C 字符串的正确表达方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要以 &#x27;\0&#x27; 结尾</span></span><br><span class="line"><span class="type">char</span> greeting[<span class="number">6</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要以 &#x27;\0&#x27; 结尾</span></span><br><span class="line"><span class="type">char</span> greeting[] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认会在末尾增加&#x27;\0&#x27;</span></span><br><span class="line"><span class="type">char</span> greeting[] = &#123;<span class="string">&quot;Hello&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的简写形式</span></span><br><span class="line"><span class="type">char</span> greeting[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认会在末尾增加&#x27;\0&#x27;</span></span><br><span class="line"><span class="type">char</span> *greeting = <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>看下面另外一种声明方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greeting[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting: %s\n&quot;</span>, greeting);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greeting: hello\<span class="number">376</span></span><br></pre></td></tr></table></figure><p>这个结果在不同编译器下面可能还会不一样，总之输出都不是我们想要的结果。这种方式创建的字符串没有 <code>&#39;\0&#39;</code>，不算是真正的 C 字符串，所以建议大家在声明 C 字符串的时候使用字符指针（char *）的方式。</p><p><code>string.h</code> 里面声明了很多关于操作 C 字符串的库函数。</p><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p>这里在说计算字符串长度的前提是字符编码都是按照UTF-8（中文占用3个字节，英文占用1个字节）的编码形式为前提的。我们先来看下面这个例子，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *greeting1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> greeting2[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> greeting3[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> greeting4[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting1 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting1), <span class="built_in">strlen</span>(greeting1));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting2 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting2), <span class="built_in">strlen</span>(greeting2));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting3 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting3), <span class="built_in">strlen</span>(greeting3));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting4 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting4), <span class="built_in">strlen</span>(greeting4));</span><br></pre></td></tr></table></figure><p>如果你能说出上面 <code>printf</code> 的结果，基本上关于计算字符串长度的问题就迎刃而解了。</p><p>按照 UTF-8 编码，上面例子的输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greeting1 sizeOf: 8, strlen: 5</span><br><span class="line">greeting2 sizeOf: 5, strlen: 7</span><br><span class="line">greeting3 sizeOf: 6, strlen: 5</span><br><span class="line">greeting4 sizeOf: 6, strlen: 5</span><br></pre></td></tr></table></figure><p>如果输出结果令你无法相信，可以选择继续往下看或者你自己写代码试试。</p><h2 id="sizeof、strlen"><a href="#sizeof、strlen" class="headerlink" title="sizeof、strlen"></a>sizeof、strlen</h2><p>在 <a href="https://linux.die.net/man/3/strlen">linux.die</a> 可以查到 strlen 的说明，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Synopsis:</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">size_t strlen(const char *s);</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">The strlen() function calculates the length of the string s, excluding the terminating null byte (aq\0aq).</span><br><span class="line"></span><br><span class="line">Return Value:</span><br><span class="line">The strlen() function returns the number of bytes in the string s.</span><br></pre></td></tr></table></figure><p>函数 <code>strlen</code> 返回字符串里的字符数，不包括终止字符 <code>&#39;\0&#39;</code>，这里注意 <code>strlen</code> 是一个 C 的函数，而 <code>sizeof</code> 只是一个操作符。</p><p>我们知道，<code>sizeof</code> 操作符的参数可以是数组、指针、类型、对象、函数等，函数 <code>strlen</code> 的参数只能是字符串。</p><p>对于 <code>sizeof</code>， 其参数不同时，其返回的值也不一样，如下：</p><p>1、数组：编译时分配的数组空间大小；<br>2、指针：存储该指针所用的空间大小(32位机器上是4，64位机器上是8)；<br>3、类型：该类型所占的空间大小；<br>4、对象：对象的实际占用空间大小(这个指的是在 C++ 中)；<br>5、函数：函数的返回类型所占的空间大小。函数的返回类型不能是 void 类型；</p><p>那我们再回头看看上面的例子，我把要说明的写在注释上面了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里是指针</span></span><br><span class="line"><span class="type">char</span> *greeting1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有结束符 &#x27;\0&#x27;，其 strlen 结果不确定</span></span><br><span class="line"><span class="type">char</span> greeting2[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> greeting3[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> greeting4[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 结果是 8、5 */</span></span><br><span class="line"><span class="comment">/* greeting1是指针，sizeOf计算的是其存储该指针所用的空间大小，因为我使用的是64位 macOS，所以输出是8 */</span></span><br><span class="line"><span class="comment">/*strlen 计算的是字符个数但是不包括结束符 &#x27;\0&#x27;*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting1 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting1), <span class="built_in">strlen</span>(greeting1));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果是 5、7 */</span></span><br><span class="line"><span class="comment">/* sizeof 计算的是编译时分配的数组空间大小，这里是5 */</span></span><br><span class="line"><span class="comment">/* greeting2没有结束符，strlen 的计算结果不确定 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting2 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting2), <span class="built_in">strlen</span>(greeting2));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果是 6、5 */</span></span><br><span class="line"><span class="comment">/* sizeof 计算的是编译时分配的数组空间大小，这里是6，因为多了结束符 */</span></span><br><span class="line"><span class="comment">/*strlen 计算的是字符个数但是不包括结束符 &#x27;\0&#x27;*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting3 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting3), <span class="built_in">strlen</span>(greeting3));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果是 6、5，这里类似上面的情况，不再赘述 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting4 sizeOf: %ld, strlen: %ld\n&quot;</span>, <span class="keyword">sizeof</span>(greeting4), <span class="built_in">strlen</span>(greeting4));</span><br></pre></td></tr></table></figure><p><strong>小结</strong>：</p><p>1、<code>sizeof</code> 是一个操作符，而 <code>strlen</code> 是 C 语言的库函数。</p><p>2、<code>sizeof</code> 的参数可以是任意数据类型或者表达式，而 <code>strlen</code> 只能以结尾为 <code>&#39;\0&#39;</code> 的字符串作参数。</p><p>3、<code>sizeof</code> 的结果在编译时就计算出了，而 <code>strlen</code> 必须在运行时才能计算出来。</p><p>4、<code>sizeof</code> 计算数据类型占内存的大小，<code>strlen</code> 计算字符串实际长度，要记住 <code>strlen</code> 计算出来的结果不包括结束符 <code>&#39;\0&#39;</code>。</p><p>5、<code>sizeof</code> 反应的并非真实字符串长度而是所占空间大小，所以<code>memset</code> 初始化字符串的时候用 <code>sizeof</code> 较好。</p><p>6、系统函数返回值是 <code>char *</code> (字符指针)类型的会在末尾加上结束符 <code>&#39;\0&#39;</code>。</p><p>7、无论是 <code>sizeof</code> 还是 <code>strlen</code> 计算结果的单位都是字节。</p><p>我们还需要注意一点，<code>strlen</code> 函数，当数组名作为参数传入时，实际上数组就退化成指针了。举个例子，如下图所示：</p><p><img src="/upload/images/2019/03/07/1.jpg"></p><p>可以看出传入进来的参数会被退化为指针。</p><h2 id="探索无止境"><a href="#探索无止境" class="headerlink" title="探索无止境"></a>探索无止境</h2><p>在文章的开始，我给出了几种 C 字符串的正确表达方式，那我们再来看另外一种。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greeting[<span class="number">4</span>] = <span class="string">&quot;blog&quot;</span>;</span><br></pre></td></tr></table></figure><p>这种方式看起来好像很完美的样子，其实是不对的，写个例子给大家，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> greeting[<span class="number">4</span>] = <span class="string">&quot;blog&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">strlen</span>(greeting);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting len: %ld\n&quot;</span>, len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting: %s\n&quot;</span>, greeting);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">greeting len: 10</span><br><span class="line">greeting: blog\330\365\277\357\376</span><br></pre></td></tr></table></figure><p>苍天呀，这结果让人无语。。。</p><p>对于 <code>char greeting[4] = &quot;blog&quot;</code> 其实是定义一个长度为 4 的字符数组，但是字符串 <code>&quot;blog&quot;</code> 实际是要包括结束符 <code>\0</code> 的，也就是说下面的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greeting[<span class="number">4</span>] = <span class="string">&quot;blog&quot;</span>;</span><br></pre></td></tr></table></figure><p>本质和下面代码是一样的，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greeting[] = &#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>显然是不正确的，那我们修改一下代码，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 注意这里是 5</span></span><br><span class="line"><span class="type">char</span> greeting[<span class="number">5</span>] = <span class="string">&quot;blog&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">strlen</span>(greeting);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting len: %ld\n&quot;</span>, len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting: %s\n&quot;</span>, greeting);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 这里干脆不要写数字</span></span><br><span class="line"><span class="type">char</span> greeting[] = <span class="string">&quot;blog&quot;</span>;</span><br><span class="line">  <span class="type">size_t</span> len = <span class="built_in">strlen</span>(greeting);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting len: %ld\n&quot;</span>, len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;greeting: %s\n&quot;</span>, greeting);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改后，再编译运行结果就对了，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">greeting len: <span class="number">4</span></span><br><span class="line">greeting: blog</span><br></pre></td></tr></table></figure><hr><p><strong>我们知道的东西是有限的，我们不知道的东西则是无穷的。</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C char strlen sizeof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 使用 libcurl</title>
      <link href="/2019/03/03/iOS-%E4%BD%BF%E7%94%A8-libcurl/"/>
      <url>/2019/03/03/iOS-%E4%BD%BF%E7%94%A8-libcurl/</url>
      
        <content type="html"><![CDATA[<h2 id="libcurl-简介"><a href="#libcurl-简介" class="headerlink" title="libcurl 简介"></a>libcurl 简介</h2><p><a href="https://curl.haxx.se/libcurl/">libcurl</a> 是用C语言写的一套 <a href="https://github.com/curl/curl">开源</a> 库，是为网络客户端提供数据传输功能的函数库。</p><p><a href="https://curl.haxx.se/libcurl/">libcurl</a> 支持 SMTP、HTTP、HTTPS、FTP、TELNET 等协议和各种 SSL 安全认证，支持 Solaris, NetBSD, FreeBSD, OpenBSD, Darwin, HPUX, IRIX, AIX, Tru64, Linux, UnixWare, HURD, Windows, Amiga, OS&#x2F;2, BeOs, Mac OS X, Ultrix, QNX, OpenVMS, RISC OS, Novell NetWare, DOS 等平台，在 Android 和 iOS 上面也可以使用 libcurl 这个库。</p><p>下面是官网的英文简介：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">libcurl is a free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. </span><br><span class="line">libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more!</span><br><span class="line"></span><br><span class="line">libcurl is highly portable, it builds and works identically on numerous platforms, including Solaris, NetBSD, FreeBSD, OpenBSD, Darwin, HPUX, IRIX, AIX, Tru64, Linux, UnixWare, HURD, Windows, Amiga, OS/2, BeOs, Mac OS X, Ultrix, QNX, OpenVMS, RISC OS, Novell NetWare, DOS and more...</span><br><span class="line"></span><br><span class="line">libcurl is free, thread-safe, IPv6 compatible, feature rich, well supported, fast, thoroughly documented and is already used by many known, big and successful companies.</span><br></pre></td></tr></table></figure><h2 id="分享内容"><a href="#分享内容" class="headerlink" title="分享内容"></a>分享内容</h2><p>今天跟大家分享 libcurl 在 iOS 上面如何使用，主要分享内容如下：</p><p>1、iOS 工程集成 libcurl以及集成注意事项。<br>2、利用 libcurl 发送 HTTP GET 和 POST 请求。<br>3、使用 springboot 搭建本地服务，这个只是为了演示不是分享的重点。</p><h2 id="搭建本地服务"><a href="#搭建本地服务" class="headerlink" title="搭建本地服务"></a>搭建本地服务</h2><p>本地服务采用 <code>Spring Boot</code> 开发，开发语言是 <code>Java</code>，JDK 版本1.8，<code>Spring Boot</code> 版本是 <code>v2.1.3.RELEASE</code>，集成 <code>Web</code> 组件即可，比较简单。关于如何搭建 <code>Spring Boot</code>的开发环境，大家自行搜索解决，也可以直接使用我的 git 工程，<a href="https://github.com/veryitman/tutorial_libcurl">猛戳前往</a> 即可获取完整代码示例。</p><p>工程结构如下图所示：<br><img src="/upload/images/2019/03/03/1.jpg"></p><p>关键代码如下：<br><img src="/upload/images/2019/03/03/2.jpg"></p><p>该工程只是为了配合 libcurl 的使用而诞生的，没有什么难度。</p><h2 id="集成-libcurl"><a href="#集成-libcurl" class="headerlink" title="集成 libcurl"></a>集成 libcurl</h2><p><strong>1、新建 iOS 工程</strong></p><p>这里工程为 <code>tutorial_libcurl_iOS</code>。</p><p><strong>2、准备库文件、头文件</strong></p><p>libcurl 可以自己编译，也可以使用别人编译好的二进制文件。我使用的是 <a href="https://github.com/gcesarmza/curl-android-ios.git">curl-android-ios </a> 这个工程里面编译好的文件。</p><p><img src="/upload/images/2019/03/03/3.jpg"></p><p><strong>3、给工程 <code>tutorial_libcurl_iOS</code> 添加库和头文件</strong></p><p>将上面的文件拷贝至工程目录即可，现在工程目录如下：<br><img src="/upload/images/2019/03/03/4.jpg"></p><p><strong>4、设置路径</strong></p><p>在 xcode 中 <code>Building Settings</code> 找到 <code>User Header Search Paths</code> 为如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(SRCROOT)/tutorial_libcurl_iOS/Classes</span><br></pre></td></tr></table></figure><p>这一步不是必须的，我个人比较喜欢这样整理和设置目录。</p><p><strong>5、添加 libz.tbd</strong></p><p><img src="/upload/images/2019/03/03/5.jpg"></p><p>如果不添加这个库，编译无法通过，会显示如下错误：<br><img src="/upload/images/2019/03/03/6.jpg"></p><h2 id="发送-HTTP-请求"><a href="#发送-HTTP-请求" class="headerlink" title="发送 HTTP 请求"></a>发送 HTTP 请求</h2><p>下面说一下如何使用 libcurl 来发送 HTTP 的 GET 和 POST 请求。只给出核心示例代码，其余的大家去 <a href="https://github.com/veryitman/tutorial_libcurl">tutorial_libcurl</a> 获取完整示例代码，包括 <code>Spring Boot</code> 的。</p><p><strong>ViewController.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;curl/curl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我本机的 IP 和端口，实际你要换成你自己的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HOST_URL @<span class="string">&quot;http://172.20.10.2:8080/user&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)doHTTPGETToFileAction:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *reqUrl = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@%@&quot;</span>, HOST_URL, <span class="string">@&quot;?id=1&amp;name=veryitman&quot;</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *url = [reqUrl cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    http_get_req(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)doHTTPPOSTToFileAction:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *url = [HOST_URL cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *data = <span class="string">&quot;id=2&amp;name=veryitman&quot;</span>;</span><br><span class="line">    http_post_req(url, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> http_get_req(<span class="keyword">const</span> <span class="keyword">char</span> *url)</span><br><span class="line">&#123;</span><br><span class="line">    CURL *curl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fpath = rspDataPath(<span class="string">@&quot;http_get_rsp_data.log&quot;</span>);</span><br><span class="line"></span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(fpath, <span class="string">&quot;wt+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> curl_slist *headers = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//增加HTTP header</span></span><br><span class="line">    headers = curl_slist_append(headers, <span class="string">&quot;Accept:application/json&quot;</span>);</span><br><span class="line">    headers = curl_slist_append(headers, <span class="string">&quot;Content-Type:application/json&quot;</span>);</span><br><span class="line">    headers = curl_slist_append(headers, <span class="string">&quot;charset:utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    curl = curl_easy_init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (curl) &#123;</span><br><span class="line">        <span class="comment">//改协议头</span></span><br><span class="line">        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);</span><br><span class="line">        curl_easy_setopt(curl, CURLOPT_URL, url);</span><br><span class="line"></span><br><span class="line">        curl_easy_setopt(curl, CURLOPT_POST, url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//wt+：读写打开或着建立一个文本文件；允许读写</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> != fp) &#123;</span><br><span class="line">            <span class="comment">// 请求结果写入到文件当中</span></span><br><span class="line">            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CURLcode rsp_code = curl_easy_perform(curl);</span><br><span class="line">        <span class="keyword">if</span> (CURLE_OK == rsp_code) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;请求返回成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;请求返回失败，返回码是 %i&quot;</span>, rsp_code);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curl_slist_free_all(headers);</span><br><span class="line"></span><br><span class="line">        curl_easy_cleanup(curl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> http_post_req(<span class="keyword">const</span> <span class="keyword">char</span> *url, <span class="keyword">const</span> <span class="keyword">char</span> *req_data)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fpath = rspDataPath(<span class="string">@&quot;http_post_rsp_data.log&quot;</span>);</span><br><span class="line"></span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(fpath, <span class="string">&quot;wt+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CURL *curl;</span><br><span class="line">    curl = curl_easy_init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (curl) &#123;</span><br><span class="line">        curl_easy_setopt(curl, CURLOPT_URL, url);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;length: %ld&quot;</span>, strlen(req_data));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* size of the POST data */</span></span><br><span class="line">        curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(req_data) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* pass in a pointer to the data - libcurl will not copy */</span></span><br><span class="line">        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, req_data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> != fp) &#123;</span><br><span class="line">            <span class="comment">// 请求结果写入到文件当中</span></span><br><span class="line">            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CURLcode rsp_code = curl_easy_perform(curl);</span><br><span class="line">        <span class="keyword">if</span> (CURLE_OK == rsp_code) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;请求返回成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;请求返回失败，返回码是 %i&quot;</span>, rsp_code);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curl_easy_cleanup(curl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>启动 Spring Boot 项目，启动成功后，再运行 xcode 工程，可以测试。</p><p><img src="/upload/images/2019/03/03/7.jpg"></p><p>点击对应的按钮就可以发送 GET 和 POST 请求了。</p><p>请求返回的结果被写入到了沙盒文件中，可以在终端使用 <code>cat</code> 命令查看对应的响应结果。</p><p>GET 响应结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/Library/Developer/CoreSimulator/Devices/BA882AC3-7977-49C7-8B0D-65EFD1541B68/data/Containers/Data/Application/3A21CFC5-3044-4FC0-9BFA-B311A59187AF/Documents/http_get_rsp_data.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user info: id=2 name=veryitman</span><br></pre></td></tr></table></figure><p>POST 响应结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/Library/Developer/CoreSimulator/Devices/BA882AC3-7977-49C7-8B0D-65EFD1541B68/data/Containers/Data/Application/86E7D457-97B1-4D8C-80D5-E8179B691F76/Documents/http_post_rsp_data.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user info: id=2 name=veryitman</span><br></pre></td></tr></table></figure><p>后续为大家分享如何使用回调来接收 HTTP 响应数据、其他网络请求的情况以及 Android 上面如何使用 libcurl 库。</p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> curl libcurl springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emscripten：JS 调用 C、C++</title>
      <link href="/2019/03/02/Emscripten-JS-%E8%B0%83%E7%94%A8-C-C++/"/>
      <url>/2019/03/02/Emscripten-JS-%E8%B0%83%E7%94%A8-C-C++/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="http://www.veryitman.com/2019/02/15/%E4%BA%86%E8%A7%A3-Emscripten/">了解 Emscripten</a> 中，给大家简单分享了 <code>Emscripten</code> 是什么以及其使用场景。今天继续分享如何使用 JS 调用 C&#x2F;C++ 代码。</p><h2 id="神奇的-main-函数"><a href="#神奇的-main-函数" class="headerlink" title="神奇的 main 函数"></a>神奇的 main 函数</h2><p>下面是 <a href="http://www.veryitman.com/2019/02/15/%E4%BA%86%E8%A7%A3-Emscripten/">了解 Emscripten</a> 中的例子代码，只有一个 <code>main</code> 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char ** argv) </span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Emscripten show in browser...\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>Emscripten SDK</code> 编译后生成了对应的 html、js 和 wasm 文件。</p><p>第一次编译会较慢, 编译完成后会在 <code>~/.emscripten_cache</code> 生成缓存目录和缓存文件, 以后再次编译就比较快了.</p><p>可以在火狐或者 <code>Chrome</code> 或者 <code>Safari</code> 上面运行 <code>h_emcc.html</code> 文件.</p><p>这里在火狐浏览器上面可以直接打开 <code>mz.html</code> 文件, 如果是在 <code>Chrome</code> 或者 <code>Safari</code> 需要执行下面命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emrun mz.html </span><br></pre></td></tr></table></figure><p>或者指定浏览器打开该文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emrun --browser chrome mz.html</span><br></pre></td></tr></table></figure><p>关于 <code>emrun</code> 的其他用法，可以使用 <code>emrun --help</code> 来查看。这里在浏览器可以看到对应 <code>main</code> 函数的输出，说明 <code>Emscripten</code> 生成的代码默认会调用 <code>main</code> 函数。</p><h2 id="EMSCRIPTEN-KEEPALIVE"><a href="#EMSCRIPTEN-KEEPALIVE" class="headerlink" title="EMSCRIPTEN_KEEPALIVE"></a>EMSCRIPTEN_KEEPALIVE</h2><p>既然 <code>Emscripten</code> 生成的代码默认会调用 <code>main</code> 函数，那么如果想使用其他函数怎么办呢？</p><p>我们可以在函数前添加 <code>EMSCRIPTEN_KEEPALIVE</code>，它在<code>emscripten.h</code> 文件中有声明，这个可以通过源码查看。</p><p>下面还是举个例子来说明。</p><p><strong>my.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 省略... --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">document.querySelector(&#x27;.mybutton&#x27;).addEventListener(&#x27;click&#x27;, function()&#123;</span><br><span class="line">          alert(&#x27;检查控制台&#x27;);</span><br><span class="line">          var result = Module.ccall(&#x27;sum&#x27;, // name of C function</span><br><span class="line">                                     null, // return type</span><br><span class="line">                                     null, // argument types</span><br><span class="line">                                     null); // arguments</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;hello3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>里面引用了 <code>hello3.js</code> 并且使用 <code>Module.ccall</code> 调用了 C 函数 <code>sum</code>。</p><p><strong>hello.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;emscripten/emscripten.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello emcc\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> EMSCRIPTEN_KEEPALIVE <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %i\n&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>编译 <code>hello.c</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -o hello.html hello.c -O3 -s &quot;EXTRA_EXPORTED_RUNTIME_METHODS=[&#x27;ccall&#x27;]&quot;</span><br></pre></td></tr></table></figure><p>注意：<code>EXTRA_EXPORTED_RUNTIME_METHODS</code> 设置了 Module 的导出函数，不导出 <code>ccall</code> 的话，会报以下错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;ccall&#x27; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)</span><br></pre></td></tr></table></figure><p>现在可以运行 <code>my.html</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emrun my.html</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2019/03/02/1.jpg"></p><p>可以修改一下 sum 函数，使其带参数，修改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;emscripten/emscripten.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World emcc\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> EMSCRIPTEN_KEEPALIVE <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %i\n&quot;</span>, (a+b));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>需要修改 <code>my.html</code> 文件，修改内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = Module.ccall(&#x27;sum&#x27;, // name of C function</span><br><span class="line">                                     null, // return type</span><br><span class="line">                                     [&#x27;number&#x27;], // argument types</span><br><span class="line">                                     [12, 13]); // arguments</span><br></pre></td></tr></table></figure><p>注意 <code>argument types</code> 和 <code>arguments</code> 的填写，运行可以看到预期效果。</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emscripten wasm JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冷笑话的启示</title>
      <link href="/2019/02/24/%E5%86%B7%E7%AC%91%E8%AF%9D%E7%9A%84%E5%90%AF%E7%A4%BA/"/>
      <url>/2019/02/24/%E5%86%B7%E7%AC%91%E8%AF%9D%E7%9A%84%E5%90%AF%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>几乎所有人都比较喜欢听或者看笑话故事，笑话故事可以让你开心，也可能让你随时哈哈大笑。下面几则笑话故事，在笑的同时可以想想其中蕴藏的道理。</p><hr><p>女浴室起火，里面人乱作一团，赤裸身体往外跑，只见大街上白花花一大群，一老者大喊“快捂住”，众裸女突然醒悟，但身上要紧部位有三处，手忙脚乱捂不过来，不知所措。这时老者又大喊：“捂脸就行，下面都一样！”</p><blockquote><p>😆 在特殊情况下抓工作不可能面面俱到，要抓住重点。</p></blockquote><hr><p>少妇报案：“我把钱放在胸衣内，在拥挤的地铁内被一帅哥偷走了…”警察纳闷：“这么敏感的地方你就没觉察到？”少妇红着脸答：“谁能想到他是摸钱呢？”</p><blockquote><p>😆 让客户的钱在愉快体验中不知不觉地被摸走，是商业模式的最高境界。</p></blockquote><hr><p>某富翁想娶老婆，有三个人选，富翁给了三个女孩各一千元，请她们把房间装满。第一个女孩买了很多棉花，装满房间的1&#x2F;2。第二个女孩买了很多气球，装满房间的3&#x2F;4。第三个女孩买了很多蜡烛，让光线充满房间。 最终，富翁选了胸部最大的那个。</p><blockquote><p>😆 把握客户内心猥琐但真实的需求至关重要。</p></blockquote><hr><p>很多年前认识一小三，当然是别人的小三，但这小三算是有本领的，不仅人长的漂亮，长发飘飘，也很有脑。爱上某金融界人士，但人家已有妻室，这小三不屈不挠，投其所好，知道男人热爱古诗词，小三楞是用了不长的时间将唐诗三百首倒背如流，小三便转正了。</p><blockquote><p>😆 没有拆不散的夫妻，只有不努力的小三！</p></blockquote><hr><p>一男子在狱中闲来无事训练蚂蚁，蚂蚁可在他指令下倒立、翻跟头 、鞠躬…. 出狱后，男子迫不及待去酒吧炫耀他的绝活，他点了一杯啤酒，然后，掏出蚂蚁放在桌上对服务员说：看，这只蚂蚁。服务员转身一掌拍死了蚂蚁，抱歉地对他说说：对不起先生，我马上给您换一杯!</p><blockquote><p>😆 遇事要三思而后行。</p></blockquote><p>从前有只羊，它一天干10个小时的活。有一天它的主人告诉它，你好好干，多干活有奖励，于是它照做了。接下来每个月它的主人把它身上的羊毛剪了三分之一 ，年底到了，给它织了件毛衣，然后告诉它：诺，这是你的奖励，恭喜你，继续努力吧！</p><blockquote><p>😆 这笑话告诉我们：羊毛出在羊身上。</p></blockquote><hr><p>赵四小姐从十六岁开始跟张学良。跟一年，属奸情；跟三年，算{敏感词}；跟六十年，便成为千古爱情！</p><blockquote><p>😆 很多事情不看做不做，而看你做多久。</p></blockquote><hr><p>民国初名妓小凤仙，如果跟了民工，就属于扫黄对象；她跟了蔡锷，则千古留芳了；倘若她跟了孙中山，那便可能成为国母。</p><blockquote><p>😆 不在于你干什么，而看你跟谁干。</p></blockquote><hr><p>组织几个人收保护费，那是黑社会。朱元障组织几百万人抢下王位，就是伟大的皇帝。武则天睡了公公睡儿子，虽属乱*伦，但乱的够大，故成为女皇。</p><blockquote><p>😆 不在你干没干坏事，而在于干多大！</p></blockquote><hr><p>一公司在小便池上贴上条：“往前一小步，文明一大步”，结果地上仍有许多尿渍。后来公司认真吸取教训，重新设计成：“尿不到池里说明你短；尿到池外说明你软”，结果地上比以前干净许多。</p><blockquote><p>😆 给客户的投资建议一定要具体，确切，中要害。</p></blockquote><hr><p>某日，女秘书神色凝重地说：王总，我怀孕了。 王继续低头看文件，然后淡淡一笑：我早结扎了。 女秘书楞了一会媚笑道：我和您开玩笑呢! 王抬起头看了她一眼，喝了口茶说：我也是。</p><blockquote><p>😆 在江湖上混的人，遇事不要慌，先让子弹飞一会。</p></blockquote><hr><p>男子去提亲，女方家长：请自我介绍。</p><p>A说：我有一千万；</p><p>B说：我有一栋豪宅，价值两千万；</p><p>家长很满意。就问C，你家有什么？</p><p>C答：我什么都没有，只有一个孩子，在你女儿肚子里。</p><p>AB无语，走了。</p><blockquote><p>😆 核心竞争力不是钱和房子，是在关键的岗位有自已的人。</p></blockquote><hr><p>一男干部怕吃苦不愿援藏，谎称眼睛突然失明。领导闻听，出面让一美女脱光站在他面前，问“看见了吗”？答：看不见。领导飞起一脚给他臀部：狗日的，老二都直了还看不见？收拾行李，明天进藏。</p><blockquote><p>😆<br>1.人性化才能真正了解人。<br>2.组织比个人高明。<br>3.本能会出卖你</p></blockquote><hr><p>一小朋友问一富翁说 叔叔你为什么这么有钱。富翁摸摸小朋友的头说：小时候我爸给了我一个苹果，我卖掉了它有了两个苹果，后来我又赚到了四个苹果。小朋友若有所思的说 哦…叔叔，我好像懂了。富翁说，“你懂你妹阿，后来我爸死了，我继承了他的财产…</p><blockquote><p>😆 不要痴迷于从阅读成功人士的传记，从中寻找经验，这些书大部分经过了精致的包装，很多重要的事实不会告诉你。例如盖茨的的书不会告诉你他母亲是IBM董事，是她给儿子促成了第一单大生意，巴菲特的书只会告诉你他8岁就知道去参观纽交所，但不会告诉你他国会议员的父亲带他去的，是高盛的董事接待的。</p></blockquote><hr><p>参考 <a href="http://home.lupaworld.com/home-space-uid-112536-do-blog-id-239163.html">lupaworld</a></p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笑话 冷笑话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给 Homebrew 设置代理</title>
      <link href="/2019/02/23/%E7%BB%99-Homebrew-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2019/02/23/%E7%BB%99-Homebrew-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><p>可以给 <code>Homebrew</code> 工具设置代理，设置方法和步骤如下。</p><p><strong>1、打开终端，进入用户根目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/</span><br></pre></td></tr></table></figure><p><strong>2、查看当前目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>查看是否有 <code>.curl</code> 文件，如果没有，新建一个吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .curl</span><br></pre></td></tr></table></figure><p><strong>3、编辑 .curl 文件</strong></p><p>写入下面内容，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy=ip:port</span><br></pre></td></tr></table></figure><p>把 ip 和 port 改为你的代理 ip 和端口值，如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy=127.0.0.1:8087</span><br></pre></td></tr></table></figure><p>保存文件即可。</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS brew proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解 Emscripten</title>
      <link href="/2019/02/15/%E4%BA%86%E8%A7%A3-Emscripten/"/>
      <url>/2019/02/15/%E4%BA%86%E8%A7%A3-Emscripten/</url>
      
        <content type="html"><![CDATA[<p>广告时间，见谅勿怪，看到了就点一下链接吧，感激不尽🙇‍！</p><hr><p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。</p><p>点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Emscripten-是什么？"><a href="#Emscripten-是什么？" class="headerlink" title="Emscripten 是什么？"></a>Emscripten 是什么？</h2><p><code>Emscripten</code> 是一个 <a href="https://github.com/emscripten-core/emscripten/tree/master">开源的编译器</a>，可以将 C&#x2F;C++ 的代码编译后高效运行在现代浏览器上面。<code>Emscripten</code> 的底层是基于 <code>LLVM</code> 编译器的，可以查看其开源的 <a href="https://github.com/emscripten-core/emscripten-fastcomp">emscripten llvm</a> 和 <a href="https://github.com/emscripten-core/emscripten-fastcomp-clang">emscripten clang</a>。</p><p>下图是其编译 C&#x2F;C++ 的代码的流程图：<br><img src="/upload/images/2019/02/15/1.jpg"></p><p><a href="https://emscripten.org/">官网</a> 对 <code>Emscripten</code> 的定义：</p><blockquote><p>Emscripten is a toolchain for compiling to asm.js and WebAssembly, built using LLVM, that lets you run C and C++ on the web at near-native speed without plugins.</p></blockquote><p>截止本文发布，<code>Emscripten</code> 最新版本是 <code>1.38.27</code>.</p><h2 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h2><p>以下是我安装和使用 Emscripten 的条件。</p><ul><li>macOS 版本 10.14</li><li>Git，可通过 Homebrew 安装</li><li>CMake，可通过 Homebrew 安装</li><li>Xcode 10.1</li><li>Python 2.7.x，Mac 系统自带</li><li>稳定快速的网络环境，最重要和最关键的的是要有(neng)梯(fan)子(qiang)</li><li>解决问题的态度和毅力</li></ul><h2 id="通过-emsdk-安装"><a href="#通过-emsdk-安装" class="headerlink" title="通过 emsdk 安装"></a>通过 emsdk 安装</h2><p>安装 <code>Emscripten</code> 可以通过安装 <a href="https://github.com/emscripten-core/emsdk">emscripten SDK</a> 来完成，<code>emscripten SDK</code> 可以简单的理解为是 <code>Emscripten</code> 的一套工具链。</p><p>在你自己的电脑上面任意新建一个目录，如我的 <code>~/dev/emscwork</code>，打开终端，进入此目录。</p><p><strong>1、</strong>下载 <code>emsdk</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/juj/emsdk.git</span><br></pre></td></tr></table></figure><p><strong>2、</strong>进入 <code>emsdk</code> 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd emsdk</span><br></pre></td></tr></table></figure><p><strong>3、</strong>开始安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Fetch the latest version of the emsdk (not needed the first time you clone)</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># Download and install the latest SDK tools.</span><br><span class="line">./emsdk install latest</span><br><span class="line"></span><br><span class="line"># Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes ~/.emscripten file)</span><br><span class="line">./emsdk activate latest</span><br><span class="line"></span><br><span class="line"># Activate PATH and other environment variables in the current terminal</span><br><span class="line">source ./emsdk_env.sh</span><br></pre></td></tr></table></figure><p><strong>注意: 每次更新完 <code>emsdk</code> 后，依旧需要执行上面命令重新安装和激活。</strong></p><p>另外一个比较常用的是 <code>./emsdk update-tags</code> 这个命令，可以直接更新 <code>emsdk</code> 的最新 tags 版本，更新 tags 完成后，重新安装和激活最新版的 <code>emsdk</code> 套件。</p><h2 id="配置-emsdk"><a href="#配置-emsdk" class="headerlink" title="配置 emsdk"></a>配置 emsdk</h2><p>如果你想在任意路径下都可以使用 <code>emsdk</code> 里面的各种工具(就是一些二进制可执行文件)，需要为其设置环境变量。</p><p>编辑 <code>~/.bash_profile</code> 文件，新增如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export EMSDK=~/emscwork/emsdk</span><br><span class="line">export EMSCRIPTEN=$EMSDK/emscripten/1.38.27</span><br><span class="line">export BINARYEN_ROOT=$EMSDK/binaryen/master_64bit_binaryen</span><br><span class="line">export PATH=$EMSDK:$EMSCRIPTEN:$BINARYEN_ROOT:$PATH</span><br></pre></td></tr></table></figure><p>执行下面命令, 使刚配置的文件生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>至此，安装和设置环境变量完成。</p><p>可以使用下面命令来查看 <code>emsdk</code> 的安装情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc --version</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emcc (Emscripten gcc/clang-like replacement) 1.38.27 (commit ea5d631a5446632e195765d89a53ead71cd6de45)</span><br><span class="line">Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)</span><br><span class="line">This is free and open source software under the MIT license.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><p><code>emcc</code> 是一个可执行脚本，该脚本在 <code>emsdk/emscripten/1.38.27</code> 目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc --help</span><br></pre></td></tr></table></figure><p>上面命令可以查看更多关于 <code>emcc</code> 的使用方法.</p><h2 id="编译-C-x2F-C-代码"><a href="#编译-C-x2F-C-代码" class="headerlink" title="编译 C&#x2F;C++ 代码"></a>编译 C&#x2F;C++ 代码</h2><p>这里举个实际的例子。</p><p><strong>main.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Emscripten show in browser...\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>emcc</code> 编译，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc main.c -s WASM=<span class="number">1</span> -o mz.html</span><br></pre></td></tr></table></figure><p>这里要注意 <code>WASM=1</code> 这个选项，现在新版 SDK 默认 <code>WASM=1</code> 了，如果不想生成 <code>.wasm</code> 这个文件，需要指定 <code>WASM=0</code> 选项。</p><p>生成另外三个文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mz.html  mz.js  mz.wasm</span><br></pre></td></tr></table></figure><p>简单介绍一下这三个文件</p><p><strong>1、mz.wasm</strong></p><blockquote><p>二进制的 <code>wasm</code> 模块代码</p></blockquote><p><strong>2、mz.js</strong></p><blockquote><p>胶水代码，包含了原生 C 函数和 JavaScript&#x2F;wasm 之间转换的 JS 文件</p></blockquote><p><strong>3、mz.html</strong></p><blockquote><p>用来加载、编译和实例化 <code>wasm</code> 代码并且将其输出在浏览器显示上的 <code>HTML</code> 文件</p></blockquote><p>最后执行下面的命令，可以在 Safari 浏览器中显示效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emrun mz.html</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2019/02/15/2.jpg"></p><p><strong>main.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Emscripten show in browser...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译 C++ 文件(main.cpp)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc main.cpp -s WASM=1 -o mzcpp.html</span><br></pre></td></tr></table></figure><p>同样的方式编译和运行 <code>mzcpp.html</code> 即可看到同样的效果。</p><h2 id="Emscripten-应用场景"><a href="#Emscripten-应用场景" class="headerlink" title="Emscripten 应用场景"></a>Emscripten 应用场景</h2><p><code>Emscripten</code> 只是一个编译器，能将我们的高级语言编译为浏览器可以识别并运行的程序，这个看起来确实很诱人。</p><p>就目前来说，Emscripten 应用场景可以使用在安全和游戏上面。</p><p><strong>1、安全</strong></p><p>C&#x2F;C++ 代码经过编译之后，会生成 <a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly"><code>wasm</code> 格式</a> 的二进制文件，这个安全级别较高，即使在浏览器中运行，破解者也不会很轻松的破解代码，这样一些在 JS 中涉及到安全的问题，可以使用 C&#x2F;C++ 来写结合一些加密技术，然后用 <code>Emscripten</code> 编译。</p><p><strong>2、游戏</strong></p><p>如果能把用 C&#x2F;C++ 语言写的游戏，转为可在浏览器直接运行的H5游戏，那就很美好了，用户不需要下载游戏，直接玩。现代浏览器技术的更新和发展已经让这个想法变成了现实，至少在主流的浏览器上面。</p><p>推荐大家看看这篇文章 <a href="https://blog.fundebug.com/2018/12/24/how-does-webassembly-works/">JavaScript是如何工作的：与WebAssembly比较及其使用场景</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://emscripten.org/docs/introducing_emscripten/about_emscripten.html">About Emscripten</a></p><p><a href="https://emscripten.org/docs/getting_started/downloads.html">Download and install</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly/C_to_wasm">编译 C&#x2F;C++ 为 WebAssembly</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly/Concepts">WebAssembly 概念</a></p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emscripten wasm JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 结构体指针初始化</title>
      <link href="/2019/02/08/C-%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2019/02/08/C-%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在使用指针之前，务必要将其初始化。这个是我们最早学习 C 语言的时候，书上经常说的一个问题。在工作中，我们反而会经常忘记这条金科玉律。</p><p>本篇文章的所有代码都经 <code>gcc-7</code> 编译器编译过。关于在 macOS 中如何安装和使用 <code>gcc</code>，可以参考 <a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/">GCC: Homebrew 安装 GCC 和 Binutils</a> 这篇文章。</p><h2 id="结构体成员指针的初始化"><a href="#结构体成员指针的初始化" class="headerlink" title="结构体成员指针的初始化"></a>结构体成员指针的初始化</h2><blockquote><p>结构体成员指针的初始化，指的是初始化结构体中指针变量的成员。</p></blockquote><p>我们举个例子，下面是 <code>Animal</code> 的结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//指针成员</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> info[<span class="number">200</span>]; <span class="comment">//字符数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">nextAnimal</span>;</span> <span class="comment">//指针成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构体 <code>Animal</code> 含有4个成员变量，其中 <code>name</code>、<code>info</code> 和 <code>nextAnimal</code> 是指针变量。</p><p>写一段测试代码，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal&#x27;s name: %s, age: %i, info: %s\n&quot;</span>, animal.name, animal.age, animal.info);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果正常，终端输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animal&#x27;s name: (null), age: 0, info: </span><br></pre></td></tr></table></figure><p>我们来验证一下 <code>Animal *nextAnimal</code> 在没有初始化的情况下，会不会有什么问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal&#x27;s name: %s, age: %i, info: %s\n&quot;</span>, animal.name, animal.age, animal.info);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal: %p\n&quot;</span>, animal.nextAnimal);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n&quot;</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序编译没有问题，运行报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animal<span class="number">&#x27;</span>s name: (null), age: <span class="number">0</span>, info: </span><br><span class="line">animal.nextAnimal: <span class="number">0x1127fa036</span></span><br><span class="line">Segmentation fault: <span class="number">11</span></span><br></pre></td></tr></table></figure><p>修改一下代码，初始化一下 <code>animal.nextAnimal</code> 这个指针，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal&#x27;s name: %s, age: %i, info: %s\n&quot;</span>, animal.name, animal.age, animal.info);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal: %p\n&quot;</span>, animal.nextAnimal);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化指针变量</span></span><br><span class="line">    animal.nextAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n&quot;</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次编译重新运行，还是报错。还需要初始化 <code>animal.nextAnimal-&gt;name</code> 这个变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal&#x27;s name: %s, age: %i, info: %s\n&quot;</span>, animal.name, animal.age, animal.info);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal: %p\n&quot;</span>, animal.nextAnimal);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化指针变量</span></span><br><span class="line">    animal.nextAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化 name 变量</span></span><br><span class="line">    animal.nextAnimal-&gt;name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n&quot;</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，一切正常。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animal<span class="number">&#x27;</span>s name: (null), age: <span class="number">0</span>, info: </span><br><span class="line">animal.nextAnimal: <span class="number">0x10f0f1036</span></span><br><span class="line">animal.nextAnimal-&gt;name: cat, age: <span class="number">0</span>, info: </span><br></pre></td></tr></table></figure><p>通过上面的例子，结构体指针变量有些会给默认值，有些又不会给，所以都要初始化指针变量。修改一下代码，示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//指针成员</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> info[<span class="number">200</span>]; <span class="comment">//字符数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">nextAnimal</span>;</span> <span class="comment">//指针成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></span><br><span class="line">    </span><br><span class="line">    animal.name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(animal.info, <span class="string">&quot;This is a cat.&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal&#x27;s name: %s, age: %i, info: %s\n&quot;</span>, animal.name, animal.age, animal.info);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal: %p\n&quot;</span>, animal.nextAnimal);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化指针变量</span></span><br><span class="line">    animal.nextAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化变量</span></span><br><span class="line">    animal.nextAnimal-&gt;name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(animal.nextAnimal-&gt;info, <span class="string">&quot;This is a cat.&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n&quot;</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体指针的初始化"><a href="#结构体指针的初始化" class="headerlink" title="结构体指针的初始化"></a>结构体指针的初始化</h2><blockquote><p>指的是初始化结构体指针变量。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">ptAnimal</span>;</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptAnimal&#x27;s name: %s, age: %i， info: %s\n&quot;</span>, ptAnimal-&gt;name, ptAnimal-&gt;age, ptAnimal-&gt;info);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Segmentation fault: 11</span><br></pre></td></tr></table></figure><p>同样的道理，需要初始化指针变量。完成后的示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">ptAnimal</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化结构体指针</span></span><br><span class="line">    ptAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">    </span><br><span class="line">    ptAnimal-&gt;name = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(ptAnimal-&gt;info, <span class="string">&quot;This is a big dog&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptAnimal&#x27;s name: %s, age: %i， info: %s\n&quot;</span>, ptAnimal-&gt;name, ptAnimal-&gt;age, ptAnimal-&gt;info);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化结构体指针的成员指针变量 nextAnimal</span></span><br><span class="line">    ptAnimal-&gt;nextAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">    ptAnimal-&gt;nextAnimal-&gt;name = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(ptAnimal-&gt;nextAnimal-&gt;info, <span class="string">&quot;This is a big dog&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptAnimal-&gt;nextAnimal&#x27;s name: %s, age: %i， info: %s\n&quot;</span>,</span><br><span class="line">           ptAnimal-&gt;nextAnimal-&gt;name, ptAnimal-&gt;nextAnimal-&gt;age, ptAnimal-&gt;nextAnimal-&gt;info);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><p><strong>main.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//指针成员</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> info[<span class="number">200</span>]; <span class="comment">//字符数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">nextAnimal</span>;</span> <span class="comment">//指针成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// 验证结构体指针成员变量</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></span><br><span class="line">        </span><br><span class="line">        animal.name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(animal.info, <span class="string">&quot;This is a cat.&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;animal&#x27;s name: %s, age: %i, info: %s\n&quot;</span>, animal.name, animal.age, animal.info);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal: %p\n&quot;</span>, animal.nextAnimal);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化指针变量</span></span><br><span class="line">        animal.nextAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化变量</span></span><br><span class="line">        animal.nextAnimal-&gt;name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(animal.nextAnimal-&gt;info, <span class="string">&quot;This is a cat.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n&quot;</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 验证结构体指针</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">ptAnimal</span>;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化结构体指针</span></span><br><span class="line">        ptAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">        </span><br><span class="line">        ptAnimal-&gt;name = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(ptAnimal-&gt;info, <span class="string">&quot;This is a big dog&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptAnimal&#x27;s name: %s, age: %i， info: %s\n&quot;</span>, ptAnimal-&gt;name, ptAnimal-&gt;age, ptAnimal-&gt;info);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化结构体指针的成员指针变量 nextAnimal</span></span><br><span class="line">        ptAnimal-&gt;nextAnimal = (<span class="keyword">struct</span> Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Animal));</span><br><span class="line">        ptAnimal-&gt;nextAnimal-&gt;name = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(ptAnimal-&gt;nextAnimal-&gt;info, <span class="string">&quot;This is a big dog&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptAnimal-&gt;nextAnimal&#x27;s name: %s, age: %i， info: %s\n&quot;</span>,</span><br><span class="line">               ptAnimal-&gt;nextAnimal-&gt;name, ptAnimal-&gt;nextAnimal-&gt;age, ptAnimal-&gt;nextAnimal-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc<span class="number">-7</span> main.c -o main</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">animal<span class="number">&#x27;</span>s name: cat, age: <span class="number">0</span>, info: This is a cat.</span><br><span class="line">animal.nextAnimal: <span class="number">0x0</span></span><br><span class="line">animal.nextAnimal-&gt;name: cat, age: <span class="number">0</span>, info: This is a cat.</span><br><span class="line">ptAnimal<span class="number">&#x27;</span>s name: dog, age: <span class="number">0</span>， info: This is a big dog</span><br><span class="line">ptAnimal-&gt;nextAnimal<span class="number">&#x27;</span>s name: dog, age: <span class="number">0</span>， info: This is a big dog</span><br></pre></td></tr></table></figure><hr><p><strong>小荷才露尖尖角，早有蜻蜓立上头~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc macOS struct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致结婚8周年</title>
      <link href="/2019/01/30/%E8%87%B4%E7%BB%93%E5%A9%9A8%E5%91%A8%E5%B9%B4/"/>
      <url>/2019/01/30/%E8%87%B4%E7%BB%93%E5%A9%9A8%E5%91%A8%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2019/01/30/1.jpg"></p><p>自己明明是个理科生，偏偏有颗文科生的心，多愁善感，心理总有道不完的情结。</p><p>很多人问我：“写博客是不是很费时间，把写博客的时间腾出来做点其他的不是更好吗？“</p><p>言下之意在说，反正你也成不了作家，干嘛浪费这个时间呢？人生有很多有乐趣的事情可以做，兴趣是最好的老师，不是吗？写博客的确是费时间，但这是个人的一个小爱好，所以，在我看来不算是浪费时间。坚持阅读和写作是我唯一没有放弃的爱好之一，因为它们能给我带来快乐，也是我忙碌之后停歇的港湾，能让我独立思考，静下心来憧憬美好的未来。</p><p><strong>所以，爱你所爱吧！</strong></p><p>2010年农历12月21日我们结婚了，在结婚之前我和太太认识了大概5年的时间，风风雨雨的一路走来，坎坷而又幸福，一个女人能为你坚守这么多年，并且总是能帮你，娶她两遍都不为过，哈哈！</p><p>那个时候家里条件很不好，在我的记忆深处，家里总是有还不完的债，每个学期的学杂费让父母焦头烂额，但最终还是被父母搞定了，所以我觉得他们很了不起。我坚持着自己的信念：“必须要考上大学，走出这里！”，母亲是家里最赞成我上学的，可能是被我炽热的学习热情给感染到了，这辈子不能忘记母亲为我上学奔波的日子，母爱之所以伟大是因为他为自己的孩子能倾出所有，并且不求回报！</p><p>大学时期，平时自己会找一些家教做，算是补贴一下日常的开销，寒暑假是我最盼望的日子，因为可以和太太在一起打工挣钱了，那时候挣钱只有一个目的，赚到学费！一到开学她就把自己积累的钱都给我了，简直是义薄云天，她还壮志豪情的说：“拿去花！”，我也厚颜无耻的接过来了。当时我在想，这姑娘就不怕我以后跑掉吗？！关于这个事情，后来我问过她，她说：“我相信你！”，朴实的回答让我无言以对。其实，当我看见她的第一眼，就毅然决定这辈子非她不娶了！</p><p>我们结婚后没几天，就离开了老家赶往深圳，我们手里也没有钱，穷的叮当响，记得去深圳的盘缠还是弟弟给我的。在深圳刚工作的日子里，每天中午我们还要自己做饭，粗茶淡饭的倒也觉得开心，就是在那个时候太太开始会做饭了，特别是捞面和蛋炒饭，至今还让我记忆犹新，每天晚上下班我都会去接她，在月光下她瘦小的身影显得格外别致，一起牵手回家，我们决定就这样幸福的奋斗下去！</p><p>结婚前我们彼此骂过、切磋过，多半是我的过错但我总是觉得自己是个男人，不能低头，不然真他妈没面子。现在想想自己挺可笑的，所以婚后我基本上没有和太太打骂过，女人的脾气很奇怪，一会晴天一会雨天，自己忍一忍就过去了，不要再火上浇油了，就像这句话所说的：“你虽然赢了吵架，但是你却输了感情”，退一步海阔天空！</p><p>2012年3月，儿子出生了，这个小家伙的到来让我们的生活变得更加忙碌了，我们算是步入了父母的行列了。太太算告别了所有的打工生涯，全职在家照顾孩子，我负责在外挣钱，一家三口幸福的生活在一起！太太自从有了儿子之后，儿子就像是他的全部，把孩子照顾的无微不至，做事情比以前认真了很多，开始关注一些公众号，读一些育儿书籍，学习别人是怎么养育孩子的，孩子在成长，太太也在成长。也许，女人从一名妻子的角色转换为母亲的角色的这个过程，算是一次蜕变，尤其是母亲的角色，她扮演的十分精彩！</p><p>2019年1月，我们的第二个孩子出生了，是个可爱的千金，我们之前也讨论过到底要不要二胎，我说生孩子太辛苦了，有一个孩子就够折腾的了，不要二胎也罢。太太坚决反对，说一个孩子太孤单，以后遇到事情连个商量的亲人都没有，必须要二胎，就这样我们孕育了这个小千金。无论你跟你的太太有多大的仇多大的冤，她能为你生孩子，就值得你为她付出一辈子。</p><p>今年是我们结婚8周年，7年之痒的传说没有在我们两个身上发生，我们会这样继续幸福下去，迎接下一个周年。</p><p>祝大家新年新气象，身体健康，阖家幸福，万事如意，诸事顺利！祝天下有情人终成眷属！</p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class、isa、元类</title>
      <link href="/2019/01/29/Class-isa-%E5%85%83%E7%B1%BB/"/>
      <url>/2019/01/29/Class-isa-%E5%85%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文的所涉及到的源码是 <a href="https://opensource.apple.com/source/objc4/">objc4</a> 源码，截止到写本文最新的是 <code>objc4-750</code> 这个版本。</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>我们在学习面向对象的学习中，接触最多的就是类，那么在OC类是由Class类型来表示的，Class是用C的数据结构来表示的。</p><p>看一下 <code>NSObject</code> 的声明，在头文件中，如下图所示：<br><img src="/upload/images/2019/01/29/1.jpg"></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> &lt;<span class="title">NSObject</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic ignored <span class="string">&quot;-Wobjc-interface-ivars&quot;</span></span></span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到：<br>1、<code>NSObject</code> 是实现了 <code>&lt;NSObject&gt;</code> 协议的。<br>2、<code>NSObject</code> 中有 <code>Class</code> 类型的 <code>isa</code> 成员变量，外界是无法访问的，另外 <code>isa</code> 指针可能在将来也会被隐藏起来(OBJC_ISA_AVAILABILITY标示了)。</p><p>继续看一下 <code>Class</code> 到底是什么？</p><p><img src="/upload/images/2019/01/29/2.jpg"></p><p>在上面的文件中可以看到 <code>Class</code> 的定义，如下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object *<span class="keyword">id</span>;</span><br></pre></td></tr></table></figure><p>可以看出 <code>Class</code> 是一个指向 <code>objc_class</code> 的结构体指针，<code>Objective-C</code> 中的类是由 <code>Class</code> 类型来表示的，它实际上是一个指向 <code>objc_class</code> 结构体的指针。</p><p>在下面的头文件中看一下 <code>objc_class</code> 的定义，如下：</p><p><img src="/upload/images/2019/01/29/3.jpg"></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_class : objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;             <span class="comment">// formerly cache pointer and vtable</span></span><br><span class="line">    class_data_bits_t bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<code>objc_class</code> 用来描述OC中的类，而 <code>objc_object</code> 用来描述OC中的对象，类(objc_class)其实也是一个对象(objc_object)，另外 <code>id</code> 是代表对象的，它是指向 <code>objc_object</code> 的结构体指针，它的存在可以让我们实现类似于C++中泛型的一些操作。该类型的对象可以转换为任何一种对象，有点类似于C语言中 <code>void *</code> 指针类型的作用。</p><p>这里要注意，<code>objc_class</code> 的定义在 <code>objc-runtime-old.h</code>中和 <code>objc-runtime-new.h</code> 中的不一样。这里以 <code>objc-runtime-new.h</code> 为主，建议可以看看 <a href="http://www.veryitman.com/2019/01/28/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84-objc-class/">被误解的 objc_class</a> 这篇文章。</p><p>再来看一下 <code>objc_object</code>，如下图所示：</p><p><img src="/upload/images/2019/01/29/4.jpg"></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_object &#123;</span><br><span class="line">private:</span><br><span class="line">    isa_t isa;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>objc_object</code> 是一个结构体，里面有个私有成员变量 <code>isa</code> 是 <code>isa_t</code> 类型的。</p><p>而 <code>isa_t</code> 是一个 union 类型的，如下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> isa_t &#123;</span><br><span class="line">    isa_t() &#123; &#125;</span><br><span class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Class cls;</span><br><span class="line">    uintptr_t bits;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(ISA_BITFIELD)</span></span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        ISA_BITFIELD;  <span class="comment">// defined in isa.h</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总之在OC中，类也是一个对象称之为类对象，根据凡是对象都有自己的类的原理，那么类对象的肯定存在自己的类，这个类就是元类(meta-class)。</p><h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>在说元类之前，先看一下下面的例子，创建一个 <code>NSMutableDictionary</code> 实例对象 <code>dict</code>，即向 <code>NSMutableDictionary</code> 发送 <code>alloc</code> 和 <code>init</code> 消息。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableDictionary</span> *dict = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</span><br></pre></td></tr></table></figure><p>上面代码的大概执行流程如下几个步骤：</p><p><strong>1</strong>、先执行 <code>[NSMutableDictionary alloc]</code>，但是 <code>NSMutableDictionary</code> 没有 <code>+alloc</code> 方法，于是再去父类<code>NSObject</code> 中查找该方法。</p><p><strong>2</strong>、<code>NSObject</code> 响应 <code>+alloc</code> 方法，开始检测 <code>NSMutableDictionary</code> 类，并根据其所需的内存空间大小开始分配内存空间，然后把 <code>isa</code> 指针指向 <code>NSMutableDictionary</code> 类。同时，<code>+alloc</code> 也被加进 cache 列表里面。</p><p><strong>3</strong>、接着，执行 <code>-init</code> 方法，如果 <code>NSMutableDictionary</code> 响应该方法，则直接将其加入 <code>cache</code>，如果不响应，则去父类查找。</p><p><strong>4</strong>、在后期的操作中，如果再以 <code>[[NSMutableDictionary alloc] init]</code> 这种方式来创建字典对象，则会直接从 cache 中取出相应的方法，直接调用。</p><p>上面是创建一个实例对象的大致流程，接下来我们说说元类。</p><p><strong>元类简单来说就是类对象的类。</strong>类描述的是对象，那么元类描述的就是Class类对象的类。元类定义了类的行为（类方法），在平时开发时，meta-class 基本是用不着接触的，但最好还是要知道它的存在，这样可以更好的理解OC的设计。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableDictionary</span> *tDatas = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>拿上面的示例来说，向 <code>NSMutableDictionary</code> 发送 <code>dictionaryWithCapacity</code> 这个消息的时候，Runtime 会在这个类的 meta-class 的方法列表中查找，通过 SEL 找到后取出方法中的 IMP 函数入口指针，并执行该方法，如果找不到就进行消息转发的流程中，最终可能会导致 Crash，消息转发的原理和机制可以参考 <a href="http://www.veryitman.com/categories/iOS/page/2/">消息机制</a> 这几篇文章。</p><p>元类保存了类方法的列表。当一个类方法被调用时，元类会首先查找它本身是否有该类方法的实现，如果没有则该元类会向它的父类查找该方法，直到一直找到继承链的头。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class object_getClass(<span class="keyword">id</span> obj); </span><br></pre></td></tr></table></figure><p><code>object_getClass</code> 可以获取一个对象的 class object，其源码实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class object_getClass(<span class="keyword">id</span> obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj) <span class="keyword">return</span> obj-&gt;getIsa();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子吧，示例如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> new];</span><br><span class="line">Class obj1 = object_getClass(obj);</span><br><span class="line">Class obj2 = object_getClass([<span class="built_in">NSObject</span> <span class="keyword">class</span>]);</span><br><span class="line">Class obj3 = objc_getMetaClass(<span class="string">&quot;NSObject&quot;</span>);</span><br><span class="line">Class obj4 = object_getClass(obj1);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = [<span class="built_in">NSStringFromClass</span>(obj1) UTF8String];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name: %s&quot;</span>, name); <span class="comment">//name: NSObject</span></span><br><span class="line">Class obj5 = objc_getMetaClass(name);</span><br><span class="line">Class obj6 = objc_getClass(name);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj : %@, -&gt;%p: &quot;</span>, obj,  obj);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj1: %@, -&gt;%p: &quot;</span>, obj1, obj1);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj2: %@, -&gt;%p: &quot;</span>, obj2, obj2);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj3: %@, -&gt;%p: &quot;</span>, obj3, obj3);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj4: %@, -&gt;%p: &quot;</span>, obj4, obj4);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj5: %@, -&gt;%p: &quot;</span>, obj5, obj5);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj6: %@, -&gt;%p: &quot;</span>, obj6, obj6);</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj : &lt;<span class="built_in">NSObject</span>: <span class="number">0x600002b19d70</span>&gt;, -&gt;<span class="number">0x600002b19d70</span>:</span><br><span class="line">obj1: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bf38</span>:</span><br><span class="line">obj2: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</span><br><span class="line">obj3: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</span><br><span class="line">obj4: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</span><br><span class="line">obj5: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</span><br><span class="line">obj6: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bf38</span>:</span><br></pre></td></tr></table></figure><p>可以看出，obj 是一个实例对象，obj1和obj6是一个 class object，其二者地址也一致，obj2、obj3、obj4 和 obj5 都获取到的是元类。</p><p>通过类对象调用的 <code>object_getClass</code> 得到的是该类对象的 meta-class，如 obj2 和 obj4，而通过实例对象调用的<code>object_getClass</code> 得到的是该实例对象的类对象，如 obj1，<code>objc_getClass</code> 这个方法获取是实例对象的类对象，与<code>object_getClass</code> 还是有点不一样的。而 <code>objc_getMetaClass</code> 可以直接获取 meta-class，如 obj3。</p><p><strong>总之:</strong><br>1、<code>objc_getClass</code> 参数是类名的字符串，返回的就是这个类的类对象。<br>2、<code>object_getClass</code> 参数是 <code>id</code> 类型，它返回的是这个 <code>id</code> 的 <code>isa</code> 指针所指向的Class；如果传参是Class，则返回该Class的meta-class。</p><p>在 <strong>NSObject.mm</strong> 中，可以看到 self 和 class 方法都要实例和类方法，class 方法返回的都是类对象。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">id</span>)<span class="keyword">self</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">id</span>)<span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)<span class="keyword">self</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (Class)<span class="keyword">class</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)<span class="keyword">class</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，无论是类还是实例调用 class 方法，返回的都是同一个 class object，举例：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class objClz1 = [<span class="built_in">NSObject</span> <span class="keyword">class</span>];</span><br><span class="line">Class objClz2 = [[[<span class="built_in">NSObject</span> alloc] init] <span class="keyword">class</span>];</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (objClz1 == objClz2) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;objClz1: %@, -&gt;%p&quot;</span>, objClz1, objClz1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objClz1: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10fa30f38</span></span><br></pre></td></tr></table></figure><h2 id="isa"><a href="#isa" class="headerlink" title="isa"></a>isa</h2><p>下面的例子来源自 <a href="http://zziking.github.io/ios/2016/02/08/Objective-C_Runtime_1_The_object_model.html">这里</a>，感谢 kingizz’s blog，代码中 <code>Son</code> 是 <code>Father</code> 的子类，而 <code>Father</code> 是 <code>NSObject</code> 的子类。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Father</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Son</span> : <span class="title">Father</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>我们结合下面这个图来理解一下，子类、父类、元类以及 isa 指针。</p><p><img src="/upload/images/2019/01/29/5.jpg"></p><p>一个实例对象的 <code>isa</code> 指向对象所属的类，这个类的 <code>isa</code> 指向这个类的元类，而这个元类的 <code>isa</code> 又指向 <code>NSObject</code> 的元类，<code>NSObject</code> 的元类的 <code>isa</code> 指向其本身，最终形成形成一个完美的闭环。</p><p>在OC中，所有的对象都有一个 <code>isa</code> 指针，指向对象所属的类，类也是一个对象，类对象的 <code>isa</code> 指针指向类的元类。    </p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://tingxins.com/2017/05/metaclass-class-relationship/">Objective-C 中的对象、类、元类</a></p><p>2、<a href="http://zziking.github.io/ios/2016/02/08/Objective-C_Runtime_1_The_object_model.html">Objective-C Runtime(一)对象模型及类与元类</a></p><p>3、<a href="http://www.veryitman.com/2019/01/28/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84-objc-class/">被误解的 objc_class</a> </p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元类 isa class meta-class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被误解的 objc_class</title>
      <link href="/2019/01/28/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84-objc-class/"/>
      <url>/2019/01/28/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84-objc-class/</url>
      
        <content type="html"><![CDATA[<p>网上绝大多数的博客讲 <code>objc_class</code> 的定义，基本上都使用了下面的<strong>代码一</strong>来讲解，与 <a href="https://opensource.apple.com/source/objc4/">objc4</a> 源码 <code>objc-runtime-new.h</code> 中关于 <code>objc_class</code> 中的定义完全不一样，我认真地去探究了一下，发现这个世界上实属雷同的事件还是蛮多的，老实做事做学问的人少的可怜！</p><p><img src="/upload/images/2019/01/28/1.jpg"></p><p>本文的所涉及到的 <a href="https://opensource.apple.com/source/objc4/">objc4</a> 源码，截止到写本文最新的是 <code>objc4-750</code> 这个版本。</p><p><strong>代码一：简洁版也称坑货版</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_class &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !__OBJC2__</span></span><br><span class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></span><br></pre></td></tr></table></figure><p>在上面的代码中 <code>OBJC2_UNAVAILABLE</code> 看起来让人觉得有点奇怪，从字面意思上可以理解为在OC2.0版本不可用了，还有一个 <code>OBJC_ISA_AVAILABILITY</code> 是在表示 Objective-C 都可以使用吗？</p><p>在 <code>objc-api.h</code> 中有关于这两个宏的定义，如下：</p><p><strong>代码二：关键宏定义</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OBJC_ISA_AVAILABILITY: `isa` will be deprecated or unavailable </span></span><br><span class="line"><span class="comment"> * in the future */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(OBJC_ISA_AVAILABILITY)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">if</span> __OBJC2__</span></span><br><span class="line"><span class="meta">#       <span class="keyword">define</span> OBJC_ISA_AVAILABILITY  __attribute__((deprecated))</span></span><br><span class="line"><span class="meta">#   <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#       <span class="keyword">define</span> OBJC_ISA_AVAILABILITY  <span class="comment">/* still available */</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* OBJC2_UNAVAILABLE: unavailable in objc 2.0, deprecated in Leopard */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(OBJC2_UNAVAILABLE)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">if</span> __OBJC2__</span></span><br><span class="line"><span class="meta">#       <span class="keyword">define</span> OBJC2_UNAVAILABLE UNAVAILABLE_ATTRIBUTE</span></span><br><span class="line"><span class="meta">#   <span class="keyword">else</span></span></span><br><span class="line">        <span class="comment">/* plain C code also falls here, but this is close enough */</span></span><br><span class="line"><span class="meta">#       <span class="keyword">define</span> OBJC2_UNAVAILABLE                                       \</span></span><br><span class="line"><span class="meta">            __OSX_DEPRECATED(10.5, 10.5, <span class="string">&quot;not available in __OBJC2__&quot;</span>) \</span></span><br><span class="line"><span class="meta">            __IOS_DEPRECATED(2.0, 2.0, <span class="string">&quot;not available in __OBJC2__&quot;</span>)   \</span></span><br><span class="line"><span class="meta">            __TVOS_UNAVAILABLE __WATCHOS_UNAVAILABLE __BRIDGEOS_UNAVAILABLE</span></span><br><span class="line"><span class="meta">#   <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>从定义来看，<code>OBJC_ISA_AVAILABILITY</code> 在OC2.0版本中标示已经过时了，<code>OBJC2_UNAVAILABLE</code> 标示在OC2.0中已经不可用了，将来会被移除的。</p><p>我们不妨来摘录完整的代码，如下：</p><p><strong>代码三：完整版也称整明白版</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> !OBJC_TYPES_DEFINED</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// An opaque type that represents a method in a class definition.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_method *Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// An opaque type that represents an instance variable.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_ivar *Ivar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// An opaque type that represents a category.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_category *Category;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// An opaque type that represents an Objective-C declared property.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_property *objc_property_t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> objc_class &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !__OBJC2__</span></span><br><span class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里居然还有个宏 <code>OBJC_TYPES_DEFINED</code>，看一下其在 <code>objc-private.h</code> 中的定义，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OBJC_TYPES_DEFINED 1</span></span><br></pre></td></tr></table></figure><p>那么 <code>#if !OBJC_TYPES_DEFINED</code> 已经限制了其到 <code>#endif</code> 中间的代码都是无效的，所以关于<strong>代码一</strong>处的代码其实已经没有实际意义了，网上的朋友们请不要拿这段代码再 <code>骗人</code> 了。</p><p>源码 <code>objc-runtime-new.h</code> 中关于 <code>objc_class</code> 中的定义代码如下：</p><p><strong>代码四：正解版</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_class : objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;             <span class="comment">// formerly cache pointer and vtable</span></span><br><span class="line">    class_data_bits_t bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> objc_object &#123;</span><br><span class="line">private:</span><br><span class="line">    isa_t isa;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> isa_t &#123;</span><br><span class="line">    isa_t() &#123; &#125;</span><br><span class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Class cls;</span><br><span class="line">    uintptr_t bits;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(ISA_BITFIELD)</span></span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        ISA_BITFIELD;  <span class="comment">// defined in isa.h</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>无论是学知识还是做知识，老实认真应该是最基本的要求，千万不要以讹传讹，误人子弟！</strong></p><hr><p><strong>只要你想做，总会有办法的~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS objc_class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合对象可变与不可变的那点事</title>
      <link href="/2019/01/13/%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
      <url>/2019/01/13/%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在文章 <a href="http://www.veryitman.com/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/">NSString NSMutableString 可变与不可变的那些事儿</a> 分享了关于 <code>NSString</code> 和 <code>NSMutableString</code> 与 <code>copy</code> 以及 <code>mutableCopy</code> 之间的点滴。</p><p>今天跟大家分享一下集合类数据的可变与不可变性，再结合 <code>copy</code> 以及 <code>mutableCopy</code> 说一说注意事项。如果你仔细看过 <a href="http://www.veryitman.com/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/">NSString NSMutableString 可变与不可变的那些事儿</a>  这篇文章，那么接下来看本篇会很轻松。</p><p><strong>本篇内容主要涉及以下几个方面:</strong></p><ul><li>在 OC 中的集合对象</li><li>集合对象的 copy、mutableCopy</li><li>可变与不可变集合对象之间等号赋值</li><li>property 中的集合对象的 copy 和 strong</li><li>实际案例分析</li></ul><p>为了说明问题，这里，我选用数组(NSArray)作为集合对象的代表，其他的集合类以此类推即可。</p><h2 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h2><p>在 <code>Objective-C</code> 中，非集合类对象指的是 <code>NSString</code>、<code>NSNumber</code>、<code>NSValue</code> 之类的对象，除了 <code>NSString</code> 有对应的可变类 <code>NSMutableString</code> 外，<code>NSNumber</code>、<code>NSValue</code> 都没有可变类与其对应。</p><p>集合类对象是指 <code>NSArray</code>、<code>NSMutableArray</code>、 <code>NSDictionary</code>、<code>NSMutableDictionary</code>、<code>NSSet</code>、<code>NSMutableSet</code> 之类的对象。</p><h2 id="集合对象的-copy、mutableCopy"><a href="#集合对象的-copy、mutableCopy" class="headerlink" title="集合对象的 copy、mutableCopy"></a>集合对象的 copy、mutableCopy</h2><p>看一个具体例子，请接着看下面的示例代码和说明。</p><p><strong>例子1：NSArray 的 copy、mutableCopy</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;veryitman.com&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;array  addr: %p, array: %@ &quot;</span>, array, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地址未变和array一致，内容也一致</span></span><br><span class="line"><span class="built_in">NSArray</span> *array1 = array;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;array1 addr: %p, array1: %@&quot;</span>, array1, array1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地址未变和array一致，内容也一致</span></span><br><span class="line"><span class="comment">// copy 之后仍然是不可变的数组对象</span></span><br><span class="line"><span class="keyword">id</span> array2 = [array <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;array2 addr: %p, array2: %@&quot;</span>, array2, array2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地址改变</span></span><br><span class="line"><span class="keyword">id</span> array3 = [array mutableCopy];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;array3 addr: %p, array3: %@&quot;</span>, array3, array3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进一步说明了经过mutableCopy后，array3变成了可变数组</span></span><br><span class="line">[(<span class="built_in">NSMutableArray</span> *)(array3) addObject:<span class="string">@&quot;my blog&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;array3 addr: %p, array3: %@&quot;</span>, array3, array3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为array3地址变了，不会影响array的地址和值</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;array  addr: %p, array: %@ &quot;</span>, array, array);</span><br></pre></td></tr></table></figure><p><strong>小结 1：</strong></p><p>1、不可变数组 <code>copy</code> 之后，仍然是不可变数组，其地址和内容不变，即拷贝了原对象的内容和指针，属于指针拷贝。</p><p>2、不可变数组 <code>mutableCopy</code> 之后，变成了可变数组，其地址发生了变化，即只拷贝了原对象的内容，指针没有拷贝，属于内容拷贝。</p><p>3、不可变数组之间的<code>等号(=)</code>赋值，是指针拷贝。</p><p><strong>例子2：NSMutableArray 的 copy、mutableCopy</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableArray</span> *marray = [<span class="built_in">NSMutableArray</span> arrayWithObjects:<span class="string">@&quot;veryitman.com&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;marray  addr: %p, marray: %@ &quot;</span>, marray, marray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地址未变和marray一致，内容也一致</span></span><br><span class="line"><span class="built_in">NSMutableArray</span> *marray1 = marray;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;marray1 addr: %p, marray1: %@ &quot;</span>, marray1, marray1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy 之后，地址改变且变成了不可变的数组对象</span></span><br><span class="line"><span class="keyword">id</span> marray2 = [marray <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;marray2 addr: %p, marray2: %@ &quot;</span>, marray2, marray2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutableCopy 之后，地址改变但仍是可变数组对象</span></span><br><span class="line"><span class="keyword">id</span> marray3 = [marray mutableCopy];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;marray3 addr: %p, marray3: %@ &quot;</span>, marray3, marray3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Crash：进一步说明了可变数组对象经过 copy 之后变成了不可变的marray2</span></span><br><span class="line"><span class="comment">// -[__NSSingleObjectArrayI addObject:]: unrecognized selector sent to instance 0x600002cbd320</span></span><br><span class="line"><span class="comment">// *** Terminating app due to uncaught exception &#x27;NSInvalidArgumentException&#x27;,</span></span><br><span class="line"><span class="comment">// reason: &#x27;-[__NSSingleObjectArrayI addObject:]: unrecognized selector sent to instance 0x600002cbd320&#x27;</span></span><br><span class="line"><span class="comment">// [(NSMutableArray *)(marray2) addObject:@&quot;my blog&quot;];</span></span><br><span class="line"><span class="comment">// NSLog(@&quot;marray2 addr: %p, marray2: %@ &quot;, marray2, marray2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进一步证明了mutableCopy 之后，marray3是可变数组</span></span><br><span class="line">[(<span class="built_in">NSMutableArray</span> *)(marray3) addObject:<span class="string">@&quot;my blog&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;marray3 addr: %p, marray3: %@ &quot;</span>, marray3, marray3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为marray3地址改变了，所以对marray3的操作不会影响原来的数组对象marray</span></span><br><span class="line"><span class="comment">// marray 地址和内容保持不变</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;marray  addr: %p, marray: %@ &quot;</span>, marray, marray);</span><br></pre></td></tr></table></figure><p><strong>小结 2：</strong></p><p>1、可变数组 <code>copy</code> 之后，会变成不可变数组，其内容不变，但是地址改变了，即只拷贝了原对象的内容，没有进行指针拷贝，属于内容拷贝。</p><p>2、可变数组 <code>mutableCopy</code> 之后，仍然是不可变数组，其地址发生了变化，内容没有变化，即只拷贝了原对象的内容，指针没有拷贝，属于内容拷贝。</p><p>3、可变数组之间<code>等号(=)</code>赋值，是指针拷贝。</p><p><strong>例子3：NSMutableArray 和 NSArray 之间等号赋值</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 向不可变数组赋值可变数组 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *tDatas = [<span class="built_in">NSMutableArray</span> arrayWithObjects:<span class="string">@&quot;veryitman.com&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--1--- tDatas addr: %p, tDatas: %@&quot;</span>, tDatas, tDatas);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类似但不同于可变数组的mutableCopy操作，此时 array 的地址未变和tDatas地址一致</span></span><br><span class="line">    <span class="comment">// array的内容和地址未发生变化，和tDatas一致</span></span><br><span class="line">    <span class="built_in">NSArray</span> *array = tDatas;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--2--- array addr: %p, array: %@&quot;</span>, array, array);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/** 向可变数组赋值不可变数组 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *tDatas = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;veryitman.com&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--1--- tDatas addr: %p, tDatas: %@&quot;</span>, tDatas, tDatas);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类似进行了不可变数组的 copy 操作</span></span><br><span class="line">    <span class="comment">// array 仍旧是不可变的，地址和内容与tDatas一致</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = tDatas;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--2--- array addr: %p, array: %@&quot;</span>, array, array);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// crash: 还是不可变的数组</span></span><br><span class="line">    <span class="comment">// -[__NSArrayI addObject:]: unrecognized selector sent to instance 0x6000025499c0</span></span><br><span class="line">    <span class="comment">// Terminating app due to uncaught exception &#x27;NSInvalidArgumentException&#x27;,</span></span><br><span class="line">    <span class="comment">// reason: &#x27;-[__NSArrayI addObject:]: unrecognized selector sent to instance 0x6000025499c0&#x27;</span></span><br><span class="line">    <span class="comment">// [array addObject:@&quot;blog&quot;];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">-1</span>--- tDatas addr: <span class="number">0x6000023a8bd0</span>, tDatas: (</span><br><span class="line">    <span class="string">&quot;veryitman.com&quot;</span></span><br><span class="line">)</span><br><span class="line">-<span class="number">-2</span>--- array addr: <span class="number">0x6000023a8bd0</span>, array: (</span><br><span class="line">    <span class="string">&quot;veryitman.com&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-<span class="number">-1</span>--- tDatas addr: <span class="number">0x600002dbbf00</span>, tDatas: (</span><br><span class="line">    <span class="string">&quot;veryitman.com&quot;</span></span><br><span class="line">)</span><br><span class="line">-<span class="number">-2</span>--- array addr: <span class="number">0x600002dbbf00</span>, array: (</span><br><span class="line">  <span class="string">&quot;veryitman.com&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上是使用 <code>NSArray</code>、<code>NSMutableArray</code> 来进行测试的，<code>NSDictionary</code> 和 <code>NSSet</code> 以及其对应的可变类型都遵循上面总结的内容。</p><h2 id="copy、strong-修饰属性"><a href="#copy、strong-修饰属性" class="headerlink" title="copy、strong 修饰属性"></a>copy、strong 修饰属性</h2><p>在属性中，我们如何来选择 <code>copy</code> 或者 <code>strong</code> 来作为集合数据的修饰语呢？</p><p>根据上面示例分析结果可以看出，在属性中，如果使用 <code>strong</code> 修饰不可变数组，那么在使用过程中(被可变数组赋值)该不可变数组有可能会变为可变数组。如果使用 <code>copy</code> 修饰可变数组，那么在使用过程中（被不可变数组赋值）该可变数组有可能变为不可变数组。</p><p><strong>小结 3：</strong></p><p>当修饰可变类型的属性时，如 <code>NSMutableArray</code>、<code>NSMutableDictionary</code>、<code>NSMutableSet</code> 等集合类型时，用 <code>strong</code> 修饰。</p><p>当修饰不可变类型的属性时，如 <code>NSArray</code>、<code>NSDictionary</code>、<code>NSSet</code> 等集合类型时，用 <code>copy</code> 修饰。</p><p>大家如果有兴趣可以参考文章 <a href="http://www.veryitman.com/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/">NSString NSMutableString 可变与不可变的那些事儿</a>  的做法来验证上面的理论知识。</p><h2 id="实际案例分析"><a href="#实际案例分析" class="headerlink" title="实际案例分析"></a>实际案例分析</h2><p>再给大家举个实际的开发案例，我们需要定时上报目采集APP的数据，这个需求看起来是没有任何难度的。</p><p>我们使用代码来模拟一下上报数据的这个过程。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 采集到的数据</span></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> *tDatas = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">5</span>];</span><br><span class="line">[tDatas setObject:<span class="string">@&quot;https://&quot;</span> forKey:<span class="string">@&quot;req_m&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;--采集数据--- tDatas addr: %p, tDatas: %@&quot;</span>, tDatas, tDatas);</span><br><span class="line"><span class="comment">// 开始发送</span></span><br><span class="line">[<span class="keyword">self</span> sendDatas:tDatas];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;--上报完成，原数据--- tDatas addr: %p, tDatas: %@&quot;</span>, tDatas, tDatas);</span><br></pre></td></tr></table></figure><p>发送数据的模拟示例如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)sendDatas:(<span class="built_in">NSDictionary</span> *)datas</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--上报中--- datas addr: %p, datas: %@&quot;</span>, datas, datas);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/** 下面两行代码只是为了模拟原数据被外界在传输过程中被改变，比如其他采集线程改变了它 */</span></span><br><span class="line">    <span class="keyword">if</span> ([datas isKindOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        [(<span class="built_in">NSMutableDictionary</span> *)datas setObject:<span class="string">@&quot;veryitman.com&quot;</span> forKey:<span class="string">@&quot;test_m&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--上报完成--- datas addr: %p, datas: %@&quot;</span>, datas, datas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面<strong>例子3</strong>提到的，不可变向可变等号赋值时，原不可变对象会变成可变对象。</p><p>控制台输出日志，如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--采集数据--- tDatas addr: <span class="number">0x600000b788e0</span>, tDatas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--上报中--- datas addr: <span class="number">0x600000b788e0</span>, datas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--上报完成--- datas addr: <span class="number">0x600000b788e0</span>, datas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">test_m = veryitman.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--上报完成，原数据--- tDatas addr: <span class="number">0x600000b788e0</span>, tDatas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">test_m = veryitman.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面代码的代码，我是为了模拟原数据被其他代码改变了的情况，只是为了说明，不可变对象容易被外界影响和改变。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 下面两行代码只是为了模拟原数据被外界在传输过程中被改变，比如其他采集线程改变了它 */</span></span><br><span class="line"><span class="keyword">if</span> ([datas isKindOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">    [(<span class="built_in">NSMutableDictionary</span> *)datas setObject:<span class="string">@&quot;veryitman.com&quot;</span> forKey:<span class="string">@&quot;test_m&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的总结又提到无论是可变对象还是不可变对象经过 <code>copy</code> 之后都是不可变对象的原理，我们修改一下代码，示例如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)sendDatas:(<span class="built_in">NSDictionary</span> *)datas</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *copy_datas = [datas <span class="keyword">copy</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--上报中--- copy_datas addr: %p, copy_datas: %@&quot;</span>, copy_datas, copy_datas);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([copy_datas isKindOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        [(<span class="built_in">NSMutableDictionary</span> *)copy_datas setObject:<span class="string">@&quot;veryitman.com&quot;</span> forKey:<span class="string">@&quot;test_m&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Yes, copy_datas 是不可变字典。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--上报完成--- copy_datas addr: %p, copy_datas: %@&quot;</span>, copy_datas, copy_datas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> --采集数据--- tDatas addr: <span class="number">0x600003b08740</span>, tDatas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--上报中--- copy_datas addr: <span class="number">0x600003b08700</span>, copy_datas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Yes, copy_datas 是不可变字典。</span><br><span class="line"></span><br><span class="line">--上报完成--- copy_datas addr: <span class="number">0x600003b08700</span>, copy_datas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--上报完成，原数据--- tDatas addr: <span class="number">0x600003b08740</span>, tDatas: &#123;</span><br><span class="line">req_m = https:<span class="comment">//;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS 集合对象 可变 不可变 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS下生成字符串md5</title>
      <link href="/2019/01/13/macOS%E4%B8%8B%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2md5/"/>
      <url>/2019/01/13/macOS%E4%B8%8B%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2md5/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><p>在 macOS 系统下生成任意字符串的 md5 值，很简单，直接使用 <code>md5</code> 命令即可。</p><p>例如，要生成 <code>veryitman.com</code> 这个字符串的md5值，直接使用下面的命令即可，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5 -s veryitman.com</span><br></pre></td></tr></table></figure><p>对应生成的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5 (&quot;veryitman.com&quot;) = c5c401dcdacd95052eef360c3533a8bd</span><br></pre></td></tr></table></figure><p>这里要注意，有些使用者会这样来计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;veryitman.com&quot; | md5</span><br></pre></td></tr></table></figure><p>生成结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc239ea4ba4ebbd4ef9e61c160fcac3c</span><br></pre></td></tr></table></figure><p>发现和上面的结果不一致，这是因为 <code>echo</code> 默认会添加一个换行符，导致计算的md5值不一致，修改一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;veryitman.com&quot; | md5</span><br></pre></td></tr></table></figure><p>生成结果 <code>c5c401dcdacd95052eef360c3533a8bd</code> 与上面一致了。</p><p><strong>注意： <code>echo -n</code> 用来不显示结尾的换行符。</strong></p><p>更多关于 <code>md5</code> 的命令 可以问男人(man)，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man md5</span><br></pre></td></tr></table></figure><p><code>MD5(Message-Digest Algorithm 5)</code> 全称是报文摘要算法，此算法对任意长度的信息逐位进行计算，产生一个二进制长度为128位（十六进制长度就是32位）的“指纹”（或称“报文摘要”），不同的文件也能产生相同的报文摘要，但是可能性是极其小的。 </p><p><code>MD5 算法</code> 常常被用来验证网络文件传输的完整性，防止文件被人篡改，但是现在 MD5 的算法并不安全了。</p><p>在 macOS 上面还有 <code>md5sum</code> 这个命令，一般用来计算文件的md5值。</p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS string md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 中如何使用对象的弱引用</title>
      <link href="/2019/01/06/iOS-%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8/"/>
      <url>/2019/01/06/iOS-%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们都知道使用 <code>UIImage imageNamed</code> 创建的 <code>UIImage</code> 对象会被持有(强引用)，如果图片太大会占用内存，损耗 APP 的性能，影响用户体验，如果能改造对其的强引用变为弱引用就可以解决问题。</p><p>我们可能会有类似上面的场景，有些对象暂时保存起来，可能后面会用到，也有可能不会使用，但是又不想去管理它们的生命周期，如果它们能够自己被销毁就很省事，不需要去关心这些对象到底耗费了多少内存。</p><p>今天跟大家聊聊如何在 iOS 开发中保持对对象的弱引用而不是强引用，希望看完之后，能帮助到大家去解决实际问题。</p><h2 id="NSObject-retainCount"><a href="#NSObject-retainCount" class="headerlink" title="NSObject retainCount"></a>NSObject retainCount</h2><p>在 iOS 中创建一个对象，该对象的引用计数就会加1，例如下面的例子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj retain count: %zd&quot;</span>, [obj retainCount]);</span><br></pre></td></tr></table></figure><p>上面的例子输出是1，当然在 ARC 下是无法使用 <code>retainCount</code> 这个方法的，只有在非 ARC 条件下才可以，如果要运行上面的例子，对应的文件需要设置为 <code>-fno-objc-arc</code>.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>)retainCount OBJC_ARC_UNAVAILABLE;</span><br></pre></td></tr></table></figure><p>可以在 <code>usr/include/objc/NSObject.h</code> 中查看，<code>retainCount</code> 是 <code>NSObject 协议</code>（<code>@protocol NSObject</code>）中定义的一个方法，而 <code>NSObject</code> 类是实现了该协议的，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以，任何OC对象都具有 <code>retainCount</code> 方法。另外，你添加一个视图，视图其实也是被容器引用了，其计数也会加1被容器持有其强引用，再例如在数组中添加一个对象，会使对象的引用计数加1，被数组所持有。 </p><h2 id="NSValue-valueWithNonretainedObject"><a href="#NSValue-valueWithNonretainedObject" class="headerlink" title="NSValue valueWithNonretainedObject"></a>NSValue valueWithNonretainedObject</h2><p>在 iOS 中，<code>NSValue</code> 的类方法 <code>valueWithNonretainedObject</code> 可以保持对对象的弱引用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSValue</span> *)valueWithNonretainedObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</span><br></pre></td></tr></table></figure><blockquote><p>This method is useful if you want to add an object to a Collection but don’t want the collection to create a strong reference to it.</p></blockquote><p>大概意思是，该方法可以不持有对象的强引用，换句话说，只持有对象的弱引用。</p><p>举个栗子~</p><p><strong>MZDog.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MZDog</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>MZDog.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;MZDog.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZDog</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)description</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;MZDog-obj retain count: %zd&quot;</span>, [<span class="keyword">self</span> retainCount]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这里 <code>MZDog</code> 是设置了非 ARC 的，如图：<br><img src="/upload/images/2019/01/06/1.jpg"></p><p>在测试文件中使用 <code>MZDog</code>，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对 dog 使用弱引用，此时其引用计数还是1</span></span><br><span class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithNonretainedObject:dog];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@, value: %@&quot;</span>, dog, value);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取 value 对应的对象</span></span><br><span class="line"><span class="keyword">id</span> obj = value.nonretainedObjectValue;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj isKindOfClass MZDog: %i&quot;</span>, [obj isKindOfClass:[MZDog <span class="keyword">class</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj == dog) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;The obj is same dog object.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的控制台输出，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span></span><br><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, value: &lt;<span class="number">308</span>cf600 <span class="number">00600000</span>&gt;</span><br><span class="line">obj isKindOfClass MZDog: <span class="number">1</span></span><br><span class="line">The obj is same dog object.</span><br></pre></td></tr></table></figure><p>从上面的例子可以看出，<code>valueWithNonretainedObject</code> 对 <code>MZDog</code> 对象 <code>dog</code> 是没有强应用的。修改代码，示例一下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对 dog 使用弱引用，此时其引用计数还是1</span></span><br><span class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithNonretainedObject:dog];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@, value: %@&quot;</span>, dog, value);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 经过NSValue包装后，可以放到对应的集合对象(如数组，字典等)中，这样这些集合就不会对 dog 进行强引用了</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:value, <span class="literal">nil</span>];</span><br><span class="line"><span class="comment">// dog 的引用计数还是1</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@, array: %@&quot;</span>, dog, array);</span><br></pre></td></tr></table></figure><p>对应的输出日志：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span></span><br><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, value: &lt;<span class="number">40</span>b7a401 <span class="number">00600000</span>&gt;</span><br><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, array: (<span class="string">&quot;&lt;40b7a401 00600000&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>方法 <code>valueWithNonretainedObject</code> 等同于</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSValue</span> *theValue = [<span class="built_in">NSValue</span> value:&amp;anObject withObjCType:<span class="keyword">@encode</span>(<span class="keyword">void</span> *)];</span><br></pre></td></tr></table></figure><p>上面的示例，可以改写一下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对 dog 使用弱引用，此时其引用计数还是1</span></span><br><span class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> value:&amp;dog withObjCType:<span class="keyword">@encode</span>(<span class="keyword">void</span> *)];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@, value: %@&quot;</span>, dog, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经过NSValue包装后，可以放到对应的集合对象(如数组，字典等)中，这样这些集合就不会对 dog 进行强引用了</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:value, <span class="literal">nil</span>];</span><br><span class="line"><span class="comment">// dog 的引用计数还是1</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@, array: %@&quot;</span>, dog, array);</span><br></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span></span><br><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, value: &lt;<span class="number">40568</span>a02 <span class="number">00600000</span>&gt;</span><br><span class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, array: (<span class="string">&quot;&lt;40568a02 00600000&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时 <code>dog</code> 的引用计数还是没有增加~</p><h2 id="自写弱引用的集合分类"><a href="#自写弱引用的集合分类" class="headerlink" title="自写弱引用的集合分类"></a>自写弱引用的集合分类</h2><p>根据上面的理论知识，我们可以使用 <code>NSValue</code> 写出弱引用的集合对象，思路很简单，创建集合类的分类，然后使用 <code>NSValue</code> 来进行包装。看下面的示例代码即可。</p><p><strong>NSArray+MZWeak.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">MZWeak</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)mz_weak_objectAtIndex:(<span class="built_in">NSUInteger</span>)index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMutableArray</span> (<span class="title">MZWeak</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mz_weak_addObject:(<span class="keyword">id</span>)obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>NSArray+MZWeak.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;NSArray+MZWeak.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSArray</span> (<span class="title">MZWeak</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)mz_weak_objectAtIndex:(<span class="built_in">NSUInteger</span>)index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSValue</span> *value = [<span class="keyword">self</span> objectAtIndex:index];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> value.nonretainedObjectValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableArray</span> (<span class="title">MZWeak</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mz_weak_addObject:(<span class="keyword">id</span>)obj</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithNonretainedObject:obj];</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> != value) &#123;</span><br><span class="line">        [<span class="keyword">self</span> addObject:value];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在文件中使用，示例如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 弱引用</span></span><br><span class="line">[array mz_weak_addObject:dog];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 此时 dog 的引用计数还是1</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br></pre></td></tr></table></figure><p>依次类推，对于其他集合类 <code>NSDictionary</code>、<code>NSSet</code> 都可以实现。当然实现方式不止这一种，这里只是举了一个 <code>NSValue</code> 包装对象来实现的例子。</p><p>当然你也可以使用 <code>NSProxy</code> 或者 <code>block</code> 来解除对对象的强引用。关于 <code>block</code> 的解除方法，可以参考开源项目 <a href="https://github.com/Magic-Unique/HXImage/blob/master/Plan%20B/WeakReference.m">HXImage</a>，另外开源项目 <a href="https://github.com/ibireme/YYKit/blob/master/YYKit/Utility/YYWeakProxy.m">YYWeakProxy</a> 里面使用了 <code>NSProxy</code> 来解除强引用。</p><p>那么，除了上面提到的方法，系统类库中有没有现成的类呢？聪明的你一定猜到了，一定有！</p><p>是的，往下看。。。</p><h2 id="NSPointerArray、NSMapTable、NSHashTable"><a href="#NSPointerArray、NSMapTable、NSHashTable" class="headerlink" title="NSPointerArray、NSMapTable、NSHashTable"></a>NSPointerArray、NSMapTable、NSHashTable</h2><p>集合类 <code>NSArray</code>、<code>NSDictionary</code> 和 <code>NSSet</code> 以及其对应的可变版本，都可以用来存储 OC对象的, 但是对其中的对象都是强引用的。</p><p>从 <code>iOS6.0</code> 版本及以后的版本中，系统给我们提供了 <code>NSPointerArray</code>、<code>NSMapTable</code> 和 <code>NSHashTable</code> 分别对应 <code>NSArray</code>、<code>NSDictionary</code> 和 <code>NSSet</code>，最大的不同就是，<code>NSPointerArray</code>、<code>NSMapTable</code> 和 <code>NSHashTable</code> 对对象是弱引用而不是强引用。</p><blockquote><p>现在大部分的 iOS APP 或者 iOS 游戏应该都至少在 iOS7 以上了吧，所以可以尽情使用这些系统提供的类库了。</p></blockquote><p>使用 <code>NSPointerArray</code> 保存弱引用的对象，需要使用下面三种方式来创建 <code>NSPointerArray</code> 对象，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 NSPointerArray 对象方式一</span></span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建 NSPointerArray 对象方式二</span></span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray1 = [[<span class="built_in">NSPointerArray</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建 NSPointerArray 对象方式三</span></span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray2 = [<span class="built_in">NSPointerArray</span> pointerArrayWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br></pre></td></tr></table></figure><p>那么下面还是以 <code>MZDog</code> 来举例子，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建 NSPointerArray 对象方式一</span></span><br><span class="line"><span class="comment">// 注意 weakObjectsPointerArray 而不是 strongObjectsPointerArray</span></span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</span><br><span class="line">[pointerArray addPointer:(__bridge <span class="keyword">void</span> *)(dog)];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建 NSPointerArray 对象方式二</span></span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray1 = [[<span class="built_in">NSPointerArray</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">[pointerArray1 addPointer:(__bridge <span class="keyword">void</span> *)(dog)];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建 NSPointerArray 对象方式三</span></span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray2 = [<span class="built_in">NSPointerArray</span> pointerArrayWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">[pointerArray2 addPointer:(__bridge <span class="keyword">void</span> *)(dog)];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// dog 引用计数还是1</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br></pre></td></tr></table></figure><p>对应的输出 <code>dog</code> 对象的 <code>retainCount</code> 仍然是 1，其引用计数没有增加。</p><p>对应 <code>NSMapTable</code> 和 <code>NSHashTable</code> 的示例如下：</p><p><strong>NSMapTable 示例</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 弱应用对象</span></span><br><span class="line"><span class="built_in">NSMapTable</span> *map = [<span class="built_in">NSMapTable</span> weakToWeakObjectsMapTable];</span><br><span class="line">[map setObject:dog forKey:<span class="string">@&quot;first&quot;</span>];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 引用计数还是1，没变</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br></pre></td></tr></table></figure><p><strong>NSHashTable 示例</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 弱应用对象</span></span><br><span class="line"><span class="built_in">NSHashTable</span> *hashTable = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">[hashTable addObject:dog];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 引用计数还是1，没变</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br></pre></td></tr></table></figure><h2 id="NSPointerArray-与-NULL"><a href="#NSPointerArray-与-NULL" class="headerlink" title="NSPointerArray 与 NULL"></a>NSPointerArray 与 NULL</h2><p>在 <code>NSMutableArray</code> 中添加的对象不可以是 <code>nil</code>，而 <code>NSPointerArray</code> 中却可存储 <code>NULL</code>(nil 经过转换得到C指针为 NULL)，也可以用来存储weak对象。weak类型的对象释放之后，<code>NSPointerArray</code> 的对应位置会自动变成 <code>NULL</code>，使用<code>count</code> 属性, 会将 <code>NULL</code> 元素也计算进来，即 NULL 算是它的一员。下面示例可以证明，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MZDog *dog = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</span><br><span class="line"><span class="keyword">void</span> *cobj = (__bridge <span class="keyword">void</span> *)(dog);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;obj: %@&quot;</span>, cobj); <span class="comment">//NULL</span></span><br><span class="line">[pointerArray addPointer:cobj];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然存储的是 NULL，但是 count 仍然是 1</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;pointerArray count: %zd&quot;</span>, [pointerArray count]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *array = [pointerArray allObjects];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;pointerArray allObjects: %@&quot;</span>, array);</span><br></pre></td></tr></table></figure><p>一般这样删除 <code>NSPointerArray</code> 中的 <code>NULL</code> 元素，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[pointerArray addPointer:<span class="literal">NULL</span>];</span><br><span class="line">[pointerArray compact];</span><br></pre></td></tr></table></figure><p>这里要注意，将OC对象转换为C指针要使用 <code>(__bridge void *)</code> 这种方式，不要使用 <code>(__bridge_retained void *)</code> 或者 <code>CFBridgingRetain</code>，这二者会对 <code>dog</code> 对象进行强引用。如下示例：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retainCount -&gt; 1</span></span><br><span class="line">MZDog *dog = [MZDog new];</span><br><span class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</span><br><span class="line"><span class="comment">// 这里会 retain dog 对象，使其引用计数加1，此时retainCount 是 2</span></span><br><span class="line">[pointerArray addPointer:(__bridge_retained <span class="keyword">void</span> *)dog];</span><br><span class="line"><span class="comment">// 这里会 retain dog 对象，使其引用计数再加1，retainCount 是 3</span></span><br><span class="line">[pointerArray addPointer:<span class="built_in">CFBridgingRetain</span>(dog)];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 此时的 retainCount 是 3</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dog: %@&quot;</span>, dog);</span><br></pre></td></tr></table></figure><p>如果你对 <code>(__bridge_retained void *)</code> 或者 <code>CFBridgingRetain</code> 感兴趣，可以看看 <a href="http://www.veryitman.com/2018/03/07/C-%E6%8C%87%E9%92%88%E4%B8%8E-OC-%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/">C 指针与 OC 对象之间的转换</a> 这篇文章。</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weak strong NSPointerArray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018，不会重来</title>
      <link href="/2018/12/31/2018%EF%BC%8C%E4%B8%8D%E4%BC%9A%E9%87%8D%E6%9D%A5/"/>
      <url>/2018/12/31/2018%EF%BC%8C%E4%B8%8D%E4%BC%9A%E9%87%8D%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>今天是2018年的最后一天，即2018年12月31日。提前祝愿所有人2019身体健康，万事如意，阖家幸福！</p><p>这篇文章 <a href="http://www.veryitman.com/2016/12/31/%E5%86%8D%E8%A7%81-2016/">再见 2016</a> 是在2016年末写的，算是一个hin随心的小结。比较遗憾的是在2017年没有给自己写个总结，所以，不能再错过2018了，我怕老了没有可以寻迹的回忆！</p><p>2018 有太多需要感谢的人了，感谢所有工作上，生活上关心、支持和鼓励我的人们，感谢我的家人给予了我太多的理解和包容，非常感谢你们！</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>2018年我的职业没有太大的变化，仍然是奋斗在一线工作岗位上的一名软件工程师，我喜欢这份职业，它没有过多的纷争，工程师之间的沟通简单、直接！</p><p>唯一和以前不同的是自己开始负责一个团队了，责任比以前要大了很多，压力也随之剧增。慢慢地，写代码变成了可望不可求的事情了，因为你要处理比写代码更重要的事情，比如团队的磨合，目标的制定，任务的规划等等一系列工作。</p><p>在 <code>《蚂蚁金服：科技金融独角兽的崛起》</code> 这本书里讲到过：</p><blockquote><p>作为领导，团队里每一个人的错误都是自己的错误，但团队里每一个人的成果未必是自己的成果，这时整个人的心态就需要重新调整。</p></blockquote><p>我算是一个比较幸运的人，因为团队中有很多比自己更优秀的人，他们有想法，有执行，总是能带动其他人积极的工作。这些人是团队学习的榜样，更是我们团队的财富。</p><p>公司在改变，各个方面也越来越成熟，无论是公司文化还是技术能力都在步步高升，今年尤为看到的是 CTO 对技术中台下定的一些决心，这是让人兴奋的。公司一直在强调赋能，把更多优秀、有担当、有责任心的人提拔上来，给他们配备资源，以便发挥他们更大的潜能，大家工作的热情也更上一层楼，因为公司相信他们。</p><p>很多时候，并不是你身边没有优秀的人，只是你不愿意相信他们，前怕狼后怕虎的心态阻止了这些优秀人的发挥。其实，他们只是需要你一个肯定的答复，所以试着去改变自己，相信团队里面的每个人，给他们更多的肯定，鼓励和支持他们，结果不会让你失望的。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>自从老婆孩子回老家之后，我就过上了“单身“的生活，每天早出晚归，努力用工作来代替对他们的思念。</p><p>我家的大宝是个天生的运动狂，感觉他总是有用不完的力气，除非他自己在拼图或者画画，否则你甭想清静。一会在家里穿上溜冰鞋给你表演各种溜冰技能，一会拿起篮球给你表演球技，再不是就让你陪他玩跳棋。</p><p>老婆大人在家待产了，自己一个人挺着肚子还要给大宝做饭，每天接送他去学校，知道她一个人在家不容易，我也经常鼓励她，她说：“为了孩子，这点苦不算什么！”。有时候，想一想二宝快要跟我们见面了，挺兴奋的。</p><p>有时候挺想念他们娘俩的，工作不忙的时候我也会请假回老家，记得上次回去离开的时候，儿子问了我一个问题，他说：“爸爸，你说是钱重要，还是人重要？”，我当时愣了一下，告诉他：“当然是人重要呀！”，他不开心的点了点头。显然，这家伙对我的离开很不满意，那天晚上我赶火车走的时候，大宝在被窝里哭了很久，其实，我也流泪了，只是不愿意承认罢了！</p><p>你自己除了是一名员工之外，还是一名儿子、女儿，或者是一名父亲、母亲，一名丈夫、妻子，只有处理好生活上面的事情，才能更好的投入到工作当中来。无论如何，人还是需要有梦想的！我的梦想就是努力学习更多有用的知识，然后用自己的知识去教育自己的子女，让他们将来能有更好的生活，做一个有用的社会人。</p><p>用电影《中国合伙人》成东青的一句话来说：“梦想是什么，梦想就是一种让你感到坚持就是幸福的东西！”。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>这些年，自己唯一没有丢弃的爱好就是阅读。</p><p>工作上的忙碌，生活上的疲惫，很多时候让我们无法静下心来去阅读，甚至有时候会觉得阅读简直在浪费时间，浪费生命。如果你有这种想法，建议你请假去好好休息几天，抛开喧嚣的尘世，放空一下自己。</p><p>我一直坚持阅读，无论是技术书籍还是人文历史，抑或人物传记，平时工作也很忙，我就利用零散的时间来阅读，就算这样，每周每个月累计下来阅读量也不少了，随着阅读量的增多，感觉自己的气色好了很多，因为心态好了，遇事比以前更加沉着冷静了，也更加理性了。</p><blockquote><p>您的气质里藏着你读过的那些书。</p></blockquote><p>今年读到自认为不错的书籍，推荐给大家：</p><p><strong>1. 蚂蚁金服：科技金融独角兽的崛起</strong><br><img src="/upload/images/2018/12/31/1.jpg"></p><p><strong>2. 赋能：打造应对不确定性的敏捷团队</strong><br><img src="/upload/images/2018/12/31/2.jpg"></p><p><strong>3. 我的情绪为何总被他人左右</strong><br><img src="/upload/images/2018/12/31/3.jpg"></p><p><strong>4. 终身成长</strong><br><img src="/upload/images/2018/12/31/4.jpg"></p><h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p><strong>1. 加强对上沟通</strong></p><p>沟通不能仅限于对下沟通，对上沟通尤为重要，让上级知道目前项目的进度和规划，以及遇到的问题。这一点自己做的还不够好，在2019年要加强。</p><p><strong>2. 加强自我管理</strong></p><p>管理，不是管理别人，而是要管理好自己，没有人愿意被管理，如果有需要被严格管理的，他可能不适合在你的团队中生存。加强自我管理是我们每个人的目标。</p><p><strong>3. 个人、团队技术能力再上一层楼</strong></p><p>补齐自己的短板，想尽一切办法提高自己和团队其他技术人员的技术能力，在稳定、高效的同时寻找更多自我成长的途径和方法。</p><p><strong>4.更加关心自己的家人和身边的朋友</strong></p><p>没有家人的支持和鼓励，你很难去投入工作，所以要好好的对待自己的家人，多关心他们，家人对你的要求不多，往往只需要知道你有没有惦记他们就够了。当然了，我很期待和我们家的二宝见面，嘿嘿😜！</p><p>朋友多了，路才好走，记得跟朋友多聊天，多听听他们的故事，最重要的是经常约他们喝喝酒。</p><hr><p>最后分享给大家一句话，共勉：</p><blockquote><p>你的目的不是给谁打工，而是成为更好的自己，建设更好的未来！所以尽快去调整心态，停止抱怨，立即行动，积极沟通！</p></blockquote><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSString、NSMutableString 可变与不可变的那些事儿</title>
      <link href="/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇文章的主要包含如下内容：</p><ul><li>可变对象和不可变对象</li><li>NSString 的 copy 和 mutableCopy</li><li>NSMutableString 的 copy 和 mutableCopy</li><li>property 中 copy、strong 修饰 NSString</li><li>property 中 copy、strong 修饰 NSMutableString</li></ul><p>很多 iOS 开发的朋友会争论一个问题，我用 <code>copy</code> 和 <code>strong</code> 来修饰 <code>NSString</code> 对象都是一样的效果，在大部分情况下，这二者确实是没有区别，但是在特殊情况下，二者截然不同，所以我们必须搞清楚里面的道道。</p><p>我已经尽力简化了这篇文章的内容了，但依然需要你花个15分钟左右的时间，所以当你心情不错又没有其他事情的情况下，就可以来阅读了。</p><h2 id="可变对象和不可变对象"><a href="#可变对象和不可变对象" class="headerlink" title="可变对象和不可变对象"></a>可变对象和不可变对象</h2><p>在 <code>Objective-C</code> 中最常用来处理字符串的是 <code>NSString</code> 与 <code>NSMutableString</code> 这两个类，<code>NSString</code> 被创建赋值后字符串的内容与长度不能再做动态的修改，除非重新给这个字符串赋值。而 <code>NSMutableString</code> 被创建赋值后可以动态的修改字符串的内容。</p><p>那么简单来说，可变对象是指，对象的内容是可变的，例如 <code>NSMutableString</code> 对象。不可变的对象则相反，表示其内容不可变，例如 <code>NSString</code> 对象。</p><p>可变与不可变是针对对象来说的。在实际开发中，要根据实际的业务场景来选择使用可变还是不可变对象。今天我们只讨论 <code>Objective-C</code> 中 <code>NSString</code> 与 <code>NSMutableString</code> 这两个类，关于其他集合类的可变与不可变特性，后面专门再来写文章分享。</p><h2 id="NSString-的-copy-和-mutableCopy"><a href="#NSString-的-copy-和-mutableCopy" class="headerlink" title="NSString 的 copy 和 mutableCopy"></a>NSString 的 copy 和 mutableCopy</h2><p>在 <code>NSString.h</code> 中，我们可以看到其定义如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>, <span class="title">NSMutableCopying</span>, <span class="title">NSSecureCoding</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>NSString.h</code> 本身实现了 <code>NSCopying</code>, <code>NSMutableCopying</code> 这两个协议，协议的定义如下内容所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSCopying</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="keyword">nullable</span> <span class="built_in">NSZone</span> *)zone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSMutableCopying</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="keyword">nullable</span> <span class="built_in">NSZone</span> *)zone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>也就是说，我们可以针对 <code>NSString</code> 对象进行 <code>copy</code> 和 <code>mutableCopy</code> 的操作，妥妥的。</p><p>举一个简单的栗子，示例代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *name = <span class="string">@&quot;www.&quot;</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name addr: %p, name content: %@&quot;</span>, name, name);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSString</span> *name1 = name;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name1 addr: %p, name1 content: %@&quot;</span>, name1, name1);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSString</span> *name2 = [name <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name2 addr: %p, name2 content: %@&quot;</span>, name2, name2);</span><br></pre></td></tr></table></figure><p>输出结果，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name  addr: <span class="number">0x10090ecf8</span>, name  content: www.</span><br><span class="line">name1 addr: <span class="number">0x10090ecf8</span>, name1 content: www.</span><br><span class="line">name2 addr: <span class="number">0x10090ecf8</span>, name2 content: www.</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，三个对象的内容和地址都是一样的，经过 <code>name</code> 对象 <code>copy</code> 后的 <code>name2</code> 与 <code>name</code> 还是指向同一块内存地址。</p><p>在断点过程中，发现无论是 <code>name</code> 还是 <code>name1</code>、<code>name2</code> 对象，其都是 <code>ConstantString</code>，表明三者都是不可变对象，如下图所示：<br><img src="/upload/images/2018/12/30/1.jpg"></p><p>从这张图也说明了一个问题，<code>NSString</code> 对象经过 <code>copy</code> 后仍然是不可变对象。</p><p>紧接着，我们再来看看 <code>mutableCopy</code> 的使用情况，例子如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *name = <span class="string">@&quot;www.&quot;</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name addr: %p, name content: %@&quot;</span>, name, name);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSString</span> *name1 = name;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name1 addr: %p, name1 content: %@&quot;</span>, name1, name1);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSString</span> *name2 = [name <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name2 addr: %p, name2 content: %@&quot;</span>, name2, name2);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">id</span> name3 = [name mutableCopy];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name3 addr: %p, name3 content: %@&quot;</span>, name3, name3);</span><br></pre></td></tr></table></figure><p>对象 <code>name3</code> 是经过 <code>name</code> 对象 <code>mutableCopy</code> 后的，这个时候因为我不确定 <code>name3</code> 到底是可变的还是不可变的，所以采用了 <code>id</code> 来修饰 <code>name3</code> 对象。</p><p>可以看一下输出内容：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name  addr: <span class="number">0x104a6acf8</span>, name  content: www.</span><br><span class="line">name1 addr: <span class="number">0x104a6acf8</span>, name1 content: www.</span><br><span class="line">name2 addr: <span class="number">0x104a6acf8</span>, name2 content: www.</span><br><span class="line">name3 addr: <span class="number">0x1c0052cf0</span>, name3 content: www.</span><br></pre></td></tr></table></figure><p>可以看出，<code>name3</code> 的地址变了，再看一下断点的截图：<br><img src="/upload/images/2018/12/30/2.jpg"></p><p>充分说明了 <code>name3</code> 经过不可变的 <code>name</code> 进行<code>mutableCopy</code> 后变成了可变对象。那么可以将上面的示例代码稍作修改：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableString</span> *name3 = [name mutableCopy];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name3 addr: %p, name3 content: %@&quot;</span>, name3, name3);</span><br><span class="line">[name3 appendString:<span class="string">@&quot;veryitman.com&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name3 addr: %p, name3 content: %@&quot;</span>, name3, name3);</span><br></pre></td></tr></table></figure><p>从下面的输出结果也充分说明了 <code>name3</code> 经过不可变的 <code>name</code> 进行 <code>mutableCopy</code> 后变成了可变对象。输出结果如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name3 addr: <span class="number">0x1d0058270</span>, name3 content: www.veryitman.com</span><br></pre></td></tr></table></figure><p><strong>结论 1：</strong></p><ul><li>不可变的 <code>NSString</code> 对象经过 <code>copy</code> 后，还是不可变对象。</li><li>不可变的 <code>NSString</code> 对象经过 <code>mutableCopy</code> 后，变成了可变的 <code>NSMutableString</code> 对象。</li></ul><h2 id="NSMutableString-的-copy-和-mutableCopy"><a href="#NSMutableString-的-copy-和-mutableCopy" class="headerlink" title="NSMutableString 的 copy 和 mutableCopy"></a>NSMutableString 的 copy 和 mutableCopy</h2><p>类 <code>NSMutableString</code> 继承自 <code>NSString</code> 的，其当然也是实现了 <code>NSCopying</code>, <code>NSMutableCopying</code> 这两个协议的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@interface NSMutableString : NSString</span><br></pre></td></tr></table></figure><p>我们还是看例子，示例代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableString</span> *name = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@&quot;www.&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name  addr: %p, name  content: %@&quot;</span>, name, name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单赋值</span></span><br><span class="line"><span class="built_in">NSMutableString</span> *name1 = name;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name1 addr: %p, name1 content: %@&quot;</span>, name1, name1);</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 使用 copy    </span></span><br><span class="line"><span class="keyword">id</span> name2 = [name <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name2 addr: %p, name2 content: %@&quot;</span>, name2, name2);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用 mutableCopy   </span></span><br><span class="line"><span class="keyword">id</span> name3 = [name mutableCopy];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name3 addr: %p, name3 content: %@&quot;</span>, name3, name3);</span><br></pre></td></tr></table></figure><p>因为事先我们不知道 <code>NSMutableString</code> 经过 <code>copy</code> 和 <code>mutableCopy</code> 之后到底会变成可变还是不可变，上面的例子暂时将 <code>name2</code> 和 <code>name3</code> 用 <code>id</code> 来表示。</p><p>断点截图如下：<br><img src="/upload/images/2018/12/30/3.jpg"></p><p>结合一下输出的日志：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name  addr: <span class="number">0x1d044a980</span>, name  content: www.</span><br><span class="line">name1 addr: <span class="number">0x1d044a980</span>, name1 content: www.</span><br><span class="line">name2 addr: <span class="number">0xa0000002e7777774</span>, name2 content: www.</span><br><span class="line">name3 addr: <span class="number">0x1d044a5f0</span>, name3 content: www.</span><br></pre></td></tr></table></figure><p>可以看出 <code>name2</code> 是一个不可变的 <code>NSString</code> 对象， <code>name</code>、<code>name1</code> 和 <code>name3</code> 都是可变的 <code>NSMutableString</code> 对象。</p><p>也可以从另外一个角度来验证一下上面的说法，我们修改一下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableString</span> *name2 = [name <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name2 addr: %p, name2 content: %@&quot;</span>, name2, name2);</span><br><span class="line">[name2 appendString:<span class="string">@&quot;veryitman.com&quot;</span>];</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSMutableString</span> *name3 = [name mutableCopy];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name3 addr: %p, name3 content: %@&quot;</span>, name3, name3);</span><br><span class="line">[name3 appendString:<span class="string">@&quot;veryitman.com&quot;</span>];</span><br></pre></td></tr></table></figure><p>运行后，可以看到，代码 <code>[name2 appendString:@&quot;veryitman.com&quot;]</code> 这里会引起 Crash，报错内容如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> -[<span class="built_in">NSTaggedPointerString</span> appendString:]: unrecognized selector sent to instance <span class="number">0xa0000002e7777774</span></span><br><span class="line"> </span><br><span class="line">*** Terminating app due to uncaught exception <span class="string">&#x27;NSInvalidArgumentException&#x27;</span></span><br><span class="line"></span><br><span class="line">reason: <span class="string">&#x27;-[NSTaggedPointerString appendString:]: unrecognized selector sent to instance 0xa0000002e7777774&#x27;</span></span><br></pre></td></tr></table></figure><p>也充分说明了，<code>name2</code> 是一个不可变的 <code>NSString</code> 对象。</p><p><strong>结论 2：</strong></p><ul><li>可变的 <code>NSMutableString</code> 对象经过 <code>copy</code> 后，会变成不可变的 <code>NSString</code> 对象。</li><li>可变的 <code>NSMutableString</code> 对象经过 <code>mutableCopy</code> 后，仍然是可变的 <code>NSMutableString</code> 对象。</li></ul><h2 id="copy、strong-修饰-NSString"><a href="#copy、strong-修饰-NSString" class="headerlink" title="copy、strong 修饰 NSString"></a>copy、strong 修饰 NSString</h2><p>创建 Employee 文件，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Employee</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *userName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>其 <code>userName</code> 属性是 <code>copy</code>。</p><p>使用示例，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Employee *employee = [Employee new];</span><br><span class="line">employee.userName = <span class="string">@&quot;John&quot;</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;--before-- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 创建一个可变对象</span></span><br><span class="line"><span class="built_in">NSMutableString</span> *newUserName = [[<span class="built_in">NSMutableString</span> alloc] initWithString:<span class="string">@&quot;new_user_name&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;newUserName addr: %p, newUserName content: %@&quot;</span>, newUserName, newUserName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</span></span><br><span class="line">employee.userName = newUserName;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;---after1--- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 试图改变 newUserName 的内容，看 employee.userName 的内容是否改变</span></span><br><span class="line">[newUserName appendString:<span class="string">@&quot;_hello&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// newUserName 的内容被改变成了 new_user_name_hello</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;newUserName addr: %p, newUserName content: %@&quot;</span>, newUserName, newUserName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// employee.userName 的内容未变化</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;---after2--- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Crash，因为 employee.userName 还是不可变对象</span></span><br><span class="line"><span class="comment">// [(NSMutableString *)(employee.userName) appendString:@&quot;nana&quot;];</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，故意将 <code>NSMutableString</code> 对象 <code>newUserName</code> 赋值给不可变的 <code>NSString</code> 对象 <code>employee.userName</code>，看一下输出结果，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--before-- employee.userName addr: <span class="number">0x100096cf8</span>, employee.userName content: John</span><br><span class="line"></span><br><span class="line">newUserName addr: <span class="number">0x174070a00</span>, newUserName content: new_user_name</span><br><span class="line"></span><br><span class="line">---after1--- employee.userName addr: <span class="number">0x174023b80</span>, employee.userName content: new_user_name</span><br><span class="line"></span><br><span class="line">newUserName addr: <span class="number">0x174070a00</span>, newUserName content: new_user_name_hello</span><br><span class="line"></span><br><span class="line">---after2--- employee.userName addr: <span class="number">0x174023b80</span>, employee.userName content: new_user_name</span><br></pre></td></tr></table></figure><p>按照 </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可变的 `<span class="built_in">NSMutableString</span>` 对象经过 `<span class="keyword">copy</span>` 后，会变成不可变的 `<span class="built_in">NSString</span>` 对象。</span><br></pre></td></tr></table></figure><p>这个结论来看，<code>employee.userName</code> 肯定是不可变的对象，即使改变 <code>newUserName</code> 的内容也不会影响 <code>employee.userName</code> 这个对象的内容。</p><p>那么，我们将 <code>employee.userName</code> 的属性修饰符 <code>copy</code> 改为 <code>strong</code>，又会是什么样子呢？</p><p>我们修改两处代码</p><p><strong>Employee.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Employee</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@property (nonatomic, copy) NSString *userName;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *userName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>示例代码，只是打开之前会 crash 的部分</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// employee.userName 经过 strong 修饰过后， 彻底变成了可变对象</span></span><br><span class="line">[(<span class="built_in">NSMutableString</span> *)(employee.userName) appendString:<span class="string">@&quot;_oc&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;---after3--- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br></pre></td></tr></table></figure><p>看一下输出日志：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--before-- employee.userName addr: <span class="number">0x1000a6cf8</span>, employee.userName content: John</span><br><span class="line"></span><br><span class="line">newUserName addr: <span class="number">0x17426b280</span>, newUserName content: new_user_name</span><br><span class="line"></span><br><span class="line">---after1--- employee.userName addr: <span class="number">0x17426b280</span>, employee.userName content: new_user_name</span><br><span class="line"></span><br><span class="line">newUserName addr: <span class="number">0x17426b280</span>, newUserName content: new_user_name_hello</span><br><span class="line"></span><br><span class="line">---after2--- employee.userName addr: <span class="number">0x17426b280</span>, employee.userName content: new_user_name_hello</span><br><span class="line"></span><br><span class="line">---after3--- employee.userName addr: <span class="number">0x17426b280</span>, employee.userName content: new_user_name_hello_oc</span><br></pre></td></tr></table></figure><p>可以看到 <code>employee.userName</code> 最终和 <code>newUserName</code> 的地址、内容完全相同了，彻底变成了可变对象。</p><p>另外，如果不是将可变的 <code>NSMutableString</code> 对象赋值给不可变的 <code>NSString</code> 对象，换句话说，<code>NSString</code> 对 <code>NSString</code> 赋值，那么使用 <code>strong</code> 和 <code>copy</code> 效果都是一样的。</p><p>示例代码（无论 <code>employee.userName</code> 使用 <code>strong</code> 还是 <code>copy</code>，效果都是 <code>employee.userName</code> 不可变的）：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Employee *employee = [Employee new];</span><br><span class="line">employee.userName = <span class="string">@&quot;John&quot;</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;--before-- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建一个不可变对象</span></span><br><span class="line"><span class="built_in">NSString</span> *newUserName = <span class="string">@&quot;new_user_name&quot;</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;newUserName addr: %p, newUserName content: %@&quot;</span>, newUserName, newUserName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</span></span><br><span class="line">employee.userName = newUserName;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;---after1--- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br></pre></td></tr></table></figure><h2 id="copy、strong-修饰-NSMutableString"><a href="#copy、strong-修饰-NSMutableString" class="headerlink" title="copy、strong 修饰 NSMutableString"></a>copy、strong 修饰 NSMutableString</h2><p>在 property 的修饰语中，只有 <code>copy</code> 修饰语而没有 <code>mutableCopy</code> 的修饰语。</p><p><strong>Employee.h</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface Employee : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSMutableString *userName;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Employee *employee = [Employee new];</span><br><span class="line">employee.userName = [NSMutableString stringWithString:@&quot;John&quot;];</span><br><span class="line">NSLog(@&quot;--before-- employee.userName addr: %p, employee.userName content: %@&quot;, employee.userName, employee.userName);</span><br><span class="line"></span><br><span class="line">// 创建一个可变对象</span><br><span class="line">NSMutableString *newUserName = [NSMutableString stringWithFormat:@&quot;new_user_name&quot;];</span><br><span class="line">NSLog(@&quot;newUserName addr: %p, newUserName content: %@&quot;, newUserName, newUserName);</span><br><span class="line"></span><br><span class="line">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</span><br><span class="line">employee.userName = newUserName;</span><br><span class="line">NSLog(@&quot;---after1--- employee.userName addr: %p, employee.userName content: %@&quot;, employee.userName, employee.userName);</span><br><span class="line">    </span><br><span class="line">// employee.userName 虽然是 NSMutableString 对象，但经过 copy 修饰过后，仍然是不可变对象</span><br><span class="line">// 所以，运行到这里会引起 crash</span><br><span class="line">[employee.userName appendString:@&quot;_oc&quot;];</span><br><span class="line">NSLog(@&quot;---after2--- employee.userName addr: %p, employee.userName content: %@&quot;, employee.userName, employee.userName);</span><br></pre></td></tr></table></figure><p>可以看出 <code>copy</code> 后的的可变对象还是不可变的。</p><p>那么，我们将 <code>employee.userName</code> 的属性修饰符 <code>copy</code> 改为 <code>strong</code>，又会是什么样子呢？</p><p><strong>Employee.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Employee</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *userName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Employee *employee = [Employee new];</span><br><span class="line">employee.userName = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@&quot;John&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;--before-- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可变对象</span></span><br><span class="line"><span class="built_in">NSMutableString</span> *newUserName = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@&quot;new_user_name&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;newUserName addr: %p, newUserName content: %@&quot;</span>, newUserName, newUserName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</span></span><br><span class="line">employee.userName = newUserName;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;---after1--- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// employee.userName 虽然是 NSMutableString 对象，但经过 strong 修饰过后，变成了可变对象</span></span><br><span class="line">[employee.userName appendString:<span class="string">@&quot;_hello&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;---after2--- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br><span class="line">    </span><br><span class="line">[newUserName appendString:<span class="string">@&quot;_oc&quot;</span>];</span><br><span class="line"><span class="comment">// newUserName 的内容被改变成了 new_user_name_hello_oc</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;newUserName addr: %p, newUserName content: %@&quot;</span>, newUserName, newUserName);</span><br><span class="line"><span class="comment">// employee.userName 的内容发生了变化</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;---after2--- employee.userName addr: %p, employee.userName content: %@&quot;</span>, employee.userName, employee.userName);</span><br></pre></td></tr></table></figure><p>经过 <code>strong</code> 修饰后，可变的 <code>NSMutableString</code> 对象还是可变的对象。</p><p>在这个部分的开始，说过在 property 中没有 <code>mutableCopy</code> 的修饰语，那么我们能否达到 <code>mutableCopy</code> 的效果呢？</p><p>很显然是可以的，我们可以重写属性的 <code>set</code> 方法，改造一下 <code>Employee</code> 的代码，如下：</p><p><strong>Employee.h</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface Employee : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSMutableString *userName;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><strong>Employee.m</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;Employee.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Employee</span><br><span class="line"></span><br><span class="line">- (void)setUserName:(NSMutableString *)userName</span><br><span class="line">&#123;</span><br><span class="line">    _userName = [userName mutableCopy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这样，就达到了和是 <code>strong</code> 修饰语一样的效果了。</p><p>大家，可以使用同样的方法来实践一下 <code>NSArray</code>、<code>NSMutableArry</code> 等集合数据的 <code>copy</code> 以及 <code>mutableCopy</code> 的效果了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>不可变的 <code>NSString</code> 对象经过 <code>copy</code> 后，还是不可变对象。</p></li><li><p>不可变的 <code>NSString</code> 对象经过 <code>mutableCopy</code> 后，变成了可变的 <code>NSMutableString</code> 对象。</p></li><li><p>可变的 <code>NSMutableString</code> 对象经过 <code>copy</code> 后，会变成不可变的 <code>NSString</code> 对象。</p></li><li><p>可变的 <code>NSMutableString</code> 对象经过 <code>mutableCopy</code> 后，仍然是可变的 <code>NSMutableString</code> 对象。</p></li><li><p>不可变的 <code>NSString</code> 对象在 property 中，尽量使用 <code>copy</code> 来修饰，因为使用 <code>strong</code> 修饰符可变字符串如果给不可变字符串赋值后，会导致你原本预期发生了变化，除非你有特殊的目的才使用 <code>strong</code> 修饰符。</p></li><li><p>可变的 <code>NSMutableString</code> 对象在 property 中，尽量使用 <code>strong</code> 来修饰，除非你有特殊的目的才使用 <code>copy</code> 修饰符。</p></li><li><p>虽然在 property 中没有 <code>mutableCopy</code> 修饰符，但是可以通过重写其 <code>set</code> 方法来达到目的。</p></li></ul><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSString NSMutableString copy mutableCopy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC: self</title>
      <link href="/2018/12/23/OC-self/"/>
      <url>/2018/12/23/OC-self/</url>
      
        <content type="html"><![CDATA[<p>为了更好的说明 Objective-C 中的 <code>self</code>，我们先从 Java 的 <code>this</code> 关键字开始来引入话题。</p><h2 id="Java-中的-this"><a href="#Java-中的-this" class="headerlink" title="Java 中的 this"></a>Java 中的 this</h2><p>在 Java 中 <code>this</code> 关键字表示当前类对象，其只能在类的非静态方法中使用，静态方法和静态的代码块中绝对不能出现 <code>this</code>，<code>this</code> 只和特定的对象关联，而不和类关联，同一个类的不同对象有不同的 <code>this</code>.</p><p>先看一个 Java 示例，能说明上面的问题，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态代码块中也不可以使用 this</span></span><br><span class="line"><span class="comment">// Error: non-static variable this cannot be referenced from a static context</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// this.eat();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;play()&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this 调用类方法</span></span><br><span class="line">    <span class="built_in">this</span>.eat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this 调用实例方法</span></span><br><span class="line">    <span class="built_in">this</span>.finish();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;static eat()&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可以在类方法中使用 this</span></span><br><span class="line">    <span class="comment">// Error: non-static variable this cannot be referenced from a static context</span></span><br><span class="line">    <span class="comment">// this.play();</span></span><br><span class="line">    <span class="comment">// System.out.println(this);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;finish()&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过实际的 Java 例子，基本表明了在静态方法和实例方法中 <code>this</code> 的使用场景。</p><h2 id="Objective-C-中的-self"><a href="#Objective-C-中的-self" class="headerlink" title="Objective-C 中的 self"></a>Objective-C 中的 self</h2><p>在 <code>Objective-C</code> 中，<code>self</code> 是一个比较特殊的对象，它既可以是实例对象也可以是类对象，有点类似于上面 Java 中的 <code>this</code> 关键字。</p><p>下面结合实际例子，来说明 <code>self</code> 这个关键字。</p><h3 id="1、实例方法中的-self"><a href="#1、实例方法中的-self" class="headerlink" title="1、实例方法中的 self"></a>1、实例方法中的 self</h3><p>实例方法中的 <code>self</code> 可以直接调用实例方法但不可以直接调用类方法，如下示例中，调用实例方法 <code>finish</code>没有问题，而调用类方法 <code>eat</code> 直接报编译错误。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)play</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;- (void)play&#x27; ------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;self: %@, self -&gt; %p&quot;</span>, <span class="keyword">self</span>, <span class="keyword">self</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无法使用 self 来调用类方法</span></span><br><span class="line">    <span class="comment">// Error: No visible @interface for &#x27;MZPerson&#x27; declares the selector &#x27;eat&#x27;</span></span><br><span class="line">    <span class="comment">// [self eat];</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用实例方法</span></span><br><span class="line">    [<span class="keyword">self</span> finish];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)eat</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;+ (void)eat&#x27; ------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)finish</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;--------------- &#x27;- (void)finish&#x27; ----------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，在实例方法中可以直接通过&#96;&#96;[类 类方法]<code>的方式来调用类方法，那么如果想在实例方法中使用</code>self&#96; 关键字，如何办呢？</p><p>很简单，使用 <code>[self class]</code> 即可。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)play</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;- (void)play&#x27; ------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;self: %@, self -&gt; %p&quot;</span>, <span class="keyword">self</span>, <span class="keyword">self</span>);</span><br><span class="line">    </span><br><span class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] eat];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>class</code> 后续再分享给大家，这里只需要知道可以这么使用就好了。</p><h3 id="2、类方法中的-self"><a href="#2、类方法中的-self" class="headerlink" title="2、类方法中的 self"></a>2、类方法中的 self</h3><p>这个跟 Java 的 <code>this</code> 有点不一样，上面的 Java 示例中我们可以看到无论是打印 <code>this</code> 还是使用 <code>this</code> 调用方法都不可以，但是在 <code>Objective-C</code> 中却可以使用 <code>self</code>，只是不能使用 <code>self</code> 来调用实例方法和实例变量。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)eat</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;+ (void)eat&#x27; ------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// No known class method for selector &#x27;finish&#x27;</span></span><br><span class="line">    <span class="comment">// [self finish];</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用类方法</span></span><br><span class="line">    [<span class="keyword">self</span> beat];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印 self</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;self: %@&quot;</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)beat</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;+ (void)beat&#x27; ------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么为什么在类方法中可以使用 <code>self</code> 呢？</p><p>别着急，接着往下看。</p><h3 id="3、实例和类方法中的-self-区别"><a href="#3、实例和类方法中的-self-区别" class="headerlink" title="3、实例和类方法中的 self 区别"></a>3、实例和类方法中的 self 区别</h3><p>其实，在类方法中，<code>self</code> 表示当前类对象，在实例方法中 <code>self</code> 表示实例对象，这个是本质区别，务必要理解透彻。</p><p>举个例子，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)play</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;- (void)play&#x27; ------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;self: %@, self -&gt; %p&quot;</span>, <span class="keyword">self</span>, <span class="keyword">self</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印对应的类地址</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;self class: %p&quot;</span>, [<span class="keyword">self</span> <span class="keyword">class</span>]);</span><br><span class="line">    </span><br><span class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] eat];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)eat</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;+ (void)eat&#x27; ------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// No known class method for selector &#x27;finish&#x27;</span></span><br><span class="line">    <span class="comment">// [self finish];</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印 self 地址</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;self: %p&quot;</span>, <span class="keyword">self</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用类方法</span></span><br><span class="line">    [<span class="keyword">self</span> beat];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)beat</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;+ (void)beat&#x27; ------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印 self 地址</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;self: %p&quot;</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实例方法 <code>play</code> 中打印类地址，在类方法 <code>eat</code> 和 <code>beat</code> 中打印 <code>self</code> 的地址，输出结果是一样的，都是 <code>0x10adb3f98</code> 这个地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---------------- &#x27;- (void)play&#x27; ------------------</span><br><span class="line">self: &lt;MZPerson: 0x6000000d8f90&gt;, self -&gt; 0x6000000d8f90</span><br><span class="line">self class: 0x10adb3f98</span><br><span class="line">---------------- &#x27;+ (void)eat&#x27; ------------------</span><br><span class="line">self: 0x10adb3f98</span><br><span class="line">---------------- &#x27;+ (void)beat&#x27; ------------------</span><br><span class="line">self: 0x10adb3f98</span><br></pre></td></tr></table></figure><p>为了更好的说明，我给大家再举一个形象的例子帮助大家理解。</p><p>在 <code>MZPerson</code> 中声明两个方法，方法同名，一个是实例方法，另一个是类方法，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MZPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)play;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)play;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)eat;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)finish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZPerson</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)play</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;- (void)play&#x27; ------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)play</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;+ (void)play&#x27; ------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)eat</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;+ (void)eat&#x27; ------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> play];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)finish</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------- &#x27;- (void)finish&#x27; ------------------&quot;</span>);</span><br><span class="line">    [<span class="keyword">self</span> play];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在类方法 <code>eat</code> 中调用 <code>[self play]</code> 在实例方法 <code>finish</code> 中也调用 <code>[self play]</code>，那么结果如何呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---------------- &#x27;- (void)finish&#x27; ---------------</span><br><span class="line">---------------- &#x27;- (void)play&#x27; -----------------</span><br><span class="line"></span><br><span class="line">---------------- &#x27;+ (void)eat&#x27; ------------------</span><br><span class="line">---------------- &#x27;+ (void)play&#x27; -----------------</span><br></pre></td></tr></table></figure><p>可以看出符合如期，类和实例方法中的 self 分别代表类本身和实例对象。</p><p><code>self</code> 表示谁，在运行时是由编译器来决定的。</p><h3 id="4、每个实例对象的-self-都是不一样的"><a href="#4、每个实例对象的-self-都是不一样的" class="headerlink" title="4、每个实例对象的 self 都是不一样的"></a>4、每个实例对象的 self 都是不一样的</h3><p>这个跟 Java 的 <code>this</code> 是一样的，每个类的实例对象对应的 <code>this</code> 都是不一样的，<code>self</code> 亦如此。</p><p>下面的例子，分别创建两个 MZPerson 实例对象，然后分别调用<code>play</code> 方法，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MZPerson *iperson1 = [MZPerson new];</span><br><span class="line">[iperson1 play];</span><br><span class="line">    </span><br><span class="line">MZPerson *iperson2 = [MZPerson new];</span><br><span class="line">[iperson2 play];</span><br></pre></td></tr></table></figure><p>输出结果表明了上面说法的正确性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---------------- &#x27;- (void)play&#x27; ------------------</span><br><span class="line">self: &lt;MZPerson: 0x600000576ee0&gt;, self -&gt; 0x600000576ee0</span><br><span class="line">---------------- &#x27;- (void)play&#x27; ------------------</span><br><span class="line">self: &lt;MZPerson: 0x600000576f40&gt;, self -&gt; 0x600000576f40</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在继承关系中，使用 <code>self</code> 调用方法时，首先从当前类的方法列表中开始寻找，如果没有再从父类中寻找。</p><p>运行时(runtime)会使用 <code>objc_msgSend</code> 向对象发送消息，这个也是调用方法的本质。</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Objective-C self keyword </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark: 分析 TCP 四次挥手</title>
      <link href="/2018/12/16/Wireshark-%E5%88%86%E6%9E%90-TCP-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2018/12/16/Wireshark-%E5%88%86%E6%9E%90-TCP-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先要明白 <code>TCP</code> 协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><p>其次，<code>TCP</code> 是全双工模式，需要两边的连接全部关闭，此 TCP 会话才算完全关闭，四次挥手使得 <code>TCP</code> 的全双工连接能够可靠的终止。</p><p><code>TCP</code> 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 <code>close()</code> 操作即可产生挥手操作。</p><p>下面根据客户端(IP: 10.4.17.176)请求服务端(IP: 116.211.186.208) 来分析四次挥手(four-way handshake)的过程。</p><p>这里需要注意一个问题，任何一方执行 <code>close()</code> 操作即可产生挥手操作，所以断开连接端可以是 <code>Client</code> 端，也可以是 <code>Server</code> 端。</p><p>在阅读下面内容之前，我假设你已经阅读过 <a href="http://www.veryitman.com/2018/09/09/Wireshark-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-TCP-%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B/">Wireshark: 简单分析 TCP 三次挥手</a> 这篇文章。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用 iOS 设备的浏览器客户端 <code>Safari</code> 访问 <code>116.211.186.208</code> 这个网站，关于如何开启 iOS 设备的虚拟网卡可以参考 <a href="http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/">初识 Wireshark</a> 这篇文章。</p><p>针对 <code>HTTP</code> 的请求，可以进行 <code>Follow</code>，选择 <code>TCP Stream</code> 即可，如下图所示：<br><img src="/upload/images/2018/12/16/1.jpg"></p><p>此时，可以看到四次挥手的抓包情况，如下图所示：<br><img src="/upload/images/2018/12/16/2.jpg"><br>另外，从上图中可以看出，首先发起 <code>Close</code> 的是服务端。</p><p><strong>第一次挥手</strong>，发送 <code>FIN</code> 和 <code>ACK</code> 报文，如图：<br><img src="/upload/images/2018/12/16/3.jpg"></p><p><strong>第二次挥手</strong>，客户端发送 <code>ACK</code> 报文给服务端，如图：<br><img src="/upload/images/2018/12/16/4.jpg"></p><p><strong>第三次挥手</strong>，客户端发送 <code>FIN</code> 和 <code>ACK</code> 报文给服务端，如图：<br><img src="/upload/images/2018/12/16/5.jpg"></p><p><strong>第四次挥手</strong>，服务端发送 <code>ACK</code> 报文给客户端，如图：<br><img src="/upload/images/2018/12/16/6.jpg"></p><p>从图中抓包来看，<strong>seq</strong> 和 <strong>ack</strong> 的值变化如下表：</p><table><thead><tr><th>次数</th><th>seq 值</th><th>ack 值</th></tr></thead><tbody><tr><td>1</td><td>140</td><td>447</td></tr><tr><td>2</td><td>447</td><td>141</td></tr><tr><td>3</td><td>447</td><td>141</td></tr><tr><td>4</td><td>141</td><td>448</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>结合上面抓包的示例，小结一下四次挥手的过程。</p><p>在前面说过，断开连接端可以是 <code>Client</code> 端，也可以是 <code>Server</code> 端，我上面的例子首先发起 <code>close</code> 的一方是 <code>Server</code> 端。</p><p><strong>第一次挥手：</strong><br>服务端发送一个 <code>[FIN+ACK]</code> 报文，表示自己没有数据要发送了，想断开连接，并进入 <code>fin_wait_1</code> 状态（不能再发送数据到客户端，但能够发送控制信息 <code>ACK</code> 到客户端）。</p><p><strong>第二次挥手：</strong><br>客户端收到 <code>[FIN]</code> 报文后，客户端知道不会再有数据从服务端传来，发送 <code>ACK</code> 进行确认，客户端进入 <code>close_wait</code> 状态。此时服务端收到了客户端对 <code>FIN</code> 的 <code>ACK</code> 后，进入 <code>fin_wait2</code> 状态。</p><p><strong>第三次挥手：</strong><br>客户端发送 <code>[FIN ACK]</code> 报文给对方，表示自己没有数据要发送了，客户端进入 <code>last_ack</code> 状态。服务端收到了客户端的 <code>FIN</code> 信令后，进入 <code>time_wait</code> 状态，并发送 <code>ACK</code> 确认消息。</p><p><strong>第四次挥手：</strong><br>服务端在 <code>time_wait</code> 状态下，等待 2MSL(MSL是数据分节在网络中存活的最长时间) 一段时间，没有数据到来的，就认为对面已经收到了自己发送的 <code>ACK</code> 并正确关闭了进入 <code>close</code> 状态，自己也断开了到客户端的 <code>TCP</code> 连接，释放所有资源。当客户端收到服务端的<code>ACK</code> 回应后，会进入 <code>close</code> 状态，并关闭本端的会话接口，释放相应资源。</p><p>根据 wireshark 抓包和上面流程的分析，可以画出如下示意流程图：<br><img src="/upload/images/2018/12/16/7.jpg"></p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark tcp ip http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当 NTFS 遇上 MacOS</title>
      <link href="/2018/11/24/%E5%BD%93-NTFS-%E9%81%87%E4%B8%8A-MacOS/"/>
      <url>/2018/11/24/%E5%BD%93-NTFS-%E9%81%87%E4%B8%8A-MacOS/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>自己使用的 <code>MacBook Pro</code> 电脑是 <code>256G</code> 的，这个本陪了我5个春秋，性能依旧强劲，一直舍不得抛弃换新(好吧，我承认自己穷)。</p><p>由于工作需要，里面安装了不少软件，也存储了不少资料，逐渐发现硬盘容量不足，我也一直在删除一些非必要的东西，发现还是杯水车薪，没办法，又买了一块移动硬盘，网盘用起来还是没有硬盘方便，我使用网盘的频率很低。</p><h2 id="MacOS-挂载"><a href="#MacOS-挂载" class="headerlink" title="MacOS 挂载"></a>MacOS 挂载</h2><p>我觉得移动硬盘买回来，直接插在电脑上就可以使用了，最后发现硬盘只能读不能写，卧槽！</p><p>上网查了一下，在默认情况下，<code>NTFS</code> 格式的硬盘插入到 <code>MacOS</code> 里，是只能读不能写的，需要挂载。</p><p>于是结合网上前辈的经验，弄了一个 <code>shell</code> 脚本，用了一段时间，发现挺好用的，但是电脑重启后，脚本就需要修改，还要查找当前硬盘到底在 <code>disk0</code> 还是在 <code>disk2</code> 上面，麻烦。</p><p>还好有一些比较成熟的工具帮我们解决问题，<a href="http://www.ntfsformac.cn/">Paragon NTFS for MAC</a> 就是其中一个。</p><p><img src="/upload/images/2018/11/24/1.jpg"></p><p>这个工具是收费的，我试用了一段时间，感觉功能挺强大的，因为穷也懒得折腾破解，就找了另外一个工具 <a href="https://mounty.app/">mounty</a>，小巧可爱关键免费，在公众号上面收到的赞赏我也会 donate 给他们。</p><p><img src="/upload/images/2018/11/24/2.jpg"></p><p><a href="https://mounty.app/">mounty</a> 最新版本是 1.9，介绍如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A tiny tool to re-mount write-protected NTFS volumes under Mac OS X 10.9+ in read-write mode.</span><br></pre></td></tr></table></figure><h2 id="mounty-失效"><a href="#mounty-失效" class="headerlink" title="mounty 失效"></a>mounty 失效</h2><p>在使用 mounty 挂载移动硬盘时, 弹框提示以下错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The volume My Passport is not re-mountable in read/write mode.</span><br><span class="line">Probably it was not clean unmounted before.</span><br></pre></td></tr></table></figure><p>这种错误的原因大部分是因为在 <code>Windows</code> 上面使用后没有安全退出(直接拨出)而造成的，网上有两种方案，分别如下：</p><p><strong>方案 1</strong></p><ol><li>插入移动硬盘到 <code>Windows</code> 下面</li><li>打开 <code>dos</code> 命令行，输入 <code>chkdsk /f</code>, 然后回车，输入 <code>Y</code></li><li>使用右下角的安全删除后再拔出移动硬盘</li><li>将移动硬盘再次插入 <code>Mac</code> 打开 <code>mounty</code>重新挂载就可以了</li></ol><p>反正这种方案我是没有成功，报错如下：</p><p><img src="/upload/images/2018/11/24/3.jpg"></p><p><strong>方案 2</strong></p><p>在 <code>Windows</code> 系统中，将移动硬盘插入，使用 <code>360软件</code> 点击 <code>安全退出</code> 退出硬盘，不要直接拔掉，再在 <code>Mac</code> 中插入使用 <code>mounty</code> 重新挂载就解决问题了。</p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTFS MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2018/10/28/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/28/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>组件间通信，我会优先使用路由的通信方式(iOS中需要用到 runtime，Android 中需要用到反射和注解)，组件之间按照路由协议(类似 url)实现各自的职责即可，组件间的松耦合性增强了软件设计的弹性和高可用性。</p><p>路由结合观察者模式，可以让你的组件设计更上一层楼。路由可以解决单向调用的问题，让组件之间无需知道对方是否存在。观察者模式可以让调用者(使用你框架的)可以很方便的知道组件的内部事件。</p><blockquote><p>武林至尊，宝刀屠龙，号令天下，莫敢不从，倚天不出，谁与争锋?</p></blockquote><p>在说观察者模式之前，先介绍一下 iOS 中的代理(delegate).</p><h2 id="代理-delegate"><a href="#代理-delegate" class="headerlink" title="代理 delegate"></a>代理 delegate</h2><p>在 iOS 中，代理(delegate)的本质是 protocol，类似 java 中的 Interface，一般用来处理 <code>一对一</code> 的关系，如下图所示：</p><p><img src="/upload/images/2018/10/28/1.jpg"></p><p>下面的例子模拟了调用和实现过程，使用 <code>Bank</code> 对象和 <code>BankDelegate</code> 代理来模拟这种模式。<code>Bank</code> 有变动的时候，通过 <code>notifyAccount</code> 来授权 <code>onAccountChanged</code> 通知用户。</p><p><strong>BankDelegate.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BankDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>Bank.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Bank</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;BankDelegate&gt; delegate;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)notifyAccount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>Bank.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Bank</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)notifyAccount</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(onAccountChanged:)]) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.delegate onAccountChanged:<span class="number">100</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>使用者实现 delegate</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    Bank *bank = [Bank new];</span><br><span class="line">    bank.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [bank notifyAccount];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Bank tell me that account is changed. %zd&quot;</span>, account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，delegate 也可以做到 <code>一对多</code>，改造一下 <code>Bank</code> 就可以实现。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Bank</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addBankDelegate:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)notifyAccount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>Bank</code> 内部使用数组将 <code>addBankDelegate</code> 得到的 <code>delegate</code> 存起来，<code>notifyAccount</code> 中就可以进行通知了。</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bank *bank = [Bank new];</span><br><span class="line"><span class="comment">// 模拟添加多个 delegate</span></span><br><span class="line">[bank addBankDelegate:<span class="keyword">self</span>];</span><br><span class="line">[bank addBankDelegate:<span class="keyword">self</span>];</span><br><span class="line">[bank notifyAccount];</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>理解了 delegate，观察者模式就很好理解了。</p><p>当一个对象改变状态时，它的所有依赖着都会收到通知并自动更新，这是观察者模式的常规定义。</p><p>观察者模式是一种 <code>一对多</code> 的设计模式，如下图所示：<br><img src="/upload/images/2018/10/28/2.jpg"></p><p>继续上面的例子，使用 <code>Bank</code> 对象和 <code>BankDelegate</code> 来模拟这种模式，<code>Bank</code> 有变动的时候，通过 <code>notifyAccount</code> 来授权 <code>onAccountChanged</code> 通知所有注册了 <code>BankDelegate</code> 的用户。</p><p><strong>Talk is cheap. Show me the code</strong></p><p><strong>BankDelegate.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BankDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>Bank.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Bank</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)notifyAccount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>Bank.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)notifyAccount</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span>&lt;BankDelegate&gt; delegate <span class="keyword">in</span> <span class="keyword">self</span>.delegates) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([delegate respondsToSelector:<span class="keyword">@selector</span>(onAccountChanged:)]) &#123;</span><br><span class="line">            [delegate onAccountChanged:<span class="number">100</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == delegate) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span>.delegates addObject:delegate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.delegates.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.delegates removeObject:delegate];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用者</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> registerObserver];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Bank tell me that account is changed. %zd&quot;</span>, account);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)registerObserver</span><br><span class="line">&#123;</span><br><span class="line">    Bank *bank = [Bank new];</span><br><span class="line">    [bank addBankObserver:<span class="keyword">self</span>];</span><br><span class="line">    [bank addBankObserver:<span class="keyword">self</span>];</span><br><span class="line">    [bank notifyAccount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，你应该发现 delegate 的设计其实就是观察者的一种设计手段而已，它本身也是观察者模式。</p><p>在 iOS 中，除了 delegate，还有很多这种设计模式的体现，如 KVO、Notification、Observer、Block 等。</p><h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h2><p>观察者模式中观察者对被观察者(Bank)是有感知的，至少需要实现对应的 <code>BankDelegate</code>，二者之间还是是有一定的耦合度。</p><p>那么，有没有一种方法再来降低这种耦合，让双方都不用去关心对方的存在呢？发布-订阅模式是一个不错的选择。</p><p>发布-订阅本质也是观察者模式，但是他更加的松耦合，发布者和订阅者都不用清楚对方，全部由订阅中心做处理，这样耦合度就几乎没有了。</p><p>如图展示发布-订阅模式：<br><img src="/upload/images/2018/10/28/3.jpg"></p><p>在 iOS 中，Notification 就是发布-订阅模式的一种实现，NSNotificationCenter 就类似订阅中心。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布</span></span><br><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@&quot;name_protocol&quot;</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                         selector:<span class="keyword">@selector</span>(onUpdate:)</span><br><span class="line">                                             name:<span class="string">@&quot;name_protocol&quot;</span></span><br><span class="line">                                           object:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><h2 id="争论"><a href="#争论" class="headerlink" title="争论"></a>争论</h2><p>网上有很多人说，观察者模式和发布-订阅模式是两种不同的设计模式，它们压根就是两码事，不能混为一谈。也有很多人说，两者其实都是观察者模式，只是实现手段有点不一样罢了，本质是一样的。</p><p>江湖纷争，众说纷纭！</p><p>设计模式是一种设计思想，在观察者模式基础上你可以衍生更多的设计模式和更多的设计思想。模式的实现手段可以多样化，没有最好只有更好，就好比 MVC、MVP、MVVM 等，你说它们是设计模式也好，是设计思路也罢，关键是利用它们有没有解决业务需求，为了模式而模式的设计华而不实！</p><p>个人觉得，发布-订阅模式只是观察者模式的一种实现手段，它本质还是观察者模式。</p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Philosophy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 模块化 组件化 Observer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 中神秘的 GCC</title>
      <link href="/2018/10/13/macOS-%E4%B8%AD%E7%A5%9E%E7%A7%98%E7%9A%84-GCC/"/>
      <url>/2018/10/13/macOS-%E4%B8%AD%E7%A5%9E%E7%A7%98%E7%9A%84-GCC/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><p>这个事情，要从编译一个简单的代码开始说起。</p><h2 id="gcc-和-g-的区别"><a href="#gcc-和-g-的区别" class="headerlink" title="gcc 和 g++ 的区别"></a>gcc 和 g++ 的区别</h2><p><code>gcc</code> 是 GCC 中的 GUN C Compiler，C 编译器。</p><p><code>g++</code> 是 GCC 中的 GUN C++ Compiler，C++编译器。</p><p>就本质而言，<code>gcc</code> 和 <code>g++</code> 并不是编译器，也不是编译器的集合，它们只是一种驱动器，根据参数中要编译的文件的类型，调用对应的 GUN 编译器而已。</p><p><code>gcc</code> 与 <code>g++</code> 都可以编译 C 和 C++ 文件，只是处理方式不同。 可以参考 <a href="https://www.cnblogs.com/wb118115/p/5969775.html">GCC的gcc和g++区别</a> 这篇文章。</p><h2 id="交换变量：用指针"><a href="#交换变量：用指针" class="headerlink" title="交换变量：用指针"></a>交换变量：用指针</h2><p>下面这段代码很简单，利用 C 指针实现交换两个变量的目的。</p><p><strong>源文件：mz_swap.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针的方式交换两个变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mz_swap</span><span class="params">(<span class="type">int</span> *ap, <span class="type">int</span> *bp)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> xp = <span class="number">901</span>;</span><br><span class="line"><span class="type">int</span> yp = <span class="number">902</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--Before-- xp = %i, yp = %i\n&quot;</span>, xp, yp);</span><br><span class="line"></span><br><span class="line">mz_swap(&amp;xp, &amp;yp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--After--- xp = %i, yp = %i\n&quot;</span>, xp, yp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mz_swap</span><span class="params">(<span class="type">int</span> *ap, <span class="type">int</span> *bp)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == ap || <span class="literal">NULL</span> == bp) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tp = *ap;</span><br><span class="line"></span><br><span class="line">*ap = *bp;</span><br><span class="line"></span><br><span class="line">*bp = tp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 macOS 下使用 <code>gcc</code> 编译 <code>mz_swap.c</code>，产生可执行文件 <code>exec_main.out</code>，如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc mz_swap.c -o exec_main.out</span><br></pre></td></tr></table></figure><p>编译成功，执行 <code>./exec_main.out</code>，正常输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--Before-- xp = <span class="number">901</span>, yp = <span class="number">902</span></span><br><span class="line">--After--- xp = <span class="number">902</span>, yp = <span class="number">901</span></span><br></pre></td></tr></table></figure><p>采用 g++ 来编译，如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ mz_swap.c -o exec_main.out</span><br></pre></td></tr></table></figure><p>报出如下警告，该警告的意思是在 C++ 模式下强制编译 C 文件，这里可以不予理会。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang: warning: treating <span class="string">&#x27;c&#x27;</span> input as <span class="string">&#x27;c++&#x27;</span> when in C++ mode, this behavior is deprecated [-Wdeprecated]</span><br></pre></td></tr></table></figure><p>虽然有警告，但是编译可以产生可执行文件 <code>exec_main.out</code> 且可以正常执行的，执行结果跟上面一样。</p><h2 id="交换变量：用引用"><a href="#交换变量：用引用" class="headerlink" title="交换变量：用引用"></a>交换变量：用引用</h2><p>大家都知道，C 没有 <code>引用</code> 这个概念，而 C++ 是有 <code>引用</code> 概念的，可以在此了解 <a href="http://www.runoob.com/cplusplus/cpp-references.html">C++ 引用</a>.</p><p>试一下使用 <code>gcc</code> 编译使用 <code>引用</code> 方式编写的 C 代码，按照说法，<code>gcc</code> 是无法编译通过的。</p><p><strong>源文件：mz_swap_ref.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用引用的方式交换两个变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mz_swap_ref</span><span class="params">(<span class="type">int</span> &amp;ap, <span class="type">int</span> &amp;bp)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> xp = <span class="number">901</span>;</span><br><span class="line"><span class="type">int</span> yp = <span class="number">902</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--Before-- xp = %i, yp = %i\n&quot;</span>, xp, yp);</span><br><span class="line"></span><br><span class="line">mz_swap_ref(xp, yp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--After--- xp = %i, yp = %i\n&quot;</span>, xp, yp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mz_swap_ref</span><span class="params">(<span class="type">int</span> &amp;ap, <span class="type">int</span> &amp;bp)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tp = ap;</span><br><span class="line"></span><br><span class="line">ap = bp;</span><br><span class="line"></span><br><span class="line">bp = tp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc mz_swap_ref.c -o exec_main.out</span><br></pre></td></tr></table></figure><p>编译失败，错误信息如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mz_swap_ref.c:<span class="number">4</span>:<span class="number">21</span>: error: expected <span class="string">&#x27;)&#x27;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mz_swap_ref</span><span class="params">(<span class="type">int</span> &amp;ap, <span class="type">int</span> &amp;bp)</span>;</span><br><span class="line">                    ^</span><br><span class="line">mz_swap_ref.c:<span class="number">4</span>:<span class="number">16</span>: note: to match this <span class="string">&#x27;(&#x27;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mz_swap_ref</span><span class="params">(<span class="type">int</span> &amp;ap, <span class="type">int</span> &amp;bp)</span>;</span><br></pre></td></tr></table></figure><p>既然按照 C 的编译方式不行，那就换成 <code>g++</code> 来编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ mz_swap_ref.c -o exec_main.out</span><br></pre></td></tr></table></figure><p>编译成功，执行可执行文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./exec_main.out </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--Before-- xp = 901, yp = 902</span><br><span class="line">--After--- xp = 902, yp = 901</span><br></pre></td></tr></table></figure><p>大家可以自己动手试试，使用 clang 来编译 <code>mz_swap_ref.c</code> 和使用 <code>gcc</code> 来编译都是报错，使用 <code>clang++</code> 和 <code>g++</code> 编译都是没有问题的。</p><p>在博客 <a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/">GCC: Homebrew 安装 GCC 和 Binutils</a> 中，我已经分享了在 macOS 中的 <code>gcc</code> 和 <code>g++</code> 不是 GNU 提供的，而是 Apple 自己的 clang。</p><p>这里要说明的是即使使用自己安装的 gcc(<code>gcc-4.9</code>) 来编译 <code>mz_swap_ref.c</code> 也是无法编译通过的，验证如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc-4.9 mz_swap_ref.c -o exec_main.out</span><br></pre></td></tr></table></figure><p>错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mz_swap_ref.c:4:21: error: expected &#x27;;&#x27;, &#x27;,&#x27; or &#x27;)&#x27; before &#x27;&amp;&#x27; token</span><br><span class="line"> int mz_swap_ref(int &amp;ap, int &amp;bp);</span><br><span class="line">                     ^</span><br><span class="line">mz_swap_ref.c:20:21: error: expected &#x27;;&#x27;, &#x27;,&#x27; or &#x27;)&#x27; before &#x27;&amp;&#x27; token</span><br><span class="line"> int mz_swap_ref(int &amp;ap, int &amp;bp) &#123;              ^</span><br></pre></td></tr></table></figure><h2 id="gcc、g-和-clang-的关系"><a href="#gcc、g-和-clang-的关系" class="headerlink" title="gcc、g++ 和 clang 的关系"></a>gcc、g++ 和 clang 的关系</h2><p>在 macOS 中，<code>gcc</code> 以某种方式指向 <code>llvm-gcc</code> 编译器，<code>g++</code> 亦如此。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In Apple&#x27;s version of GCC, both cc and gcc are actually symbolic links to the llvm-gcc compiler. Similarly, c++ and g++ are links to llvm-g++.</span><br></pre></td></tr></table></figure><p><code>llvm-gcc</code> 是 c&#x2F;c++&#x2F;oc 的编译器，用了 <code>gcc</code> 前端和命令行界面的 llvm.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-gcc is a C, C++, Objective-C and Objective-C++ compiler. llvm-g++ is a compiler driver for C++. llvm-gcc uses gcc front-end and gcc&#x27;s command line interface.</span><br></pre></td></tr></table></figure><p>接下来，我们看一下 <code>llvm-gcc</code>，可以使用 <code>which llvm-gcc</code> 看一下 <code>llvm-gcc</code> 所在位置是 <code>/usr/bin/llvm-gcc</code>，打开目录可以看出其实是一个符号链接，如下图所示：<br><img src="/upload/images/2018/10/13/1.jpg" alt="1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /usr/bin/llvm-gcc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/llvm-gcc -&gt; clang</span><br></pre></td></tr></table></figure><p>它们是统一指向 <code>clang</code> 的符号链接，可以看其原始指向，<code>llvm-gcc</code> 指向 <code>clang</code>，<code>llvm-g++</code> 指向 <code>clang++</code>。</p><p>二者都在 <code>/usr/bin/</code> 目录下：<br><img src="/upload/images/2018/10/13/2.jpg" alt="1"></p><p>其实在 macOS 中 <code>cc</code> 编译器也指向 <code>clang</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的例子，我们至少可以学到如下几点知识：</p><p><strong>1、C 语言规范中没有 <code>引用</code> 的概念，使用 C 编译器无法使其编译通过，但是使用 C++ 编译器是可以编译通过的。这是因为各自的编译器是遵循语言规范的。</strong></p><p><strong>2、macOS 中的 <code>gcc</code> 和 <code>g++</code> 苹果开发者们并没有去改造和重写它们，只是分别指向 <code>clang</code> 和 <code>clang++</code> 编译器。</strong></p><p><strong>3、如果不想使用 macOS 中的 <code>gcc</code> 和 <code>g++</code>，就需要自己重新安装 GNU 的编译套件，安装和使用方法已经在博客中有说明。</strong></p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc g++ clang clang++ cc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN 检出文件</title>
      <link href="/2018/10/06/SVN-%E6%A3%80%E5%87%BA%E6%96%87%E4%BB%B6/"/>
      <url>/2018/10/06/SVN-%E6%A3%80%E5%87%BA%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>对于一些大工程, 整个 svn 仓库文件过大(动辄几十个G的都有)，不想把整个 checkout 下来，但是又想维持整个目录结构以方便后续使用，那么可以使用 <code>Subversion1.5</code> 之后的 <code>--depth</code> 参数来只 checkout 需要的子目录.</p><p>如果只想把 svn 仓库里面某个文件 checkout 到本地, 不想 checkout 整个目录, 如何操作呢?</p><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>假设需要 checkout 出来的文件是 <code>ReadMe.md</code>, 其 svn 地址是: <code>http://svn.xxx.com/path/ReadMe.md</code>，其上级目录的远程地址是 <code>http://svn.xxx.com/path</code>.</p><p><strong>注意</strong>：以下出现 <code>svn co</code> 就是 <code>svn checkout</code> 的缩写.</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>大部分人都会在第一时间想到如下的操作:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn co http://svn.xxx.com/path/ReadMe.md</span><br></pre></td></tr></table></figure><p>实际上这样操作会报错的, 报错信息大概意思是 <code>不可以 checkout 一个文件, 只能 checkout 目录</code>。</p><p>所以，该方案不可行。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><strong>第一步: checkout 目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn co --depth=empty http://svn.xxx.com/path/ ./</span><br></pre></td></tr></table></figure><blockquote><p><code>./</code> 表示当前目录，<code>--depth=empty</code> 表示检出空目录。</p></blockquote><p><strong>第二步: 更新文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn up ReadMe.md </span><br></pre></td></tr></table></figure><blockquote><p>这里直接 svn up 就可以将你需要的文件 checkout 出来了。</p></blockquote><p>修改文件后, 也可以直接提交到 svn 仓库. 使用如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn ci ReadMe.md -m &quot;update.&quot;</span><br></pre></td></tr></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>使用 <code>svn export</code> 命令将文件导出，然后将 <code>svn import</code> 命令导入文件到 svn 仓库。</p><p>一般临时想 checkout 一个文件，就会使用 <code>方案三</code>, 比较正式的操作，我会选择 <code>方案二</code>，因为 <code>方案二</code> 这样既可在不增加磁盘大小的情况下保持 svn 仓库的目录结构，又可以任意 checkout 文件。</p><h2 id="稀疏目录"><a href="#稀疏目录" class="headerlink" title="稀疏目录"></a>稀疏目录</h2><p>上面的 <code>方案二</code>，其实就是 svn 的一种稀疏检出的操作。</p><blockquote><p>Subversion 1.5 开始支持稀疏检出，允许对目录设置深度（depth）。</p></blockquote><p><strong>关于 depth 几个参数的含义</strong>:</p><p>–depth empty：只包含目录自身，不包含目录下的任何文件和子目录。</p><p>–depth files：包含目录和目录下的文件，不包含子目录。</p><p>–depth immediates：包含目录和目录下的文件及子目录。但不对子目录递归。</p><p>–depth infinity：这是默认的，包含整个目录树。</p><p>使用格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn checkout URL --depth empty|files|immediates|infinity</span><br></pre></td></tr></table></figure><p>或者 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn checkout URL --depth=empty|files|immediates|infinity</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn depth 稀疏目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocoapods: 私有仓库</title>
      <link href="/2018/09/24/Cocoapods-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
      <url>/2018/09/24/Cocoapods-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在我之前的博客中分享了几篇关于 Cocoapods 的文章（文末有链接），今天分享另外一个主题即如何创建你自己的私有仓库以及如何使用私有仓库。</p><p>为什么会有这种需求呢？</p><p>开发组内或者公司内，不希望把一些核心的公用代码给到外界使用（不开源），但是这些代码基本很稳定很成熟，可以做成组件给到其他人或者组内使用。</p><p>那么，就可以使用 Cocoapods 来创建自己的私有仓库，让大家共享代码，也是组件化的一种方案。</p><p>下面的分享全是基于实践所得，中间也遇到很多坑，都被我一一解决了，希望能帮到正在阅读文章的你。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>这里的创建仓库，包括两个仓库，一个是代码仓库，另一个是 pod 源的仓库。</p><p>在 <a href="https://github.com/">Github</a> 创建 repository，如图：<br><img src="/upload/images/2018/09/24/1.jpg" alt="1"></p><p><img src="/upload/images/2018/09/24/2.jpg" alt="1"></p><p>创建名为 <code>iOS_private_lib</code> 的 repository，这个主要用来存放我们的代码。</p><p>同样道理，创建一个 Repo 用于存放私有的 SpecRepo 源，我创建的是 <code>https://github.com/veryitman/private_spec_repo.git</code> 这个仓库。</p><p>为了说明问题，这里我使用了 <code>Public</code> 来模拟 <code>Private</code> 仓库。在实际开发中，一般都是使用公司自己搭建的私有 git 服务器来做，我这里主要是为了说明问题。</p><h2 id="创建代码工程"><a href="#创建代码工程" class="headerlink" title="创建代码工程"></a>创建代码工程</h2><p><strong>1. 先 clone 刚才创建的 repo 到本地</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/</span><br><span class="line"></span><br><span class="line">git clone https://github.com/veryitman/iOS_private_lib</span><br></pre></td></tr></table></figure><p><strong>2. 创建工程</strong></p><p>在 <code>~/workspace/iOS_private_lib</code> 下使用 <code>pod lib create</code> 创建工程，工程名字为 <code>CoreHTTP</code>，执行命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/iOS_private_lib</span><br><span class="line"></span><br><span class="line">pod lib create CoreHTTP</span><br></pre></td></tr></table></figure><p>根据提示输入对应的信息即可完成创建，如图：<br><img src="/upload/images/2018/09/24/3.jpg" alt="1"></p><p>创建成功后，包含一个 <strong>Example</strong> 例子工程，工程目录如下：<br><img src="/upload/images/2018/09/24/4.jpg" alt="1"></p><p>使用 Xcode 打开例子工程，在 <code>CoreHTTP/Classes</code> 中创建文件即可，如下图所示：<br><img src="/upload/images/2018/09/24/5.jpg" alt="1"></p><p><strong>3. 编辑 podspec 文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name             = &#x27;CoreHTTP&#x27;</span><br><span class="line">  s.version          = &#x27;0.1.0&#x27;</span><br><span class="line">  s.summary          = &#x27;CoreHTTP for create private pod, it is a demo only.&#x27;</span><br><span class="line">  s.description      = &lt;&lt;-DESC</span><br><span class="line">                       The project of CoreHTTP is a private pod, it is a demo only.</span><br><span class="line">                       DESC</span><br><span class="line"></span><br><span class="line">  s.homepage         = &#x27;https://github.com/veryitman/iOS_private_lib.git&#x27;</span><br><span class="line">  s.license          = &#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span><br><span class="line">  s.author           = &#123; &#x27;veryitman@126.com&#x27; =&gt; &#x27;veryitman@126.com&#x27; &#125;</span><br><span class="line">  s.platform         = :ios, &quot;7.0&quot;</span><br><span class="line">  s.source           = &#123; :git =&gt; &#x27;https://github.com/veryitman/iOS_private_lib.git&#x27;, :tag =&gt; s.version.to_s &#125;</span><br><span class="line"></span><br><span class="line">  s.ios.deployment_target = &#x27;8.0&#x27;</span><br><span class="line"></span><br><span class="line">  s.source_files = &#x27;CoreHTTP/Classes/**/*&#x27;</span><br><span class="line">  s.requires_arc = true</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这里需要注意，如果 <code>s.source_files</code> 写的不对，会报下面的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ERROR | [iOS] file patterns: The `source_files` pattern did not match any file.</span><br></pre></td></tr></table></figure><p><code>CoreHTTP</code> 的名字必须是你代码存放的文件夹名，而且这个文件件要与 <code>podspec</code> 文件在同一级文件目录下，从上面截图的目录结构可以看出。</p><p>另外一个提示的错误点，可能是因为空目录的问题造成的，如果这样的话，可以在各个文件夹下面创建 <code>.gitkeep</code> 文件，该文件的作用是为了提交空文件夹，因为 git 默认是不会添加空文件夹到仓库的。</p><p>创建 <code>.gitkeep</code> 文件的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 文件夹下</span><br><span class="line"></span><br><span class="line">touch .gitkeep</span><br></pre></td></tr></table></figure><p>这里我折腾了蛮久，最后思考和参考了自己之前的开源项目管理博客，才解决这个问题。</p><p><strong>4. 检查和验证本地 podspec 文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd CoreHTTP </span><br><span class="line"></span><br><span class="line">pod lib lint CoreHTTP.podspec </span><br></pre></td></tr></table></figure><p>验证通过会显示如下图所示的成功提示<br><img src="/upload/images/2018/09/24/6.jpg" alt="1"></p><p>使用 Xcode 打开工程，删除对应以 <code>Test开头</code> 的相关的库和文件夹，确保 Xcode 能编译通过，选择模拟器即可。</p><p><strong>这里一定要先清空 cocoapods 的缓存，否则后面远程验证还是报错，无法通过验证。</strong></p><p>清空 cocoapods 的缓存，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/Pods/External/CoreHTTP</span><br><span class="line"></span><br><span class="line">rm ~/Library/Caches/CocoaPods/Pods/Specs/External/CoreHTTP</span><br></pre></td></tr></table></figure><p><strong>5. 上传工程到 Github 远程代码仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/iOS_private_lib</span><br><span class="line"></span><br><span class="line">git add CoreHTTP/</span><br><span class="line"></span><br><span class="line">git commit -m &quot;Add lib.&quot;</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>6. 给版本添加 tag</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/iOS_private_lib</span><br><span class="line"></span><br><span class="line">git tag 0.1.0 -m &quot;Add lib and example project.&quot;</span><br><span class="line"></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p><strong>7. 进行远程验证</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/iOS_private_lib</span><br><span class="line"></span><br><span class="line">pod spec lint CoreHTTP/CoreHTTP.podspec --verbose --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>--verbose</code> 选项是为了看编译和验证信息，<code>--use-libraries</code> 是为了能支持 i386 架构，如果不加此参数，私有库无法通过验证，<code>--allow-warnings</code> 参数是允许有警告。</p><p>验证成功的示意图：<br><img src="/upload/images/2018/09/24/7.jpg" alt="1"></p><h2 id="提交私有-podspec"><a href="#提交私有-podspec" class="headerlink" title="提交私有 podspec"></a>提交私有 podspec</h2><p><strong>1. 向本地的 cocoapods 仓库添加私有 Spec Repo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/iOS_private_lib</span><br><span class="line"></span><br><span class="line">pod repo add PrivateSpec https://github.com/veryitman/private_spec_repo.git</span><br></pre></td></tr></table></figure><p>这里一定要注意：对应的地址是 SpecRepo 仓库地址而不是代码仓库地址。</p><p>本地存放 spec 的私有仓库名称，我这里取名为 <code>PrivateSpec</code>，你也可以取其他名字，但是记住在下面的步骤中要保持一致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -alt ~/.cocoapods/repos/</span><br></pre></td></tr></table></figure><p>可以看到已经成功添加本地 repo 中，其他 master 是 cocoapods 官方公开的源，其他为私有源。如下图所示：<br><img src="/upload/images/2018/09/24/8.jpg" alt="1"></p><p><strong>2. 向私有的 Spec Repo 中提交 podspec</strong></p><p>下面的 <code>PrivateSpec</code> 是与上面的名称对应的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/iOS_private_lib</span><br><span class="line"></span><br><span class="line">pod repo push PrivateSpec ./CoreHTTP/CoreHTTP.podspec --verbose --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure><p>这里要注意，添加私有库和之前博文 <a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">Cocoapods 管理开源项目</a> 中提到的 <code>pod trunk push</code> 是不一样的操作。</p><h2 id="使用私有库"><a href="#使用私有库" class="headerlink" title="使用私有库"></a>使用私有库</h2><p><strong>1. 搜索库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search CoreHTTP</span><br></pre></td></tr></table></figure><p>如果搜索不到，可以执行下面的两条命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br><span class="line"></span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>然后继续搜索就可以了，搜索成功会显示如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CoreHTTP (0.1.0)</span><br><span class="line">   CoreHTTP for create private pod, it is a demo only.</span><br><span class="line">   pod &#x27;CoreHTTP&#x27;, &#x27;~&gt; 0.1.0&#x27;</span><br><span class="line">   - Homepage: https://github.com/veryitman/iOS_private_lib.git</span><br><span class="line">   - Source:   https://github.com/veryitman/iOS_private_lib.git</span><br><span class="line">   - Versions: 0.1.0 [PrivateSpec repo]</span><br></pre></td></tr></table></figure><p>为了避免和其他私有库命名冲突，建议在自己的私有库前面加上公司或者其他标示，如 TepdCoreHTTP、FphCoreHTTP 等。</p><p><strong>2. 在 Podfile 文件的顶部添加 source</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source &#x27;https://github.com/veryitman/private_spec_repo.git&#x27;</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br></pre></td></tr></table></figure><p>注意一个是我们私有 SpecRepo 地址（非私有代码库地址），另一个是官方公有源地址。</p><p>使用私有库的工程的 Podfile 写法示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">source &#x27;https://github.com/veryitman/private_spec_repo.git&#x27;</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line"></span><br><span class="line">platform :ios, &#x27;7.0&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;TestCoreHTTP&#x27; do</span><br><span class="line">    pod &#x27;CoreHTTP&#x27;, &#x27;~&gt; 0.1.0&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>在工程中可以直接使用私有库了，示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">#import &lt;CoreHTTPHeader.h&gt;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    NSString *lib_desc = [CoreHTTPHeader libDesc];</span><br><span class="line">    NSLog(@&quot;The HTTP&#x27;s library desc: %@&quot;, lib_desc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="pod-命令"><a href="#pod-命令" class="headerlink" title="pod 命令"></a>pod 命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//将工程添加到本地 repo 中 </span><br><span class="line">pod repo add [本地私有仓库名] [远程仓库地址]</span><br><span class="line"></span><br><span class="line">//移除本地 repo</span><br><span class="line">pod repo remove [本地私有仓库名]</span><br><span class="line"></span><br><span class="line">//查看本地 repo</span><br><span class="line">pod repo </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//只从本地验证你的pod能否通过验证</span><br><span class="line">pod lib lint *.podspec</span><br><span class="line"></span><br><span class="line">//从本地和远程验证你的pod能否通过验证</span><br><span class="line">pod spec lint *.podspec</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a></p><h2 id="我的其他文章"><a href="#我的其他文章" class="headerlink" title="我的其他文章"></a>我的其他文章</h2><p><a href="http://www.veryitman.com/2016/11/08/Mac-install-Cocoapods/">Mac install Cocoapods</a></p><p><a href="http://www.veryitman.com/2016/11/08/Cocoapods-%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/">Cocoapods 问题集锦</a></p><p><a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">Cocoapods 管理开源项目</a></p><p><a href="http://www.veryitman.com/2016/09/25/iOS-%E9%A1%B9%E7%9B%AE-%E6%89%93%E9%80%A0%E6%9C%AC%E5%9C%B0-pod-%E5%BA%93/">iOS 项目: 打造本地 pod 库</a></p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS cocoapods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈客户端模块化</title>
      <link href="/2018/09/23/%E6%B5%85%E8%B0%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2018/09/23/%E6%B5%85%E8%B0%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h2><p>大学那会喜欢跟着老师在实验室折腾，感觉每天大脑中都有新知识鱼贯而入。</p><p>当我被告知要做一个最小单片机系统的时候，兴奋而又紧张！</p><p>最小单片机系统示意图：<br><img src="/upload/images/2018/09/23/1.jpg"></p><p>从画 <a href="https://baike.baidu.com/item/PCB/146397?fr=aladdin">PCB</a> 到制板、洗板，再到选择元器件，最后组装调试和写代码，我花费了两个多月的时间，当板子上面的跑马灯亮起来的那一刻，我激动的无法言语。</p><p>大家可以看到这个最小单片机系统上面有很多组件组成，有电阻、电容、电阻、二极管和卡槽等，当然还有最核心的组件就是单片机，当时用的是51单片机。</p><p>各个元器件就好比组件，功能单一，职责明显，组件之间遵循协议构成模块，最终组合成为（最小单片机）系统。</p><p>上面的回忆是为了引出今天的分享，分享的主要内容是客户端开发中常用的<strong>模块化</strong>、<strong>组件化</strong>、<strong>插件化</strong>以及<strong>热更新</strong>等技术辞藻，并没有涉及到具体的技术问题。</p><h2 id="模块化和组件化"><a href="#模块化和组件化" class="headerlink" title="模块化和组件化"></a>模块化和组件化</h2><p>从程序设计的角度出发，无论是模块化还是组件化，都是指软件架构的范畴，是一种设计思想。两者并没有严格意义上面的区分，二者的目的一致，就是将工程结构化，达到可复用可伸缩的能力，最终提供工作效率。</p><p>在说模块化和组件化之前，先解释一下什么是高内聚低耦合。</p><p>高内聚：组件内尽可能独立完成自己的功能，坚持单一职责的原则 <a href="https://baike.baidu.com/item/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/9456515">SRP</a>，不依赖于其他组件的代码。</p><p>低耦合：模块与模块之间尽量不要互相引用，模块之间联系越复杂耦合度越高，修改的成本就越高。</p><p><strong>组件</strong>更加强调可替换可复用的特性，职责和功能比较单一、独立，与其他组件之间没有耦合性。</p><p><strong>模块</strong>更加强调组合特性，更加偏重于业务，比如一个社区项目，登录注册、论坛和个人中心都是模块，这些业务模块又是有很多个组件组合而成。</p><p>下图展示的是一个简易的论坛系统示例图，如下：<br><img src="/upload/images/2018/09/23/2.jpg"></p><p>可以看出，各个组件可以单独使用到其他模块当中，各个模块之间相对独立，只要定义好模块之间的通信协议，就可以做到并行开发，各个模块甚至可以复用到其他系统之中。</p><h2 id="通信机制"><a href="#通信机制" class="headerlink" title="通信机制"></a>通信机制</h2><p>这里说的通信机制并不是指 HTTP 或 TCP 的通信方式，而是指组件与组件之间，模块和模块之间的交互方式。</p><p>正常情况下，写业务功能的代码，在不同组件之间需要相互调用，这样就需要 <strong>import</strong> 其他组件，无形之中就增加了组件之间的耦合度。</p><p>有开发经验的同学，可能会用到类似 java 的反射机制，或者一些动态语言的运行时机制如 Objective-C Runtime，对它们不进行 <strong>import</strong>，而是动态的解析代码，达到组件之间或者是类之间相互调用的目的。</p><p>现在提倡也是比较热门的技术是通过<strong>路由</strong>通信机制，来进行组件之间的通信。这里举一个实际使用场景。</p><p>用户安装了我们的 APP，运营同事在某个节日来临之际做一个促活跃的活动，期望用户点在打开推送通知的时候，打开 APP 后可以直接跳转到对应的活动详情页面。大致流程如下：<br><img src="/upload/images/2018/09/23/3.jpg"></p><p>这是一个再常规不过的需求了，相信经历过产品开发的朋友都见过这种需求。</p><p>很显然，我们可以使用<strong>路由</strong>的通信机制来完成这个需求，开发的流程图大致如下：<br><img src="/upload/images/2018/09/23/4.jpg"></p><p>这里关键的核心得益于 iOS 和 Android 平台的 <strong>scheme</strong> 机制，对于 <strong>scheme</strong>，通俗的讲就是一种可以跨进程或者进程内的通信协议，例如可以在 APP 中打开某个应用商店。</p><p>例如下面的 URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bbs://page/activity/activity_detail?id=8978&amp;user_id=67890432</span><br></pre></td></tr></table></figure><p>其中，<code>bbs</code> 就是 <strong>scheme</strong>，可以看到该 URL 完全可以被各自平台来解析。</p><p>iOS 和 Android 平台各有很多开源的路由方案，实现手法各有差异，但是思想是一样的，建议大家去了解和学习。</p><p>不过，现在你只要知道，路由的通信机制大大降低了组件之间的耦合性就够了。</p><h2 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h2><p><strong>插件</strong>这个词，大家应该很熟悉，例如 Chrome 浏览器中可以安装各种小工具，这些小工具就是插件，还有各种开发使用的 IDE 也支持插件安装，便于提高我们的工作效率。Chrome 和 IDE 被称之为宿主，插件寄生于他们。</p><p>支付宝和微信里面的小程序也可以看成是一个个插件，但是他们不能脱离支付宝和微信独立运行。</p><p>可以发现这些插件即使被卸载或者被删除，并不会让 Chrome 或者 IDE 受到影响，换句话说，插件让宿主锦上添花。 </p><p>这种插件思想当然可以运用到 APP 中来，试想一下，如果某个 APP 在线上经过动态下载就具有了一个强大或者好用的功能，岂不美哉？！</p><p><strong>插件化</strong>，将 APP 拆分成很多模块，这些模块包括一个宿主和多个插件，宿主提供插件的管理和通信协议及规范，每个模块都是一个的库或者功能包。</p><p><strong>插件化</strong>是一种编程和解决问题的思想，没有统一的定义。在 Android 上面运用比较多，iOS 上面很少，并不是 iOS 没有这样的技术，主要是因为苹果审核等各方面的限制。在 iOS8 上的 <code>App Extension</code> 功能，也可以看做是插件化了。</p><p>在 Android 平台中，插件化已经不是很新鲜的技术了，<strong>VirtualAPK、Atlas、Replugin</strong> 等框架相继开源，插件化技术已经进入了比较成熟的阶段了。</p><p>插件化的编程思想和实现，在不同的平台有所差异，即使在同一个平台上面都会有不同的实现手段，建议选择一个开源方案去了解其原理，然后试着动手去实现一个，千里之行始于足下！</p><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>“不好了，昨天有很多用户反馈我们的 APP 出现闪退。“ 小王一大早的开始撕喊，坐在他旁边的开发大神们顿时微笑凝固，马上去后台看上报的崩溃日志，紧接着开始复现和解决问题，最终得出结论，需要重新提审 APP，并周知渠道部门做好更新准备。</p><p>试想一下，如果一个游戏几G的大小，你让用户为了你的一个小失误来整包更新游戏，用户和你估计都要疯了。</p><p>最近几年，随着业务发展的需求，<strong>热更新</strong>技术也是得到了突飞猛进的发展。类似于上面的场景，能在用户神不知鬼不觉的情况下使用热更新的技术解决崩溃的问题，岂不是两全其美。</p><p>Android 的热更新技术如火如荼的发展着，而苹果这边严厉禁止<strong>热更新</strong>，一旦检查到立即会责令你修改或者下架 APP。我们还是从技术的角度来看这个问题，学习和了解一下对应的技术总归没有错，<a href="https://juejin.im/post/5a5821b6f265da3e3f4c9e2a">这里</a> 有 iOS 上面的热更新方案，另外 <a href="https://www.jianshu.com/p/eec0ab6800a4">Android热修复方案比较</a> 介绍了很多 Android 热更新的开源的方案，可以了解学习一下。</p><p>站在跨平台的角度，我个人比较推荐使用 Lua 实现<strong>热更新</strong>，Lua 不仅简单高效，而且可以很好的和 C&#x2F;C++ 结合在一起，而 Android 上面通过 JNI 又能与 C&#x2F;C++ 通信，iOS 上面就更加不用说了。这只是我个人的一点看法，不喜勿喷。</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Philosophy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 模块化 组件化 热更新 插件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 演进史</title>
      <link href="/2018/09/16/HTTP-%E6%BC%94%E8%BF%9B%E5%8F%B2/"/>
      <url>/2018/09/16/HTTP-%E6%BC%94%E8%BF%9B%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="精通-HTTP-吗？"><a href="#精通-HTTP-吗？" class="headerlink" title="精通 HTTP 吗？"></a>精通 HTTP 吗？</h2><p>在面试相关开发岗位的同学中，我经常会问一些跟编程语言不相关的东西，比如下面这些问题：</p><p><strong>1. 你平时是怎么学习的？学习渠道有哪些？</strong><br><strong>2. 项目组中，你认为最重要的是什么？</strong><br><strong>3. 你在项目组中遇到的最大困难（非编程问题）是什么，你是怎么解决的？</strong><br><strong>4. 项目执行过程中，其他同事遇到困难，你是如何做的？</strong></p><p>这些问题可以让面试者自由发挥的题目，并没有固定的标准的答案。这样的问题问出来有诸多好处，首先可以让面试者稳定一下心态不至于太紧张，其次可以看看他的语言组织能力和表达能力，从中也能看出他有没有过实际的项目经验。</p><p>很多人的简历上面写的很完美，做过诸多项目，精通某某语言的编程，精通各种网络协议，熟悉各大操作系统等等，当深入问他们熟悉的知识时，发现他们的回答却含糊不清。不排除世界上有这样的全才，但是肯定不会被我们轻易遇到，至少我觉得自己还没有达到那个能力。</p><p>如果你还没有但又想精通各种知识，就慢慢去学习并精通相关的知识，循序渐进，相信自己会做到的。好了，不扯了，今天聊聊 HTTP 的发展历史。</p><p>我敢保证有绝大部分的人不知道 HTTP&#x2F;2，虽然他早就来临.</p><h2 id="HTTP-0-x-到-HTTP-x2F-2"><a href="#HTTP-0-x-到-HTTP-x2F-2" class="headerlink" title="HTTP 0.x 到 HTTP&#x2F;2"></a>HTTP 0.x 到 HTTP&#x2F;2</h2><p>HTTP&#x2F;1 是 HTTP 1.0 和 HTTP 1.1 的统称，分别指 HTTP 协议的版本是 1.0 和 1.1.</p><p>1960年美国人 <a href="https://baike.baidu.com/item/Ted%20Nelson">Ted Nelson</a> 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）, 这成为了 HTTP 超文本传输协议标准架构的发展根基，所以他被称之为 <code>HTTP 之父</code>。</p><p>1989年3月在 CERN（欧洲核子研究组织）工作的 <a href="%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B9%8B%E7%88%B6">Tim Berners-Lee（蒂姆.伯纳斯.李）</a> 提交了一个提案 <code>Information Management: A Proposal</code>，该提案描绘了其对万维网（World Wide Web）最初的设想即能让远隔两地的人们共享知识，Tim 是 <code>万维网之父</code>，成就和贡献也是不计其数。</p><p>直到1990年 HTTP 才算是问世，姑且称之为 HTTP 0.x 版本，也有些地方称之为 HTTP 0.9 版本，总之这不是一个正式版。1996年5月，HTTP 1.0 作为 HTTP 的第一个正式版本正式公布，并记载于 <a href="https://tools.ietf.org/html/rfc1945">RFC1945</a> 中。</p><p>随着人们对互联网的认知和技术的发展（尤其是浏览器等相关的技术），发现 HTTP 1.0 缺点还是比较多，无法满足快速的互联网发展需求。于是在1997年1月发布了 HTTP 1.1 版本，并记载于 <a href="https://www.ietf.org/rfc/rfc2068.txt">RFC2068</a> 中，后来在1999年6月，对 RFC2068 又做了补充和修正，称之为 <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC2616</a>, 至此 HTTP 1.1 开始一统天下，直到现在绝大数开发者使用的都是 HTTP 1.1 版本。</p><p>另外一个版本 <a href="https://zh.wikipedia.org/wiki/HTTP/2">HTTP&#x2F;2</a> 标准于2015年5月以 <a href="https://tools.ietf.org/html/rfc7540">RFC 7540</a> 正式发表，多数主流浏览器已经在2015年底支持了该协议，时隔多年，HTTP&#x2F;2 才问世。</p><p>苹果从 iOS9 开始支持 HTTP2.0，对 iOS 开发人员来说从 iOS9 开始 NSURLSession 可以支持 HTTP2.0 了。目前 Android 绝大部分系统不支持 HTTP&#x2F;2，Android 原生 HttpURLConnection 框架并不支持 HTTP&#x2F;2，但可以选用三方开源库 <a href="http://square.github.io/okhttp/">okhttp</a> 作为网络框架，Android 5.0+（系统版本）设备才支持 HTTP&#x2F;2。所以想全面使用 HTTP&#x2F;2 还是要付出一定的代价，不过随着技术的革新，相信 HTTP&#x2F;2 将会大放光彩。</p><h2 id="HTTP-不断的改进"><a href="#HTTP-不断的改进" class="headerlink" title="HTTP 不断的改进"></a>HTTP 不断的改进</h2><p>用一张图来描述 HTTP 的不断改进和演变史，如下图所示：<br><img src="/upload/images/2018/09/16/1.jpg"></p><p>下面具体看看这些协议版本的演进过程中，究竟是新增和改进了哪些东西？</p><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP 0.9"></a>HTTP 0.9</h3><p>HTTP 0.9 并非出自某个标准化组织，只是 Tim 的个人作品而已，比较简单。可以参阅这篇文章 <a href="https://www.w3.org/Protocols/HTTP/AsImplemented.html">The Original HTTP as defined in 1991</a> ，该版本规定了 HTTP 使用 TCP&#x2F;IP 连接，HTTP 请求只有一个请求行，只有一个 GET 方法加上请求的URI。HTTP 响应则直接返回 HTML 文本，没有状态码，所以也没有办法区分错误消息和正常的文本。可以看出，HTTP&#x2F;0.9并不完善，也不是那么完美，但是这的确是 Tim 坚持下来的结晶。</p><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h3><p>HTTP 1.0 增加了请求头域和响应头域，增加了 HEAD 和 POST 方法，响应对象不再局限于 HTML 文本，支持长连接和缓存机制等等。</p><blockquote><p>HTTP 1.0 具体特点</p></blockquote><p>1.可以发送更多格式的内容，如图像、视频、二进制文件，不仅仅局限于文字了。</p><p>2.增加了 POST 和 HEAD 方法。</p><p>3.改变了 HTTP 请求和回应的格式。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据，即增加了请求头信息，响应数据不再局限于 HTML 文本。</p><p>4.新增状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等功能。</p><p>5.增加了长连接的支持，不过 HTTP 1.0 需要在 request 中增加 ”Connection： keep-alive“ header 才能够支持，后面要说到的 HTTP 1.1 默认就支持了。</p><p>可以看出，HTTP 1.0在 HTTP 0.9 的基础上做了大量的扩充和改进。</p><blockquote><p>HTTP 1.0 主要缺点</p></blockquote><p>1.每次请求都需要建立 TCP 连接，即每对 Request&#x2F;Response 都使用一个新的连接。</p><p>2.不支持断点续传。</p><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h3><p>每个新版本的诞生基本都是对上一个版本的补充和改进，就像我们的软件开发一样，协议也需要迭代。</p><blockquote><p>HTTP 1.1 具体特点</p></blockquote><p>1.加强和优化了持久连接即长连接。</p><p>HTTP 1.1 支持长连接（Persistent Connection）和请求的流水线（Pipelining）处理，在一个 TCP 连接上可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟，在 HTTP 1.1 中默认开启 <code>Connection： keep-alive</code>，一定程度上弥补了 HTTP 1.0 每次请求都要创建连接的缺点。</p><p>2.增强了缓存机制。</p><p>引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等可供选择的缓存头。</p><p>3.请求头引入了 range 头域。</p><p>它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p><p>4.将 Content-length 字段的作用进行扩充，即声明本次回应的数据长度（一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的）。</p><p>5.采用分块传输编码。</p><p>对于一些很耗时的动态操作，服务器需要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用流模式（stream）取代缓存模式（buffer）。</p><p>6.新增了许多动词方法：PUT、PATCH、HEAD、OPTIONS、DELETE。另外，客户端请求的头信息新增了 Host 字段，用来指定服务器的域名。</p><p>7.新增了 24 个错误状态响应码。</p><blockquote><p>HTTP 1.0 主要缺点</p></blockquote><p>HTTP 1.1 虽然增加了很多功能，在一定程度上已经很强大了，但是他自身也是有缺点的，换句话说有优化的空间，主要问题如下：</p><p>1.队头堵塞（Head-of-line blocking），各个请求到达的服务器的速度是不同的，如果先发的请求先到达可能会发生阻塞，剩下所有的工作都会被阻塞在那次请求应答之后，这样就降低了带宽。</p><p>为了避免这个问题，有两种方法：一是减少请求数，二是同时多开持久连接。</p><p>2.臃肿的消息头部</p><p>3.不支持服务端推送，例如要求使用 HTTP 协议做一个服务端数据变动页面立即改变的组件就不好做，可用轮询的方式进行，这样就会对带宽影响较大。</p><h3 id="SPDY"><a href="#SPDY" class="headerlink" title="SPDY"></a>SPDY</h3><p>在说到 HTTP&#x2F;2 之前，必须要先说说 <a href="https://zh.wikipedia.org/wiki/SPDY">SPDY</a>。SPDY 是由 Google 公司推出的，SPDY 的推出是为了解决 HTTP 1.1 中存在的一些问题的。</p><p>1.多路复用（multiplexing）</p><p>多路复用通过多个请求 stream 共享一个 TCP 连接的方式，解决了HOL blocking 的问题，降低了延迟同时提高了带宽的利用率。</p><p>2.可以对请求设置优先级</p><p>多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</p><p>3.对请求头的压缩</p><p>选择合适的压缩算法可以减小包的大小和数量，这样在一定程度上可以提高网络使用效率。</p><p>4.为了数据传输的安全性，强制使用基于 HTTPS 的加密协议传输。</p><p>5.支持服务端推送。</p><p>称之为 Server Push 功能，服务器在还没有收到客户端的请求，服务器就可以把各种资源推送给客户端。</p><p>比如，客户端只请求了 index.html，但是服务器把 index.html、x.css、x.jpg 等资源全部发送给客户端。这样的话，只需要一轮 HTTP 通信，客户端就得到了全部资源，提高了通信的性能，也提高了用户体验。</p><h3 id="HTTP-x2F-2"><a href="#HTTP-x2F-2" class="headerlink" title="HTTP&#x2F;2"></a>HTTP&#x2F;2</h3><p>本质上来讲，HTTP&#x2F;2 是建立在 SPDY 基础之上的，借鉴了很多 SPDY 的设计思想和策略。 HTTP 具有 SPDY 的优点，同时自己也有与 SPDY 的不同点，主要如下：</p><p>1.HTTP&#x2F;2 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS。这一点 HTTP&#x2F;2 相对人性化一些。</p><p>2.HTTP&#x2F;2 会对请求头和响应头做压缩以提升请求性能，HTTP&#x2F;2 消息头的压缩算法不同于 SPDY。 HTTP&#x2F;2 采用 <a href="http://http2.github.io/http2-spec/compression.html">HPACK</a>，SPDY 采用的 <a href="http://zh.wikipedia.org/wiki/DEFLATE">DEFLATE</a> 算法。</p><p>HTTP&#x2F;2 支持所有的 HTTP 1.1 的核心特征，其提供了 HTTP 语义的传输优化，并且在各方面做到更高效。HTTP&#x2F;2 的头信息是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为帧（frame），即头信息帧和数据帧。对 HTTP&#x2F;2 感兴趣的可以看一下 <a href="https://www.jianshu.com/p/40378501d1fc">HTTP2 协议初识</a> 这篇文章。</p><h2 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h2><ul><li><p><a href="http://www.veryitman.com/2017/02/06/ATS-HTTP-HTTPS-%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/">ATS: HTTP&#x2F;HTTPS 协议介绍</a></p></li><li><p><a href="http://www.veryitman.com/2017/02/08/ATS-HTTPS-%E8%AE%A4%E8%AF%81/">ATS: HTTPS 认证</a></p></li></ul><hr><p><strong>没有人能照顾你一辈子，你自己必须慢慢强大起来~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark udp http https spdy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark: 简单分析 TCP 三次挥手</title>
      <link href="/2018/09/09/Wireshark-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-TCP-%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2018/09/09/Wireshark-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-TCP-%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="话说握手"><a href="#话说握手" class="headerlink" title="话说握手"></a>话说握手</h2><p>你要是开发人员，相信你一定听说过 TCP（Transmission Control Protocol 传输控制协议）或是 TCP 握手的说法。</p><p>所谓<strong>握手</strong>，通俗来讲就是通信双方协商在后续通信过程中需要使用的通信信息的过程。TCP 为了建立可靠的连接需要三次握手，后续给大家分享 TLS 为了实现加密、校验、身份认证同样需要握手的过程。</p><p>TCP 三次握手可以使用下图来表达：<br><img src="/upload/images/2018/09/09/1.jpg"></p><p>本篇给大家分享如何使用 <code>Wireshark</code> 来跟踪 HTTP 包，查看 TCP 握手的过程。</p><p>在看下面内容之前，先简单看一下 TCP 协议报头。</p><p>下图是 TCP 报头的格式：<br><img src="/upload/images/2018/09/09/2.png"></p><p>其中，Seq(Sequence Number) 是 32 位的序列号，<code>Acknowledgment number</code> 称之为确认序号，也是 32 位的，但是他不是标志位 ACK，这个要区别开，当 ACK 置 1 时 <code>Acknowledgment number</code> 才有效，指接收方期待的下一个报文段的序列号。</p><p>TCP 报头信息中有六个控制位(标志位)，分别是：SYN、ACK、PSH、FIN、RST 和 URG。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SYN: 表示建立连接</span><br><span class="line">FIN: 表示关闭连接</span><br><span class="line">ACK: 表示响应</span><br><span class="line">PSH: 表示有数据传输</span><br><span class="line">RST: 表示连接重置</span><br><span class="line">URG: 表示紧急数据</span><br></pre></td></tr></table></figure><p><strong>Seq 序列号有两个作用：</strong><br>第一，在 SYN 置 1 时，此为当前连接的初始序列号(Initial Sequence Number, ISN)该值是个随机值，数据的第一个字节序号为此 ISN+1。</p><p>第二，在 SYN 置 0 时，为当前连接报文段的累计数据包字节数。</p><p>TCP 协议设计比较复杂，其涉及的知识较多，这里大家整不明白也没有关系，并不影响你阅读下面的内容，如果对 TCP 协议本身感兴趣，可以去拜读【TCP&#x2F;IP 详解，卷 1：协议】这本书。</p><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>每次说到网络层，就要拿出类似下面的网络模型图，OSI 将网络模型分为7层，TCP&#x2F;IP 模型将网络模型分为 4 层，网络 4 层模型由 7 层模型简化合并而来，没有本质的区别，如图：<br><img src="/upload/images/2018/09/09/3.jpg"></p><p>HTTP 仅仅是个协议，属于应用层的面向对象的协议，从上图可以看出 HTTP 是在 TCP 基础之上的。</p><blockquote><p>HTTP 协议一共有五大特点</p></blockquote><p><em>1、支持客户&#x2F;服务器模式</em><br><em>2、简单快速</em><br><em>3、灵活</em><br><em>4、无连接</em><br><em>5、无状态</em></p><p>这里强调一下 <strong>无连接</strong> 和 <strong>无状态</strong> 这两个特点。</p><p><strong>无连接</strong>，指的是限制每次连接只处理一个请求。服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。采用这种方式可以节省传输时间。<code>Keep-Alive</code> 特性不在本篇讨论范围，暂时你可以将其忽略。</p><p><strong>无状态</strong>，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是发送完，不会记录任何信息。</p><p>可以利用 HTTP 的这两个特点来分析 TCP 三次握手的过程。</p><h2 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h2><p>三次过程如下面草图，如下所示：</p><p><img src="/upload/images/2018/09/09/8.jpg"></p><p>我们用实际例子来看一下这个过程，以 GET 请求下面地址为例，使用 <code>Wireshark</code> 抓包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/news/detailV3.html?id=1279391&amp;COMMON_ACCESS_TOKEN=(null)&amp;COMMON_ACCESS_TOKEN_SECRET=(null)&amp;_cT=IOS&amp;_cV=3.1.3&amp;_cA=PM</span><br></pre></td></tr></table></figure><p>看返回结果，选中 <code>HTTP/1.1 200 OK</code> 右键, 在弹出框中选择 <code>Follow/TCP Stream</code>，如下图所示：<br><img src="/upload/images/2018/09/09/4.jpg"></p><p>关闭弹出的弹窗，回到主界面，看到如下图所示的三次（红色 1、2、3处） TCP 握手过程：<br><img src="/upload/images/2018/09/09/5.jpg"></p><p>第一次，请求客户端发送一个 [SYN] 包，序列号是 0（seq&#x3D;0）。</p><p>第二次，服务器收到 [SYN] 包，然后会发送一个 [SYN, ACK] 包，序列号是 0，ACK 置 1（seq&#x3D;0，ack&#x3D;1）。</p><p>第三次，客户端请求服务器，客户端会发送一个 [ACK] 包，序列号是 1，Ack 置 1（seq&#x3D;1，ack&#x3D;1）来回复服务器。</p><p><strong>这里注意一下</strong>，大写的 <code>ACK</code> 是一个 bit 位表示确认，小写的 <code>ack</code> 是一个确认序列号，表示数值。</p><p>简单的画一个草图，如下：<br><img src="/upload/images/2018/09/09/6.jpg"></p><p><strong>这个过程，简单描述为下面三个步骤：</strong></p><p>双方在建立连接之前都处于 CLOSED 的状态。</p><p>1、发送方给接收方发送 SYN 信号，此时发送方处于 <code>SYN_SENT</code> 状态。<br>2、接收方确认并回复给发送方 SYN&#x2F;ACK 信号，此时接收方处于 <code>SYN_RCVD</code> 状态。<br>3、发送方给接收方发送确认 ACK 信号，发送完毕后，发送方(客户端)进入 <code>ESTABLISHED</code> 状态，当接收端(服务端)接收到这个包时，也进入 <code>ESTABLISHED</code> 状态，TCP 握手结束。</p><p>上面的步骤，建议感兴趣的朋友去实际操作一下。</p><h2 id="为什么是三次握手"><a href="#为什么是三次握手" class="headerlink" title="为什么是三次握手"></a>为什么是三次握手</h2><p>回头再来想一想，TCP 的连接为什么需要三次握手呢，为什么不是一次，两次呢？一次不就挺好吗，三次是不是有点多此一举了？</p><p>TCP 协议不是一个人定出来的而是一群人拟定的，设计三次握手固然有它的意义，是经过精心设计且在性能和效率上面衡量过的。</p><p>在知乎 <a href="https://www.zhihu.com/question/24853633">TCP 为什么是三次握手，而不是两次或四次？</a> 上面有不错的答案，虽然有些回答比较搞笑，但是很好理解，比如这位仁兄：<br><img src="/upload/images/2018/09/09/7.jpg"></p><p>我们不妨换个思路来想这个问题，TCP 协议设计初衷是 <code>让数据进行可靠，高效，安全的传输</code>，如果握手是一次，两次或四次，就无法很好的保证 TCP 的 <code>可靠，安全及高效</code> 的传输，说不定哪天有人设计出来一种可替代 TCP 协议的其他协议就是两次握手或者不需要握手，哈哈！</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="https://cloud.tencent.com/info/d6b27fce815445c3c5f783a39ec204f6.html">如何理解HTTP协议的“无连接，无状态”特点?</a></p><p><a href="https://www.zhihu.com/question/24853633">TCP 为什么是三次握手，而不是两次或四次？</a></p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark tcp ip udp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark：抓取 HTTP 包</title>
      <link href="/2018/09/01/Wireshark%EF%BC%9A%E6%8A%93%E5%8F%96-HTTP-%E5%8C%85/"/>
      <url>/2018/09/01/Wireshark%EF%BC%9A%E6%8A%93%E5%8F%96-HTTP-%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>广告时间，见谅勿怪，看到了就点一下吧，感激不尽🙇‍！</p><hr><p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。</p><p>点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><h2 id="开篇简要"><a href="#开篇简要" class="headerlink" title="开篇简要"></a>开篇简要</h2><p><a href="http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/">初识 Wireshark</a> 简单介绍了强大的 <code>Wireshark</code> 工具，想用好或者是说想发挥 <code>Wireshark</code> 的巨大威力，还有很长的路要走（对我来说）。学习 <code>Wireshark</code> 的成本要比其他网络抓包工具的成本高，所以请做好学习的准备。</p><p>我身边很多开发同事，甚至包括一些刚入职的测试工程师都不喜欢使用抓包工具，遇到问题凭着自己的感觉在那里侃侃而谈，既耽误时间又没有解决问题，有时候还伤了和气，明明可以使用工具可以解决的问题，偏偏要各抒己见。</p><p>说到 <code>Wireshark</code> 更是很少人使用，至少我身边的同事是这样。如果让你一直去看那些 RFC 等网络协议，不到半小时估计你就会感到疲惫，但是结合 <code>Wireshark</code> 来理解网络协议就会感到无比的快乐，何乐而不为呢？！</p><p>继续阅读下去，你可以了解到如下几个知识：</p><p><strong>1. 如何抓取 PC 端、iOS 设备的网络包？</strong><br><strong>2. 使用一些过滤条件如何查看包的内容？</strong><br><strong>3. 如何在 <code>Wireshark</code> 中显示域名？</strong></p><h2 id="PC-端的-HTTP-请求"><a href="#PC-端的-HTTP-请求" class="headerlink" title="PC 端的 HTTP 请求"></a>PC 端的 HTTP 请求</h2><p>打开 <code>Wireshark</code>，选择对应的网口，因为我使用的是无线网络（WiFi），所以选择 <code>Wi-Fi：en0</code> 这个网口，你可以根据你的网络使用情况来选择对应的网口，如下图：</p><p><img src="/upload/images/2018/09/01/1.jpg"></p><p>可以看到对应有网络数据的网口，<code>Wireshark</code> 还在右侧显示对应的波浪，很人性化的设计。双击对应的网口，就可以使用 <code>Wireshark</code> 来抓包看数据了。</p><p>下面我就以 PC 端访问 <code>www.veryitman.com</code> 来演示 HTTP 请求的抓包情况。</p><p>查看本机的 ip 地址，我的是 <code>10.4.17.7</code>, 再来看一下 <code>www.veryitman.com</code> 对应的 ip 地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping ww.veryitman.com</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">64 bytes from 185.199.110.153: icmp_seq=0 ttl=52 time=317.074 ms</span><br></pre></td></tr></table></figure><p>那么， <code>185.199.110.153</code> 就是其对应的 ip 地址。总的来说，对于 PC 端，源地址是 <code>10.4.17.7</code>，目的地址是 <code>185.199.110.153</code>，对于服务器来说，正好反过来。</p><p>首先在过滤器中输入 <code>http</code>, 如下图所示：</p><p><img src="/upload/images/2018/09/01/2.jpg"></p><p>然后打开浏览器，我使用的是 Chrome，打开 <code>http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/</code> 网站站点，<code>Wireshark</code> 显示如下（部分截图）：<br><img src="/upload/images/2018/09/01/3.jpg"></p><p>改变一下过滤语句，将之前的 <code>http</code> 改为 <code>ip.src==10.4.17.7 &amp;&amp; http &amp;&amp; ip.dst==185.199.109.153</code>， 显示如下：<br><img src="/upload/images/2018/09/01/4.jpg"></p><p>可以选择任何一个请求，展示区域如下：<br><img src="/upload/images/2018/09/01/5.jpg"></p><p>上图中的三个区域分别对应的是 <code>View</code> 中的 <code>Packet List</code>， <code>Packet Details</code>，<code>Packet Bytes</code> 三个视图。<br><img src="/upload/images/2018/09/01/6.jpg"></p><p>选择任何一个请求，在对应的 <code>区域2</code> 可以看到该请求的详情。</p><p>刚才使用的过滤条件只看到 PC（客户端）的请求，没有看到服务器返回信息，我们修改一下过滤条件为 <code>ip.src==185.199.109.153 &amp;&amp; http &amp;&amp; ip.dst==10.4.17.7</code>，这样就看以看到服务器的回包信息了，如下图所示：<br><img src="/upload/images/2018/09/01/7.jpg"></p><p>双击进入该响应，就可以看到对应的响应数据详情了。</p><h2 id="iOS-设备的-HTTP-请求"><a href="#iOS-设备的-HTTP-请求" class="headerlink" title="iOS 设备的 HTTP 请求"></a>iOS 设备的 HTTP 请求</h2><p>跟查看 PC 端的 HTTP 请求方式基本一致，只是此时的本机 ip 地址是手机端的而不是 pc 端的。</p><p><a href="http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/">初识 Wireshark</a> 中已经跟大家分享过如何去连接 iOS 设备到 <code>Wireshark</code> 抓包了，这里不再赘述。</p><p>至于查看 iOS 设备的 ip 地址，就很简单了，打开 <code>设置/wifi</code> 看一下详情就知道了。</p><h2 id="显示域名"><a href="#显示域名" class="headerlink" title="显示域名"></a>显示域名</h2><p>如果你经常使用 <code>Charles</code> 抓包，就可以发现 <code>Charles</code> 展示的请求中都是以域名来显示的，但是在 <code>Wireshark</code> 都是显示 ip 地址，或许因此感到不适，那么，<code>Wireshark</code> 能否展示域名呢？</p><p><code>Wireshark</code> 是可以像 <code>Charles</code> 那样展示域名的，只是它默认显示 ip 地址罢了。</p><p>打开 Preferences，如图：<br><img src="/upload/images/2018/09/01/8.jpg"><br><img src="/upload/images/2018/09/01/9.jpg"></p><p>这样 <code>Wireshark</code> 的显示就是另一番景象了如下图所示：<br><img src="/upload/images/2018/09/01/10.jpg"></p><p>当然，你也看出来了，过滤条件还是可以使用的。</p><p>你还可以使用其他的过滤条件，如下面的一些过滤条件，能帮你快速定位你要的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.host == &quot;veryitman.com&quot;</span><br><span class="line"></span><br><span class="line">http.host contains &quot;veryitman.com&quot;</span><br><span class="line"></span><br><span class="line">http contains &quot;HTTP/1.1 200 OK&quot;</span><br></pre></td></tr></table></figure><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark http https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卖废品的一次经历</title>
      <link href="/2018/08/26/%E5%8D%96%E5%BA%9F%E5%93%81%E7%9A%84%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%8E%86/"/>
      <url>/2018/08/26/%E5%8D%96%E5%BA%9F%E5%93%81%E7%9A%84%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="偶遇"><a href="#偶遇" class="headerlink" title="偶遇"></a>偶遇</h2><p>这两天在收拾屋子，本来想把一些不重要的物品直接卖掉，省得给自己增加运输成本。但是又有些不舍，毕竟跟自己在一起生活了这么多年，每一本书，每对桌椅，每件衣服都是我和老婆努力挣钱买回来的，里面都包含着奋斗的故事。</p><p>话又说回来，无舍无得。于是，我就开始将物品分类，按照优先级挑选，重要的东西就放到箱子中，次要的就放到沙发上，不重要的就扔到大厅里，最后再来审视一遍这些不重要的物品是否还有留下来的必要，最终我把不重要的东西放到一个大袋子中，准备把它们卖给废品站。</p><p>在百度上面找了好几家附近收废品的，打电话过去都要求卖家自己把东西拿过去，态度十分不友好，我也就没再多问，就挂掉了电话。</p><p>无独有偶，中午下楼去买东西回来的时候，正好看到一个大爷骑着三轮车在我前面驰骋，大爷的车技贼溜，在小巷子中开出了赛车的感觉。还没等我张嘴，他就即将要离开我的视线，急中生智，我看到他车子后面留有电话，于是我就急忙的努力的追赶着去记住他的电话，最后迫不及待的放下手中的东西，拿出手机拨打了他的电话。</p><p>大爷办事利落，不一会就到了楼下，三下五除二的把废品收拾了一番，像是收获了一批战利品一样。他很惊诧为什么我知道他的电话，我说我看到了你车上的电话号码了，就记下来了。</p><p>大爷说：“小伙子，你的记性还真好，不愧是上过大学的人。“，我说：“是呀，我过目不忘！哈哈！”。</p><p>那天中午，我把东西半卖半送的都给这位大爷了，谁叫他夸我呢！</p><h2 id="思量"><a href="#思量" class="headerlink" title="思量"></a>思量</h2><p>上面这件事算不上什么大事，顶多也就算个鸡毛蒜皮的小事，但是给了我很多回忆和思考。</p><p>很多高中生也包括他们的家长们，都经常会说等上了大学就好了，不用那么累了，在大学的殿堂里可以无忧无虑的 <code>享受</code> 了。在我看来这是不对的，高中之所以累是因为有连绵不绝的作业和没有尽头的考试，当然还有班主任喋喋不休的教导，让你的神经时长处于紧绷的状态。高中是人生中必经的一个过程，至少我觉得它锻炼了我的意志和耐力，包括对心理上的考验，我很感激高中三年的生活。</p><p>大学生活和学习的确是一个值得向往和想象的，你可以吊儿郎当的过完几年大学生活，也可以努力拼搏过来，没有人逼你去怎么做，完全取决于你自己。</p><p>我大学的成绩算是优异，每次看到奖学金名单上有自己的名字，同学们都会说你真厉害，居然考这么好的成绩。我会说，如果你再努力一下肯定比我考的更好，就像那个大爷说我好记性一样，其实并不是我过目不忘，而是自己努力的结果，因为我知道自己并不是天才。</p><p>很多人进入社会参加工作后，发现工作并不是想象中的那般一帆风顺，自己一起进公司的同事，明明能力和自己相当甚至还不如自己，为什么别人就升职加薪，马上就要走上人生巅峰了，自己却还是原地踏步或者举步维艰呢？总是想不明白这是为什么，那是因为你自己没有看到别人比你更加努力。</p><p>还有不少人会抱怨为什么别人能力没有我强，领导偏偏把一些重要的事情交给了他，开始怀疑对方是不是对领导施了什么魔法，而自己从来都没有想过怎么去向对方请教，或者思考自己是不是真的做好了本职工作。</p><p><em><strong>这件小事给了我几个启发：</strong></em></p><p><strong>1. 一定要给自己树立一个长远目标和短期目标，不断的完成短期目标，向长远目标前进。</strong></p><p><strong>2. 对于别人的赞美或是诋毁，要保持一颗平常心，戒骄戒躁。</strong></p><p><strong>3. 不要总是夸你的孩子聪明，要夸他比别人更努力，因为努力比聪明更重要。</strong></p><p><strong>4. 不要总是抱怨命运的不公，多去审视自己的不足，想办法去补全。</strong></p><p><strong>5. 有个可以交心的朋友尤为重要，可以让彼此敞开心扉，无所顾忌的交谈。</strong></p><p>这个世上没有免费的午餐，一切都要靠你自己去奋斗去争取，机会总是留给有准备的人，坚持自己的目标一直前行，相信自己，机会总有一天会和你不期而遇。</p><p>相信总有一天，你会感激正在努力的自己！</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 感悟 学习 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 Wireshark</title>
      <link href="/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/"/>
      <url>/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.veryitman.com/2017/07/23/%E4%BD%BF%E7%94%A8-Charles/">使用 Charles</a> 介绍了在 MacOS 上面的使用 <code>Charles</code> 工具, 虽然 <code>Charles</code> 很不错, 但是其只能抓 HTTP&#x2F;HTTPS 的包, 对 TCP、UDP 等其他协议的网络包, 爱莫能助。</p><p>今天给大家分享强大的网络抓包工具 <code>Wireshark</code>，算是初步认识一下这个工具，后续分享更多关于 <code>Wireshark</code> 的内容。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Wireshark</code> 是免费的，支持 Windows、MacOS 和 Linux，提供丰富的 GUI 交互，能分析所有的网络协议，并且是开源的。</p><p><img src="/upload/images/2018/08/20/1.jpg"></p><p>掌握好 <code>Wireshark</code>，能对绝大部分的网络协议进行分析了，所以学习它的使用对你的工作不无裨益。</p><p>关于 <code>Wireshark</code> 本身 UI（展示的界面内容） 的部分不在本文的讨论范围内，更多关于 <code>Wireshark</code> 的介绍和特性，可以去 <a href="https://www.wireshark.org/">Wireshark 官网</a> 查阅。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我的 MacOS 版本:<br><img src="/upload/images/2018/08/20/2.jpg"></p><p>点击 <code>Wireshark</code> 的 <a href="https://www.wireshark.org/download.html">下载地址</a>, 可以去下载对应的平台版本。</p><p><img src="/upload/images/2018/08/20/3.jpg"></p><blockquote><p>注意: 之前的 Mac 系统版本可能需要安装 <code>x11</code>, 现在新系统不需要安装了.</p></blockquote><h2 id="抓-iOS-设备的数据包"><a href="#抓-iOS-设备的数据包" class="headerlink" title="抓 iOS 设备的数据包"></a>抓 iOS 设备的数据包</h2><p>想抓 iOS 设备的网络数据，需要让 iOS 设备数据通过 MacOS 才行，因为 <code>Wireshark</code> 是针对网口进行抓包的。</p><p>当然了，你的 iOS 设备不需要越狱.</p><p>通过 usb 连接 iOS 设备后，接下来创建远程虚拟接口，在终端执行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvictl -s 设备id(udid)</span><br></pre></td></tr></table></figure><blockquote><p>rvictl 即 Remote Virtual Interface Tool。它可以通过 iOS 设备的 UDID 创建一个虚拟网卡，然后通过这个虚拟网卡监听设备上所有的网络流量。</p></blockquote><p>执行成功后，Mac 会出现一个对应的虚拟网络接口，名字是 rvi0（如果有多个 iOS 设备， 则累加，rvi1，rvi2…），如下图所示：<br><img src="/upload/images/2018/08/20/4.jpg"></p><p>只要启动 <code>Wireshark</code>，监听 rvi0 接口就能抓到 iOS 设备的数据了。</p><blockquote><p>关于获取 iOS 设备 ID(UDID)，可以使用 Xcode, 在 <code>Window/Devices and Simulators</code> 中选择相应设备，右面设备信息的 identifier 里就是对应的 UDID. 也可以通过 iTunes 或者第三方工具如 iTools 获取.</p></blockquote><p>你可以安装 <code>ideviceinstaller</code> 来查看设备 ID.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>然后执行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idevice_id -l</span><br></pre></td></tr></table></figure><p>以抓取下面的一个 HTTP 请求为例，简单说明一下相关的知识。</p><p>GET 请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/news/detailV3.html?id=1279391&amp;COMMON_ACCESS_TOKEN=(null)&amp;COMMON_ACCESS_TOKEN_SECRET=(null)&amp;_cT=IOS&amp;_cV=3.1.3&amp;_cA=PM</span><br></pre></td></tr></table></figure><p>看返回结果，选中 Rsponse(200 OK) 右键, Follow&#x2F;HTTP Stream，如图所示：<br><img src="/upload/images/2018/08/20/5.jpg"></p><p>在弹出的窗口中就可以看到具体的响应内容，以及响应的 json 数据。</p><h2 id="过滤器过滤"><a href="#过滤器过滤" class="headerlink" title="过滤器过滤"></a>过滤器过滤</h2><p>在 <code>Wireshark</code> 中显示过滤器会显示很多当前网络的数据包，如果你想看指定规则的数据包怎么办？</p><p>别担心，<code>Wireshark</code> 给我们提供了过滤功能，按照一定的过滤规则就可以达到你的目的。</p><p><strong>1. 网络协议过滤</strong></p><p>比如 TCP，只显示 TCP 协议，HTTP 只显示 HTTP 协议等。在过滤器输入框中直接输入协议名称即可，不区分大小写。</p><p><strong>2. IP 地址过滤</strong></p><p>如 ip.src &#x3D;&#x3D; 192.168.1.102 显示源地址为 <code>192.168.1.102</code>，<br>而 ip.dst &#x3D;&#x3D; 192.168.1.102, 目标地址为 <code>192.168.1.102</code>。</p><p><strong>3. 端口过滤</strong></p><p>tcp.port &#x3D;&#x3D; 80, 端口为 80 的</p><p>tcp.srcport &#x3D;&#x3D; 80, 只显示 TCP 协议的原端口为 80 的。</p><p><strong>4. Http 模式过滤</strong></p><p>http.request.method &#x3D;&#x3D; “GET”，只显示 HTTP GET 方法的。</p><p><strong>5. 结合逻辑运算符 AND&#x2F;OR 组成复杂的表达式</strong></p><blockquote><p>AND&#x2F;OR 也可以写成 <code>&amp;&amp;</code> &#x2F; <code>||</code></p></blockquote><p>下面举几个常用的示例，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//源地址或者目标地址是192.168.1.103</span><br><span class="line">ip.src == 192.168.1.103 or ip.dst == 192.168.1.103</span><br><span class="line"></span><br><span class="line">//显示所有目标或源地址是192.168.1.1的数据包</span><br><span class="line">ip.addr == 192.168.1.1 </span><br><span class="line"></span><br><span class="line">//显示目标地址是192.168.1.1的数据包</span><br><span class="line">ip.dst == 192.168.1.1 </span><br><span class="line"></span><br><span class="line">//显示源地址是192.168.1.1的数据包</span><br><span class="line">ip.src == 192.168.1.1 </span><br><span class="line"></span><br><span class="line">//tcp 连接端口为9101的数据包</span><br><span class="line">tcp.port == 9101 </span><br></pre></td></tr></table></figure><p>更多的过滤规则可以去 <a href="https://www.wireshark.org/docs/man-pages/wireshark-filter.html">官方手册</a> 和 <a href="https://wiki.wireshark.org/CaptureFilters">CaptureFilters</a> 查阅和学习。</p><h2 id="美中不足"><a href="#美中不足" class="headerlink" title="美中不足"></a>美中不足</h2><p><code>Wireshark</code> 只能查看封包，而不能修改封包的内容，或者发送封包。</p><p>对于 HTTP、HTTPS 网络封包，<code>Wireshark</code> 都可以捕获， 但不能直接解密 HTTPS，所以想使用 <code>Wireshark</code> 来分析 HTTPS 包中的内容，需要去额外配置，较麻烦，后续研究再分享给大家。</p><p>所以建议大家，分析 HTTP&#x2F;HTTPS 去使用各自平台上面的其他工具， 如 <code>Fiddler</code> 和 <code>Charles</code> 等优秀的抓包工具。</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark tcp ip udp http https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置 php7 + Nginx</title>
      <link href="/2018/08/19/%E9%85%8D%E7%BD%AE-php7-Nginx/"/>
      <url>/2018/08/19/%E9%85%8D%E7%BD%AE-php7-Nginx/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><h2 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h2><p>之前为了配合完成一个项目（PHP 版本为5.6），在本机搭建了 PHP56 的环境，后面自己系统升级为 <code>macOS High Sierra</code>，发现系统自带的 PHP 版本已经是 7.1 了，于是就开始使用系统自带的 PHP 版本了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure><p>显示 PHP 版本信息，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP 7.1.16 (cli) (built: Apr  1 2018 13:14:42) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</span><br></pre></td></tr></table></figure><p>系统自带的 PHP7.1 没有默认的 <code>php.ini</code> 文件，执行下面命令查找一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;echo php_ini_loaded_file();&quot;</span><br></pre></td></tr></table></figure><p>此时并没有打印对应的配置文件信息。需要我们手动去复制一份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /private/etc/php.ini.default /private/etc/php.ini</span><br></pre></td></tr></table></figure><p>再次执行上面命令，即可看到配置文件的绝对路径了。或者执行 <code>php --ini</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php --ini</span><br><span class="line"></span><br><span class="line">Configuration File (php.ini) Path: /etc</span><br><span class="line">Loaded Configuration File:         /etc/php.ini</span><br><span class="line">Scan for additional .ini files in: (none)</span><br><span class="line">Additional .ini files parsed:      (none)</span><br></pre></td></tr></table></figure><p>这里有个问题需要注意，<code>php.ini</code> 文件复制成功后，需要下面两步操作，否则在 php 代码发生致命错误的时候，页面不会输出任何内容，只是报 <code>HTTP ERROR 500</code> 的错误。</p><p>第一步，修改 <code>php.ini</code> 文件的权限，否则无法编辑保存，默认是只读属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /private/etc/php.ini</span><br></pre></td></tr></table></figure><p>第二步，编辑 <code>php.ini</code> 文件，将 <code>display_errors = Off</code> 改为下面 <code>on</code> 即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display_errors = On</span><br></pre></td></tr></table></figure><p>记得每次修改完配置文件，需要重启 <code>php-fpm</code> 和 <code>nginx</code> 服务。</p><h2 id="PHP56"><a href="#PHP56" class="headerlink" title="PHP56"></a>PHP56</h2><p><strong>1. 安装 PHP56</strong> </p><p>可以参考下面两篇文章。</p><ul><li><p><a href="http://www.veryitman.com/2017/02/02/PHP-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/">PHP开发准备</a></p></li><li><p><a href="http://www.veryitman.com/2017/02/02/%E5%AE%89%E8%A3%85-PHP-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/">安装 PHP 遇到的问题</a></p></li></ul><p><strong>2. 卸载（删除）PHP56</strong></p><p>执行 brew uninstall </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall php</span><br></pre></td></tr></table></figure><p>即可完成卸载。</p><p>如果卸载遇到问题，就打开 <code>/usr/local/Cellar/</code> 目录，删除对应的 PHP 目录即可。</p><h2 id="配置-php-fpm"><a href="#配置-php-fpm" class="headerlink" title="配置 php-fpm"></a>配置 php-fpm</h2><p>现在新版本的 PHP 其内核已经集成了 php-fpm，我们不需要另外安装了。</p><p>配置 php-fpm 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /private/etc/php-fpm.conf</span><br></pre></td></tr></table></figure><p>找到 error_log 项，添加下面两个配置项，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_log = /usr/local/var/log/php-fpm.log</span><br><span class="line">pid = /usr/local/var/run/php-fpm.pid</span><br></pre></td></tr></table></figure><p>如果不配置上面的配置项，启动 php-fpm 会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: failed to open error_log (/usr/var/log/php-fpm.log): No such file or directory (2)</span><br><span class="line">ERROR: failed to post process the configuration</span><br><span class="line">ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure><p>接下来, 继续配置，将 <code>www.conf.default</code> 复制一份命名为 <code>www.conf</code> 即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /private/etc/php-fpm.d/</span><br><span class="line"></span><br><span class="line">sudo cp www.conf.default www.conf </span><br></pre></td></tr></table></figure><p>不配置上面的，会报如下错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: No pool defined. at least one pool section must be specified in config file</span><br><span class="line">ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure><p>至此，可以启动 php-fpm 了，执行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php-fpm -D</span><br></pre></td></tr></table></figure><p>不出意外的话，已经成功启动，可以使用下面命令查看端口使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 9000</span><br></pre></td></tr></table></figure><p>如果你在启动 php-fpm 遇到下面的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: unable to bind listening socket for address &#x27;127.0.0.1:9000&#x27;: Address already in use (48)</span><br><span class="line">ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure><p>有两种方式解决这个问题</p><p>**1.**修改 php-fpm 使用的端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /private/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><p>将 <code>listen = 127.0.0.1:9000</code> 改为 <code>listen = 127.0.0.1:9001</code> 即可。</p><p>**2.**杀掉9000端口占用的进程</p><p>关闭所有之前启动的 php-fpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall php-fpm</span><br></pre></td></tr></table></figure><p>找到占用端口的进程号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 9000</span><br></pre></td></tr></table></figure><p>然后 <code>kill -9 pid</code>，重新启动 php-fpm 即可。</p><h2 id="安装和配置-Nginx"><a href="#安装和配置-Nginx" class="headerlink" title="安装和配置 Nginx"></a>安装和配置 Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>创建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/var/log/nginx</span><br><span class="line">mkdir -p /usr/local/etc/nginx/sites-available</span><br><span class="line">mkdir -p /usr/local/etc/nginx/sites-enabled</span><br><span class="line">mkdir -p /usr/local/etc/nginx/conf.d</span><br><span class="line">mkdir -p /usr/local/etc/nginx/ssl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www</span><br><span class="line">sudo chown :staff /var/www</span><br><span class="line">sudo chmod 775 /var/www</span><br><span class="line">vi /var/www/info.php</span><br><span class="line">vi /var/www/index.html</span><br><span class="line">vi /var/www/403.html</span><br><span class="line">vi /var/www/404.html</span><br></pre></td></tr></table></figure><p>改变 nginx.conf 配置文件</p><p>该配置文件在 <code>/usr/local/etc/nginx/nginx.conf</code> 下面.</p><p>我的配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">error_log  /usr/local/etc/nginx/logs/error.log debug;</span><br><span class="line">pid        /usr/local/var/run/nginx.pid;</span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  256;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include             mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"> </span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">    access_log  /usr/local/etc/nginx/logs/access.log  main;</span><br><span class="line"> </span><br><span class="line">    sendfile            on;</span><br><span class="line"> </span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line"> </span><br><span class="line">    index index.html index.php;</span><br><span class="line"> </span><br><span class="line">    include /usr/local/etc/nginx/sites-enabled/*; </span><br><span class="line">    include /usr/local/etc/nginx/conf.d/*;</span><br><span class="line">     server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</span><br><span class="line">            index  index.php index.html index.htm; #加index.php</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</span><br><span class="line">index  index.php index.html index.htm; #加index.php</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置了我的 web 目录和支持的文件.</p><h2 id="运行-PHP"><a href="#运行-PHP" class="headerlink" title="运行 PHP"></a>运行 PHP</h2><ul><li><p>创建 index.php</p></li><li><p>启动 php-fpm</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php-fpm</span><br></pre></td></tr></table></figure><p>或者以守护进程的方式来启动 PHP-fpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php-fpm -D</span><br></pre></td></tr></table></figure><ul><li>启动 Nginx</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><ul><li>编辑 index.php</li></ul><p>在 web 目录(我配置的) <code>~/projs/phpdev/nginx/nginx_sites/</code> 新建文件 <code>index.php</code>.</p><p>index.php 里面可以编写代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- lang: php --&gt;</span><br><span class="line">&lt;!-- ~/nginx_sites/index.php --&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    echo &quot;Hello PHP&quot;;</span><br><span class="line">    echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">    </span><br><span class="line">    echo &quot;学习 php&quot;;</span><br><span class="line">    echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">    echo phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器, 输入地址：<a href="http://localhost:8080/index.php">http://localhost:8080/index.php</a> 你会看到下面的页面:<br><img src="/upload/images/2018/08/19/1.jpg"></p><p>也可以在该目录下创建其他 PHP 文件, 如 <code>m.php</code> 文件.</p><p>浏览器中输入 <a href="http://localhost:8080/m.php">http://localhost:8080/m.php</a> 可以执行相对应的文件.</p><p><strong>注意：</strong>这里的 <code>m.php</code> 是新建的 PHP 文件.</p><h2 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h2><p><strong>1. php 配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/private/etc/php.ini</span><br></pre></td></tr></table></figure><p><strong>2. nginx log 文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/var/log/nginx/access.log</span><br><span class="line"></span><br><span class="line">/usr/local/var/log/nginx/error.log</span><br><span class="line"></span><br><span class="line">/usr/local/etc/nginx/logs/error.log</span><br></pre></td></tr></table></figure><p><strong>3. nginx 配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><strong>4. php-fpm 配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/private/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>502 bad gateaway</strong></p><p>我是经常看到这个问题，但是每次引起的原因又不太一样，绝大部分是因为 <code>php-fpm</code> 启动不了或者是其端口错误导致的。</p><p>这种情况下，建议去看 <code>/usr/local/etc/nginx/logs/error.log</code> 日志文件。</p><p>例如下面的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[error] </span><br><span class="line">61016#0: *1 kevent() reported that connect() failed (61: Connection refused) while connecting to upstream, </span><br><span class="line">client: 127.0.0.1, </span><br><span class="line">server: localhost, </span><br><span class="line">request: &quot;GET /3.php HTTP/1.1&quot;, </span><br><span class="line">upstream: &quot;fastcgi://127.0.0.1:9000&quot;, </span><br><span class="line">host: &quot;localhost:8080&quot;</span><br></pre></td></tr></table></figure><p>最终，我修改了 <code>/private/etc/php-fpm.d/www.conf</code> 中端口为 <code>9000</code>（我之前将该端口修改了其他的），重启 <code>php-fpm</code> 解决问题。 </p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP MySql nginx php-fpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单配置 Apache</title>
      <link href="/2018/07/14/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE-Apache/"/>
      <url>/2018/07/14/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE-Apache/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>有时候, 我们希望在自己本机(PC)搭建一个 WebServer, 然后自己可以在浏览器或者手机上面可以访问对应的地址直接查看效果, 再或者希望测试下载功能等, 其实 MacOS 自带的有 Apache 服务器.</p><p>下面简单分享一下, 在 MacOS 中如何简单的使用 Apache 服务器.</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>常用的命令有开启&#x2F;重启&#x2F;停止等.</p><p>1.开启: <code>sudo apachectl start</code><br>2.重启: <code>sudo apachectl restart</code><br>3.关闭: <code>sudo apachectl stop</code><br>4.查看版本号: <code>httpd -v</code></p><p><strong>1.查看 Apache 版本号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpd -v  </span><br></pre></td></tr></table></figure><p>或者使用下面的命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl -v</span><br></pre></td></tr></table></figure><p>查看结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Server version: Apache/2.4.28 (Unix)</span><br><span class="line">Server built:   Oct  9 2017 19:54:20</span><br></pre></td></tr></table></figure><p><strong>2.启动 Apache</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start</span><br></pre></td></tr></table></figure><p>在浏览器打开: <a href="http://localhost/">http://localhost</a></p><p>会显示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It works</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/07/14/1.jpg"></p><p><strong>3.停止 Apache</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl stop</span><br></pre></td></tr></table></figure><p>如果没有开启 Apache 服务, 执行上面命令的话, 会报下面的错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/LaunchDaemons/org.apache.httpd.plist: </span><br><span class="line">Could not find specified service</span><br></pre></td></tr></table></figure><p><strong>4.重新启动 Apache</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure><p>如果修改了 Apache 的配置文件, 需要重新启动 Apache 服务, 执行上面的命令即可.</p><h2 id="配置-Sites"><a href="#配置-Sites" class="headerlink" title="配置 Sites"></a>配置 Sites</h2><p>在自己的用户目录, 新建一个 <code>Sites</code> 目录, 例如我的用户目录是 <code>/Users/mark</code>, 可以在终端分别执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/mark</span><br><span class="line"></span><br><span class="line">mkdir Sites</span><br></pre></td></tr></table></figure><p>执行成功后, 可以看到如下图所示的目录:</p><p><img src="/upload/images/2018/07/14/2.jpg"></p><p>接下来修改 Apache 中的配置文件, 执行下面命令开始编辑 <code>httpd.conf</code> 文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apache2/httpd.conf </span><br></pre></td></tr></table></figure><p>打开 httpd.conf 文件，查找 <code>userdir</code> 关键字.</p><p>找到如下两行被注释掉的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Include /private/etc/apache2/extra/httpd-userdir.conf</span><br><span class="line"></span><br><span class="line">#LoadModule userdir_module libexec/apache2/mod_userdir.so</span><br></pre></td></tr></table></figure><p>将其前面的 <code>#</code>(注释) 去掉, 紧接着编辑这个文件, 增加如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /Users/mark/Sites&gt;</span><br><span class="line">  Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>将上面的这些代码放到如下代码下面即可:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/Library/WebServer/CGI-Executables&quot;&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Options All</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>保存该文件并退出 vim.</p><p>执行下面的命令修改 <code>httpd-userdir.conf</code> 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /private/etc/apache2/extra/httpd-userdir.conf</span><br></pre></td></tr></table></figure><p>增加如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserDir Sites</span><br><span class="line"></span><br><span class="line">&lt;IfModule bonjour_module&gt;</span><br><span class="line">   RegisterUserSite customized-users</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 如果在 <code>/private/etc/apache2/extra/</code> 目录下没有该文件, 新建一个即可.</p><p>保存文件并退出即可.</p><p>我们可以将自己需要运行的 html 等文件放到该目录, 如我将 <code>index.html</code> 放到该目录.</p><p>重新启动 Apache 服务, 在浏览器中输入 <code>http://localhost/~mark/</code>, 可以看到 <code>index.html</code> 里面的内容.</p><h2 id="WebServer-目录"><a href="#WebServer-目录" class="headerlink" title="WebServer 目录"></a>WebServer 目录</h2><p>上面我们提到, 启动 Apache 服务之后, 在浏览器可以看到 <code>It Works</code> 的字样, 那么这个是哪个文件输出的呢?</p><p>这个文件是 <code>sudo mvim index.html.en~orig</code>, 在如下目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/WebServer/Documents</span><br></pre></td></tr></table></figure><p>可以使用 vim 编辑该文件, 然后再刷新浏览器就可以看到其变化.</p><p>我们也可以把自己的 html 文件放到这里, 如 <code>mark.html</code>, 内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hi, mark, Apache server works!&lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中输入 <code>http://localhost/mark.html</code>, 可以看到对应的输出.</p><p>如果嫌配置 <code>Sites</code> 目录麻烦, 可以使用这种方式, 直接拷贝对应的文件或者目录放到 <code>/Library/WebServer/Documents</code> 中, 只不过需要 root 权限罢了.</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache WebServer MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RunLoop: 移除常驻线程</title>
      <link href="/2018/07/01/RunLoop-%E7%A7%BB%E9%99%A4%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/07/01/RunLoop-%E7%A7%BB%E9%99%A4%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>下面两篇文章:</p><ul><li><p><a href="http://www.veryitman.com/2018/04/21/%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/">常驻线程是一种什么体验</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/06/RunLoop-NSTimer-%E5%AE%9E%E7%8E%B0%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/">NSTimer 实现常驻线程的问题</a></p></li></ul><p>都是在 iOS 平台上如何利用 <code>RunLoop</code> 的特性实现常驻线程.</p><p>可能你看到本篇文章的标题 <code>移除常驻线程</code>, 有点不理解甚至觉得作者是不是有点神经病, 都已经需要常驻线程了, 为什么还要去退出呢?</p><p>实际应用场景中的确几乎遇不到这种情况, 所以, 本篇只是从技术的角度给大家分享 <code>RunLoop</code> 其他的一些知识点.</p><p>且耐住性子往下看…</p><p>为了不让大家误解, 统一一下相关的词汇和语境.</p><ul><li>输入源, 包括 source 和 timer.</li><li>退出 RunLoop 指的是在常驻线程的方法中立即返回.</li><li>这里的 RunLoop 指的是子线程中的 RunLoop 不是主线程中的.</li><li>结合之前介绍常驻线程的文章来看现在的文章, 不然不好理解.</li></ul><h2 id="运行-RunLoop-的方法"><a href="#运行-RunLoop-的方法" class="headerlink" title="运行 RunLoop 的方法"></a>运行 RunLoop 的方法</h2><p>这里有三种方式开启运行 RunLoop, 分别如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)run;</span><br><span class="line"></span><br><span class="line">- (void)runUntilDate:(NSDate *)limitDate;</span><br><span class="line"></span><br><span class="line">- (void)runMode:(NSString *)mode beforeDate:(NSDate *)limitDate;</span><br></pre></td></tr></table></figure><ul><li><strong>run 方法</strong></li></ul><p>看一下 API 文档如何解释 <code>run</code> 方法的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Puts the receiver into a permanent loop, </span><br><span class="line">during which time it processes data from all attached input sources.</span><br><span class="line">If no input sources or timers are attached to the run loop, this method exits immediately; </span><br><span class="line">otherwise, it runs the receiver in the NSDefaultRunLoopMode by repeatedly invoking runMode:beforeDate:. </span><br><span class="line">In other words, this method effectively begins an infinite loop that processes data from the run loop’s input sources and timers.</span><br></pre></td></tr></table></figure><p>大致意思讲的是, 在没有任何输入源的情况下, <code>run</code> 方法会立即执行后退出, 不会保持线程的持久性, 换句话说, 在有输入源的情况下, 该方法会进入一个无限循环当中. 本质上, 在 <code>NSDefaultRunLoopMode</code> 模式下, 该方法是反复调用 <code>runMode:beforeDate:</code> 方法的.</p><p>在之前文章实现常驻线程的代码中, 我们使用了 <code>run</code> 方法来开启运行 RunLoop.</p><p>可以看出, 我们之前实现的常驻线程使用 <code>run</code> 方法是无法退出常驻线程的.</p><ul><li>*<em>runUntilDate:(NSDate <em>)limitDate 方法</em></em></li></ul><p>该方法 API 释义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runs the loop until the specified date, </span><br><span class="line">during which time it processes data from all attached input sources.</span><br></pre></td></tr></table></figure><p>保证有输入源的情况下该方法启动的 RunLoop 可以在指定的日期内一直运行不会返回. 换句话说, 日期只要已到该方法就会立即退出 RunLoop.</p><p>示例代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//等同于 run, 可保证一直运行</span><br><span class="line">[runLoop runUntilDate:[NSDate distantFuture]];</span><br><span class="line"></span><br><span class="line">//立即返回, 退出 RunLoop</span><br><span class="line">[runLoop runUntilDate:[NSDate date]];</span><br><span class="line"></span><br><span class="line">//然后过12秒后返回</span><br><span class="line">[runLoop runUntilDate:[NSDate dateWithTimeIntervalSinceNow:12.0f]];</span><br></pre></td></tr></table></figure><ul><li>**runMode:(NSString <em>)mode beforeDate:(NSDate <em>)limitDate 方法</em></em></li></ul><p>该方法有两个参数 <code>mode</code> 和 <code>limitDate</code>, <code>mode</code> 就是 RunLoop 的运行模式, <code>limitDate</code> 就是上面方法一样的释义即在指定的日期内.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runs the loop once, blocking for input in the specified mode until a given date.</span><br></pre></td></tr></table></figure><p>可以这么理解, 该方法开启的 RunLoop 处理完之后会立即返回(once), 如果在指定日期内事件还没处理, 在该日期后会立即返回.<br>换句话说, 如果指定的日期是当前的, 该方法执行后 RunLoop 会立即退出.</p><p>示例代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//立即返回</span><br><span class="line">[runLoop runMode:NSDefaultRunLoopMode beforeDate:[NSDate date]];</span><br><span class="line">        </span><br><span class="line">//有事件到达处理后就返回，如果没有则过12秒返回</span><br><span class="line">[runLoop runMode:NSDefaultRunLoopMode beforeDate:[NSDate dateWithTimeIntervalSinceNow:12.0]]; </span><br></pre></td></tr></table></figure><p>这三个方法, 总结一下大概如下:</p><ul><li>这三个方法在没有任何输入源情况下会都立即返回(退出 RunLoop), 不会等待.</li><li><code>run</code> 可保证 RunLoop 在有输入源的情况下一直运行.</li><li><code>runUntilDate</code> 可以通过设置超时时间来退出 RunLoop. 超时时间一过就会立即退出 RunLoop.</li><li>使用 <code>runMode</code> 方式启动的 RunLoop 会在处理完事件后或者超时后, 立即返回. 即可以通过设置超时时间或者使用 <code>CFRunLoopStop</code> 方法来退出 RunLoop.</li></ul><h2 id="移除常驻线程"><a href="#移除常驻线程" class="headerlink" title="移除常驻线程"></a>移除常驻线程</h2><p>先看一下, 在子线程执行的方法中如何实现的. 示例代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (void)asyncRun &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">        _threadRunLoop = runLoop;</span><br><span class="line">        </span><br><span class="line">        // 保持常驻线程的方式1: source</span><br><span class="line">        NSPort *port = [NSMachPort port];</span><br><span class="line">        _threadPort = port;</span><br><span class="line">        [runLoop addPort:port forMode:NSRunLoopCommonModes];</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</span><br><span class="line">        </span><br><span class="line">        // 执行其他逻辑</span><br><span class="line">        //...</span><br><span class="line">        </span><br><span class="line">        // 手动开启 RunLoop</span><br><span class="line">        // [runLoop run];</span><br><span class="line">        </span><br><span class="line">        while (!self.stopLoopRunning &amp;&amp; [runLoop runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantPast]]) &#123;</span><br><span class="line">            </span><br><span class="line">            // 这里是为了验证常驻线程是否已经退出</span><br><span class="line">            NSLog(@&quot;--- asyncRun ----&quot;);</span><br><span class="line">            </span><br><span class="line">            // 实际业务中, 建议使用空语句实现</span><br><span class="line">            ; //实现为空语句</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合上面讲解的原理, 这里选择使用 <code>runMode</code> 方法来开启运行 RunLoop. 大家也可以自由发挥使用其他的方法.</p><p><strong>注意: <code>stopLoopRunning</code> 是定义的一个属性.</strong></p><p>移除的示例代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidDisappear:animated];</span><br><span class="line">    </span><br><span class="line">    // 取消线程</span><br><span class="line">    // 实际业务场景中自行决定 canCancel 的设置, 这里只是示例</span><br><span class="line">    BOOL canCancel = YES;</span><br><span class="line">    if (canCancel) &#123;</span><br><span class="line">        [[self permanentThread] cancel];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /// 停止常驻线程</span><br><span class="line">    &#123;</span><br><span class="line">        self.stopLoopRunning = YES;</span><br><span class="line">        </span><br><span class="line">        // 移除 port</span><br><span class="line">        // 如果是用 timer 的方式的常驻线程, 可以 invalid 对应的 timer</span><br><span class="line">        [self.threadRunLoop removePort:self.threadPort forMode:NSRunLoopCommonModes];</span><br><span class="line">        </span><br><span class="line">        // 停止 RunLoop</span><br><span class="line">        if (nil != self.threadRunLoop) &#123;</span><br><span class="line">            CFRunLoopStop([self.threadRunLoop getCFRunLoop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>离开页面后, 可以发现 <code>NSLog(@&quot;--- asyncRun ----&quot;);</code> 停止了打印, 并且当前的 Controller 也 dealloc 了.</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RunLoop 常驻线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 逆向: dumpdecrypted 砸壳记</title>
      <link href="/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/"/>
      <url>/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>今天是一个特别的日子, 高考的第一天, 祝各位莘莘学子金榜题名.</p><p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/">iOS 逆向: 砸壳</a> 介绍了如何使用工具 <code>Clutch</code> 对 iOS 的应用进行砸壳操作, 今天继续给大家分享使用另外一个工具 <code>dumpdecrypted</code> 对 APP 进行砸壳.</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>有些朋友就会问了, 既然 <code>Clutch</code> 已经很牛B了, 为什么还需要 <code>dumpdecrypted</code> 这个工具呢? </p><p>刚开始的时候, 我也很排斥使用 <code>dumpdecrypted</code> 这个工具的, 使用起来比较复杂, 并且套路不熟的情况下还很容易出错. </p><p>之前说过 <code>Clutch</code> 并不是万能的, 从 App Store 下载的 App(比如 WeChat)有些并不能使用 <code>Clutch</code> 来进行砸壳, 换句话说, 使用 <code>Clutch</code> 工具来进行砸壳会失败, 那么, <code>dumpdecrypted</code> 就登场了.</p><p>本次砸壳的系统依然是 <code>iOS10.3.x</code>, 工具使用 <code>dumpdecrypted</code>, 砸壳的对象是 WeChat 这个 App.</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>MacOS PC</li><li>越狱手机一台(我用的是iPhone6SPlus 10.3.1)</li><li>dumpdecrypted</li><li>class-dump</li><li>在 Cydia 中安装 cycript, 可以先不用管 cycript 是什么, 下载安装即可.</li><li>iFunBox 或者其他助手工具</li></ul><h2 id="编译-dumpdecrypted"><a href="#编译-dumpdecrypted" class="headerlink" title="编译 dumpdecrypted"></a>编译 dumpdecrypted</h2><p>去 <a href="https://github.com/stefanesser/dumpdecrypted">Github</a> 下载 <code>dumpdecrypted</code> 源码, 源码就一个 C 源文件.</p><p>下载 zip 包之后, 解压, 如图:<br><img src="/upload/images/2018/06/07/1.jpg"></p><p>在当前目录, 执行 <code>make</code> 即可完成编译, 如图所示:<br><img src="/upload/images/2018/06/07/2.jpg"></p><p>编译成功后生成 <code>dumpdecrypted.dylib</code> 文件.</p><p>这里有个小插曲, 编译 <code>dumpdecrypted</code> 的时候报错了, 错误信息如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xcrun: error: SDK <span class="string">&quot;iphoneos&quot;</span> cannot be located</span><br><span class="line">xcrun: error: unable to lookup item <span class="string">&#x27;Path&#x27;</span> <span class="keyword">in</span> SDK <span class="string">&#x27;iphoneos&#x27;</span></span><br><span class="line">clang: warning: no such sysroot directory: <span class="string">&#x27;-F/System/Library/Frameworks&#x27;</span> [-Wmissing-sysroot]</span><br><span class="line">dumpdecrypted.c:27:10: fatal error: <span class="string">&#x27;stdio.h&#x27;</span> file not found</span><br></pre></td></tr></table></figure><p>无法找到对应的 <code>SDK</code> 和 <code>stdio.h</code> 文件, 这种问题大多数是 Xcode 路径造成的.</p><p>使用下面的命令看一下系统指向的 Xcode 路径:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select -p</span><br></pre></td></tr></table></figure><p>控制台输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure><p>显然不是 Xcode 的路径, 那只能重新切换一下其路径即指向正确的<code> Xcode</code> 路径即可.</p><p>命令如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure><p>再次编译 <code>dumpdecrypted</code> 即可成功完成.</p><h2 id="对-dumpecrypted-dylib-签名"><a href="#对-dumpecrypted-dylib-签名" class="headerlink" title="对 dumpecrypted.dylib 签名"></a>对 dumpecrypted.dylib 签名</h2><blockquote><p>如果不对该文件进行签名, 后续砸壳的操作会失败.</p></blockquote><p>先找到已经在电脑上面安装的苹果开发者证书, 操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 列出可签名证书, 找到 mac 上面已经安装的证书</span><br><span class="line">security find-identity -v -p codesigning</span><br></pre></td></tr></table></figure><p>为 dumpecrypted.dylib 签名, 命令如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --force --verify --verbose --sign <span class="string">&quot;iPhone Developer: xxx xxxx (xxxxxxxxxx)&quot;</span> dumpdecrypted.dylib</span><br></pre></td></tr></table></figure><p>其中, <code>&quot;iPhone Developer: xxx xxxx (xxxxxxxxxx)&quot;</code> 为你自己本机安装的开发者证书名称.</p><h2 id="SSH-连接手机"><a href="#SSH-连接手机" class="headerlink" title="SSH 连接手机"></a>SSH 连接手机</h2><p>使用 OpenSSH 让 Mac 和手机连接起来 这样可以很方便的在 Mac 终端使用 shell 命令来操作手机的目录了.</p><p>关于 OpenSSH 的使用请参考我之前的博文 <a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a>.</p><h2 id="查找目标-App-所在进程"><a href="#查找目标-App-所在进程" class="headerlink" title="查找目标 App 所在进程"></a>查找目标 App 所在进程</h2><ul><li>双击 Home 按键后, 手动杀掉 iPhone 上面所有在后台的 App.</li><li>Home 到手机桌面.</li><li>打开目标 App 即WeChat, 这里称之为 TargetApp.</li><li>Home 到手机桌面.</li><li>查看当前运行的所有进程, 命令如下:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e</span><br></pre></td></tr></table></figure><p>看到这个货:<br><img src="/upload/images/2018/06/07/3.jpg"></p><p>在如下目录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/containers/Bundle/Application/2837EC87-7C28-45C5-9309-24FACD3A97C9/WeChat.app/WeChat</span><br></pre></td></tr></table></figure><p><code>WeChat.app</code> 就是我们要找的 TargetApp.</p><p>连接 SSH 成功后, 在 MacOS 终端 <code>ls</code> 一下该目录, 可以发现 <code>WeChat.app</code> 躺在那里.<br><img src="/upload/images/2018/06/07/4.jpg"></p><h2 id="砸壳"><a href="#砸壳" class="headerlink" title="砸壳"></a>砸壳</h2><p><strong>1. 查找 Documents 目录</strong></p><p><code>WeChat</code> 为当前的进程目标执行文件名称, 从上面的图可以看出, 其对应的进程 id 是 <code>18983</code>.</p><p>在命令行中通过 cycript 执行如下操作:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cycript -p 18983</span><br></pre></td></tr></table></figure><p>再执行 OC 的方法, 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSFileManager</span> defaultManager] URLsForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomains:<span class="built_in">NSUserDomainMask</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>可以看到对应的输出, 如下图所示, 这就是对应的 Documents 目录.<br><img src="/upload/images/2018/06/07/5.jpg"></p><blockquote><p>注意: 执行过程中, 在 iPhone 上面打开运行一下 App, 不然上面的执行一直卡在那里不动.</p></blockquote><p>找到目录如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/mobile/Containers/Data/Application/2EFA08B6-DD7B-41A6-92C9-C6115CA6DDA1/Documents/</span><br></pre></td></tr></table></figure><p>同理, 你也可以使用 iFunBox 查看该目录.</p><p><strong>2. 拷贝 dumpdecrypted.dylib</strong>.</p><p>拷贝 <code>dumpdecrypted.dylib</code> 这个之前编译签名好的文件到iPhone 上面该 APP 的 Documents 目录有两种方法.</p><p>第一种方法, 直接在 mac 上面拖拽 <code>dumpdecrypted.dylib</code> 到 iFunBox 显示的这个目录中, 这种方法比较简单且快.</p><p>第二种方法, 使用 <code>scp</code> 命令进行操作.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/dumpdecrypted.dylib root@192.168.99.231:/var/mobile/Containers/Data/Application/2EFA08B6-DD7B-41A6-92C9-C6115CA6DDA1/Documents/</span><br></pre></td></tr></table></figure><p><code>192.168.99.231</code> 是 iPhone 设备的 ip 地址.</p><p><strong>3. 退出 cycript, 回到命令行模式</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + d</span><br></pre></td></tr></table></figure><p><strong>4. cd 到 Documents 目录</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/mobile/Containers/Data/Application/2EFA08B6-DD7B-41A6-92C9-C6115CA6DDA1/Documents/</span><br></pre></td></tr></table></figure><p><strong>5. 砸壳</strong></p><p>终端在 Documents 目录下面, 执行下面命令即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/containers/Bundle/Application/2837EC87-7C28-45C5-9309-24FACD3A97C9/WeChat.app/WeChat</span><br></pre></td></tr></table></figure><p>执行过程显示如下:<br><img src="/upload/images/2018/06/07/6.jpg"></p><p>最后生成了 <code>WeChat.decrypted</code> 文件, 如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--  1 root   mobile 74513728 Jun  7 15:20 WeChat.decrypted</span><br><span class="line">drwxr-xr-x 14 mobile mobile      448 Jun  7 15:20 .</span><br><span class="line">-rw-r--r--  1 root   mobile   207760 Jun  7 15:15 dumpdecrypted.dylib</span><br><span class="line">-rw-r--r--  1 mobile mobile        8 Jun  7 13:22 db.globalconfig</span><br><span class="line">-rw-r--r--  1 mobile mobile       15 Jun  7 11:35 SafeMode.dat</span><br><span class="line">drwxr-xr-x 26 mobile mobile      832 Jun  7 11:35 MMappedKV</span><br><span class="line">drwxr-xr-x  3 mobile mobile       96 Jun  7 11:35 CrashReport</span><br><span class="line">-rw-r--r--  1 mobile mobile     1011 Jun  7 11:35 LocalInfo.lst</span><br><span class="line">drwxr-xr-x  5 mobile mobile      160 Jun  7 11:35 MemoryStat</span><br><span class="line">drwxr-xr-x  6 mobile mobile      192 Jun  7 11:35 00000000000000000000000000000000</span><br><span class="line">drwxr-xr-x 15 mobile mobile      480 Jun  5 13:43 MMResourceMgr</span><br><span class="line">-rw-r--r--  1 mobile mobile      592 Jun  5 13:43 heavy_user_id_mapping.dat</span><br><span class="line">drwxr-xr-x  2 mobile mobile       64 Jun  5 10:07 OpenImResource</span><br></pre></td></tr></table></figure><p>使用 <code>iFunBox</code> 或者 <code>scp</code> 命令将 <code>WeChat.decrypted</code> 文件导出到 mac 的任意目录即可.</p><p>后续会跟大家分享如何使用砸壳后的文件, 敬请期待.</p><h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote><p>基于 iOS10.3.1 进行的实践。</p></blockquote><ul><li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/">iOS 逆向: dumpdecrypted 砸壳记</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/">iOS 逆向: 砸壳</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/">iOS 逆向: 查看系统文件目录和结构</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a></p></li><li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/">dumpdecrypted 砸壳：导出头文件</a></p></li></ul><hr><p><strong>总有一天，你一定会感激正在努力的自己~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 逆向: 砸壳</title>
      <link href="/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/"/>
      <url>/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>所谓的砸壳, 指的是将从 App Store 上面下载的 App 进行破解的过程. 从 App Store 上下载的 ipa 中的二进制文件是经过加密(加壳)的，需要通过破解才能让我们对其 <code>为所欲为</code>, 这里的破解就是通常所说的砸壳.</p><p>类似的, Android 应用(apk 文件)也有加壳操作, 如果想破解别人的 apk, 首先要进行砸壳操作.</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>[1]. Clutch<br>[2]. iFunBox 或者 <code>pp 助手</code><br>[3]. 越狱手机一台(本人iPhone6sPlus iOS10.3.x 系统).<br>[4]. 可以正常使用 SSH 功能.</p><p>如果你还没有安装上面提到的除 <code>Clutch</code> 之外的工具, 请先阅读 <a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/">iOS 逆向: 查看系统文件目录和结构</a> 这篇文章, 并安装对应的工具.</p><h2 id="安装-Clutch"><a href="#安装-Clutch" class="headerlink" title="安装 Clutch"></a>安装 Clutch</h2><p>可以在 Github 获取 <a href="https://github.com/KJCracks/Clutch">Clutch 源码</a>, 然后自己在 MacOS 上面编译得到二进制文件.</p><p>也可以去直接下载已经编译好的 <a href="https://github.com/KJCracks/Clutch/releases">二进制包</a>, 直接使用, 我是直接下载了已经编译好的二进制包的, 截止到写这篇文章为止, <code>Clutch</code> 版本为 <code>2.0.4</code>.</p><p>下载完成后, 我将其放到 <code>~/Downloads</code> 目录下面了.</p><p>准备好越狱设备, 保证可以正常连接 wifi, 使用 scp 命令将 <code>Clutch</code> 二进制文件复制到设备的系统目录中, 命令如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/Downloads/Clutch root@192.168.91.126:/usr/bin</span><br></pre></td></tr></table></figure><p>其中, <code>192.168.91.126</code> 是我设备连接 wifi 后的 IP 地址.</p><p>复制成功后, 使用 iFunBox 可以看到 <code>Clutch</code> 静静地躺在那里.</p><p><img src="/upload/images/2018/05/13/6.jpg"></p><p>你可以使用 iFunBox 或者 <code>pp 助手</code>, 直接将 <code>~/Downloads/Clutch</code> 拖拽到 <code>/usr/bin</code> 目录.</p><h2 id="Clutch-的基本使用"><a href="#Clutch-的基本使用" class="headerlink" title="Clutch 的基本使用"></a>Clutch 的基本使用</h2><p>SSH 连接越狱设备, 开始使用 <code>Clutch</code>. 关于使用 SSH, 可以阅读一下 <a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a> 这篇文章.</p><p>如果你发现直接执行 <code>Clutch</code> 说没有权限之类的提示, 可以先将其授予可执行的权限.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/bin/Clutch</span><br></pre></td></tr></table></figure><p>Clutch 命令选项如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-b --binary-dump     Only dump binary files from specified bundleID</span><br><span class="line">-d --dump            Dump specified bundleID into .ipa file</span><br><span class="line">-i --print-installed Print installed application</span><br><span class="line">--clean              Clean /var/tmp/clutch directory</span><br><span class="line">--version            Display version and exit</span><br><span class="line">-? --help            Display this help and exit</span><br></pre></td></tr></table></figure><p><code>-b</code> 选项表示产出一个二进制文件, <code>-d</code> 选项表示产出一个 ipa 文件, <code>-i</code> 表示列出手机上面已经安装的 APP.</p><p>我们先看一下手机上已经安装的 App, 命令如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Clutch -i</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/05/13/7.jpg"></p><p>这些 APP 前面的数字表示指定的 id. <code>-d</code> 和 <code>-b</code> 选项都需要指定这些 id.</p><h2 id="砸吧-骚年"><a href="#砸吧-骚年" class="headerlink" title="砸吧, 骚年"></a>砸吧, 骚年</h2><p>我们现在开始使用 <code>Clutch</code> 来对 APP 进行砸壳操作, 这里以已经安装的 App 序号为 8 的为例子.</p><p>使用下面的命令开始砸壳:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Clutch -d 8</span><br></pre></td></tr></table></figure><p>效果如下图所示:</p><p><img src="/upload/images/2018/05/13/8.jpg"></p><p>砸壳成功后会在 <code>/private/var/mobile/Documents/Dumped</code>  这个目录生成对应的 <code>*.ipa</code> 文件.</p><p>砸壳后的 ipa 文件, 可以从 iFunBox 中复制到 MacOS 的目录中, 然后你就可以对该 ipa 进行下一步操作了, 比如获取图片&#x2F;音频&#x2F;视频等资源和对应的头文件. 关于这些后续的越狱工作, 我会在下几篇博客中分享给大家.</p><p>也许有人会说了, 我自己从 <code>pp 助手</code> 中备份指定的 App 就可以获取资源了, 不需要使用 <code>Clutch</code> 这么麻烦了. 高系统版本, <code>pp 助手</code> 是无法直接获取 ipa 文件的, 况且我们也不仅仅是想获取别人 APP 的资源文件.</p><p>当然了, 你可以从越狱 APP 市场直接下载已经被砸壳的 App 进行玩耍, 不需要自己千辛万苦的去砸壳了.</p><h2 id="Clutch-并不是万能的"><a href="#Clutch-并不是万能的" class="headerlink" title="Clutch 并不是万能的"></a>Clutch 并不是万能的</h2><p>上面大家可以看出, <code>Clutch</code> 是可以进行砸壳的并且也挺方便, 但 <code>Clutch</code> 并不是万能的, 也就是说, <code>Clutch</code> 不能将任意一个 App Store 下载 APP 进行砸壳.</p><p>拿上面序号为4 的微信来说, 执行下面命令报错:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Clutch -d 4</span><br></pre></td></tr></table></figure><p>砸壳执行过程如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Writing new checksum</span><br><span class="line">...</span><br><span class="line">FAILED: &lt;WeChat bundleID: com.tencent.xin&gt;</span><br><span class="line">Finished dumping com.tencent.xin <span class="keyword">in</span> 28.7 seconds</span><br></pre></td></tr></table></figure><p>还有一些 APP, 再被砸壳的时候会报如下的错误:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not obtain mach port either the process is dead</span><br></pre></td></tr></table></figure><p>虽然最新版本(2.0.4)说解决了该问题, 但是实际操作过程中, 还是会出现这个问题, 无法进行砸壳.</p><h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote><p>基于 iOS10.3.1 进行的实践。</p></blockquote><ul><li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/">iOS 逆向: dumpdecrypted 砸壳记</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/">iOS 逆向: 砸壳</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/">iOS 逆向: 查看系统文件目录和结构</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a></p></li><li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/">dumpdecrypted 砸壳：导出头文件</a></p></li></ul><hr><p><strong>特别喜欢上善如水这句话，你呢？</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 逆向: 查看系统文件目录和结构</title>
      <link href="/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/"/>
      <url>/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a> 中给大家分享了如何使用工具对 iOS10.3 的系统进行越狱和配置使用 SSH 的内容, 今天继续探逆向的知识.</p><p>手机被越狱之后, 我们首先要搞清楚是否能够正常的访问手机里面的文件和目录结构, 这些文件和目录结构究竟是什么样的, 虽然这些知识很基础, 但是还是很有必要去了解和学习的, 就算是为后期逆向 APP 做点准备吧. </p><h2 id="安装-iFunBox"><a href="#安装-iFunBox" class="headerlink" title="安装 iFunBox"></a>安装 iFunBox</h2><p><code>iFunBox</code> 是一个可以浏览 iPhone 文件目录的文件管理工具, 支持 MacOS 和 Windows 两个平台.</p><p>点击 <a href="http://www.i-funbox.com/">下载地址</a> 可以去下载 MacOS 版本的 iFunBox. 关于 <code>iFunBox</code> 的介绍和特性可以去 <a href="http://www.i-funbox.com/en_about.html">这里</a> 查阅.</p><p>最新版本是 <code>1.8</code>, 如图:</p><p><img src="/upload/images/2018/05/13/1.jpg"></p><p>手机插上 USB 连接上 Mac 电脑, iFunBox 就可以识别你的手机了, 如图所示:</p><p><img src="/upload/images/2018/05/13/2.jpg"></p><p>这个时候, 你点击 <code>Raw File System</code> 其实是看不到 iPhone 的系统目录的, 接下来在 iPhone 中安装另外一个软件就可以了.</p><h2 id="安装-Apple-File-Conduit-2"><a href="#安装-Apple-File-Conduit-2" class="headerlink" title="安装 Apple File Conduit 2"></a>安装 Apple File Conduit 2</h2><p>在 Cydia 中搜索 Apple File Conduit, 如下图所示.</p><p><img src="/upload/images/2018/05/13/3.jpg"></p><p>点击更改&#x2F;安装即可.</p><p>如果你没有搜索到, 那么就需要自己添加对应的软件源地址.</p><p>点击【软件源】–编辑&#x2F;添加 –输入源地址 <code>apt.25pp.com</code> – 添加源, 然后再去搜索 <code>Apple File Conduit</code> 安装.</p><p>安装好之后, 再用 <code>iFunBox</code>, 就可以正常查看 iPhone 的系统目录了, 如下图所示:</p><p><img src="/upload/images/2018/05/13/4.jpg"></p><p>看到这些目录, 是不是跟 linux 或者 MacOS 的目录有很多相似的地方, 哈哈.</p><h2 id="安装-pp-助手"><a href="#安装-pp-助手" class="headerlink" title="安装 pp 助手"></a>安装 pp 助手</h2><p>既然已经安装了 <code>iFunBox</code> 工具, 那为什么还需要安装 <code>pp 助手</code> 之类的工具呢? 其实, 这个看个人的需要吧, 在某种程度上, <code>pp 助手</code> 的界面和便捷性要比 <code>iFunBox</code> 好一点.</p><p>安装好 <code>pp 助手</code> 后, 点击 Tools&#x2F;File Manager 显示的目录导航, 如图:</p><p><img src="/upload/images/2018/05/13/5.jpg"></p><p>可以看出, 相比 <code>iFunBox</code> 的界面显示, <code>pp 助手</code> 工具显得更加友好一些. </p><p>至于使用哪个工具, 要看个人爱好和自己的工作需要, 毕竟工具都是为了提高我们学习和工作效率的, 没有什么绝对的好与坏, 自己觉得合适顺手就好了, 最主要的是能够帮到自己. 我一般是将两者结合使用的, 当然你如果你有更好的工具也可以推荐给我.</p><h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote><p>基于 iOS10.3.1 进行的实践。</p></blockquote><ul><li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/">iOS 逆向: dumpdecrypted 砸壳记</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/">iOS 逆向: 砸壳</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/">iOS 逆向: 查看系统文件目录和结构</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a></p></li><li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/">dumpdecrypted 砸壳：导出头文件</a></p></li></ul><hr><p><strong>每一个关注，都会激励我继续前行</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 逆向: 越狱使用 SSH</title>
      <link href="/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/"/>
      <url>/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="越狱"><a href="#越狱" class="headerlink" title="越狱"></a>越狱</h2><p>使用苹果设备或者做 iOS 开发的朋友们，几乎都应该听说过越狱这个词. 那么究竟什么是越狱呢?</p><blockquote><p>iOS越狱（英语：iOS Jailbreaking）是获取 iOS 设备的 Root 权限的技术手段。iOS 设备的 Root 权限一般是不开放的。由于获得了Root 权限，在越狱之前无法查看的 iOS 的文件系统也可查看.</p></blockquote><p>iOS 的越狱就类似 Android 获取 root 权限一样的道理，说简单点就是获取系统的 root 权限做一些更高级的事情。</p><p>手头上面之前闲置了一台 iPhone4s，闲来无事就把他越狱了，后面不知道怎么操作的，手机变成了白苹果(开机就白屏，无法进入系统)，最后没办法，只能升级系统，这台手机也算是废了. </p><p>当时使用的工具是 <a href="http://www.pangu.io/">盘古越狱</a>，越狱的 iOS 系统是 7.x. 现在 iOS 已经升级到 11.x 了，很多 APP 和游戏已经不再支持 iOS8 以下的系统了，系统的安全性也越来越好了，越狱破解的难度也随之提高了，目前市面上能越狱的最高版本应该是 10.3.x 的系统(截止到该篇文章写的时候). </p><p>为了能够分析和学习一些优秀 App 的设计，我索性买了台iPhone6sPlus 拿来越狱，所以接下来的分享都是基于这台手机的.</p><p><strong>越狱工具和设备</strong></p><p>[1]. 设备 iPhone6s Plus，系统 iOS10.3.2<br>[2]. 越狱工具: 爱思助手和 doubleH3lix.ipa</p><p>安装并打开 pc 上面的 <code>爱思助手</code> 直接开始越狱，爱思助手会帮您在设备上安装 <code>doubleH3lix</code>. 运行 <code>doubleH3lix</code> 应用，点击 <code>jailbreak</code> 按钮，等待设备自行重启.</p><p>手机重启后，你会看到 <code>Cydia</code> 静静的呆在那里了，这种方式的越狱属于非完美越狱，换句话说就是没有真正的破解 iOS 系统.</p><p>如果发现手机断电关机或者重启后 <code>Cydia</code> 一打开就闪退，就使用 <code>doubleH3lix</code> 重新越狱就可以了，如果还是不行就需要重新使用 <code>爱思助手</code> 了。</p><p>参考越狱教程 <a href="https://weibo.com/ttarticle/p/show?id=2309404217487167220184">64位设备iOS 10-10.3.3爱思助手一键越狱教程</a>.</p><h2 id="安装-iOS-终端"><a href="#安装-iOS-终端" class="headerlink" title="安装 iOS 终端"></a>安装 iOS 终端</h2><p>安装终端，在 <code>Cydia</code> 中搜索 <code>MTerminal</code>，安装即可.</p><p><img src="/upload/images/2018/05/12/1.jpg"></p><p>安装好终端工具后，打开终端，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p>紧接着让你输入密码，默认的 root 用户密码是 <code>alpine</code>. 输入改密码回车即可。</p><p>为了安全起见，修改默认密码 <code>alpine</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>连续输入相同的密码即为呢修改后的新密码。</p><h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><p>配置和使用 SSH 功能是后续越狱工作的基础，这样就可以在 MacOS 的终端中访问 iOS 系统了，各种 shell 命令让你倍感亲切，所以大家尽量要完成该步骤. 试想一下，本来手机上面文字输入的体验就不好，还需要在 iPhone 设备上面的终端中敲着命令…没法忍!</p><p>iOS 10 越狱以后自带了 SSH，所以不需要单独去 Cydia 下载和安装 <code>OpenSSH</code>.</p><p>很多人越狱后，发现也安装了 OpenSSH，但是一旦连接 iPhone 设备就无法连接甚至报错. 如果你已经安装了 OpenSSH 并且无法使用 SSH 来操作你的 iPhone 设备，请继续往下看.</p><p>[1]. 打开 Cydia，分别搜索 OpenSSL 和 Openssh，然后分别卸载 OpenSSL 和 Openssh.</p><p>[2]. 打开 Cydia，添加源：<code>http://cydia.ichitaso.com/test</code></p><p><img src="/upload/images/2018/05/12/2.jpg"></p><p>点击左上角的 <code>添加</code>，在弹框中输入对应的源地址即可.</p><p>[3]. 在 Cydia 中搜索 <code>dropbear</code> 并安装.</p><p><img src="/upload/images/2018/05/12/3.jpg"></p><p>安装即可.</p><p>安装成功后，一般就可以正常使用 SSH 功能了.</p><p>打开 MacOS 终端，开始使用 SSH 连接你的 iPhone 设备.</p><p>[1]. 查看 iPhone 设备的(wifi) IP 地址. 如我的是 <code>192.168.1.105</code>.<br>[2]. 使用 MacOS 终端，输入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.105</span><br></pre></td></tr></table></figure><p>成功的话，它先会警告你是否继续操作，输入 <code>yes</code> 即可，然后又提示你输入 root 密码，密码就是前面说的修改后的密码. 如果你没有修改密码，那就是 <code>alpine</code>. 操作流程如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;192.168.1.105 (192.168.1.105)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:ANF7Cvc1yM/ZdaHyz9V1EHjG115cylIcHWyOzCL+kzs.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.1.105<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.1.105&#x27;</span>s password: </span><br></pre></td></tr></table></figure><p>之前在 iOS 10.2.x 越狱修改对应的配置文件，就可以使用 SSH 功能了，但是在 iOS10.3.x 无济于事，如果你是iOS 10.2.x 的越狱手机，可以参考本文末附录配置 SSH，也是我之前实践的结果.</p><h2 id="usbmuxd"><a href="#usbmuxd" class="headerlink" title="usbmuxd"></a>usbmuxd</h2><p>上面是通过 wifi 来连接 iPhone 设备的，其实还有一种方式，就是借助于 <code>usbmuxd</code> 这个工具通过 USB 连接(手机数据线连接电脑)不需要 wifi，USB连接比 wifi 响应速度快，且无网络环境的限制.</p><p>使用 usbmuxd 的前提是你的手机可以正常的使用 SSH 功能，否则 usbmuxd 也无法救你。</p><p>[1]. MacOS 安装 <code>usbmuxd</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install usbmuxd</span><br></pre></td></tr></table></figure><p>[2]. 使用 <code>usbmuxd</code> 自带工具 <code>iproxy</code>.</p><p><code>iproxy</code> 可以快捷的操作连接 iPhone 等操作.</p><p>MacOS 上只支持 4 位的端口号，需要把 iPhone 的默认端口 22 映射到 Mac 上面一个 4 位端口号的端口上面，相当于建立一个 Mac 和 iPhone 之间的通道. <code>iproxy</code> 具体使用，后面再讲. 大家先安装一下即可.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iproxy 5678 22</span><br><span class="line">waiting <span class="keyword">for</span> connection</span><br></pre></td></tr></table></figure><p>以上命令就是把当前连接设备的 <code>22</code> 端口(SSH端口)映射到电脑的 <code>5678</code> 端口，那么想和设备 <code>22</code> 端口通信，直接和本地的 <code>5678</code> 端口通信就可以了。</p><p>终端提示 <code>waiting for connection</code>，表示这两个端口之间已经可以通信了，保留当前终端窗口(如果关闭就停止端口之间的通信了)，新建另一个终端输入，默认密码 root 密码。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5678 root@127.0.0.1</span><br></pre></td></tr></table></figure><p>执行过程如下，类似上面通过 WIFI 操作的方式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;[127.0.0.1]:5678 ([127.0.0.1]:5678)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:ANF7Cvc1yM/ZdaHyz9V1EHjG115cylIcHWyOzCL+kzs.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>[127.0.0.1]:5678<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@127.0.0.1&#x27;</span>s password: </span><br></pre></td></tr></table></figure><p>接下来，你就可以在 MacOS 终端上面操作你的 iPhone 设备了，尽情的享受 shell 命令吧。不使用的时候，输入 <code>exit</code> 即可退出 SSH.</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>[1]. iOS 10.2.x 越狱使用 SSH 功能.</strong></p><p>首先修改 root 密码。</p><p>iOS 10.2 (越狱后)自带 <code>OpenSSH</code>，不需要自己重新安装 OpenSSH，但是需要修改一个文件才能使用。</p><p>在手机上安装 <code>MTERMINAL</code>，运行 <code>su</code>，输入 <code>root</code> 密码，执行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep dropbear</span><br></pre></td></tr></table></figure><p>如果你看到的进程没有 dropbear，执行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/dropbear -F -R -p 22</span><br></pre></td></tr></table></figure><p>然后就可以连接了，重启依然有效。</p><p>如果你看到进程是这样的:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/dropbear -F -R -p 127.0.0.1:22</span><br></pre></td></tr></table></figure><p>意思是只能数据线重定向连接 SSH，如果你想改成 WIFI 可以访问，需要修改 <code>/private/var/containers/Bundle/Application/D9185B6D-EA9E-4678-B59C-BF43DEFE67BF/yalu102.app/dropbear.plist</code><br>把里面有个参数 <code>127.0.0.1:22</code> 改成<code>22</code> 保存，重启手机即可。</p><p><strong>[2]. 使用 <code>usbmuxd</code> 无法使用 SSH</strong></p><p>执行 <code>ssh -p 5678 root@127.0.0.1</code> 后报错，如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh_exchange_identification: <span class="built_in">read</span>: Connection reset by peer</span><br></pre></td></tr></table></figure><p>这种情况一般是没有正确的使用数据线连接 Mac 电脑，使用数据线正常连接 Mac 电脑即可解决问题。</p><h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote><p>基于 iOS10.3.1 进行的实践。</p></blockquote><ul><li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/">iOS 逆向: dumpdecrypted 砸壳记</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/">iOS 逆向: 砸壳</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/">iOS 逆向: 查看系统文件目录和结构</a></p></li><li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/">iOS 逆向: 越狱使用 SSH</a></p></li><li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/">dumpdecrypted 砸壳：导出头文件</a></p></li></ul><hr><p><strong>关注不是目的，交流、学习，一起进步才是关键</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RunLoop: NSTimer 实现常驻线程的问题</title>
      <link href="/2018/05/06/RunLoop-NSTimer-%E5%AE%9E%E7%8E%B0%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/06/RunLoop-NSTimer-%E5%AE%9E%E7%8E%B0%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h2><p>在 <a href="http://www.veryitman.com/2018/04/21/%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/">常驻线程是一种什么体验</a> 这篇文章中给大家分享了如何利用 RunLoop 的特性, 结合 <code>NSMachPort</code> 实现一个 <code>常驻线程</code> 的主题内容.</p><p>今天我们探讨一下使用 <code>NSTimer</code> 如何实现 <code>常驻线程</code> 以及注意事项.</p><p>从 RunLoop 的特性来看, 只要有 Source 或者 Timer 都会使其能自循环使用, 不会立即终止当前线程的执行, 所以从理论上来看 <code>NSTimer</code> 是可以达到创建 <code>常驻线程</code> 的目的的.</p><h2 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h2><p>完整的例子代码, 可以从文章的附录获取和查看, 这里只给出核心代码.</p><p><em><strong>创建线程</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (NSThread *)permanentThread &#123;</span><br><span class="line">    </span><br><span class="line">    static NSThread *thread = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        </span><br><span class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</span><br><span class="line">        [thread setName:@&quot;veryitman-thread&quot;];</span><br><span class="line">        </span><br><span class="line">        // 同一个线程连续多次 start 会导致 crash</span><br><span class="line">        [thread start];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>线程执行的函数</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (void)asyncRun &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">        </span><br><span class="line">        // 保持常驻线程: 使用 NSTimer</span><br><span class="line">        [self _attachTimerToRunLoop];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</span><br><span class="line">        </span><br><span class="line">        // 执行其他逻辑</span><br><span class="line">        //...</span><br><span class="line">        </span><br><span class="line">        // 手动开启 RunLoop</span><br><span class="line">        [runLoop run];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>创建定时器</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)_attachTimerToRunLoop &#123;</span><br><span class="line">    </span><br><span class="line">    if (nil == self.timer) &#123;</span><br><span class="line">        </span><br><span class="line">        // scheduledTimerWithTimeInterval 这种方式</span><br><span class="line">        // 创建的 Timer 会默认加入到当前的 RunLoop 的 NSDefaultRunLoopMode 中</span><br><span class="line">        _timer = [NSTimer scheduledTimerWithTimeInterval:2</span><br><span class="line">                                                  target:self</span><br><span class="line">                                                selector:@selector(runTimer)</span><br><span class="line">                                                userInfo:nil</span><br><span class="line">                                                 repeats:YES];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出, <code>_attachTimerToRunLoop</code> 中是将 timer 加入到当前的 RunLoop 当中了. 这里注意, repeats 值被设置为 <code>YES</code> 了.</p><p>跟之前一样, 可以使用点击事件来模拟和验证常驻线程的有效性.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    </span><br><span class="line">    // 模拟在指定线程上面再次执行方法</span><br><span class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</span><br><span class="line">    </span><br><span class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每点击一次屏幕, 都会对应执行 <code>runAnyTime</code> 里面的内容.</p><h2 id="对-repeat-的思考"><a href="#对-repeat-的思考" class="headerlink" title="对 repeat 的思考"></a>对 repeat 的思考</h2><p>在上面的示例中, 我将 <code>repeat</code> 参数设置为 <code>YES</code>, 试想一下如果把 <code>repeat</code> 参数设置为 <code>NO</code>, 会不会造成常驻线程失效呢?</p><p>动手试试…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)_attachTimerToRunLoop &#123;</span><br><span class="line">    </span><br><span class="line">    if (nil == self.timer) &#123;</span><br><span class="line">        </span><br><span class="line">        // scheduledTimerWithTimeInterval 这种方式</span><br><span class="line">        // 创建的 Timer 会默认加入到当前的 RunLoop 的 NSDefaultRunLoopMode 中</span><br><span class="line">        _timer = [NSTimer scheduledTimerWithTimeInterval:2</span><br><span class="line">                                                  target:self</span><br><span class="line">                                                selector:@selector(runTimer)</span><br><span class="line">                                                userInfo:nil</span><br><span class="line">                                                 repeats:NO];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次点击屏幕若干次, 同样会执行对应函数里面的内容. 这就说明了即使将 <code>repeat</code> 参数设置为 <code>NO</code>, 也不会影响常驻线程.</p><p>那我们再来点具有挑战的活动…</p><p>将当前页面加入 <code>UIScrollview</code> 这个视图, 还是保持 <code>repeat</code> 参数设置为 <code>NO</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    self.view.backgroundColor = [UIColor lightGrayColor];</span><br><span class="line">    self.navigationItem.title = @&quot;NSTimer 创建常驻线程&quot;;</span><br><span class="line">    </span><br><span class="line">    // 加入滚动视图</span><br><span class="line">    _scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];</span><br><span class="line">    [self.view addSubview:self.scrollView];</span><br><span class="line">    self.scrollView.contentSize = CGSizeMake(1000, 1000);</span><br><span class="line">    self.scrollView.delegate = self;</span><br><span class="line">    </span><br><span class="line">    // 启动线程</span><br><span class="line">    [self permanentThread];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为加入了滚动视图, 我们换一种方式来模式和验证常驻线程.</p><p>在 <code>UIScrollview</code> 代理中来模拟, 示例如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView &#123;</span><br><span class="line">    </span><br><span class="line">    // 模拟在指定线程上面再次执行方法</span><br><span class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</span><br><span class="line">    </span><br><span class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后进入该页面, 可以发现常驻线程被终止了.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">veryitman--timerRun.</span><br><span class="line">veryitman--asyncRun. End Run.</span><br></pre></td></tr></table></figure><p>当除我以为更换一下模式即使 将 <code>repeat</code> 参数设置为 <code>NO</code>, 也不会出现常驻线程被终止的问题. 如下面的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_timer = [NSTimer timerWithTimeInterval:2 target:self selector:@selector(runTimer) userInfo:nil repeats:NO];</span><br><span class="line">[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</span><br></pre></td></tr></table></figure><p>这样更换模式为 <code>NSRunLoopCommonModes</code> 也不行.</p><p>在这种情况(有滚动视图的)下, 将 <code>repeat</code> 参数设置为 <code>YES</code> 就不会导致常驻线程被终止了, 无论哪种方式创建的 Timer.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.子线程创建中的 RunLoop 的模式不会与主线程中 RunLoop 的模式冲突, 各自运行在各自的 mode 当中. </p><p>2.使用 <code>NSTimer</code> 来创建常驻线程, 在有 <code>UIScrollview</code> 或者其子类的情况下, 需要将 <code>repeats</code> 设置为 <code>YES</code>, 否则不会创建常驻线程. 没有滚动视图的情况下, <code>repeats</code> 设置为 <code>NO</code> 也没有关系.</p><p>3.创建 NSTimer</p><p>下面两种创建 Timer 的效果是一致的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[NSTimer scheduledTimerWithTimeInterval:2</span><br><span class="line">                  target:self</span><br><span class="line">                selector:@selector(runTimer)</span><br><span class="line">                userInfo:nil</span><br><span class="line">                 repeats:YES];</span><br></pre></td></tr></table></figure><p><code>scheduledTimerWithTimeInterval</code> 默认会将 Timer 加入到当前的 RunLoop 中.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[NSTimer timerWithTimeInterval:2 target:self selector:@selector(runTimer) userInfo:nil repeats:NO];</span><br><span class="line">[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSDefaultRunLoopMode];</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>完整示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;MZTimerPermanentThreadController.h&quot;</span><br><span class="line"></span><br><span class="line">@interface MZTimerPermanentThreadController () &lt;UIScrollViewDelegate&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSTimer *timer;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIScrollView *scrollView;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation MZTimerPermanentThreadController</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;veryitman---MZTimerPermanentThreadController dealloc.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    self.view.backgroundColor = [UIColor lightGrayColor];</span><br><span class="line">    self.navigationItem.title = @&quot;NSTimer 创建常驻线程&quot;;</span><br><span class="line">    </span><br><span class="line">    // 加入滚动视图</span><br><span class="line">    _scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];</span><br><span class="line">    [self.view addSubview:self.scrollView];</span><br><span class="line">    self.scrollView.contentSize = CGSizeMake(1000, 1000);</span><br><span class="line">    self.scrollView.delegate = self;</span><br><span class="line">    </span><br><span class="line">    // 启动线程</span><br><span class="line">    [self permanentThread];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidDisappear:animated];</span><br><span class="line">    </span><br><span class="line">    // 取消线程</span><br><span class="line">    // 实际业务场景中自行决定 canCancel 的设置, 这里只是示例</span><br><span class="line">    BOOL canCancel = YES;</span><br><span class="line">    if (canCancel) &#123;</span><br><span class="line">        </span><br><span class="line">        [self.timer invalidate];</span><br><span class="line">        _timer = nil;</span><br><span class="line">        </span><br><span class="line">        [[self permanentThread] cancel];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView &#123;</span><br><span class="line">    </span><br><span class="line">    // 模拟在指定线程上面再次执行方法</span><br><span class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</span><br><span class="line">    </span><br><span class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    </span><br><span class="line">    // 模拟在指定线程上面再次执行方法</span><br><span class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</span><br><span class="line">    </span><br><span class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSThread *)permanentThread &#123;</span><br><span class="line">    </span><br><span class="line">    static NSThread *thread = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        </span><br><span class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</span><br><span class="line">        [thread setName:@&quot;veryitman-thread&quot;];</span><br><span class="line">        </span><br><span class="line">        // 同一个线程连续多次 start 会导致 crash</span><br><span class="line">        [thread start];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return thread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)asyncRun &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">        </span><br><span class="line">        // 保持常驻线程: 使用 NSTimer</span><br><span class="line">        [self _attachTimerToRunLoop];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</span><br><span class="line">        </span><br><span class="line">        // 执行其他逻辑</span><br><span class="line">        //...</span><br><span class="line">        </span><br><span class="line">        // 手动开启 RunLoop</span><br><span class="line">        [runLoop run];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)runAnyTime &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;veryitman--runAnyTime. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)_attachTimerToRunLoop &#123;</span><br><span class="line">    </span><br><span class="line">    if (nil == self.timer) &#123;</span><br><span class="line">        </span><br><span class="line">        // scheduledTimerWithTimeInterval 这种方式</span><br><span class="line">        // 创建的 Timer 会默认加入到当前的 RunLoop 的 NSDefaultRunLoopMode 中</span><br><span class="line">        _timer = [NSTimer scheduledTimerWithTimeInterval:2</span><br><span class="line">                                                  target:self</span><br><span class="line">                                                selector:@selector(runTimer)</span><br><span class="line">                                                userInfo:nil</span><br><span class="line">                                                 repeats:YES];</span><br><span class="line">        </span><br><span class="line">#if 0</span><br><span class="line">        _timer = [NSTimer timerWithTimeInterval:2 target:self selector:@selector(runTimer) userInfo:nil repeats:NO];</span><br><span class="line">        [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)runTimer &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;--veryitman--timerRun.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RunLoop 常驻线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常驻线程是一种什么体验</title>
      <link href="/2018/04/21/%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/"/>
      <url>/2018/04/21/%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="简说-RunLoop"><a href="#简说-RunLoop" class="headerlink" title="简说 RunLoop"></a>简说 RunLoop</h2><p>关于 iOS RunLoop 网上很多文章都有介绍过, 很多技术面试官也会问关于 RunLoop 的相关知识. 我把自己工作中遇到的问题和总结的经验分享出来(会做成一系列的文章), 也算是对自己的一个总结和沉淀, 欢迎大家交流.</p><p>网上的文章基本都是针对于 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">Apple Developer Doc - Run Loops</a> 这篇来展开的, 所以建议大家认真的去通读这篇文章, 并写代码验证, 实践.</p><p>可以简单粗暴的这么理解一下 RunLoop, 基于事件驱动的死循环(由内核来调度和管理的), 在需要处理事情的时候就出来干点事, 否则休眠待命.<br>RunLoop 的核心是基于 <code>machport</code> 的，其进入休眠时调用的函数是 mach_msg().</p><p>类似下面的代码来说明一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BOOL stopRunning = NO;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">   </span><br><span class="line">   // 处理 App 中各种操作各种事件</span><br><span class="line">   // 点击屏幕, 触摸到硬件也会唤醒 RunLoop</span><br><span class="line">   </span><br><span class="line">  &#125; while(!stopRunning);</span><br></pre></td></tr></table></figure><p>说到这里, 随便提及一下, 学习过 Android 开发的同事应该和好理解 RunLoop 了,  iOS 的 RunLoop 跟 Android 的 Looper 机制几乎一样, 只是不同的系统之间实现有差异罢了!</p><p>有兴趣的朋友可以看一下我之前写的文章 <a href="https://blog.csdn.net/veryitman/article/details/6384641">Handler: 更新UI的方法</a>.</p><hr><p>今天跟大家分享如何在 iOS 中结合 RunLoop 和 machport 实现常驻线程, 先跟着实例走, 后续再去总结 RunLoop 的各种细节点.</p><h2 id="神奇的-main"><a href="#神奇的-main" class="headerlink" title="神奇的 main"></a>神奇的 main</h2><p>开发过 iOS 应用中的朋友, 对 <code>main.m</code> 再也熟悉不过了, <code>main</code> 函数正是应用的入口函数.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将 <code>return</code> 代码分开写, 看看有什么蛛丝马迹可寻.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        int ret = UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--- UIApplicationMain end.&quot;);</span><br><span class="line">        </span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论如何你也看不到日志 <code>veryitman--- UIApplicationMain end.</code> 的打印, 这说明 <code>UIApplicationMain</code> 一直在呵护着 APP 的运行, 哈哈.</p><p>我们不妨再改一次, 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去运行 APP, 你会发现根本没有让 APP 运行起来, 再次说明没有了 <code>UIApplicationMain</code> 的呵护, APP 无法起死回生.</p><p>猜测在 <code>UIApplicationMain</code> 函数中，开启了和主线程相关的 RunLoop，使 <code>UIApplicationMain</code> 不会返回一直在运行中，从而保证了程序的持续运行, 最大的功臣就是  RunLoop.</p><h2 id="普通线程"><a href="#普通线程" class="headerlink" title="普通线程"></a>普通线程</h2><p>一般我们开启的线程在执行完任务后, 就会结束该线程. 除非你写了类似下面的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(1) &#123;</span><br><span class="line">// 业务处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (条件满足) &#123;</span><br><span class="line">// 业务处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启一个线程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (NSThread *)permanentThread &#123;</span><br><span class="line">    </span><br><span class="line">    static NSThread *thread = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line"></span><br><span class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</span><br><span class="line">        [thread setName:@&quot;veryitman-thread&quot;];</span><br><span class="line">        </span><br><span class="line">        // 同一个线程连续多次 start 会导致 crash</span><br><span class="line">        [thread start];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行对应的 <code>asyncRun</code> 函数, 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (void)asyncRun &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        // 执行其他逻辑</span><br><span class="line">        //...</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 <code>asyncRun</code> 很快就可以执行完成 (End Run).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">veryitman--asyncRun. Current Thread: &lt;NSThread: 0x60000066c400&gt;&#123;number = 3, name = veryitman-thread&#125;</span><br><span class="line">veryitman--asyncRun. End Run.</span><br></pre></td></tr></table></figure><h2 id="子线程开启-RunLoop"><a href="#子线程开启-RunLoop" class="headerlink" title="子线程开启 RunLoop"></a>子线程开启 RunLoop</h2><p>主线程是默认开启 RunLoop 的即 mainRunLoop 是系统默认开启的, 但是子线程中的 RunLoop 需要我们自己手动开启.</p><blockquote><p>关于为什么子线程中需要手动开启, 后续文章结合源码给大家分析, 这里暂时可以理解为获取 RunLoop 对象是一种懒加载模式. 只不过主线程中, 系统帮我们开启了, 然而子线程中需要我们手动开启而已.</p></blockquote><p>类似这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (void)asyncRun &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</span><br><span class="line">        </span><br><span class="line">        // 执行其他逻辑</span><br><span class="line">        //...</span><br><span class="line">        </span><br><span class="line">        // 手动开启 RunLoop</span><br><span class="line">        [runLoop run];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台可以看到输出:</p><p><img src="/upload/images/2018/04/21/1.jpg" alt="1"></p><p>RunLoop 没有任何输入源(input source) 和定时器(timer), 这时即使开启了 RunLoop 也不会让其等待执行, 换句话说会立即结束当前的 RunLoop.</p><p>既然这样我们给子线程的 RunLoop 添加源或者定时器即可. 这里以添加 NSPort 为例.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- (void)asyncRun &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">        </span><br><span class="line">        // 添加 source</span><br><span class="line">        NSPort *port = [NSMachPort port];</span><br><span class="line">        [runLoop addPort:port forMode:NSRunLoopCommonModes];</span><br><span class="line">               </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</span><br><span class="line">        </span><br><span class="line">        // 执行其他逻辑</span><br><span class="line">        //...</span><br><span class="line">        </span><br><span class="line">        // 手动开启 RunLoop</span><br><span class="line">        [runLoop run];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行, 你会发现 <code>End Run</code> 这个 Log 是不会打印出来的. 对应当前的 RunLoop 也有了源和定时器, 如图所示:<br><img src="/upload/images/2018/04/21/2.jpg" alt="1"></p><p>关于定时器和 RunLoop 的结合, 下篇再分享. </p><p>现在有这样一个需求, 需要在指定的线程中执行某项任务, 显然使用上面的方法来满足需求, 下面进入今天的正题.</p><h2 id="验证常驻线程"><a href="#验证常驻线程" class="headerlink" title="验证常驻线程"></a>验证常驻线程</h2><p>一定到 <code>常驻</code> 这个词, 就知道是能够让该线程随时待命, 保证其不挂掉.</p><p>iOS 中默认就有个主线程即 <code>main 线程</code>, 我们的 UI 线程指的就是主线程, 一般都是在主线程中操作 UI, 从某个角度来说, 主线程就是一个常驻线程.</p><p>我们开启其他线程, 目的是为了异步完成一些任务, 这些任务一般都比较耗时, 如果放在主线程当中完成这些任务就会导致主线程的卡顿, 用户体验极其差. </p><p>说了这么多, 也许你会问, 为什么要常驻线程呢?</p><p>频繁的创建和销毁线程，会造成资源(主要是内存)的浪费, 我们为什么不让频繁使用的子线程常驻在内存中, 想用的时候就用, 不用的时候让他休眠呢?! </p><p>上面已经使用 RunLoop 来实现了让线程长时间存活而不被销毁了.</p><p>用 <code>touchesBegan</code> 来模拟在指定线程中再次执行任务(runAnyTime)的方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    </span><br><span class="line">    // 模拟在指定线程上面再次执行方法</span><br><span class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</span><br><span class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)runAnyTime &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;veryitman--runAnyTime. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应上面的 <code>asyncRun</code> 实现即可, 你会发现在当前页面每次点击屏幕都会执行 <code>runAnyTime</code>.</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>代码的完整实现</p><blockquote><p>常驻线程, 可以参考具体的注释.</p></blockquote><p><strong>MZCreatePermanentThreadController.m</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">@implementation MZCreatePermanentThreadController</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;veryitman---MZCreatePermanentThreadController dealloc.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    self.view.backgroundColor = [UIColor lightGrayColor];</span><br><span class="line">    self.navigationItem.title = @&quot;创建常驻线程&quot;;</span><br><span class="line">    </span><br><span class="line">    // 启动线程</span><br><span class="line">    [self permanentThread];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidDisappear:animated];</span><br><span class="line">    </span><br><span class="line">    // 取消线程</span><br><span class="line">    // 实际业务场景中自行决定 canCancel 的设置, 这里只是示例</span><br><span class="line">    BOOL canCancel = YES;</span><br><span class="line">    if (canCancel) &#123;</span><br><span class="line">        [[self permanentThread] cancel];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    </span><br><span class="line">    // 模拟在指定线程上面再次执行方法</span><br><span class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</span><br><span class="line">    </span><br><span class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSThread *)permanentThread &#123;</span><br><span class="line">    </span><br><span class="line">    static NSThread *thread = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line"></span><br><span class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</span><br><span class="line">        [thread setName:@&quot;veryitman-thread&quot;];</span><br><span class="line">        </span><br><span class="line">        // 同一个线程连续多次 start 会导致 crash</span><br><span class="line">        [thread start];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return thread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)asyncRun &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">        </span><br><span class="line">        // 添加 source</span><br><span class="line">        NSPort *port = [NSMachPort port];</span><br><span class="line">        [runLoop addPort:port forMode:NSRunLoopCommonModes];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</span><br><span class="line">        </span><br><span class="line">        // 执行其他逻辑</span><br><span class="line">        //...</span><br><span class="line">        </span><br><span class="line">        // 手动开启 RunLoop</span><br><span class="line">        [runLoop run];</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)runAnyTime &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;veryitman--runAnyTime. Current Thread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html">Toll-Free Bridging</a></p><p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">Run Loops</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RunLoop 常驻线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发人员需具备一点产品能力</title>
      <link href="/2018/04/17/%E5%8F%91%E4%BA%BA%E5%91%98%E9%9C%80%E5%85%B7%E5%A4%87%E4%B8%80%E7%82%B9%E4%BA%A7%E5%93%81%E8%83%BD%E5%8A%9B/"/>
      <url>/2018/04/17/%E5%8F%91%E4%BA%BA%E5%91%98%E9%9C%80%E5%85%B7%E5%A4%87%E4%B8%80%E7%82%B9%E4%BA%A7%E5%93%81%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2018/04/17/12332.jpg"></p><p>为了开始今天的话题, 我先来借助几个角色, 模拟一下工作中的某些场景.</p><h2 id="设立人物"><a href="#设立人物" class="headerlink" title="设立人物"></a>设立人物</h2><p>小 A 是名刚入门的技术人员, 比较听话.<br>小 B 是有工作经验的一名技术人员, 平时喜欢看看产品相关的书籍, 喜欢和产品经理撕逼.<br>小 C 就厉害了, 不仅技术厉害, 也具有产品思维, 除了阅读产品类的书籍, 还写产品体验报告和体验竞品(和当前自己产品相关的产品).<br>小 D 就是一名产品经理, 具有一定的产品能力, 数据分析能力和管理能力.</p><p>人物已经设立好了, 现在让他们登场.</p><h2 id="情景再现-需求评审"><a href="#情景再现-需求评审" class="headerlink" title="情景再现: 需求评审"></a>情景再现: 需求评审</h2><p>这天风和日丽, 小 D(产品经理) 通知项目组的所有成员, 包括设计&#x2F;开发&#x2F;运营&#x2F;测试等人员按时参加产品需求评审会议.</p><p>为了缓解大家的情绪, 小 D 买了很多零食和水果, 也算是犒劳一下大家. 小 D 开始给大家讲需求了, 像往常一样, 拿出精湛的原型, 口沫直飞的向大家展示其绵绵不绝的口才和产品思维. 小 A 一直在点头, 也不知道到底有没有听懂小 D 在说什么, 反正我看到有部分设计人员已经开始打瞌睡了.</p><p>突然, 小 C 中断了正在口述的小 D, 小 D 不慌不忙的停止了手中的一切动作, 聚精会神的听小 C 的意见和建议. 小 C 也有条不紊的将刚才的某项需求口述了一遍, 按照小 C 的逻辑, 目前的需求还是存在一些漏洞的, 这个时候, 小 D 开始认真的跟小 C 开始交流, 但是没有马上肯定小 C, 只是说我暂时记下这个点, 回头在思考一番. 产品小 D 稳如老狗, 继续自己的表演.</p><p>产品需求基本已经讲完了, 现在是大家提问题和交流的时间, 我看到有些同事揉了揉眼睛, 像是如梦初醒般的看着产品小 D, 不是旁边的同事拉住 Ta, 估计都能冲出会议室. 小 B 也不淡定了, 提出了不少问题, 并从技术的角度说明了实现的难度. 产品经理听的也是一脸懵逼, 心理想: “你实现是否有困难管我鸟事?”.</p><p>小 B 在产品小 D 那里并没有得到应有的表扬和鼓励, 反遭到同事小 C 的鄙视, 小 C 说, 你先不要告诉他实现方案, 先讨论这个需求的场景和真伪度. 小 D 默默的对小 C 投过赞赏的目光. 紧接着测试和其他人员提出了几个不痛不痒的问题, 都被老练的小 D 一一破解, 那气势, 啧啧! 势如破竹!</p><p>需求评审会议就这样结束了.</p><h2 id="情景再现-需求变更"><a href="#情景再现-需求变更" class="headerlink" title="情景再现: 需求变更"></a>情景再现: 需求变更</h2><p>在产品进入开发和设计阶段, 按理说需求变更也算是比较正常的一件事情.</p><p>这年头, 唯一不变的就是变化.</p><p>小 B 正在聚精会神的写代码, 突然小 D 跟他说, 这个地方的需求需要修改一下, 你看改动有多大?</p><p>小 B 鄙视的看着产品经理小 D, 心理在说改动有多大你心里还没有点 B数嘛. 小 B 还是控制了自己的情绪, 接着说道, 你当初应该好好思考的, 你看我都快做完了, 你才告诉我需要改动.</p><p>噼里啪啦的说完, 估计小 B 心理也暗爽了不少, 最终还是接受了这次的变动.</p><p>小 A 负责的模块, 也被产品经理修改过, Ta 和产品经理小 D 的交流基本是, 哦, 恩, 好, 可以!</p><p>当小 C 找到小 D 的时候, 并没有直接告诉小 D 需要改东改西, 而是问问小 D, 你看这样会不会更好一些?</p><p>小 C 当然明白小 D 的目的了, 于是拿出自己看过的竞品, 并说出了自己的意见, 愉快的和小 D 交流后, 居然 TMD 的砍了一个需求. 这让旁边的小 A 和小 B 羡慕不已.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的两种情景, 我相信做过开发的同事应该都深有体会, 但是千万不要对号入座, 我只是打个比方.</p><p>从上面看出, 小 C 是一个很不错的角色, 无论是思维还是沟通能力都有别与他人, 最重要的是他没有仅仅把自己当做一名开发人员, 而是站在产品的角度去思考问题和解决问题.</p><p>需求变更是常态, 作为开发人员, 要最大限度的给产品以支持. 产品经理也是人, 当然有考虑不周的地方, 如果你不能想出更好更完美的解决方案, 请支持他的决定.</p><p>多站在别人的角度去思考问题, 换位思考, 才能保证有效的沟通. 作为一名技术人员, 尤其是在互联网行业, 多多少少都应该需要具备一定的产品思维.</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不让 SIGPIPE signal 太嚣张</title>
      <link href="/2018/04/15/%E4%B8%8D%E8%AE%A9-SIGPIPE-signal-%E5%A4%AA%E5%9A%A3%E5%BC%A0/"/>
      <url>/2018/04/15/%E4%B8%8D%E8%AE%A9-SIGPIPE-signal-%E5%A4%AA%E5%9A%A3%E5%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于项目迭代比较快, 大家还没有来得及做自我调整和总结, 就需要投入到新版本当中开发新功能了.</p><p>在最近的一次版本测试和体验过程中, 很多内测用户反馈进入或者退出 App 的聊天室, 会莫名其妙的崩溃掉(Crash).<br>对于 Crash 的问题, 我们开发同事绝对是零容忍, 于是就开始跟踪问题.</p><p>跟踪了很久, 发现这个 Crash 并不是那么的 ‘乖巧’, 很难复现!<br>既然用户已经反馈了并且后台也有 Crash 上报, 这个问题肯定存在, 所以我们不能放弃.</p><p>好吧, 继续加班搞…苦逼中…</p><p>最终, 我们发现一个规律, 在日志后台, 看到很多类似下面的日志:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Signal <span class="number">13</span> was raised. SIGPIPE (_mh_execute_header + <span class="number">420728</span>)</span><br></pre></td></tr></table></figure><p>很遗憾的是, 堆栈信息中没有提供给我们更有力的证据, 所以当时定位在 <code>Signal 13</code> 这个点上面.</p><p>也算是有了突破…这班没有白加…</p><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>既然所有的罪证都指向了 <code>Signal 13</code>, 我们就需要去跟踪它, 去调查它, 去研究它.</p><p>在 <code>signal.h</code> 文件中, 可以发现其定义如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* write on a pipe with no one to read it */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>SIGPIPE13</span></span><br></pre></td></tr></table></figure><p>用通俗的话来讲, 就是管道破裂.</p><blockquote><p>管道破裂，这个信号通常在进程间通信产生，比如采用 FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到 SIGPIPE 信号.<br>此外用 Socket 通信的两个进程，写进程在写 Socket 的时候，读进程已经终止.<br>另外, 在 send&#x2F;write 时会引起管道破裂，关闭 Socket, 管道时也会出现管道破裂.<br>使用 Socket 一般都会收到这个 SIGPIPE 信号.</p></blockquote><p>也就是说, 该信号是跟 Socket 的连接以及数据的读写相关联的.</p><p>这样的话，我们就知道为什么进退房间导致 Crash 了，我们的进退房间都和 Socket 有关联，这种 Crash 大都数是在用户网络不好的情况下发生的.</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>类似 <code>signal 13</code> 这种错误是系统发出来的, 和内存使用异常和野指针一样，由于是系统级别崩溃，所以不能通过</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@catch</span>(<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>捕获到这类异常.</p><p>因此, <code>try catch</code> 是无法解决问题的.</p><p>目前有两个方案可用:</p><blockquote><p>方案1. 忽略这类信号.</p></blockquote><blockquote><p>方案2. 修改源码, 在 IM 代码里面修改.</p></blockquote><p>因为, IMSDK 我们是使用第三方的, 所以无法更改其源码, 所以采取了方案1: 忽略这类信号.</p><p>忽略的方案很简单, 在你连接或者初始化 IMSDK 之前, 只需要一行代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signal(SIGPIPE, SIG_IGN);</span><br></pre></td></tr></table></figure><p>示例代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">signal(SIGPIPE, SIG_IGN);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 <code>方案2</code>, 我查阅了一下 <code>CocoaAsyncSocket</code> 的源码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prevent SIGPIPE signals</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> nosigpipe = <span class="number">1</span>;</span><br><span class="line">setsockopt(socketFD, SOL_SOCKET, SO_NOSIGPIPE, &amp;nosigpipe, <span class="keyword">sizeof</span>(nosigpipe));</span><br></pre></td></tr></table></figure><p>所以对于 <code>方案2</code>, 就是增加上面的代码即可, 即设置 Socket 不发送 SIGPIPE 信号.</p><p>对于上面的两种方案, 苹果开发者文档 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/CommonPitfalls/CommonPitfalls.html">Avoiding Common Networking Mistakes</a> 都有提及.</p><p><img src="/upload/images/2018/04/15/1.jpg" alt="-w380"></p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>既然这个问题很难复现, 我们就想办法让他很容易复现.</p><p>可以采用手动发送 signal 的方式, 来复现这个问题.</p><p>先看一下 <a href="https://linux.die.net/man/3/kill">kill(3) - Linux man page</a> 函数:</p><blockquote><p>The kill() function shall send a signal to a process or a group of processes specified by pid. The signal to be sent is specified by sig and is either one from the list given in &lt;signal.h&gt; or 0. If sig is 0 (the null signal), error checking is performed but no signal is actually sent. The null signal can be used to check the validity of pid.</p></blockquote><p>kill 函数是可移植操作系统接口 POSIX(Portable Operating System Interface of UNIX) 定义的, 可以参考 <a href="https://zh.wikipedia.org/wiki/POSIX">维基百科</a>.</p><p>示例代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取进程 id</span></span><br><span class="line">    pid_t cur_pid = getpid();</span><br><span class="line">    printf(<span class="string">&quot;current process&#x27;s id: %i\n&quot;</span>, cur_pid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//延时10s 为了让 Bugtags 有时间上报日志.</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">10</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        wpcSendSignal(cur_pid);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///手动发送信号</span></span><br><span class="line"><span class="keyword">int</span> wpcSendSignal(<span class="keyword">int</span> pid)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = kill(pid, SIGPIPE);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将 <code>signal(SIGPIPE, SIG_IGN)</code> 代码先注释.</p><p>运行 APP 到手机, 然后退出 Xcode 的连接.</p><blockquote><p>注意: 这里如果连接 Xcode, 不会直接 Crash, 所以需要断开手机与 Xcode 的连接.</p></blockquote><p>在后台可以看到类似的 Crash 日志:</p><p><img src="/upload/images/2018/04/15/2.jpg" alt="-w500"></p><p>除了上面使用 <code>kill</code> 函数外, 我们还可以使用 <code>raise</code> 函数来发送 signal.</p><p>关于 raise 函数, 可以查阅 <a href="https://linux.die.net/man/3/raise">手册</a>.</p><p>或者直接问男人(man):</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man raise</span><br></pre></td></tr></table></figure><h2 id="问题再次来临-与-Bugtags-的结合"><a href="#问题再次来临-与-Bugtags-的结合" class="headerlink" title="问题再次来临: 与 Bugtags 的结合"></a>问题再次来临: 与 Bugtags 的结合</h2><p>本以为采用上述方案就万事大吉了, 在第二次提测后, 还是有这种 Crash 的问题在后台上报.</p><p>排查了很久后才发现，问题的原因是 BugTags 也会控制这个开头，默认是不忽略，这样：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否忽略 PIPE Signal (SIGPIPE) 闪退，默认 NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> ignorePIPESignalCrash;</span><br></pre></td></tr></table></figure><p>这个默认设置为 NO, 即可以上报 PIPE Signal Crash 的问题.</p><p>这里也说明一个问题, 即使我们采用 <code>方案1</code> 解决 Crash 的问题了, Bugtags 还是会将这种 Crash 上报到后台.</p><p>示例代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bugtag.option.ignorePIPESignalCrash = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">signal(SIGPIPE, SIG_IGN);</span><br></pre></td></tr></table></figure><p>对比一下测试的两张图, 第一张图到第二张图是增加了两次崩溃次数, 原因是故意设置了 <code>bugtag.option.ignorePIPESignalCrash = NO</code>, 也正好验证了我们的想法.</p><p><img src="/upload/images/2018/04/15/3.jpg" alt="-w600"><br><img src="/upload/images/2018/04/15/4.jpg" alt="-w600"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>Xcode 连接真机或者模拟器, 运行出现异常断点, 可能就是隐患点.</p></li><li><p>学会使用后台日志找到规律, 继而去思考并解决问题.</p></li><li><p>对 Crash 进行更深入的分析和总结, 不要轻易放弃.</p></li></ol><h2 id="后续研究"><a href="#后续研究" class="headerlink" title="后续研究"></a>后续研究</h2><ol><li><p>是否可以忽略其他的 signal, 来避免不必要的 Crash?</p></li><li><p>自定义一套关于 signal 捕获的跨平台库, 在开发阶段可以直接看到完整的日志.</p></li></ol><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><ol><li><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/CommonPitfalls/CommonPitfalls.html">Avoiding Common Networking Mistakes</a></p></li><li><p><a href="https://linux.die.net/">linux die</a></p></li><li><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/UsingSocketsandSocketStreams.html#//apple_ref/doc/uid/CH73-SW1">Using Sockets and Socket Streams</a></p></li></ol><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crash linux signal SIGPIPE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这样学习你愿意吗?</title>
      <link href="/2018/04/07/%E8%BF%99%E6%A0%B7%E5%AD%A6%E4%B9%A0%E4%BD%A0%E6%84%BF%E6%84%8F%E5%90%97/"/>
      <url>/2018/04/07/%E8%BF%99%E6%A0%B7%E5%AD%A6%E4%B9%A0%E4%BD%A0%E6%84%BF%E6%84%8F%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2018/04/07/1.jpg"></p><p>不得不承认, 学习确实是个「苦差事」, 这里说的学习不仅仅指伏案学习, 之乎者也等, 而是一种广泛的学习.</p><p>如何学习是始终要去探讨的一个话题, 时代在变, 环境在变, 学习当然也不能一成不变. 坚持学习是一辈子的事, 活到老学到老.</p><p>既然学习是一个漫长的马拉松, 那我们只有持之以恒的’跑’下去, 才能保持不掉队. 这样一来, 学习方法和学习技巧就是取胜的关键了.</p><p>世上没有绝对的学习妙招和学习宝典, 找到适合自己的就是最好的. 下面我结合自己的一些经历给大家分享在学习的道路上遇到的那些事.</p><blockquote><p>不管怎样, 学习一定要带着目标, 结合理论再去实践, 事半功倍.</p></blockquote><hr><p>欢迎大家在评论区交流, 不喜勿喷~ </p><h2 id="回忆当天事"><a href="#回忆当天事" class="headerlink" title="回忆当天事"></a>回忆当天事</h2><p>每晚躺在床上或者沙发上, 发发呆, 把当天做过的事情, 在脑海中统统的过一遍, 像放电影一样, 能有多详细就多详细, 也就是说尽量的回忆细节.</p><p>这种做法看似很简单, 其实很难坚持下去. 特别是中间几天, 很多人都会放弃, 再加上现在手机互联网的 “毒害”, 留给自己去真正学习的时间更少了. 但是只要你咬咬牙坚持一下, 把这个习惯养成, 就会终生受用.</p><p>我在初中时期已经养成了这个习惯, 直到大学都没有放弃. 大学里面每次期末考试, 看到很多人忙的不可开交, 我都是不慌不忙的, 悠闲自得, 室友问我怎么做到游刃有余, 我说你白天少睡点觉, 平时注意听讲, 晚上回忆一下就可以了, 从他迷茫的眼神中可以看出, 他当时并不完全相信我说的!</p><p>每次回忆结束, 有些东西还是比较模糊甚至一知半解, 没事, 你第二天去翻阅相关知识再去整理和理解一下就好了, 这种自我激励比任何鞭策都有用.</p><blockquote><p>有些困难只是暂时的, 想办法 ‘挺’ 过去, 你就赢了. 很多时候不是困难吓到了我们, 而是我们放弃了自己.</p></blockquote><h2 id="多想多问"><a href="#多想多问" class="headerlink" title="多想多问"></a>多想多问</h2><p>和你身边兴趣相投或者比你有能力的人多交流, 交流的过程也是你练习自我表达能力的过程, 把自己的问题能够清楚的描述给别人听, 也是一种能力.</p><p>不知道大家有没有这样一种感觉, 在跟别人交流的过程中, 虽然别人没有直接帮你解决问题, 但是你突然有了解决问题的办法. 为什么会这样呢? 很简单, 因为这个问题你之前思考过, 只是在交流的过程中, 你的大脑专注在此, 聚精会神的在想这件事情.</p><p>问问题有一套门道. 在请教别人问题之前, 最好自己先尽力想一想, 不要遇到一点问题就去问东问西, 即使别人给你讲了, 你也只是当时明白了, 下次再遇到此类问题, 你依然懵逼. 还有就是会让你形成一种依赖心理, 反正有人能解决, 我问就可以了, 干嘛还有费时费力的去想?! 久而久之, 就破罐子破摔了.</p><p>另外一个要说的就是在请教或者交流问题的时候, 要对对方谦虚.</p><p>我很感激高中时代, 班主任很信任我, 让我当了三年班长, 那三年让我学到了很多书本之外的东西, 其中沟通和管理让我在今后的工作中受益匪浅. </p><h2 id="阅读和写作"><a href="#阅读和写作" class="headerlink" title="阅读和写作"></a>阅读和写作</h2><blockquote><p>这里说的写作不是指专业的作家级的写作, 泛指任何文字的记录, 日记也算.</p></blockquote><p>每天最幸福的时刻就是在 23:00 点之前坐在电脑前, 可以写自己心中要表达的内容, 任思绪飘摇.</p><p>只要有闲暇的时间, 我就会整理和总结这段时间发生的事情, 既有工作上的也有生活上的.</p><p>小的时候, 家里比较穷, 交学费都是问题, 更别说是买书了. 我记得初中一年级, 我很想要一本英语书籍, 那种渴望至今难忘! 后来, 我每天从自己的生活费里抠出一点钱(生活费本来就少), 就这样积攒了几个星期, 去新华书店买了一本英语书籍. 高中时期, 有同学不要的或者已经不读的书籍, 我都会借过来看, 沉浸在自己的幸福当中.</p><p>参加工作之后, 我也有写博客的习惯, 把自己工作中遇到的问题以及解决问题的思路和方式写出来, 分享给其他人, 快乐无比. 特别是收到文章的评论后, 心理美滋滋的. 在互联网的海洋里, 大家素不相识, 通过键盘上敲击的文字互相交流知识和想法, 彼此成长着, 也别具一番乐趣.</p><p>阅读和写作可以培养自己的专注力, 这么好的习惯你千万不要拒绝. 写作可以倒逼着你去阅读, 去关心生活里面的点滴, 阅读和生活中的体验又可以激发你写作的欲望, 两者相辅相成.</p><p>推荐给大家一本书: <strong>Google 工作整理术</strong></p><p><img src="/upload/images/2018/04/07/2.png" alt="-w200"></p><blockquote><p>谷歌前CIO（首席信息官）分享风靡谷歌的信息整理术，帮助现代人彻底告别无序工作，学会利用数字工具为大脑减压！信息太多、时间太少，整理信息已成为现代人急需掌握的必备技能。谷歌作为引领全球的信息搜索与整合巨头，拥有能够有序整理信息的独特方式，而谷歌首席信息官便是主导这一“信息工厂”的总工程师。如今，曾担任“总工程师”的道格拉斯梅里尔亲自将风靡谷歌的信息整理方式分享给大众读者，帮助现代人克服无序工作的通病。《Google工作整理术》告诉你：不要花太多时间给信息归档，用的时候学会去搜索；在数字信息文档中加上关键词，方便日后检索；从前，知识就是力量,现在，共享知识才是力量；把工作和生活融为一体，而不是力图在二者之间求平衡。这些实用 Tips 都揭示了：信息整理才是高效工作的关键，信息整理已是现代人的工作必备技能！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 感悟 学习 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-RunTime: 总结消息转发中用到的知识点</title>
      <link href="/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8">OC-RunTime: 消息转发之实例方法的转发流程</a></p><p><a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/">OC-RunTime: 消息转发之实例方法的转发流程实例讲解</a></p><p><a href="http://www.veryitman.com/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/">OC-RunTime: 消息转发之类方法的转发流程</a></p><p>在上面的几篇文章中我分享了关于消息转发相关的知识点，里面有很多细节没有阐述。</p><p>若在上面的文章中加入很多细节点的话，一是拉长了文章的内容, 二是对于刚接触 Runtime 的朋友来说不一定能接受, 于是就有了这篇文章的诞生.</p><h2 id="RunTime-的定义及使用场景"><a href="#RunTime-的定义及使用场景" class="headerlink" title="RunTime 的定义及使用场景"></a>RunTime 的定义及使用场景</h2><p>苹果 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">开发文档</a> 的这样解释 runtime 的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work</span><br></pre></td></tr></table></figure><p>尽量将决定放到运行的时候，而不是在编译和链接过程中.</p><p>RunTime 的应用场景:</p><blockquote><p>1.面向切面编程 AOP.<br>2.方法调配 method swizzling. 有些地方称之为”黑魔法”.<br>3.消息转发.<br>4.给分类添加属性(关联对象).<br>5.动态获取 class 和 slector.<br>6.KVO&#x2F;KVC, 修改私有属性的值.</p></blockquote><p>建议去阅读下面框架的源码，恕我没有加入链接:</p><blockquote><p>Aspects（AOP必备，“取缔” baseVC，无侵入埋点）</p></blockquote><blockquote><p>MJExtension（JSON 转 model，一行代码实现 NSCoding 协议的自动归档和解档）</p></blockquote><blockquote><p>JSPatch（动态下发 JS 进行热修复）</p></blockquote><blockquote><p>NullSafe（防止因发 unrecognised messages 给 NSNull 导致的崩溃）</p></blockquote><blockquote><p>UITableView-FDTemplateLayoutCell（自动计算并缓存 table view 的 cell 高度）</p></blockquote><blockquote><p>UINavigationController+FDFullscreenPopGesture（全屏滑动返回）</p></blockquote><h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><p>在前面的文章中，很多次看到 IMP、SEL、selector 以及 Method 等关键字，相信大家随着对 RunTime 的逐步了解，慢慢会逐渐熟悉它们的，只是时间问题。很多概念上面的东西理解起来没那么简单，需要动手去写写代码。</p><p>在看下面内容之前, 先抛出一个问题:</p><blockquote><p>runtime 如何通过 selector 找到对应的 IMP 地址?</p></blockquote><p>接下来分别说一下 IMP、SEL、selector 以及 Method.</p><h2 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h2><p>IMP 保存的是 Method 的地址，本质是一个函数指针，由编译器生成。</p><p>IMP 在 <code>objc.h</code> 中的定义：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// A pointer to the function of a method implementation. </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !OBJC_OLD_DISPATCH_PROTOTYPES</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (*IMP)(<span class="keyword">void</span> <span class="comment">/* id, SEL, ... */</span> ); </span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">id</span> (*IMP)(<span class="keyword">id</span>, SEL, ...); </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>向对象发送消息之后，是由这个函数指针 IMP 指定的, 即 IMP 函数指针就指向了方法的实现.</p><p>IMP 函数指针最少包含 id 和 SEL 类型的两个参数，后面其他的参数是对应方法需要的参数。其中 id 代表执行该方法的 target(对象), SEL 就是对应的方法, 通过 id 和 SEL 参数就能确定唯一的方法实现地址.</p><p>那么我们如何获取方法的 IMP 呢？很简单.</p><p>NSObject 提供了如下两个方法:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (IMP)methodForSelector:(SEL)aSelector;</span><br><span class="line">+ (IMP)instanceMethodForSelector:(SEL)aSelector;</span><br></pre></td></tr></table></figure><p>对应的实现(源码 NSObject.mm), 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+ (IMP)instanceMethodForSelector:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</span><br><span class="line">    <span class="keyword">return</span> class_getMethodImplementation(<span class="keyword">self</span>, sel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (IMP)methodForSelector:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</span><br><span class="line">    <span class="keyword">return</span> object_getMethodImplementation((<span class="keyword">id</span>)<span class="keyword">self</span>, sel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (IMP)methodForSelector:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</span><br><span class="line">    <span class="keyword">return</span> object_getMethodImplementation(<span class="keyword">self</span>, sel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以看到，对应的 <code>methodForSelector</code> 既有实例方法又有类方法，而 <code>instanceMethodForSelector</code> 只有类方法。</p><p>在使用 <code>methodForSelector</code> 方法时，向类发送消息，则 SEL 应该是类方法, 若向实例对象发送消息，则 SEL 应该为实例对象方法.</p><p>而 <code>instanceMethodForSelector</code> 仅仅允许类发送该消息, 从而获取实例方法的 IMP. 该方法无法获取类方法的 IMP, 如果想获取类方法的 IMP 可以使用 <code>methodForSelector</code> 来获取。</p><p>函数文档原文解释如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Use this method to ask the class object for the implementation of instance methods only. </span><br><span class="line">To ask the class for the implementation of a class method, send the methodForSelector: instance method to the class instead.</span><br></pre></td></tr></table></figure><p>举个例子，或许更好理解。</p><p>下面两个方法, 一个是类方法(testClassMethod), 另一个是实例方法(testInstanceMethod).</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)testClassMethod &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)testInstanceMethod &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别使用上面提到的方法来获取 IMP 的几个方法.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IMP imp = [[<span class="keyword">self</span> <span class="keyword">class</span>] instanceMethodForSelector:<span class="keyword">@selector</span>(testClassMethod)];</span><br><span class="line">IMP imp2 = [[<span class="keyword">self</span> <span class="keyword">class</span>] instanceMethodForSelector:<span class="keyword">@selector</span>(testInstanceMethod)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以改成 NSObject 调用的方式, 结果一样.</span></span><br><span class="line"><span class="comment">// IMP imp = [NSObject instanceMethodForSelector:@selector(testClassMethod)];</span></span><br><span class="line"><span class="comment">// IMP imp2 = [NSObject instanceMethodForSelector:@selector(testInstanceMethod)];</span></span><br><span class="line">    </span><br><span class="line">IMP imp3 = [[<span class="keyword">self</span> <span class="keyword">class</span>] methodForSelector:<span class="keyword">@selector</span>(testClassMethod)];</span><br><span class="line">IMP imp4 = [<span class="keyword">self</span> methodForSelector:<span class="keyword">@selector</span>(testInstanceMethod)];</span><br></pre></td></tr></table></figure><p>调试器可以看出, 如下日志:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Printing description of imp:</span><br><span class="line">(IMP) imp = <span class="number">0x000000010d8455c0</span> (libobjc.A.dylib`_objc_msgForward)</span><br><span class="line"></span><br><span class="line">Printing description of imp2:</span><br><span class="line">(IMP) imp2 = <span class="number">0x000000010cf19b90</span> (-[ViewController testInstanceMethod] at ViewController.m:<span class="number">94</span>)</span><br><span class="line"></span><br><span class="line">Printing description of imp3:</span><br><span class="line">(IMP) imp3 = <span class="number">0x000000010cf19b60</span> (+[ViewController testClassMethod] at ViewController.m:<span class="number">89</span>)</span><br><span class="line"></span><br><span class="line">Printing description of imp4:</span><br><span class="line">(IMP) imp4 = <span class="number">0x000000010cf19b90</span> (-[ViewController testInstanceMethod] at ViewController.m:<span class="number">94</span>)</span><br><span class="line">(lldb) </span><br></pre></td></tr></table></figure><p>imp2、imp3、imp4 都是正常的，唯独 imp 不正常，也充分说明了 <code>instanceMethodForSelector</code> 无法获取类方法的 IMP.</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>在源码 <code>runtime.h</code> 中, 定义 method, 其本质是一个结构体.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_method &#123;</span><br><span class="line">    SEL method_name     OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">char</span> *method_types  OBJC2_UNAVAILABLE;</span><br><span class="line">    IMP method_imp      OBJC2_UNAVAILABLE;</span><br><span class="line">&#125;                                                            </span><br></pre></td></tr></table></figure><p>方法名 <code>method_name</code> 类型为 SEL.</p><p><code>method_types</code> 方法类型, 是一个 char 指针，存储着方法的参数类型和返回值类型。</p><p>方法实现 <code>method_imp</code> 的类型为 IMP.</p><p>可以看出, 有 SEL 和 IMP, method_types 是对应的方法返回值和参数类型, 如 <code>v@:</code>，是一个字符串。</p><p><code>runtime.h</code> 中有两个方法，可以根据 SEL 直接获取实例方法和类方法的 Method，如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method class_getInstanceMethod(Class cls, SEL name);</span><br><span class="line"></span><br><span class="line">Method class_getClassMethod(Class cls, SEL name);</span><br></pre></td></tr></table></figure><h2 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h2><p><code>selector</code>, 称之为方法选择器，SEL 是 <code>selector</code> 的表示类型，也是方法的编号，是类成员方法的指针。</p><p>SEL 定义在源码 <code>objc.h</code> 中, 是一个结构体指针, 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// An opaque type that represents a method selector.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_selector *SEL;</span><br></pre></td></tr></table></figure><p>但是源码中查不到 <code>objc_selector</code> 具体的定义和实现.</p><p>获取 SEL 有三个方法:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SEL sel = <span class="keyword">@selector</span>(play:);</span><br><span class="line">SEL sel = sel_registerName(<span class="string">&quot;play:&quot;</span>); </span><br><span class="line">SEL sel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;play&quot;</span>);</span><br></pre></td></tr></table></figure><p>SEL 表示一个 selector 的指针，无论什么类里，只要方法名相同，SEL 就相同，SEL 实际是根据方法名 hash 化了的字符串。而对于字符串的比较仅仅需要比较他们的地址就可以了，所以速度上非常快，SEL 的存在加快了查询方法的速度。</p><blockquote><p>思考一个问题：为什么在同一个 OC 类中，不能存在同名的函数，即使参数类型不同也不行，换句话说 OC为什么没有重载？</p></blockquote><blockquote><p>答案已经在上面说了，SEL 表示一个 selector 的指针，无论什么类里，只要方法名相同，SEL 就相同，相同的函数名，编译器无法编译通过。</p></blockquote><p><code>dispatch table</code> 存放 SEL 和 IMP 的对应关系，SEL 最终会通过 <code>dispatch table</code> 寻找到对应的IMP。</p><p>总之，Selector、Method 和 IMP 三者之间的关系可以这么解释，在类的(实例和类方法)调度表(dispatch table)中的每一个实体代表一个方法 Method，其名字叫做选择器 SEL，并对应着一种方法实现称之为 IMP，有了 Method 就可以使用 SEL 找到对应的 IMP，SEL 就是为了查找方法的最终实现 IMP。</p><h2 id="class-addMethod"><a href="#class-addMethod" class="headerlink" title="class_addMethod"></a>class_addMethod</h2><p>查看源码 <code>objc-runtime-new.mm</code> 中该函数实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> class_addMethod(Class cls, SEL name, IMP imp, <span class="keyword">const</span> <span class="keyword">char</span> *types)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"></span><br><span class="line">    rwlock_writer_t lock(runtimeLock);</span><br><span class="line">    <span class="keyword">return</span> ! addMethod(cls, name, imp, types ?: <span class="string">&quot;&quot;</span>, <span class="literal">NO</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发文档中这样描述该函数:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Adds a new method to a <span class="keyword">class</span> with a given name and implementation.</span><br><span class="line">class_addMethod will add an override of a superclass<span class="string">&#x27;s implementation, </span></span><br><span class="line"><span class="string">but will not replace an existing implementation in this class. </span></span><br><span class="line"><span class="string">To change an existing implementation, use method_setImplementation.</span></span><br></pre></td></tr></table></figure><p>解释一下，可以为类根据 SEL 和 IMP 动态添加一个新方法。<code>class_addMethod</code> 仅可以动态添加方法，不会替换。如果想达到方法替换的效果可使用 <code>method_setImplementation</code> 函数。</p><p>关于 <code>method_setImplementation</code> 和 <code>method_exchangeImplementations</code> 后面文章再做分析.</p><p>其实, <code>method_exchangeImplementations</code> 的内部实现相当于调用了 2 次 <code>method_setImplementation</code> 方法。</p><p><code>class_addMethod</code> 不仅可以动态添加类方法, 也可以添加实例方法。</p><p>参数及返回值解释:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">返回值: 返回 <span class="literal">YES</span> 表示方法添加成功, 否则添加失败。</span><br><span class="line"></span><br><span class="line">参数 Class cls: 将要给添加方法的类, 即［类名 <span class="keyword">class</span>］</span><br><span class="line"></span><br><span class="line">参数 SEL name: 将要添加的方法 SEL, 即 <span class="keyword">@selector</span>(方法名)，如果已经存在，该方法返回失败，不存在就添加成功。</span><br><span class="line"></span><br><span class="line">参数 IMP imp：实现这个方法的函数. 有两种写法即 C 和 OC 的写法. 一个 IMP 最少包括两个参数, 上面已经说过。</span><br><span class="line"></span><br><span class="line">参数 <span class="keyword">const</span> <span class="keyword">char</span> *types: 实现方法的函数的返回和参数编码类型. 如 <span class="string">&quot;v@:&quot;</span> 表示返回值为 <span class="keyword">void</span>, 没有参数的一个函数, 其中 @和:分别代表 IMP 的默认两个参数即 <span class="keyword">id</span> 和 sel.</span><br></pre></td></tr></table></figure><p>关于 types，可以使用 <code>method_getTypeEncoding</code> 来获取。</p><p>更多关于 types 的内容可以参考开发者文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1">Type Encodings</a>.</p><h2 id="解答问题"><a href="#解答问题" class="headerlink" title="解答问题"></a>解答问题</h2><p>读到这里, 大家对 IMP, SEL 以及 Method 应该有初步的了解了, 那么来解答一下刚才提出的问题:</p><blockquote><p>runtime 如何通过 selector 找到对应的 IMP 地址?</p></blockquote><p>回答这个问题的关键是要知道消息调度表(dispatch table)，另外一个要回答的要点是 IMP 的实现和获取以及和 Method 之间的关系。</p><p>类对象中有类方法和实例方法的分发表，表中记录着方法的名字、参数和实现，selector 本质就是方法名称，runtime 通过这个方法名称就可以在列表中找到该方法对应的实现.</p><p>系统为我们提供了获取 IMP 指针的函数，无论是类方法还是实例方法我们都可以获取对应的 IMP.</p><p>而 Method 将 Selector 和 IMP 联系起来，可从源码中看出:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_method &#123;</span><br><span class="line">    SEL method_name     OBJC2_UNAVAILABLE;</span><br><span class="line">    <span class="keyword">char</span> *method_types  OBJC2_UNAVAILABLE;</span><br><span class="line">    IMP method_imp      OBJC2_UNAVAILABLE;</span><br><span class="line">&#125;                                                            </span><br></pre></td></tr></table></figure><p>IMP 是函数的指针，它是由编译器编译生成的。当发一个消息时，它会找到那段代码执行，IMP 指向了这个方法的具体的实现，得到这个函数的指针可以直接执行。</p><p>IMP 指向的方法与 <code>objc_msgSend</code> 函数类型相同，参数都包含 id 和 SEL 类型。每个方法名都对应一个 SEL 类型的方法选择器，而每个实例对象中的 SEL 对应的方法实现肯定是唯一的，通过一组 id 和 SEL 参数就能确定唯一的方法实现地址，反之亦然。当发送消息给一个对象时，runTime 会在对象的类对象方法列表里查找，当我们发送一个消息给一个类时，这条消息会在类的 <code>Meta Class</code> 对象的方法列表里查找，直到超找到 NSObject 中为止。</p><p><strong>消息传递的过程</strong></p><p><strong>1.</strong> 当消息被发送给一个对象，messaging function 跟随对象的 isa 指针找到它的 class structure，在 dispatch table 中寻找 method selector.</p><p><strong>2.</strong> 如果没有找到 selector，objc_msgsend 跟随该类实例的 isa 找到父类，尝试在父类的 dispatch table 中寻找 selector.</p><p><strong>3.</strong> 重复步骤 <strong>2</strong>，直到 isa 指向 NSObject Class 为止。</p><p>关于分发表和消息相关的知识可以参考开发文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html">Messaging</a>，讲得很清楚。</p><h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><p>说了这么多理论知识，是时候举栗子了，方便大家更好的理解上面的内容。</p><h3 id="1-动态添加实例方法"><a href="#1-动态添加实例方法" class="headerlink" title="1. 动态添加实例方法"></a>1. 动态添加实例方法</h3><p><strong>Student.m</strong></p><p>除 <code>init</code> 外，Student 只有一个实例方法 <code>studentWalkImp</code>.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;studentWalkImp&quot;</span>);</span><br><span class="line">        IMP impletor = class_getMethodImplementation([<span class="keyword">self</span> <span class="keyword">class</span>], proxySelector);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取实例方法</span></span><br><span class="line">        Method method = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], proxySelector);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</span><br><span class="line">        </span><br><span class="line">        SEL origSel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;walk&quot;</span>);</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], origSel, impletor, types);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)studentWalkImp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- Student studentWalkImp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>调用测试一下.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    Student *stud = [[Student alloc] init];</span><br><span class="line">    [stud performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;walk&quot;</span>) withObject:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 Student 并没有 <code>walk</code> 方法，故意为之，运行后控制台会打印:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- Student studentWalkImp</span><br></pre></td></tr></table></figure><p>成功的为 Student 添加了一个实例方法 <code>walk</code> 的实现 <code>studentWalkImp</code>.</p><p>上面的例子是使用 OC 的 IMP 方式来实现的，可以改为 C 实现版本的.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        SEL origSel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;walk&quot;</span>);</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], origSel, (IMP)studentWalkImp, <span class="string">&quot;v:@&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> studentWalkImp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- Student studentWalkImp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-动态添加类方法"><a href="#2-动态添加类方法" class="headerlink" title="2. 动态添加类方法"></a>2. 动态添加类方法</h3><p>动态添加类方法，和动态添加实例方法稍微有点不同。下面是改造后的 <code>Student.m</code>.</p><p><strong>Student.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取 MetaClass, 类方法不可以使用 [self class]</span></span><br><span class="line">        Class metaCls = objc_getMetaClass([<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) UTF8String]);</span><br><span class="line">        </span><br><span class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;clsImp&quot;</span>);</span><br><span class="line">        IMP impletor = class_getMethodImplementation(metaCls, proxySelector);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类方法</span></span><br><span class="line">        Method method = class_getClassMethod([<span class="keyword">self</span> <span class="keyword">class</span>], proxySelector);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</span><br><span class="line">        SEL origSel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;walk&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        class_addMethod(metaCls, origSel, impletor, types);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)clsImp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- Student clsImp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里获取 Class 稍微不同的是使用了 <code>objc_getMetaClass</code>，这里关系到 Objective-C 中的类、Class、根类和元类的区别，可以参考 <a href="http://www.veryitman.com/2019/01/29/Class%E3%80%81isa%E3%80%81%E5%85%83%E7%B1%BB/">Class、isa、元类</a> 这篇文章。</p><p>调用测试一下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    Student *stud = [[Student alloc] init];</span><br><span class="line">    </span><br><span class="line">    [[stud <span class="keyword">class</span>] performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;walk&quot;</span>) withObject:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- Student clsImp</span><br></pre></td></tr></table></figure><p>成功地为类动态的添加了一个类方法 <code>clsImp</code>.</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><strong>1. <a href="http://blog.devtang.com/2013/10/15/objective-c-object-model/">Objective-C 对象模型及应用</a></strong></p><p><strong>2. <a href="https://opensource.apple.com/tarballs/objc4/">Apple RunTime 源码 objc4-723.tar.gz</a></strong></p><p><strong>3. <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html">Messaging</a></strong></p><p><strong>4. <a href="https://junyixie.github.io/2017/05/01/Objective-C-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%92%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/">Objective-C 深入理解中的消息机制和方法调用</a></strong></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward">Demo</a>.</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-RunTime: 消息转发之类方法的转发流程</title>
      <link href="/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本篇是「消息转发」系列的第三篇, 在 <a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/">OC-RunTime: 消息转发之实例方法的转发流程</a> 和 <a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/">OC-RunTime: 消息转发之实例方法的转发流程[实例讲解]</a> 中分享了实例方法的转发流程.</p><p>今天分享如何对类方法进行消息的转发.</p><h2 id="resolveClassMethod"><a href="#resolveClassMethod" class="headerlink" title="resolveClassMethod"></a>resolveClassMethod</h2><p>NSObject 提供了 <code>resolveClassMethod</code> 来让开发者在里面动态添加一个类方法.</p><p>类方法的转发流程和实例方法转发的流程大致一样, 唯独不同的是需要重写的方法(NSObject中)的不一样.</p><p>当时我在写 Demo, 以为只需要将 <code>resolveInstanceMethod</code> 改为 <code>resolveClassMethod</code> 就万事大吉了即重写下面几个方法就可以解决问题, 事实证明这样是不行的.</p><blockquote><ol><li>+resolveClassMethod</li><li>-forwardingTargetForSelector</li><li>-methodSignatureForSelector</li><li>-forwardInvocation</li><li>-doesNotRecognizeSelector:</li></ol></blockquote><p>网上很多博文并没有深入的探讨关于类方法转发的流程, 只是在介绍实例方法转发的流程的同时, 一笔带过类方法转发机制和流程.</p><p>通过对 <code>NSObject.mm</code> 源码的查看, 可以看到对应上面的几个方法都有类方法. 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> +resolveClassMethod</span><br><span class="line"><span class="number">2.</span> +forwardingTargetForSelector</span><br><span class="line"><span class="number">3.</span> +methodSignatureForSelector</span><br><span class="line"><span class="number">4.</span> +forwardInvocation</span><br><span class="line"><span class="number">5.</span> +doesNotRecognizeSelector:</span><br></pre></td></tr></table></figure><p>重新这几个方法才是解决问题的关键.</p><p>现在我们重写 <code>resolveClassMethod</code>, 如下.</p><hr><p><strong>ViewController.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> sPerformClassMethodName = <span class="string">@&quot;veryClassMethod&quot;</span>;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 1--- +resolveClassMethod&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([sPerformClassMethodName isEqualToString:methodName]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取 MetaClass</span></span><br><span class="line">        Class predicateMetaClass = objc_getMetaClass([<span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>) UTF8String]);</span><br><span class="line">        <span class="comment">// 根据 metaClass 获取方法的实现</span></span><br><span class="line">        IMP impletor = class_getMethodImplementation(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</span><br><span class="line">        <span class="comment">// 获取类方法</span></span><br><span class="line">        Method predicateMethod = class_getClassMethod(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *encoding = method_getTypeEncoding(predicateMethod);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态添加类方法</span></span><br><span class="line">        class_addMethod(predicateMetaClass, sel, impletor, encoding);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveClassMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)proxyMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- +proxyMethod of class&#x27;s method for OC.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 运行类方法</span></span><br><span class="line">    SEL selector = <span class="built_in">NSSelectorFromString</span>(sPerformClassMethodName);</span><br><span class="line">    SuppressPerformSelectorLeakWarning(</span><br><span class="line">        [[<span class="keyword">self</span> <span class="keyword">class</span>] performSelector:selector withObject:<span class="literal">nil</span>];</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>SuppressPerformSelectorLeakWarning</code> 可以参考 <a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/">OC-RunTime: 消息转发之实例方法的转发流程[实例讲解]</a>.</p><p>将动态添加的方法让 <code>proxyMethod</code> 来执行, 显示结果达到预期.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod</span><br><span class="line">---veryitman--- +proxyMethod of <span class="keyword">class</span><span class="string">&#x27;s method for OC.</span></span><br></pre></td></tr></table></figure><h2 id="创建被转发者"><a href="#创建被转发者" class="headerlink" title="创建被转发者"></a>创建被转发者</h2><p><strong>MZTempObj.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZTempObj</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 类方法</span></span><br><span class="line">+ (<span class="keyword">void</span>)veryClassMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- veryClassMethod&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这里有类方法的一个实现 <code>veryClassMethod</code>.</p><h2 id="重写转发消息的函数"><a href="#重写转发消息的函数" class="headerlink" title="重写转发消息的函数"></a>重写转发消息的函数</h2><p>同理将 <code>resolveClassMethod</code> 修改一下, 为了保证流程继续.</p><p>示例代码如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 1--- +resolveClassMethod. selector: %@&quot;</span>, <span class="built_in">NSStringFromSelector</span>(sel));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里故意将 sPerformClassMethodName 改为 @&quot;&quot;, 为了流程往下走</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">@&quot;&quot;</span> isEqualToString:methodName]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取 MetaClass</span></span><br><span class="line">        Class predicateMetaClass = objc_getMetaClass([<span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>) UTF8String]);</span><br><span class="line">        <span class="comment">// 根据 metaClass 获取方法的实现</span></span><br><span class="line">        IMP impletor = class_getMethodImplementation(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</span><br><span class="line">        <span class="comment">// 获取类方法</span></span><br><span class="line">        Method predicateMethod = class_getClassMethod(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *encoding = method_getTypeEncoding(predicateMethod);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态添加类方法</span></span><br><span class="line">        class_addMethod(predicateMetaClass, sel, impletor, encoding);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveClassMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 2--- +forwardingTargetForSelector&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([sPerformClassMethodName isEqualToString:selectorName]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注意1: 也可在此转发实例方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></span><br><span class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> myobject;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转发类方法对应返回类对象</span></span><br><span class="line">        <span class="keyword">return</span> [MZTempObj <span class="keyword">class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 3--- +methodSignatureForSelector&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找出对应的 aSelector 签名</span></span><br><span class="line">    <span class="built_in">NSMethodSignature</span> *signature = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意2: 也可以在此获取实例方法的签名</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == signature) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否有 aSelector</span></span><br><span class="line">        <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:aSelector]) &#123;</span><br><span class="line">            signature = [MZTempObj instanceMethodSignatureForSelector:aSelector];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> signature;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == signature) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否有 aSelector</span></span><br><span class="line">        <span class="keyword">if</span> ([MZTempObj respondsToSelector:aSelector]) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//methodSignatureForSelector 可以获取类方法和实例方法的签名</span></span><br><span class="line">            <span class="comment">//instanceMethodSignatureForSelector只能获取实例方法的签名</span></span><br><span class="line">            signature = [MZTempObj methodSignatureForSelector:aSelector];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> signature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 4--- +forwardInvocation&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意3: 也可以调用实例方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:anInvocation.selector]) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:[[MZTempObj alloc] init]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([MZTempObj respondsToSelector:anInvocation.selector]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里转发的是 MZTempObj Class, 不是对象</span></span><br><span class="line">        [anInvocation invokeWithTarget:[MZTempObj <span class="keyword">class</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)doesNotRecognizeSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 5--- +doesNotRecognizeSelector: %@&quot;</span>, <span class="built_in">NSStringFromSelector</span>(aSelector));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后, 控制台输出日志:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod. selector: veryClassMethod</span><br><span class="line">---veryitman--- <span class="number">2</span>--- +forwardingTargetForSelector</span><br><span class="line">---veryitman--- veryClassMethod</span><br></pre></td></tr></table></figure><p><strong>这里注意一下</strong></p><blockquote><p>将代码中 <code>注意1</code> <code>注意2</code> 等部分可以自行打开测试一下, 然后将 <code>MZTempObj.m</code> 中的类方法(+veryClassMethod)改为实例方法(-veryClassMethod), 也是可以的, 这样就达到了将类方法转发给实例方法的效果.</p></blockquote><p>修改一下 <code>forwardingTargetForSelector</code> 中的实现, 可以看到 4, 5也会执行.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 2--- +forwardingTargetForSelector&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">@&quot;&quot;</span> isEqualToString:selectorName]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注意1: 也可在此转发实例方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></span><br><span class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> myobject;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转发类方法对应返回类对象</span></span><br><span class="line">        <span class="keyword">return</span> [MZTempObj <span class="keyword">class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod. selector: veryClassMethod</span><br><span class="line">---veryitman--- <span class="number">2</span>--- +forwardingTargetForSelector</span><br><span class="line">---veryitman--- <span class="number">3</span>--- +methodSignatureForSelector</span><br><span class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod. selector: _forwardStackInvocation:</span><br><span class="line">---veryitman--- <span class="number">4</span>--- +forwardInvocation</span><br><span class="line">---veryitman--- veryClassMethod</span><br></pre></td></tr></table></figure><p>同理我们可以得到类方法的消息转发流程图, 如下图所示:</p><p><img src="/upload/images/2018/04/03/1.jpg" alt="1"></p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8">OC-RunTime: 消息转发之实例方法的转发流程</a></p><p><a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/">OC-RunTime: 消息转发之实例方法的转发流程实例讲解</a></p><p><a href="http://www.veryitman.com/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/">OC-RunTime: 总结消息转发中用到的知识点</a></p><p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward">Demo</a>.</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-RunTime: 消息转发之实例方法的转发流程[实例讲解]</title>
      <link href="/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/"/>
      <url>/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/">OC-RunTime: 消息转发之实例方法的转发流程</a> 分享了消息转发的流程, 本次结合实际例子继续分析一下消息转发流程.</p><h2 id="发送不存在的消息"><a href="#发送不存在的消息" class="headerlink" title="发送不存在的消息"></a>发送不存在的消息</h2><p>在 ViewController 的 viewDidLoad 中运行 <code>veryTestMethod</code> 方法.</p><p><strong>ViewController.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> sPerformInstanceMethodName = <span class="string">@&quot;veryTestMethod&quot;</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 运行实例方法</span></span><br><span class="line">    SEL selector = <span class="built_in">NSSelectorFromString</span>(sPerformInstanceMethodName);</span><br><span class="line">    </span><br><span class="line">    SuppressPerformSelectorLeakWarning(</span><br><span class="line">        [<span class="keyword">self</span> performSelector:selector withObject:<span class="literal">nil</span>];</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中, <code>SuppressPerformSelectorLeakWarning</code> 是定义的一个宏.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SuppressPerformSelectorLeakWarning(Stuff) \</span></span><br><span class="line"><span class="meta">do &#123; \</span></span><br><span class="line"><span class="meta">    _Pragma(<span class="string">&quot;clang diagnostic push&quot;</span>) \</span></span><br><span class="line"><span class="meta">    _Pragma(<span class="string">&quot;clang diagnostic ignored \&quot;-Warc-performSelector-leaks\&quot;&quot;</span>) \</span></span><br><span class="line"><span class="meta">    Stuff; \</span></span><br><span class="line"><span class="meta">    _Pragma(<span class="string">&quot;clang diagnostic pop&quot;</span>) \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br></pre></td></tr></table></figure><p>在 ViewController 中我并没有写 <code>veryTestMethod</code> 这个函数, 只是借助 <code>performSelector</code> 动态执行, 如果编译运行直接会 crash.</p><p>可以查看 <code>NSObject.mm</code> 源码, 里面关于消息转发的几个重要函数都写着 <code>_objc_fatal</code>, 可谓是招招毙命.</p><p>紧接着, 我们可以借助 <code>resolveInstanceMethod</code> 来完成消息转发给 ViewController.</p><h2 id="resolveInstanceMethod-转发"><a href="#resolveInstanceMethod-转发" class="headerlink" title="resolveInstanceMethod 转发"></a>resolveInstanceMethod 转发</h2><p>重写 NSObject 中的 <code>resolveInstanceMethod</code> 函数.</p><blockquote><p>+resolveInstanceMethod</p></blockquote><p><strong>ViewController.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记得导入 RunTime 头文件</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 1--- +resolveInstanceMethod&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([sPerformInstanceMethodName isEqualToString:methodName]) &#123;</span><br><span class="line">        </span><br><span class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;proxyMethod&quot;</span>);</span><br><span class="line">        IMP impletor = class_getMethodImplementation(<span class="keyword">self</span>, proxySelector);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取实例方法</span></span><br><span class="line">        Method method = class_getInstanceMethod(<span class="keyword">self</span>, proxySelector);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加 OC 的函数</span></span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, impletor, types);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewController 中实现的 <code>proxyMethod</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OC 实现</span></span><br><span class="line">- (<span class="keyword">void</span>)proxyMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- -proxyMethod of instance&#x27;s method for OC.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>resolveInstanceMethod</code> 中动态添加了 <code>veryTestMethod</code> 方法, 并让 <code>proxyMethod</code> 函数来实现(IMP).</p><p>运行可以看到, 程序并没有 crash, 成功的执行了 <code>proxyMethod</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- 1--- +resolveInstanceMethod</span><br><span class="line">---veryitman--- -proxyMethod of instance&#x27;s method for OC.</span><br></pre></td></tr></table></figure><p>到此为止, 我们已经看到动态添加一个方法的实现并成功运行的完整例子.</p><p>接下来, 我们将转发给其他对象 <code>MZTempObj</code> 来执行.</p><h2 id="自定义被转发的对象"><a href="#自定义被转发的对象" class="headerlink" title="自定义被转发的对象"></a>自定义被转发的对象</h2><p><strong>MZTempObj.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZTempObj</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)veryTestMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- veryTestMethod&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>veryTestMethod</code> 就是我们要转发对应的消息.</p><h2 id="消息转发实践"><a href="#消息转发实践" class="headerlink" title="消息转发实践"></a>消息转发实践</h2><p>接下来我们把向 ViewController 发送 <code>veryTestMethod</code> 的消息转发给 <code>MZTempObj</code> 的  <code>veryTestMethod</code> 方法.</p><p>继续重写下面函数, 不过 <code>resolveInstanceMethod</code> 要稍微改造一下, 才能达到我们实践的目的.</p><blockquote><ol><li>+resolveInstanceMethod</li><li>-forwardingTargetForSelector</li><li>-methodSignatureForSelector</li><li>-forwardInvocation</li><li>-doesNotRecognizeSelector:</li></ol></blockquote><p><strong>ViewController.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记得导入 RunTime 头文件</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 1--- +resolveInstanceMethod: %@&quot;</span>, <span class="built_in">NSStringFromSelector</span>(sel));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里故意为之, 让流程往下走</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">@&quot;&quot;</span> isEqualToString:methodName]) &#123;</span><br><span class="line">        </span><br><span class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;proxyMethod&quot;</span>);</span><br><span class="line">        IMP impletor = class_getMethodImplementation(<span class="keyword">self</span>, proxySelector);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取实例方法</span></span><br><span class="line">        Method method = class_getInstanceMethod(<span class="keyword">self</span>, proxySelector);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加 OC 的函数</span></span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, impletor, types);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 转发给对应的某个对象来执行 aSelector</span></span><br><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 2--- -forwardingTargetForSelector&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([sPerformInstanceMethodName isEqualToString:selectorName]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></span><br><span class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> myobject;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 3--- -methodSignatureForSelector&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找出对应的 aSelector 签名</span></span><br><span class="line">    <span class="built_in">NSMethodSignature</span> *signature = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == signature) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否有 aSelector</span></span><br><span class="line">        <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:aSelector]) &#123;</span><br><span class="line">            signature = [MZTempObj instanceMethodSignatureForSelector:aSelector];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> signature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 4--- -forwardInvocation&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:anInvocation.selector]) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:[[MZTempObj alloc] init]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)doesNotRecognizeSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 5--- -doesNotRecognizeSelector: %@&quot;</span>, <span class="built_in">NSStringFromSelector</span>(aSelector));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序, 控制台打印结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- 1--- +resolveInstanceMethod</span><br><span class="line">---veryitman--- 2--- -forwardingTargetForSelector</span><br><span class="line">---veryitman--- veryTestMethod</span><br></pre></td></tr></table></figure><p>这里对照之前的流程图是完全符合的, 那么怎么让其执行 3 和 4 呢? 很简单, 修改一下 <code>forwardingTargetForSelector</code> 里面的实现即可.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;---veryitman--- 2--- -forwardingTargetForSelector&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 故意为之</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">@&quot;&quot;</span> isEqualToString:selectorName]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></span><br><span class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> myobject;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行看结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- 1--- +resolveInstanceMethod veryTestMethod</span><br><span class="line">---veryitman--- 2--- -forwardingTargetForSelector</span><br><span class="line">---veryitman--- 3--- -methodSignatureForSelector</span><br><span class="line">---veryitman--- 1--- +resolveInstanceMethod: _forwardStackInvocation:</span><br><span class="line">---veryitman--- 4--- -forwardInvocation</span><br><span class="line">---veryitman--- veryTestMethod</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 这里在 3后面会多了一个 <code>1--- resolveInstanceMethod</code> 的打印, 是系统调用的, 此时对应的 sel 是 <code>_forwardStackInvocation</code>.</p><p>如果不去重写 <code>methodSignatureForSelector</code> 打印结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---veryitman--- 1--- +resolveInstanceMethod</span><br><span class="line">---veryitman--- 2--- -forwardingTargetForSelector</span><br><span class="line">---veryitman--- 5--- -doesNotRecognizeSelector: veryTestMethod</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1.Apple RunTime 源码 <a href="https://opensource.apple.com/tarballs/objc4/">objc4-723.tar.gz</a></p><p>2.<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1">Message Forwarding</a></p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8">OC-RunTime: 消息转发之实例方法的转发流程</a></p><p><a href="http://www.veryitman.com/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/">OC-RunTime: 消息转发之类方法的转发流程</a></p><p><a href="http://www.veryitman.com/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/">OC-RunTime: 总结消息转发中用到的知识点</a></p><p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward">Demo</a>.</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-RunTime: 消息转发之实例方法的转发流程</title>
      <link href="/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><p>本篇只是从系统函数的实现上, 来分析消息转发的流程. </p><p>下一篇结合本篇的理论和实际的例子来分析一下消息转发.</p><h2 id="需要明确的几个问题"><a href="#需要明确的几个问题" class="headerlink" title="需要明确的几个问题"></a>需要明确的几个问题</h2><p>在往下看这篇博文之前, 有几个问题需要大家达成共识.</p><p><strong>1.Objective-C 的特点</strong><br>按照是否需要编译的原理来说, 编程语言一般可以分为静态编译类型和动态解释类型.</p><p>如 Java&#x2F;C&#x2F;C++ 是属于编译类型的语言, Php&#x2F;Python&#x2F;Ruby 属于解释类型的语言.</p><p>Objective-C 是基于 C 并具有自身特点的编译型语言, 再加上其 RunTime 机制, Objective-C 既是编译型又是动态的一门编程语言. 所谓的动态指的是在程序编译后运行中可以改变其结构.</p><p><strong>2.函数调用</strong><br>在 Objective-C 中调用函数, 被解释为向一个对象发送消息, 该对象可以是类对象也可以是实例对象.</p><p>例如:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[person play];</span><br></pre></td></tr></table></figure><p>意思是向实例对象 person 发送一个 play 的消息. </p><p>还有一个比较有意思的是, 向一个空对象(nil) 发送消息不会 crash, 如果在 Java 中这个是不行的.例如:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = <span class="literal">nil</span>;</span><br><span class="line">[person play];</span><br></pre></td></tr></table></figure><p>这个不会导致程序崩溃, 只是调用 <code>play</code> 函数没有任何反应罢了!</p><p><strong>3.self</strong><br>在 C++&#x2F;Java 语言中, 有 this 指针的概念, 在 Objective-C 中, 也有类似的 this 指针即 self. self 既可以是实例对象也可以是类对象.</p><p>这里举个例子, 下面两个同名函数, 一个是类方法(+)一个是实例方法(-).<br>跟 Java 中的类似, 实例方法可以直接使用类方法, 但是类方法不可以直接使用实例方法.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)testClassMethod</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> sendMsg];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)testInstanceMethod</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> sendMsg];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类方法</span></span><br><span class="line">+ (<span class="keyword">void</span>)sendMsg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;+ sendMsg. self: %@&quot;</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line">- (<span class="keyword">void</span>)sendMsg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;- sendMsg. self: %@&quot;</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ViewController 中分别调用两个 test 方法, 输出内容, 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ sendMsg. <span class="keyword">self</span>: ViewController</span><br><span class="line"></span><br><span class="line">- sendMsg. <span class="keyword">self</span>: &lt;ViewController: <span class="number">0x7fc64740a5e0</span>&gt;</span><br></pre></td></tr></table></figure><p>从结果可以看出类方法中的 <code>self</code> 代表的是该类, 实例方法中的 <code>self</code> 指的是类的一个实例即对象.</p><p>更多 <code>self</code> 的知识点，可以参考 <a href="http://www.veryitman.com/2018/12/23/OC-self/">OC: self</a> 这篇文章。</p><h2 id="关于-Message-Forwarding"><a href="#关于-Message-Forwarding" class="headerlink" title="关于 Message Forwarding"></a>关于 Message Forwarding</h2><p>Message Forwarding 即消息转发. </p><p>关于消息转发, 官方文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1">Message Forwarding</a> 是这么解释的:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sending a message to an object that does not handle that message is an error. However, </span><br><span class="line">before announcing the error, </span><br><span class="line">the runtime system gives the receiving object a second chance to handle the message.</span><br></pre></td></tr></table></figure><p>大概意思是这样的:</p><blockquote><p>向一个对象发送消息, 该对象如果无法处理该消息, 系统就会报错, 但是在报错之前, 利用 Objective-C 提供的运行时机制可以防止报错的发生. 在 iOS 中类似这样的报错会导致程序直接 crash.<br>这里的对象, 可以是实例对象又可以是类对象.</p></blockquote><p>在开发过程中, 大家一般都会遇到类似的 crash:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> *** Terminating app due to uncaught exception  </span><br><span class="line"><span class="string">&#x27;NSInvalidArgumentException&#x27;</span>, </span><br><span class="line">reason: <span class="string">&#x27;-[Controller play]: unrecognized selector sent to instance 0x7ff779f322a0&#x27;</span></span><br><span class="line">*** First throw call stack:</span><br><span class="line">(</span><br><span class="line">CoreFoundation  <span class="number">0x000000010d89712b</span> __exceptionPreprocess + <span class="number">171</span></span><br><span class="line">libobjc.A.dylib <span class="number">0x000000010cf2bf41</span> objc_exception_throw + <span class="number">48</span></span><br><span class="line">CoreFoundation  <span class="number">0x000000010d918024</span> -[<span class="built_in">NSObject</span>(<span class="built_in">NSObject</span>) doesNotRecognizeSelector:] + <span class="number">132</span></span><br><span class="line"><span class="built_in">UIKit</span> <span class="number">0x000000010df48f51</span> -[<span class="built_in">UIResponder</span> doesNotRecognizeSelector:] + <span class="number">295</span></span><br><span class="line">CoreFoundation  <span class="number">0x000000010d819f78</span> ___forwarding___ + <span class="number">1432</span></span><br><span class="line">CoreFoundation  <span class="number">0x000000010d819958</span> _CF_forwarding_prep_0 + <span class="number">120</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这个 crash 很明显, <code>Controller</code> 中调用了一个不存在的函数 <code>play</code>.</p><p>这里可以看到一个被调用的系统函数 <code>doesNotRecognizeSelector</code>, 今天我们剖析一下消息转发的流程.</p><h2 id="实例方法-消息-转发的流程"><a href="#实例方法-消息-转发的流程" class="headerlink" title="实例方法(消息)转发的流程"></a>实例方法(消息)转发的流程</h2><p>在上面已经说过, OC 可以通过运行时来避免因为找不到方法而导致错误.</p><p>其实, 含义就是 OC 给了我们第二次机会来避免类似的错误.</p><p>我们重写 NSObject 中的 5 个方法, 分别是:</p><blockquote><ol><li>+resolveInstanceMethod</li><li>-forwardingTargetForSelector</li><li>-methodSignatureForSelector</li><li>-forwardInvocation</li><li>-doesNotRecognizeSelector:</li></ol></blockquote><p>当无法找到对应的方法时, 调用的方法和顺序大致如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+resolveInstanceMethod</span><br><span class="line">-forwardingTargetForSelector</span><br><span class="line">-methodSignatureForSelector</span><br><span class="line">-doesNotRecognizeSelector:</span><br></pre></td></tr></table></figure><p>当找到对应的方法时, 调用方法和顺序大致如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+resolveInstanceMethod</span><br><span class="line">-forwardingTargetForSelector</span><br><span class="line">-methodSignatureForSelector</span><br><span class="line">-forwardInvocation</span><br></pre></td></tr></table></figure><p>根据实践结果, 画流程图如下:<br><img src="/upload/images/2018/03/31/1.jpg" alt="1"></p><p>下面分别解释一下这几个方法的作用和意义.</p><p><strong>+ (BOOL)resolveInstanceMethod:(SEL)sel</strong></p><p>解析对应的实例方法. 在该方法中允许增加一个方法的实现, 从而实现动态添加方法.</p><p>默认返回 NO.</p><p>在 <code>NSObject.mm</code> 中可以看到方法的实现:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- (id)forwardingTargetForSelector:(SEL)aSelector</strong></p><p>将对应的 selector 转发给指定的对象. 换句话说就是将之前没有实现的 selector 转交给另外一个可能实现了该 selector 的对象去处理.</p><p>默认返回 nil.</p><p>**- (NSMethodSignature <em>)methodSignatureForSelector:(SEL)aSelector</em>*</p><p>该方法返回对 selector 实现的方法签名.</p><p>默认实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel &#123;</span><br><span class="line">    _objc_fatal(<span class="string">&quot;-[NSObject methodSignatureForSelector:] &quot;</span></span><br><span class="line">                <span class="string">&quot;not available without CoreFoundation&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**- (void)forwardInvocation:(NSInvocation <em>)anInvocation</em>*</p><p>该方法是依赖第3个方法的, 如果第三个方法找到了对应的方法签名, 该方法就可以实现转向调用了.</p><p><strong>- (void)doesNotRecognizeSelector:(SEL)sel</strong></p><p>如果前面几个方法都没有处理好, 系统会调用该方法, 直接导致程序 crash, 也称之为终极死亡方法.</p><p>源码实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)doesNotRecognizeSelector:(SEL)sel &#123;</span><br><span class="line">    _objc_fatal(<span class="string">&quot;-[%s %s]: unrecognized selector sent to instance %p&quot;</span>, </span><br><span class="line">                object_getClassName(<span class="keyword">self</span>), sel_getName(sel), <span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结, Objective-C 中给一个对象发送消息会经过如下几个步骤：</p><p><strong>步骤1.</strong> 在类的调度表(dispatch table) 中找要执行的函数(消息), 如果找到了，到相应的函数 IMP 去执行.</p><blockquote><p>每个类的结构体包含着两个必备的元素:<br>[1]. 指向父类的指针<br>[2]. class dispatch table(调度表). 调度表中包含了 method selectors 和特定 class 相应方法实现的地址.</p></blockquote><p><strong>步骤2.</strong> 如果没找到，运行时会调用 +resolveInstanceMethod: 或者 +resolveClassMethod: 尝试解析这个消息. 在该方法中, 允许动态添加一个方法的实现.</p><blockquote><p>关于 <code>resolveClassMethod</code> 这个放在另一篇博客中讲解.</p></blockquote><p><strong>步骤3.</strong> 如果 resolveXX 返回 YES, 直接结束后面的流程, 执行解析得到的方法. 如果 resolveXX 返回 NO，运行时就发送 forwardingTargetForSelector 消息, 允许这个消息转发给另一个可能实现了对应 selector 的对象.</p><p><strong>步骤4.</strong> 如果没有新的目标对象返回, 运行时就会发送methodSignatureForSelector 消息, 找到对应的方法签名.<br>如果找到了, 会接着调用 forwardInvocation, 如果没有找到即返回 nil, 那么直接调用 doesNotRecognizeSelector.</p><p>下一篇结合实际例子分析一下整个实例方法的转发流程.</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1.Apple 开发者文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1">Message Forwarding</a></p><p>2.Apple RunTime 源码 <a href="https://opensource.apple.com/tarballs/objc4/">objc4-723.tar.gz</a></p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/">OC-RunTime: 消息转发之实例方法的转发流程实例讲解</a></p><p><a href="http://www.veryitman.com/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/">OC-RunTime: 消息转发之类方法的转发流程</a></p><p><a href="http://www.veryitman.com/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/">OC-RunTime: 总结消息转发中用到的知识点</a></p><p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward">Demo</a>.</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 文件大小的单位</title>
      <link href="/2018/03/24/MacOS-%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%8D%95%E4%BD%8D/"/>
      <url>/2018/03/24/MacOS-%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>我一直以为文件大小都是按照 <code>1024</code> 为单位来计算的, 但是在 MacOS 上面是按照 <code>1000</code> 为单位计算的, windows 上面是按照 <code>1024</code> 为单位来计算的.</p><h2 id="偶然的发现"><a href="#偶然的发现" class="headerlink" title="偶然的发现"></a>偶然的发现</h2><p>之前写代码, 需要用到获取文件大小的功能, 代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 读取文件大小</span><br><span class="line">long getFileSize(char *filename) &#123;</span><br><span class="line">    </span><br><span class="line">    FILE *fp = fopen(filename, &quot;r&quot;);</span><br><span class="line">    if (!fp) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fseek(fp, 0, SEEK_END);</span><br><span class="line">    </span><br><span class="line">    long size = ftell(fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    </span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名是 <code>mm.aac</code>, 一个音频文件, 获取到的文件大小是 <code>76395</code> 字节.</p><p>我无聊至极, 使用 <code>du</code> 命令来获取该文件的大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh mm.aac </span><br></pre></td></tr></table></figure><p>显示文件大小是 <code>76KB</code>.</p><p>MacOS 上面查看文件属性, 获取到的大小也是 <code>76KB</code></p><p><img src="/upload/images/2018/03/24/1.jpg" alt="1"></p><p>二者获取的文件大小一致, 可以看出文件的大小是正确的.</p><p>于是我查了一下在 windows 上面的该文件的大小, 如下截图:</p><p><img src="/upload/images/2018/03/24/2.png" alt="1"></p><p>可以看出, MacOS 上面文件大小是按照 1000 单位来计算的, 而 windows 上面是按照 1024 单位来计算的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">76395 / 1000 = 76.395</span><br><span class="line">76395 / 1024 = 74.604</span><br></pre></td></tr></table></figure><blockquote><p>按照 GNU 的习惯，单纯的 <code>K</code> <code>M</code> <code>G</code> <code>T</code> 分别指代 <code>KiB</code> <code>MiB</code> <code>GiB</code> <code>TiB</code> 以 1024 进制数据量单位，用 <code>KB</code> <code>MB</code> <code>GB</code> <code>TB</code> 以 1000 进制数据量单位. </p></blockquote><p>所以, 在 windows 上面准确表示 <code>76395bytes</code> 应该是 <code>74.6KiB</code>.</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>在线计算 <a href="http://www.justintools.com/unit-conversion/data-storage.php">单位换算</a>.</p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS C 文件大小单位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO: 写第一个 GOLang 程序</title>
      <link href="/2018/03/11/GO-%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA-GOLang-%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/03/11/GO-%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA-GOLang-%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文分享在 MacOS 上面通过 pkg 的方式安装 GO 编程环境, 以及编译运行第一个使用 GOLang 编写的程序.</p><p>其他关于 GO 的安装方式, 如使用 Homebrew 安装或者使用源码安装的方式, 请自行尝试.</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>在 <a href="https://golang.org/doc/install">这里</a> 下载 GO 的 pkg 安装包.</p><p>但是你需要科(fan)学(qiang)才能下载.</p><p><img src="/upload/images/2018/03/11/1.jpg" alt="1"></p><p>你也可以下载 Stable versions.</p><p>下载完成后, 直接双击安装即可.</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>安装完成后, GO 安装目录在 <code>/usr/local</code> 下面.</p><p>安装目录如下图所示:</p><p><img src="/upload/images/2018/03/11/2.jpg" alt="1"></p><p>需要将其设置到环境变量中, 才能在终端使用其相关的命令.</p><p>编辑 <code>~/.bash_profile</code>, 增加下面几行即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Golang</span><br><span class="line"></span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=~/gowork</span><br><span class="line">export PATH=$GOROOT/bin:$GOPATH:$PATH</span><br></pre></td></tr></table></figure><blockquote><p>记住, GOROOT 和 GOPATH 必须设置.<br><code>gowork</code> 是我自己新建的目录. GOPATH 可以理解为工作目录.</p></blockquote><p>关于 GOPATH 可以参考这个文档 <a href="https://github.com/golang/go/wiki/SettingGOPATH">SettingGOPATH</a>.</p><p>我刚开始没有配置 GOROOT 变量, 执行 go 命令会提示警告, 警告内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: GOPATH set to GOROOT (/usr/local/go) has no effect</span><br></pre></td></tr></table></figure><p>编辑保存, 然后使其立即生效.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>检查环境变量是否生效.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>对应输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version go1.9.4 darwin/amd64</span><br></pre></td></tr></table></figure><p>也可以使用 <code>go env</code> 来查看更加详细的内容.</p><h2 id="编译运行-GOLang-程序"><a href="#编译运行-GOLang-程序" class="headerlink" title="编译运行 GOLang 程序"></a>编译运行 GOLang 程序</h2><p><strong>1.编写代码</strong></p><p>编辑一个 <code>Hello GOLang</code> 的程序.</p><p>在任意一个文件夹位置, 新建一个 <code>go_hello.go</code> 的文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch go_hello.go</span><br></pre></td></tr></table></figure><p>写入如下程序:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">   fmt.Println(&quot;Hello, GOLang!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.编译运行</strong></p><p>使用 <code>go build</code> 命令编译.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build go_hello.go</span><br></pre></td></tr></table></figure><p>编译成功后, 生成可执行文件 <code>go_hello</code>. 执行即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./go_hello</span><br></pre></td></tr></table></figure><p>或者直接运行, 执行下面的命令.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run go_hello.go </span><br></pre></td></tr></table></figure><p>这个不会生成可执行文件.</p><p>至此, GO 的编程环境已经搭建完成, 比较简单.</p><h2 id="卸载-GO"><a href="#卸载-GO" class="headerlink" title="卸载 GO"></a>卸载 GO</h2><p>如果你想卸载 GO 环境, 只需要三个步骤.</p><p><strong>1.删除安装目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /usr/local/go</span><br></pre></td></tr></table></figure><p><strong>2.删除 go 文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -f /etc/paths.d/go</span><br></pre></td></tr></table></figure><p><strong>3.删除环境变量</strong></p><p>编辑 etc, 删除对应添加的 go 环境变量即可.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://golang.org/doc/install">GO: Getting Started</a></p><p><a href="https://golang.org/doc/">GO: DOC</a></p><p><a href="https://github.com/golang/go/wiki/SettingGOPATH">SettingGOPATH</a></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOLanguage Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 指针与 OC 对象之间的转换</title>
      <link href="/2018/03/07/C-%E6%8C%87%E9%92%88%E4%B8%8E-OC-%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/03/07/C-%E6%8C%87%E9%92%88%E4%B8%8E-OC-%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="Core-Foundation-框架"><a href="#Core-Foundation-框架" class="headerlink" title="Core Foundation 框架"></a>Core Foundation 框架</h2><p>Core Foundation 框架 (CoreFoundation.framework) 是一组 C 语言接口， 简称 CF. </p><p>它们为 iOS 应用程序提供基本数据管理和服务功能.</p><p>如 Core Graphics、Core Text，并且我们可能需要将 CF 对象和OC 对象进行相互转化，ARC 下，编译器不会自动管理 CF 对象的内存，我们需要手动管理. </p><p>创建一个 CF 对象使用后, 需要使用 CFRelease 将其手动释放, 换句话说, Core Foundation 对象类型不在 ARC 管理范畴内.</p><p>如何将 CF 和 OC 对象有效的结合起来, 在 ARC 环境下, 提供了 <code>桥接</code> 的技术, 即 ARC 下 OC 对象和 Core Foundation 对象之间的桥梁.</p><h2 id="ARC-桥接"><a href="#ARC-桥接" class="headerlink" title="ARC 桥接"></a>ARC 桥接</h2><p>ARC 下 C 指针与 OC 指针(对象)之间转换, 一般会用到下面的方法.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__bridge_retained &lt;#CF type#&gt;)&lt;<span class="meta">#expression#&gt;</span></span><br><span class="line"></span><br><span class="line">__bridge_transfer &lt;#Objective-C type#&gt;)&lt;<span class="meta">#expression#&gt;</span></span><br><span class="line"></span><br><span class="line">__bridge &lt;<span class="meta">#type#&gt;)<span class="string">&lt;#expression#&gt;</span></span></span><br></pre></td></tr></table></figure><p>也就是所谓的 <code>桥接</code>, 它是 Object-C 在 ARC 环境下开发出来的一种用作转换 C 指针跟 OC (类)指针的一种转换技术, 所以是 ARC 下的称谓, 在 MRC 下没有 <code>桥接</code>.</p><p>针对内存管理问题，ARC 可以管理 Objective-C 对象, 但不支持 Core Foundation 对象的管理，所以转换后要注意一个问题：谁来释放使用后的对象.</p><p>结合 ARC 和 内存管理, 下面分别介绍一下.</p><p>Core Foundation 对象必须使用 CFRetain 和 CFRelease 来进行内存管理.<br>当使用 Objective-C 和 Core Foundation 对象相互转换的时候，必须让编译器知道，到底由谁来负责释放对象，是否交给 ARC 处理, 只有正确的处理，才能避免内存泄漏和 double free 导致程序崩溃.</p><h2 id="bridge-retained-lt-CF-type-gt-lt-expression-gt"><a href="#bridge-retained-lt-CF-type-gt-lt-expression-gt" class="headerlink" title="__bridge_retained &lt;#CF type#&gt;)&lt;#expression#&gt;"></a>__bridge_retained &lt;#CF type#&gt;)&lt;#expression#&gt;</h2><p><code>__bridge_retained</code> 等同于 <code>CFBridgingRetain()</code>.</p><p>将 Objective-C 对象转换为 Core Foundation 对象，把对象所有权桥接给 Core Foundation 对象，同时剥夺 ARC 的管理权，后续需要开发者使用 CFRelease 或者相关方法手动来释放 CF 对象.</p><p>示例:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *cPointer;</span><br><span class="line"><span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 OC 对象转换为 C 指针</span></span><br><span class="line">cPointer = (__bridge_retained <span class="keyword">void</span>*)objc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//use cPointer ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要释放资源</span></span><br><span class="line"><span class="built_in">CFRelease</span>(cPointer);</span><br></pre></td></tr></table></figure><p>在 ARC 下, CFBridgingRetain 实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NS_INLINE</span> <span class="built_in">CF_RETURNS_RETAINED</span> <span class="built_in">CFTypeRef</span> _Nullable <span class="built_in">CFBridgingRetain</span>(<span class="keyword">id</span> _Nullable X) &#123;</span><br><span class="line">    <span class="keyword">return</span> (__bridge_retained <span class="built_in">CFTypeRef</span>)X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 CFTypeRef, 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="built_in">CF_BRIDGED_TYPE</span>(<span class="keyword">id</span>) <span class="keyword">void</span> * <span class="built_in">CFTypeRef</span>;</span><br></pre></td></tr></table></figure><p>所以 CFBridgingRetain 返回值是 <code>const void *</code> 类型的.</p><p>上面的示例可以改写为:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">void</span> *cPointer;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">cPointer = <span class="built_in">CFBridgingRetain</span>(objc);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//use cPointer ...</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">CFRelease</span>(cPointer);</span><br></pre></td></tr></table></figure><h2 id="bridge-transfer-lt-Objective-C-type-gt-lt-expression-gt"><a href="#bridge-transfer-lt-Objective-C-type-gt-lt-expression-gt" class="headerlink" title="__bridge_transfer &lt;#Objective-C type#&gt;)&lt;#expression#&gt;"></a>__bridge_transfer &lt;#Objective-C type#&gt;)&lt;#expression#&gt;</h2><p><code>__bridge_transfer</code> 等同于 <code>CFBridgingRelease()</code>.</p><p>将非 OC 对象转换为 OC 对象，同时将对象的管理权交给 ARC，开发者无需手动管理内存.</p><p>示例:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFUUIDRef</span> uuid = <span class="built_in">CFUUIDCreate</span>(kCFAllocatorDefault);</span><br><span class="line"><span class="built_in">CFStringRef</span> strUUID = <span class="built_in">CFUUIDCreateString</span>(kCFAllocatorDefault, uuid);</span><br><span class="line"><span class="built_in">NSString</span> *str = (__bridge_transfer <span class="built_in">NSString</span> *)strUUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无需释放 strUUID</span></span><br><span class="line"><span class="comment">//CFRelease(strUUID);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CFRelease</span>(uuid);</span><br></pre></td></tr></table></figure><p>CFBridgingRelease 实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NS_INLINE</span> <span class="keyword">id</span> _Nullable <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFTypeRef</span> <span class="built_in">CF_CONSUMED</span> _Nullable X) &#123;</span><br><span class="line">    <span class="keyword">return</span> (__bridge_transfer <span class="keyword">id</span>)X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例可以改写为:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFUUIDRef</span> uuid = <span class="built_in">CFUUIDCreate</span>(kCFAllocatorDefault);</span><br><span class="line"><span class="built_in">CFStringRef</span> strUUID = <span class="built_in">CFUUIDCreateString</span>(kCFAllocatorDefault, uuid);</span><br><span class="line"><span class="built_in">NSString</span> *str = <span class="built_in">CFBridgingRelease</span>(strUUID);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//无需释放 strUUID</span></span><br><span class="line"><span class="comment">//CFRelease(strUUID);</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">CFRelease</span>(uuid);</span><br></pre></td></tr></table></figure><h2 id="bridge"><a href="#bridge" class="headerlink" title="__bridge"></a>__bridge</h2><p><code>__bridge</code> 不改变对象所有权, 需要我们自己来管理内存, 它也是我们经常使用的方法, 从某种程度上来说, 它是上面两个方法的简化版本.</p><p><code>__bridge</code> 可以将 OC 对象 与 C 指针相互转换, 示例:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CFString -&gt; OC 对象</span></span><br><span class="line"><span class="built_in">CFStringRef</span> cfString = <span class="built_in">CFStringCreateWithCString</span>(kCFAllocatorDefault, <span class="string">&quot;very&quot;</span>, kCFStringEncodingUTF8);</span><br><span class="line"><span class="built_in">NSString</span> *nsString = (__bridge <span class="built_in">NSString</span> *)cfString;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;CFString -&gt; NSString: %@&quot;</span>, nsString);</span><br><span class="line"><span class="built_in">CFRelease</span>(cfString);</span><br></pre></td></tr></table></figure><p>如果将 <code>CFRelease(cfString)</code> 注释掉, Xcode 的静态检测器会告诉你有内存泄露的情况, 如图:<br><img src="/upload/images/2018/03/07/2.png" alt="1"></p><p>再来另外一个例子, 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OC 对象 -&gt; CFString</span></span><br><span class="line"><span class="built_in">NSString</span> *nstr = <span class="string">@&quot;itman&quot;</span>;</span><br><span class="line"><span class="built_in">CFStringRef</span> cfStringRef = (__bridge <span class="built_in">CFStringRef</span>)nstr;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;NSString -&gt; CFString: %@&quot;</span>, cfStringRef);</span><br><span class="line"><span class="built_in">CFRelease</span>(cfStringRef);</span><br></pre></td></tr></table></figure><p>无论是使用 <code>CFRelease(cfStringRef)</code>, 还是注释掉 <code>CFRelease(cfStringRef)</code>, 静态检测器都不会报错. 说明这种情况下, 当前的内存管理已经被 OC 对象管理.</p><h2 id="经典例子"><a href="#经典例子" class="headerlink" title="经典例子"></a>经典例子</h2><h3 id="NSString-与-CFString-转换"><a href="#NSString-与-CFString-转换" class="headerlink" title="NSString 与 CFString 转换"></a>NSString 与 CFString 转换</h3><p>1、NSString → CFString</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *string = <span class="string">@&quot;veryitman.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 方法1: 不需要释放</span></span><br><span class="line">    <span class="built_in">CFStringRef</span> cfStr = (__bridge <span class="built_in">CFStringRef</span>)string;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法2: 需要释放, 这里 retain 了</span></span><br><span class="line">    <span class="built_in">CFStringRef</span> cfStr2 = (__bridge_retained <span class="built_in">CFStringRef</span>)string;</span><br><span class="line">    <span class="built_in">CFRelease</span>(cfStr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、CFString → NSString</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFStringRef</span> cfStr = <span class="built_in">CFStringCreateWithCString</span>(kCFAllocatorDefault, <span class="string">&quot;veryitman&quot;</span>, kCFStringEncodingUnicode);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 方法1: 需要释放</span></span><br><span class="line"><span class="built_in">NSString</span> *string = (__bridge <span class="built_in">NSString</span> *)cfStr;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;OC string: %@&quot;</span>, string);</span><br><span class="line"><span class="built_in">CFRelease</span>(cfStr);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 方法2: 不需要释放, __bridge_transfer 自带 release</span></span><br><span class="line">string = (__bridge_transfer <span class="built_in">NSString</span> *)cfStr;</span><br></pre></td></tr></table></figure><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>运行下面的示例:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    p = (__bridge <span class="keyword">void</span>*)objc;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;mark: %@&quot;</span>, (__bridge <span class="built_in">NSObject</span>*)p);</span><br></pre></td></tr></table></figure><p>会直接 crash, 如图:</p><p><img src="/upload/images/2018/03/07/1.jpg" alt="1"></p><p>当 <code>objc</code> 这个对象超出作用域范围，其内存就会被回收，接着在作用域范围外用 <code>void *p</code> 去访问 <code>objc</code> 的内存，就造成了野指针.</p><p>结合上面所说的, 我们可以让指针 p 对 objc 进行引用即 retain 操作, 修改如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="comment">//p = (__bridge void*)objc;</span></span><br><span class="line">    p = (__bridge_retained <span class="keyword">void</span>*)objc;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;mark: %@&quot;</span>, (__bridge <span class="built_in">NSObject</span>*)p);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 一定要释放</span></span><br><span class="line"><span class="built_in">CFRelease</span>(p);</span><br></pre></td></tr></table></figure><p>可以正常的运行. 还可以修改为另一种方式:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="comment">//p = (__bridge void*)objc;</span></span><br><span class="line">    <span class="comment">//p = (__bridge_retained void*)objc;</span></span><br><span class="line">    p = (<span class="keyword">void</span> *)<span class="built_in">CFBridgingRetain</span>(objc);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;mark: %@&quot;</span>, (__bridge <span class="built_in">NSObject</span>*)p);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 一定要释放</span></span><br><span class="line"><span class="built_in">CFRelease</span>(p);</span><br></pre></td></tr></table></figure><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Objective-C ARC Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频编程: iOS 推流</title>
      <link href="/2018/02/26/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E6%8E%A8%E6%B5%81/"/>
      <url>/2018/02/26/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E6%8E%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>本篇分享是基于 <a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/">音视频编程: 构建 nginx 推流服务器</a> 这篇文章的, 之前是使用 ffmpeg 命令进行推流并且都是在 macos 上面进行的操作.</p><p>现在在 iOS 平台上使用 <a href="https://github.com/LaiFengiOS/LFLiveKit">LFLiveKit</a> 进行推流, 然后使用 VLC 播放器播放流视频.</p><p><strong>该系列博文:</strong></p><ul><li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/">音视频编程: 编译 faac&#x2F;faad2</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/">音视频编程: iOS 使用 faac 编码</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/">音视频编程: iOS 使用 faad2</a> </p></li><li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/">音视频编程: 构建 nginx 推流服务器</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/26/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E6%8E%A8%E6%B5%81/">音视频编程: iOS 推流</a> (本篇)</p></li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一般直播过程包括对音视频的采集、处理、编码、封包、推流、传输、转码、分发、解码、播放等. </p><p><strong>推流</strong>, 指使用推流工具把直播内容传输到服务器的过程. 本篇分享使用 LFLiveKit 工具将 iPhone 摄像头和麦克风采集的数据推流到本地流服务器.</p><p><strong>拉流</strong>, 指对服务器直播的内容，用指定地址进行拉取(播放)的过程, 本篇分享使用 VLC 充当拉流的角色.</p><h2 id="集成-LFLiveKit"><a href="#集成-LFLiveKit" class="headerlink" title="集成 LFLiveKit"></a>集成 LFLiveKit</h2><p>LFLiveKit 是一个开源的推流 SDK, 支持 H264 and AAC 的硬编码, 支持美颜(集成了 GPUImage).</p><p>使用 LFLiveKit 比较简单, 按照其 demo 集成即可.</p><p><strong>1.工程配置info.plist</strong></p><p>需要访问相机和麦克风权限.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Privacy - Camera Usage Description</span><br><span class="line"></span><br><span class="line">Privacy - Microphone Usage Description</span><br></pre></td></tr></table></figure><p><strong>2.请求相机和麦克风权限.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">- (void)requestAccessForVideo &#123;</span><br><span class="line">    </span><br><span class="line">    __weak typeof(self) _self = self;</span><br><span class="line">    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];</span><br><span class="line">    </span><br><span class="line">    switch (status) &#123;</span><br><span class="line">            </span><br><span class="line">        case AVAuthorizationStatusNotDetermined: &#123;</span><br><span class="line">            </span><br><span class="line">            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) &#123;</span><br><span class="line">                </span><br><span class="line">                if (granted) &#123;</span><br><span class="line">                    </span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [_self.session setRunning:YES];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">            </span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        case AVAuthorizationStatusAuthorized: &#123;</span><br><span class="line">            </span><br><span class="line">            dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                [_self.session setRunning:YES];</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        case AVAuthorizationStatusDenied:</span><br><span class="line">        case AVAuthorizationStatusRestricted:</span><br><span class="line">            // 用户明确地拒绝授权，或者相机设备无法访问</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)requestAccessForAudio &#123;</span><br><span class="line">    </span><br><span class="line">    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeAudio];</span><br><span class="line">    </span><br><span class="line">    switch (status) &#123;</span><br><span class="line">            </span><br><span class="line">        case AVAuthorizationStatusNotDetermined: &#123;</span><br><span class="line">            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeAudio completionHandler:^(BOOL granted) &#123;</span><br><span class="line">            &#125;];</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        case AVAuthorizationStatusAuthorized: &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        case AVAuthorizationStatusDenied:</span><br><span class="line">        case AVAuthorizationStatusRestricted:</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>务必要调用 LFLiveSession 的 <code>setRunning</code> 方法.</p><p>完整的工程代码, 后续我会放到 Github 上面. 方便有需要的下载.</p><h2 id="推流播放"><a href="#推流播放" class="headerlink" title="推流播放"></a>推流播放</h2><p>上面的基本配置完成后, 可以开始推流了.</p><p><strong>1.启动 nginx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p><strong>2.启动推流</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)startLive &#123;</span><br><span class="line">    </span><br><span class="line">    LFLiveStreamInfo *streamInfo = [LFLiveStreamInfo new];</span><br><span class="line">    streamInfo.url = sRTMPUrl;</span><br><span class="line">    [self.session startLive:streamInfo];</span><br><span class="line">    self.session.beautyFace = YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>sRTMPUrl</code> 是一个常量定义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static NSString * const sRTMPUrl = @&quot;rtmp://192.168.1.102:1935/rtmplive/channel&quot;;</span><br></pre></td></tr></table></figure><p><code>192.168.1.102</code> 是我的本机(mac) ip 地址.</p><p>如果一切正常的话, 你在手机上面可以看到自己的预览画面.</p><p><strong>3.VLC 播放</strong></p><p>使用 VLC 播放 rtmp 的流, 打开 VLC 播放器, 选择 File&#x2F;Open Network, 输入 <code>rtmp://192.168.1.102:1935/rtmplive/channel</code> 这个地址即可实时播放了.</p><p>这里注意一定要使用本机的 ip 地址, 不要使用 <code>localhost:1935</code> 类似的地址, 否则无法播放和推流.</p><p>后续分享如何在 iOS 上面使用播放器来播放直播流.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 rtmp nginx 推流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频编程: 构建 nginx 推流服务器</title>
      <link href="/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇分享的主要内容</p></blockquote><p>如何在 macos 中构建本地的推流服务器(nginx + rtmp-nginx-module), 并使用 ffmpeg 命令进行视频推流, 然后使用 VLC 播放器播放视频.</p><p><strong>该系列博文:</strong></p><ul><li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/">音视频编程: 编译 faac&#x2F;faad2</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/">音视频编程: iOS 使用 faac 编码</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/">音视频编程: iOS 使用 faad2</a> </p></li><li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/">音视频编程: 构建 nginx 推流服务器</a> (本篇)</p></li></ul><h2 id="安装-rtmp-nginx-module"><a href="#安装-rtmp-nginx-module" class="headerlink" title="安装 rtmp-nginx-module"></a>安装 rtmp-nginx-module</h2><p>之前在测试 php 程序的时候, 我已经安装过 nginx, 但是发现这样在配置 rtmp-nginx-module 的时候, 无法成功.</p><p>配置文件修改完成之后, nginx 总是无法识别 <code>rtmp</code>, 报错如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[emerg] 30766#0: unknown directive &quot;rtmp&quot; in /usr/local/etc/nginx/nginx.conf:40</span><br></pre></td></tr></table></figure><p>现在需要卸载原来已经安装的 nginx, 命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall nginx</span><br></pre></td></tr></table></figure><p>再次安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx-full --with-rtmp-module </span><br></pre></td></tr></table></figure><p>耐心等待一会 ~~</p><p>nginx 的版本(nginx -v):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx/1.12.2</span><br></pre></td></tr></table></figure><p>rtmp-nginx-module 版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.1.7.11-dev_2</span><br></pre></td></tr></table></figure><h2 id="配置-rtmp"><a href="#配置-rtmp" class="headerlink" title="配置 rtmp"></a>配置 rtmp</h2><p>编辑 nginx 的配置文件, 文件位置位于:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在 <code>http &#123;&#125;</code> 后面写入如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">   server &#123;</span><br><span class="line">        #rtmp协议的默认端口号是 1935</span><br><span class="line">        listen 1935;</span><br><span class="line">        #直播流配置, 访问 path 是 rtmplive</span><br><span class="line">        application rtmplive &#123;</span><br><span class="line">              #开启实时</span><br><span class="line">              live on;</span><br><span class="line">              #设置 rtmp 引擎的最大连接数. 默认为off</span><br><span class="line">              max_connections 1024;</span><br><span class="line">              #不记录数据</span><br><span class="line">             record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: <code>rtmplive</code> 是固定的.</p><p>具体的 nginx 配置详见后面的附录内容.</p><h2 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h2><p>**1.安装 ffmpeg 即可. **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><p>这个过程有点久, 如果你没有梯子基本安装不了 [大哭]~</p><p><strong>2.安装 VLC</strong></p><p>直接去官网下载 dmg 包, 安装即可.</p><p>打开 VLC 然后选择从 File&#x2F;Open Network 打开文件, 如下图所示:</p><p><img src="/upload/images/2018/02/25/1.jpg" alt="1"></p><p>在弹出的框中, 写入推流地址 <code>rtmp://localhost:1935/rtmplive/channel</code>, 如图所示:</p><p><img src="/upload/images/2018/02/25/2.jpg" alt="1"></p><p>直接点击 Open.</p><blockquote><p>注意: 如果 localhost 无法播放, 请更换为你的本机 ip, 如我的本机 ip 是 <code>192.168.1.122</code>, 对应的播放地址为 <code>rtmp://192.168.1.122:1935/rtmplive/channel</code>.<br>如果还是无法成功, 请关闭 macos 的防火墙.</p></blockquote><p><strong>3.启动 nginx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>可以在浏览器访问如下地址, 看看 nginx 是否启动成功.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/index.html</span><br></pre></td></tr></table></figure><p><strong>4.ffmpeg 推流</strong></p><p>推流的命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i ~/Desktop/launcher.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://localhost:1935/rtmplive/channel</span><br></pre></td></tr></table></figure><p>其中 <code>launcher.mp4</code> 是我自己从网络上面下载的一个视频文件, 时长大约是 5 分钟.</p><p>在 VLC 中, 就可以看到推流播放的视频了. [开心]~~</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">error_log  /usr/local/etc/nginx/logs/error.log debug;</span><br><span class="line"></span><br><span class="line">pid        /usr/local/var/run/nginx.pid;</span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  256;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include             mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"> </span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">    access_log  /usr/local/etc/nginx/logs/access.log  main;</span><br><span class="line"> </span><br><span class="line">    sendfile            on;</span><br><span class="line"> </span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line"> </span><br><span class="line">    index index.html index.php;</span><br><span class="line"> </span><br><span class="line">    include /usr/local/etc/nginx/sites-enabled/*; </span><br><span class="line">    include /usr/local/etc/nginx/conf.d/*;</span><br><span class="line"></span><br><span class="line">     server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /Users/me/workspace/projs/phpwork/; #web的根目录</span><br><span class="line">            index  index.php index.html index.htm; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rtmp &#123;</span><br><span class="line">   server &#123;</span><br><span class="line">        #rtmp协议的默认端口号是1935</span><br><span class="line">        listen 1935;</span><br><span class="line">        #直播流配置,访问路径是rtmplive</span><br><span class="line">        application rtmplive &#123;</span><br><span class="line">              #开启实时</span><br><span class="line">              live on;</span><br><span class="line">              #为rtmp引擎设置最大连接数.默认为off</span><br><span class="line">              max_connections 1024;</span><br><span class="line">              #不记录数据</span><br><span class="line">             record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="视频文件"><a href="#视频文件" class="headerlink" title="视频文件"></a>视频文件</h2><p>使用下载的 mp4 文件, 有些无法播放, 暂时估计应该是码率的问题, 大家在测试过程中, 发现视频无法播放, 最后试试其他视频文件.</p><p>另外, 视频文件不要太小, 尽量能让其播放时长在 3-5 分钟.</p><h2 id="brew-install-x2F-uninstall-报错"><a href="#brew-install-x2F-uninstall-报错" class="headerlink" title="brew install&#x2F;uninstall 报错"></a>brew install&#x2F;uninstall 报错</h2><p>报错信息如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Error: undefined method `patch&#x27; for #&lt;Resource:0x000001040877a8&gt;</span><br><span class="line">/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/gcc@4.9.rb:55:in `block in &lt;class:GccAT49&gt;&#x27;</span><br><span class="line">/usr/local/Homebrew/Library/Homebrew/resource.rb:49:in `instance_eval&#x27;</span><br><span class="line">/usr/local/Homebrew/Library/Homebrew/resource.rb:49:in `initialize&#x27;</span><br><span class="line">/usr/local/Homebrew/Library/Homebrew/software_spec.rb:111:in `new&#x27;</span><br><span class="line">/usr/local/Homebrew/Library/Homebrew/software_spec.rb:111:in `resource&#x27;</span><br></pre></td></tr></table></figure><p>最终的解决方案是重新安装 Homebrew, 命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h2 id="检查本机的-ip"><a href="#检查本机的-ip" class="headerlink" title="检查本机的 ip"></a>检查本机的 ip</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 rtmp nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSLog 格式化输出 NSInteger/NSUInteger</title>
      <link href="/2018/02/22/NSLog-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA-NSInteger-NSUInteger/"/>
      <url>/2018/02/22/NSLog-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA-NSInteger-NSUInteger/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Xcode 中 使用 NSLog 打印 NSInteger&#x2F;NSUInteger 数据, 经常会遇到类似的警告. </p><p>如下图所示:<br><img src="/upload/images/2018/02/22/1.jpg" alt="1"></p><p>但是在 iphone 4s(32位)机器上就没有任何警告, 只是在64位的机型上面有这样的警告.</p><p>在 <code>NSObjCRuntime.h</code> 里面定义 <code>NSInteger</code> 和 <code>NSUInteger</code> 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> __LP64__ || (TARGET_OS_EMBEDDED &amp;&amp; !TARGET_OS_IPHONE) || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="built_in">NSInteger</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">NSUInteger</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="built_in">NSInteger</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">NSUInteger</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>也就是说 64 位下是 long 类型，32 位下是 int 类型.</p><p>所以, 上面的代码在 32 位机型上面不会有警告.</p><p>按照 Xcode 的提示, Fix it: </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;iun: %lu&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)iun);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSInteger</span> nsi = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;nsi: %ld&quot;</span>, (<span class="keyword">long</span>)nsi);</span><br></pre></td></tr></table></figure><p>这样无论在 32 位还是在 64 位机型上面, 都没有警告了.</p><h2 id="Twitter-帖子"><a href="#Twitter-帖子" class="headerlink" title="Twitter 帖子"></a>Twitter 帖子</h2><p>在 <a href="https://twitter.com/gparker/status/377910611453046784">twitter 有个帖子</a> 说了另一种解决办法, 原文如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%zd, %tu, %tx (<span class="keyword">signed</span>, <span class="keyword">unsigned</span>, hex) currently format <span class="built_in">NSInteger</span> and <span class="built_in">NSUInteger</span> with no warnings.</span><br></pre></td></tr></table></figure><blockquote><p>意思是使用 zd 可以格式化有符号的如 NSInteger, 使用 tu 格式化无符号的如 NSUInteger. 而 tx 可以用来格式化输出 16 进制数据.</p></blockquote><p>按照这个说法, 修改如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;iun: %zd&quot;</span>, iun);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSInteger</span> nsi = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;nsi: %td&quot;</span>, nsi);</span><br></pre></td></tr></table></figure><p>或者这样修改:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSUInteger iun = 3;</span><br><span class="line">NSLog(@&quot;iun: %tu&quot;, iun);</span><br><span class="line">    </span><br><span class="line">NSInteger nsi = 6;</span><br><span class="line">NSLog(@&quot;nsi: %td&quot;, nsi);</span><br></pre></td></tr></table></figure><p>确实没有了警告的问题.</p><p>我在实践过程中发现一个问题: 使用 <code>zu</code> 来格式化输出 NSUInteger, 在 32 位机器上面, 仍旧会报警告.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;iun: %zu&quot;</span>, iun);</span><br></pre></td></tr></table></figure><p>这就让我开始怀疑 z 和 t 的可靠性了.</p><p>下面接着了解一下它们.</p><h2 id="关于-z-t"><a href="#关于-z-t" class="headerlink" title="关于 z t"></a>关于 z t</h2><p>关于 <code>z</code> <code>t</code> 的说明可以参考 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html">String Format Specifiers</a></p><p><img src="/upload/images/2018/02/22/2.jpg" alt="1"></p><p>可以说明:</p><blockquote><p>格式化 z 可以用来代表 size_t.<br>格式化 t 可以用来代表 ptrdiff_t.</p></blockquote><p>ptrdiff_t 是C&#x2F;C++标准库中定义的一个与机器相关的数据类型.<br>ptrdiff_t 类型变量通常用来保存两个指针减法操作的结果, 其定义在 C99 标准中.</p><p><strong>size_t 类型用于指明数组长度, 它必须是一个正数, 而 ptrdiff_t 类型则应保证足以存放同一数组中两个指针之间的差距, 它有可能是负数.</strong></p><p>即: size_t 是 unsigned 类型, 而 ptrdiff_t 则是 signed 整型.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">&quot;size_t bytes = %d\n&quot;</span> ,<span class="keyword">sizeof</span>(size_t));</span><br><span class="line">printf(<span class="string">&quot;ptrdiff_t bytes = %d\n&quot;</span> ,<span class="keyword">sizeof</span>(ptrdiff_t));</span><br></pre></td></tr></table></figure><p>在 32 位机型中输出结果:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size_t bytes = <span class="number">4</span></span><br><span class="line">ptrdiff_t bytes = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>在 64 位机型中输出结果:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size_t bytes = <span class="number">8</span></span><br><span class="line">ptrdiff_t bytes = <span class="number">8</span></span><br></pre></td></tr></table></figure><p>这说明, sizet_t 和 ptrdiff_t 是和机器类型相关的跨平台的.</p><p>系统定义:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __SIZE_TYPE__ size_t;</span><br><span class="line"><span class="keyword">typedef</span> __PTRDIFF_TYPE__ ptrdiff_t;</span><br></pre></td></tr></table></figure><p>32 位机型定义:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __SIZE_TYPE__ long unsigned int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PTRDIFF_TYPE__ int</span></span><br></pre></td></tr></table></figure><p>64 位机型定义:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __SIZE_TYPE__ long unsigned int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PTRDIFF_TYPE__ long int</span></span><br></pre></td></tr></table></figure><h2 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h2><p>既然在 Xcode 里面提示 Fix it 可以使用, 那么为了提高代码的健壮性和可维护性, 可以定义宏定义来解决.</p><p>宏定义如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> __LP64__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MZNSI @<span class="string">&quot;ld&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MZNSU @<span class="string">&quot;lu&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MZNSI @<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MZNSU @<span class="string">&quot;u&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__LP64__</span></span></span><br></pre></td></tr></table></figure><p>使用方法, 如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> nsi = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;NSInteger nsi = %&quot;</span>MZNSI, nsi);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;NSUInteger iun = %&quot;</span>MZNSU, iun);</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>给出常用的格式化打印输出字符串中的格式符, 如下所示:</p><p>1）%c：对应参数是一个 <code>int</code> 类型，但实际运行时会将该 <code>int </code>类型对象转换为 <code>unsigned char</code> 类型.</p><p>2）%d 或者 %i：对应参数是一个 <code>int</code> 类型. 只不过, %d 一般用于十进制, %i 可以对应各种进制的数据.</p><blockquote><p>二者在打印输出上面没有什么太大的差别. 但是在接收输入(scanf)上, %d 用于十进制, %i 对应各种进制的数据. 可以参考 <a href="https://www.geeksforgeeks.org/difference-d-format-specifier-c-language/">Difference between %d and %i format specifier in C language</a> 这篇文章.</p></blockquote><p>3）%f：对应参数是一个 <code>double</code> 类型.</p><p>4）%ld：对应参数是一个 <code>long int</code> 类型.</p><p>5）%s：对应参数是一个 <code>const char*</code> 类型，表示输出一个字符串.</p><p>6）%u：对应参数是一个 <code>unsigned int</code> 类型.</p><p>7）%zu：对应参数是一个 <code>size_t</code> 类型.</p><p>8）%td：对应参数是一个 <code>ptrdiff_t</code> 类型.</p><p>9）%x（或 %X）：对应参数是一个 <code>int</code> 类型，不过会以十六进制形式输出，其中大于 9 的数字根据字母 <code>x</code> 大小写进行转换，如果是 <code>%x</code>，则大于 9 的数用 <code>a～f</code> 表示；如果是 <code>%X</code>，则用 <code>A～F</code> 表示.</p><p>10）%%：输出一个 % 符号.</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html">Apple：String Format Specifiers</a></p><hr><p><strong>扫码关注，期待与你的交流~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSLog printf scanf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频编程: iOS 使用 faad2</title>
      <link href="/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/"/>
      <url>/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本次分享使用 faad2 解码 AAC 音频文件, 将 AAC 文件转换为 WAV 文件并使用 AVAudioPlayer 进行播放。</p><p>在博文 <a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a> 给大家简单的分析了一下 WAV 的数据头协议, 其实也是为了这篇博文来服务的, 所以阅读本文之前, 建议先看上文。</p><p><strong>该系列博文:</strong></p><ul><li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/">音视频编程: 编译 faac&#x2F;faad2</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/">音视频编程: iOS 使用 faac 编码</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/">音视频编程: iOS 使用 faad2</a> (本篇)</p></li><li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/">音视频编程: 构建 nginx 推流服务器</a></p></li></ul><h2 id="例子介绍"><a href="#例子介绍" class="headerlink" title="例子介绍"></a>例子介绍</h2><p>本文以一个实际的例子, 使用 faad2的各个函数来解码 AAC 数据.</p><p>主要有以下几个步骤:</p><ul><li>获取输入文件</li><li>获取 faad 解码器句柄</li><li>初始化 faad 解码器</li><li>根据文件解析文件帧, 并写入输出文件中</li><li>写入文件头将其封装为 WAV 格式的音频文件</li><li>关闭 faad 解码器句柄</li></ul><h2 id="工程实战"><a href="#工程实战" class="headerlink" title="工程实战"></a>工程实战</h2><h3 id="引入-faad2"><a href="#引入-faad2" class="headerlink" title="引入 faad2"></a>引入 faad2</h3><p>将编译好的 faad2 导入工程即可.</p><p><img src="/upload/images/2018/02/20/11.jpg" alt="1"><br>其中关键的 API 在 neaacdec.h 中有描述.</p><p>工程效果图:<br><img src="/upload/images/2018/02/20/22.jpg" alt="1"></p><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>在 <a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a> 中已经定义了 WAV 的数据头.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MZWavAudioFileHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span>       riff[<span class="number">4</span>];       <span class="comment">// 字符串 &quot;RIFF&quot;</span></span><br><span class="line">    <span class="type">uint32_t</span>   totalLength; <span class="comment">// 文件总大小, 包括PCM 数据大小和该文件头大小</span></span><br><span class="line">    <span class="type">char</span>       wave[<span class="number">4</span>];     <span class="comment">// 字符串 &quot;WAVE&quot;</span></span><br><span class="line">    <span class="type">char</span>       fmt[<span class="number">4</span>];      <span class="comment">// 字符串 &quot;fmt &quot;</span></span><br><span class="line">    <span class="type">uint32_t</span>   format;      <span class="comment">// WAV 头大小, 固定为值 16</span></span><br><span class="line">    <span class="type">uint16_t</span>   pcm;         <span class="comment">// PCM 编码方式, 固定值为 1</span></span><br><span class="line">    <span class="type">uint16_t</span>   channels;    <span class="comment">// 声道数量, 为 2</span></span><br><span class="line">    <span class="type">uint32_t</span>   frequency;   <span class="comment">// 采样频率</span></span><br><span class="line">    <span class="type">uint32_t</span>   bytes_per_second; <span class="comment">// 每秒字节数(码率), 其值=采样率x通道数x位深度/8</span></span><br><span class="line">    <span class="type">uint16_t</span>   bytes_by_capture; <span class="comment">// 采样块大小</span></span><br><span class="line">    <span class="type">uint16_t</span>   bits_per_sample; <span class="comment">// 采样点大小, 这里是 16 位</span></span><br><span class="line">    <span class="type">char</span>       data[<span class="number">4</span>];         <span class="comment">// 字符串 &quot;data&quot;</span></span><br><span class="line">    <span class="type">uint32_t</span>   bytes_in_pcmdata;  <span class="comment">// pcm 数据长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在实现写入数据头的方法 <code>mz_write_wav_header</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入 wav 头数据.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param file  wav 文件指针.</span></span><br><span class="line"><span class="comment"> *  @param total_samples_per_channel 每个声道的采样数.</span></span><br><span class="line"><span class="comment"> *  @param samplerate 采样率.</span></span><br><span class="line"><span class="comment"> *  @param channels 声道数.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mz_write_wav_header</span><span class="params">(FILE *file, <span class="type">int</span> total_samples_per_channel, <span class="type">int</span> samplerate, <span class="type">int</span> channels)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == file) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (total_samples_per_channel &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FAAD. total_samples_per_channel: %i, samplerate: %i, channels: %i\n&quot;</span>,</span><br><span class="line">           total_samples_per_channel, samplerate, channels);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MZWavAudioFileHeader</span> <span class="title">wavHeader</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入 RIFF</span></span><br><span class="line">    <span class="built_in">strcpy</span>(wavHeader.riff, <span class="string">&quot;RIFF&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    wavHeader.bits_per_sample = <span class="number">16</span>;</span><br><span class="line">    </span><br><span class="line">    wavHeader.totalLength = (total_samples_per_channel * channels * wavHeader.bits_per_sample/<span class="number">8</span>) + <span class="keyword">sizeof</span>(wavHeader) - <span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入 WAVE 和 fmt</span></span><br><span class="line">    <span class="built_in">strcpy</span>(wavHeader.wave, <span class="string">&quot;WAVE&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(wavHeader.fmt, <span class="string">&quot;fmt &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    wavHeader.format = <span class="number">16</span>;</span><br><span class="line">    wavHeader.pcm = <span class="number">1</span>;</span><br><span class="line">    wavHeader.channels = channels;</span><br><span class="line">    wavHeader.frequency = samplerate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每秒的字节数(码率)=采样率x通道数x位深度/8</span></span><br><span class="line">    wavHeader.bytes_per_second = wavHeader.channels * wavHeader.frequency * wavHeader.bits_per_sample/<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    wavHeader.bytes_by_capture = wavHeader.channels*wavHeader.bits_per_sample/<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    wavHeader.bytes_in_pcmdata = total_samples_per_channel * wavHeader.channels * wavHeader.bits_per_sample/<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入 data</span></span><br><span class="line">    <span class="built_in">strcpy</span>(wavHeader.data, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    fwrite(&amp;wavHeader, <span class="number">1</span>, <span class="keyword">sizeof</span>(wavHeader), file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解码主要用到了 FAAD2 中的 <code>NeAACDecDecode</code> 函数. 函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* NEAACDECAPI <span class="title function_">NeAACDecDecode</span><span class="params">(NeAACDecHandle hDecoder,</span></span><br><span class="line"><span class="params">                                 NeAACDecFrameInfo *hInfo,</span></span><br><span class="line"><span class="params">                                 <span class="type">unsigned</span> <span class="type">char</span> *buffer,</span></span><br><span class="line"><span class="params">                                 <span class="type">unsigned</span> <span class="type">long</span> buffer_size)</span>;</span><br></pre></td></tr></table></figure><p>对应帧定义的结构体: <code>NeAACDecFrameInfo</code>, 定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NeAACDecFrameInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bytesconsumed;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> samples;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> channels;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> error;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> samplerate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SBR: 0: off, 1: on; upsample, 2: on; downsampled, 3: off; upsampled */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> sbr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* MPEG-4 ObjectType */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> object_type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* AAC header type; MP4 will be signalled as RAW also */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> header_type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* multichannel configuration */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num_front_channels;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num_side_channels;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num_back_channels;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num_lfe_channels;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> channel_position[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* PS: 0: off, 1: on */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ps;</span><br><span class="line">&#125; NeAACDecFrameInfo;</span><br></pre></td></tr></table></figure><p>具体的解码实现, 我放到了 Github 上面了, 大家可以去 <a href="https://github.com/veryitman/faacfaad2">这里</a> 查看.</p><h2 id="麻烦"><a href="#麻烦" class="headerlink" title="麻烦"></a>麻烦</h2><blockquote><p>解码 aac, 解决采样频率和通道数不对的问题</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止采样频率加倍</span></span><br><span class="line">NeAACDecConfigurationPtr conf = NeAACDecGetCurrentConfiguration(decoder);</span><br><span class="line">conf-&gt;dontUpSampleImplicitSBR = <span class="number">1</span>;</span><br><span class="line">NeAACDecSetConfiguration(decoder, conf);</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从双声道的数据中提取单通道  </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>; i&lt;<span class="number">4096</span> &amp;&amp; j&lt;<span class="number">2048</span>; i+=<span class="number">4</span>, j+=<span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">frame_mono[j]=pcm_data[i];</span><br><span class="line">frame_mono[j+<span class="number">1</span>]=pcm_data[i+<span class="number">1</span>];</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>具体可以查阅 FAAD2 的源码. 感谢 <a href="http://blog.csdn.net/machh/article/details/47153111">使用FAAD库解码AAC实例及 及 faad解码后的通道数不正确的问题</a> 提供.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 wav pcm faad2 aac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频编程: 简单分析 WAV 文件</title>
      <link href="/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/"/>
      <url>/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><p>这篇分享是下篇 <a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/">音视频编程: iOS 使用 faad2</a> 的预备知识, 如果要解码 WAV 文件, 首先需要了解一下 WAV 音频文件的格式。</p><p>今天说的是 <code>线性 PCM</code> 对应的 WAV 格式的数据。</p><blockquote><p>PCM 的种类</p></blockquote><ul><li>线性化 PCM</li><li>A律量化的 PCM</li><li>U律量化的 PCM</li><li>AD PCM</li><li>GSM</li></ul><p><strong>该系列博文:</strong></p><ul><li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/">音视频编程: 编译 faac&#x2F;faad2</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/">音视频编程: iOS 使用 faac 编码</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a>(本篇)</p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/">音视频编程: iOS 使用 faad2</a> </p></li><li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/">音视频编程: 构建 nginx 推流服务器</a></p></li></ul><h2 id="WAV-简介"><a href="#WAV-简介" class="headerlink" title="WAV 简介"></a>WAV 简介</h2><p>WAV 只是该音频文件的后缀名, 其完整名称缩写是 WAVE，WAVE(Waveform Audio File Format), 采用RIFF（Resource Interchange File Format）文件格式结构。</p><p>WAV 格式的音频文件通常用来保存 PCM 格式的原始音频数据，通常被称之为无损音频。</p><p>WAV 音频文件, 粗略来说是 WAV 数据头 + PCM 数据组成的. 裸数据 PCM 外面包了一层文件头，WAV 实质为一个 <a href="http://www.cnblogs.com/wangguchangqing/p/5957531.html">RIFF 文件</a>.</p><h2 id="WAV-数据头"><a href="#WAV-数据头" class="headerlink" title="WAV 数据头"></a>WAV 数据头</h2><p>关于 WAV 音频文件的数据头定义如下图所示:</p><p><img src="/upload/images/2018/02/20/1.jpg" alt="1"></p><p>最前面的4个字节用来标示是 RIFF 字符串。</p><p>可以看出, 一般的 WAV 文件的数据头为 44 个字节, 其后面跟的是 PCM 数据。</p><h2 id="分析-WAV-数据头"><a href="#分析-WAV-数据头" class="headerlink" title="分析 WAV 数据头"></a>分析 WAV 数据头</h2><p>使用 <code>hexdump</code> 来看一下 WAV 文件的数据头。</p><p>在当前路径下, 有个 wav 格式的音频文件 <code>m.wav</code>, 使用 <code>hexdump</code> 分析一下.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -n 44 m.wav</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/02/20/2.jpg" alt="2"></p><p>其中, <code>-n 44</code> 表示查看前 44 个字节.</p><p>按字节分组的图, 如下所示:<br><img src="/upload/images/2018/02/20/3.png" alt="2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">52 49 46 46</span><br></pre></td></tr></table></figure><p>分别是 RIFF 的 ASCII 码.</p><p>跟在 RIFF 后面的四个字节是文件的大小信息, 我们先使用 <code>ls</code> 命令看一下该文件的大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>输出文件大小为(字节数): 1080808</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff  1080808 Jan 25 15:44 m.wav</span><br></pre></td></tr></table></figure><p>RIFF 后面的四个字节分别是: e0 7d 10 00, 由于该存储使用了小端序(Little-Endian 存储，也就是说对其中的数据，低位字节在前，高位字节在后), 所以16进制表示为: 0x00107de0, 对应的字节大小是 <code>1080808</code>.</p><p>上面说到, 线性 PCM, 其实在该文件头中, 第17到第第22个字节(上图红色的5和6组合)标示了 PCM 的类型, 即:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 00 00 00 01 00 </span><br></pre></td></tr></table></figure><p>其他类型的 PCM 类型定义为:</p><blockquote><p>A律量化的PCM: 12 00 00 0006 00<br>U律量化的PCM: 12 00 00 00 07 00<br>AD PCM: 32 00 00 00 02 00<br>GSM: 14 00 00 00 31 00</p></blockquote><p>最后4个字节表示真正 PCM 数据的文件大小, 即: 0x00107dbc, 其10进制大小为: 1080764, 用总文件大小减去 1080764, 就是文件头的大小, 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1080808 - 1080764 = 44</span><br></pre></td></tr></table></figure><p>其他对应的数据, 大家可以对照表自行分析。</p><h2 id="定义数据头"><a href="#定义数据头" class="headerlink" title="定义数据头"></a>定义数据头</h2><blockquote><p>数据类型</p></blockquote><ul><li>char 占用 1 个字节</li><li>uint32_t 占用 4 个字节</li><li>uint16_t 占用 2 个字节</li></ul><p>这里使用结构体定义 WAV 文件头, 其定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MZWavAudioFileHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span>       riff[<span class="number">4</span>];       <span class="comment">// 字符串 &quot;RIFF&quot;</span></span><br><span class="line">    <span class="type">uint32_t</span>   totalLength; <span class="comment">// 文件总大小, 包括PCM 数据大小和该文件头大小</span></span><br><span class="line">    <span class="type">char</span>       wave[<span class="number">4</span>];     <span class="comment">// 字符串 &quot;WAVE&quot;</span></span><br><span class="line">    <span class="type">char</span>       fmt[<span class="number">4</span>];      <span class="comment">// 字符串 &quot;fmt &quot;</span></span><br><span class="line">    <span class="type">uint32_t</span>   format;      <span class="comment">// WAV 头大小, 固定为值 16</span></span><br><span class="line">    <span class="type">uint16_t</span>   pcm;         <span class="comment">// PCM 编码方式, 固定值为 1</span></span><br><span class="line">    <span class="type">uint16_t</span>   channels;    <span class="comment">// 声道数量, 为 2</span></span><br><span class="line">    <span class="type">uint32_t</span>   frequency;   <span class="comment">// 采样频率</span></span><br><span class="line">    <span class="type">uint32_t</span>   bytes_per_second; <span class="comment">// 每秒字节数(码率), 其值=采样率x通道数x位深度/8</span></span><br><span class="line">    <span class="type">uint16_t</span>   bytes_by_capture; <span class="comment">// 采样块大小</span></span><br><span class="line">    <span class="type">uint16_t</span>   bits_per_sample; <span class="comment">// 采样点大小, 这里是 16 位</span></span><br><span class="line">    <span class="type">char</span>       data[<span class="number">4</span>];         <span class="comment">// 字符串 &quot;data&quot;</span></span><br><span class="line">    <span class="type">uint32_t</span>   bytes_in_pcmdata;  <span class="comment">// pcm 数据长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以使用下面代码来计算该结构体所占的字节数(结果是44):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> wav_header_size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> MZWavAudioFileHeader);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 wav pcm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频编程: iOS 使用 faac 编码</title>
      <link href="/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/"/>
      <url>/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文分享如何将 WAV 格式的音频文件转换(编码)为 AAC 格式的音频文件并使用 AVAudioPlayer 播放编码后的文件. </p><p>这里的编码功能使用 faac 这个库来实现.</p><p><strong>该系列博文:</strong></p><ul><li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/">音视频编程: 编译 faac&#x2F;faad2</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/">音视频编程: iOS 使用 faac 编码</a>(本篇)</p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/">音视频编程: iOS 使用 faad2</a> </p></li><li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/">音视频编程: 构建 nginx 推流服务器</a></p></li></ul><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><blockquote><p>获取 faac 的版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int FAACAPI faacEncGetVersion(char **faac_id_string, char **faac_copyright_string);</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char *version;</span><br><span class="line">char *copyright;</span><br><span class="line">faacEncGetVersion(&amp;version, &amp;copyright);</span><br><span class="line">printf(&quot;FAAC version: %s, copyright: %s&quot;, version, copyright);</span><br></pre></td></tr></table></figure><p>打印结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FAAC version: 1.28, copyright: FAAC - Freeware Advanced Audio Coder (http://www.audiocoding.com/)</span><br><span class="line">Copyright (C) 1999,2000,2001  Menno Bakker</span><br><span class="line">Copyright (C) 2002,2003  Krzysztof Nikiel</span><br><span class="line">This software is based on the ISO MPEG-4 reference source code.</span><br></pre></td></tr></table></figure><blockquote><p>打开并初始化 faac 编码器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// sampleRate: 采样率</span><br><span class="line">// numChannels: 通道数量，1-单声道 2-立体声</span><br><span class="line">// inputSamples: 编码后的数据长度</span><br><span class="line">// maxOutputBytes: 编码后的信息最大长度</span><br><span class="line">faacEncHandle FAACAPI faacEncOpen(unsigned long sampleRate,</span><br><span class="line">  unsigned int numChannels,</span><br><span class="line">  unsigned long *inputSamples,</span><br><span class="line">  unsigned long *maxOutputBytes);</span><br></pre></td></tr></table></figure><p>该函数返回一个 faac 编码器句柄. 其很多函数都需要这个句柄.</p><blockquote><p>关闭 faac 编码器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int FAACAPI faacEncClose(faacEncHandle hEncoder);</span><br></pre></td></tr></table></figure><p>将开启 faac 编码器返回的句柄传入即可.</p><blockquote><p>获取配置和设置配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">faacEncConfigurationPtr FAACAPI</span><br><span class="line">  faacEncGetCurrentConfiguration(faacEncHandle hEncoder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int FAACAPI faacEncSetConfiguration(faacEncHandle hEncoder,</span><br><span class="line">    faacEncConfigurationPtr config);</span><br></pre></td></tr></table></figure><p>faac 的配置被定义为了一个结构体 faacEncConfiguration, 大家可以看源码.</p><blockquote><p>编码(编码一帧音频数据)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//hEncoder: faacEncOpen 返回的编码器句柄</span><br><span class="line">//inputBuffer: 输入信息缓冲区</span><br><span class="line">//samplesInput: faacEncOpen编码后的数据长度，即缓冲区长度</span><br><span class="line">//outputBuffer: 编码后输出信息缓冲区</span><br><span class="line">//bufferSize: 输出信息长度</span><br><span class="line">int FAACAPI faacEncEncode(faacEncHandle hEncoder, int32_t * inputBuffer, unsigned int samplesInput,</span><br><span class="line"> unsigned char *outputBuffer,</span><br><span class="line"> unsigned int bufferSize);</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>可以自己新建一个 iOS 工程.</p><p>准备好一个 <code>wav</code> 格式的音频文件.</p><p>效果如下图所示:<br><img src="/upload/images/2018/02/16/1.jpg" alt="1"></p><p>新建一个 C++ 文件, MZCodec.</p><blockquote><p>MZCodec.hpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#ifndef MZCodec_hpp</span><br><span class="line">#define MZCodec_hpp</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int codeWAV(const char *srcFilePath,  const char *destPath);</span><br><span class="line"></span><br><span class="line">#endif /* MZCodec_hpp */</span><br></pre></td></tr></table></figure><blockquote><p>MZCodec.cpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;MZCodec.hpp&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;faac.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int codeWAV(const char *srcFilePath,  const char *destPath) &#123;</span><br><span class="line">    </span><br><span class="line">    unsigned long nSampleRate   = 44100;//采样率</span><br><span class="line">    unsigned int nChannels      = 2;//声道数</span><br><span class="line">    unsigned int nPCMBitSize    = 16;//单样本位数</span><br><span class="line">    </span><br><span class="line">    unsigned long nInputSamples   = 0;</span><br><span class="line">    unsigned long nMaxOutputBytes = 0;</span><br><span class="line">    </span><br><span class="line">    int nRet;</span><br><span class="line">    faacEncHandle hEncoder;</span><br><span class="line">    faacEncConfigurationPtr pConfiguration;</span><br><span class="line">    </span><br><span class="line">    size_t nBytesRead;</span><br><span class="line">    unsigned long nPCMBufferSize;</span><br><span class="line">    unsigned char *pbPCMBuffer;</span><br><span class="line">    unsigned char *pbAACBuffer;</span><br><span class="line">    </span><br><span class="line">    FILE *fpIn; // WAV file for input</span><br><span class="line">    FILE *fpOut; // AAC file for output</span><br><span class="line">    </span><br><span class="line">    /// 获取 faac 版本信息</span><br><span class="line">    &#123;</span><br><span class="line">        char *version;</span><br><span class="line">        char *copyright;</span><br><span class="line">        faacEncGetVersion(&amp;version, &amp;copyright);</span><br><span class="line">        printf(&quot;FAAC version: %s, copyright: %s&quot;, version, copyright);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fpIn = fopen(srcFilePath, &quot;rb&quot;);</span><br><span class="line">    </span><br><span class="line">    if (NULL == fpIn) &#123;</span><br><span class="line">        return -2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fpOut = fopen(destPath, &quot;wb&quot;);</span><br><span class="line">    </span><br><span class="line">    /// 1. 打开 FAAC</span><br><span class="line">    hEncoder = faacEncOpen(nSampleRate, nChannels, &amp;nInputSamples, &amp;nMaxOutputBytes);</span><br><span class="line">    </span><br><span class="line">    if (NULL == hEncoder) &#123;</span><br><span class="line">        </span><br><span class="line">        printf(&quot;[ERROR] Failed to call faacEncOpen()\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nPCMBufferSize = nInputSamples * nPCMBitSize / 8;</span><br><span class="line">    pbPCMBuffer = new unsigned char[nPCMBufferSize];</span><br><span class="line">    pbAACBuffer = new unsigned char[nMaxOutputBytes];</span><br><span class="line">    </span><br><span class="line">    /// 2.1. 获取当前的编码器配置</span><br><span class="line">    pConfiguration = faacEncGetCurrentConfiguration(hEncoder);</span><br><span class="line">    </span><br><span class="line">    pConfiguration-&gt;inputFormat = FAAC_INPUT_16BIT;</span><br><span class="line">    // 对象类型只有为 LOW, iOS 的 AVAudioPlayer 才能播放</span><br><span class="line">    pConfiguration-&gt;aacObjectType = LOW;</span><br><span class="line">    // 0 = Raw; 1 = ADTS</span><br><span class="line">    pConfiguration-&gt;outputFormat = 1;</span><br><span class="line">    pConfiguration-&gt;mpegVersion = MPEG4;</span><br><span class="line">    pConfiguration-&gt;useTns = 1;</span><br><span class="line">    pConfiguration-&gt;bitRate = 30;</span><br><span class="line">    </span><br><span class="line">    /// 2.2. 配置编码器</span><br><span class="line">    nRet = faacEncSetConfiguration(hEncoder, pConfiguration);</span><br><span class="line">    </span><br><span class="line">    //是wav格式, 先读取前面的</span><br><span class="line">    fseek(fpIn, 58, SEEK_SET);</span><br><span class="line">    </span><br><span class="line">    do &#123;</span><br><span class="line">        </span><br><span class="line">        //读入的实际字节数，最大不会超过 nPCMBufferSize</span><br><span class="line">        nBytesRead = fread(pbPCMBuffer, 1, nPCMBufferSize, fpIn);</span><br><span class="line">        </span><br><span class="line">        //输入样本数，用实际读入字节数计算</span><br><span class="line">        //一般只有读到文件尾时才不是 nPCMBufferSize/(nPCMBitSize/8)</span><br><span class="line">        nInputSamples = nBytesRead / (nPCMBitSize / 8);</span><br><span class="line">        </span><br><span class="line">        /// 3. 编码</span><br><span class="line">        nRet = faacEncEncode(hEncoder,</span><br><span class="line">                             (int *)pbPCMBuffer,</span><br><span class="line">                             (unsigned int)nInputSamples,</span><br><span class="line">                             pbAACBuffer,</span><br><span class="line">                             (unsigned int)nMaxOutputBytes);</span><br><span class="line">        </span><br><span class="line">        fwrite(pbAACBuffer, 1, nRet, fpOut);</span><br><span class="line">        </span><br><span class="line">        printf(&quot;FaacEncEncode returns %d\n&quot;, nRet);</span><br><span class="line">    &#125; while (nBytesRead &gt; 0);</span><br><span class="line">    </span><br><span class="line">    /// 4. 关闭 FAAC</span><br><span class="line">    nRet = faacEncClose(hEncoder);</span><br><span class="line">    </span><br><span class="line">    delete[] pbPCMBuffer;</span><br><span class="line">    delete[] pbAACBuffer;</span><br><span class="line">    </span><br><span class="line">    fclose(fpIn);</span><br><span class="line">    fclose(fpOut);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 MZCodec 的 Controller 需要命名为 <code>.mm</code> 文件.</p><blockquote><p>ViewController.mm</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">NSBundle *bundle = [NSBundle mainBundle];</span><br><span class="line">NSString *resPath = [bundle pathForResource:@&quot;m&quot; ofType:@&quot;wav&quot;];</span><br><span class="line">NSLog(@&quot;The path of wav file: %@&quot;, resPath);</span><br><span class="line">    </span><br><span class="line">NSArray&lt;NSString *&gt; *docPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</span><br><span class="line">NSString *destPath = [[docPath lastObject] stringByAppendingString:@&quot;/out.aac&quot;];</span><br><span class="line">NSLog(@&quot;The path of aac file: %@&quot;, destPath);</span><br><span class="line">    </span><br><span class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">    </span><br><span class="line">    codeWAV([resPath UTF8String], [destPath UTF8String]);</span><br><span class="line">    </span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">//转换完成.</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编码过程需要点时间, 如果文件很大, 时间越久. 所以, 新开线程来进行编码.</p><p>编码完成后, 可在对应的沙盒目录找到 <code>out.aac</code> 文件.</p><p>具体代码在 <a href="https://github.com/veryitman/faacfaad2/tree/master/MZAudioCodec">Github</a> 上面, 感兴趣的可以点击 <a href="https://github.com/veryitman/faacfaad2/tree/master/MZAudioCodec">前往</a>.</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>这个 <code>aacObjectType</code> 需要注意, 之前我在这里折腾了很久.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pConfiguration-&gt;aacObjectType = LOW;</span><br></pre></td></tr></table></figure><p>如果设置为其他三种, 编码后的 aac 文件, AVAudioPlayer 播放不了, 初始化 AVAudioPlayer 就会报错, 报错信息如下:</p><p><img src="/upload/images/2018/02/16/2.jpg" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 faac faad2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频编程: 编译 faac/faad2</title>
      <link href="/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/"/>
      <url>/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/</url>
      
        <content type="html"><![CDATA[<p>本文分享如何在 MacOS 上面编译 faac 和 faad2, 编译后的库文件可以直接在 iOS 上面使用.</p><p>后续会分享如何编译给 Android 使用的库文件的方法以及实战.</p><p><strong>该系列博文:</strong></p><ul><li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/">音视频编程: 编译 faac&#x2F;faad2</a>(本篇)</p></li><li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/">音视频编程: iOS 使用 faac 编码</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/">音视频编程: 简单分析 WAV 文件</a></p></li><li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/">音视频编程: iOS 使用 faad2</a> </p></li><li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/">音视频编程: 构建 nginx 推流服务器</a></p></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>faad</code> 是 AAC 格式文件的音频解码库. 相对于 FFmpeg 来说比较轻量和简单. 编译出来全平台静态库文件较小, API 也比较简单, 缺点是功能单一, 只能处理 AAC 格式的音频文件。</p><p><code>faac</code> 是与之对应的 AAC 音频编码库. 支持 MPEG-4 和 MPEG-2 的AAC 编码，其特性包括：可移植性好，快速，支持LC&#x2F;Main&#x2F;LTP，通过 Dream 支持 DRM.</p><p>这两个库虽然很久没有更新了, 但是其功能已经满足很多业务场景了, 并且很好用。</p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p><del>点击 <a href="http://www.audiocoding.com/downloads.html">源码链接</a> 即可下载源码</del> </p><p><img src="/upload/images/2018/02/14/1.jpg" alt="1"></p><p>自从 2020.08 后该网站已经无法访问了，可以从 <a href="https://www.videoproc.com/resource/what-happened-to-audiocoding.htm">What Happened to Audiocoding.com (FAAC &amp; FAAD2)</a> 了解一下。</p><p>可以从 <a href="https://sourceforge.net/projects/faac/">Sourceforge.net</a> 下载。</p><h2 id="编译-faac"><a href="#编译-faac" class="headerlink" title="编译 faac"></a>编译 faac</h2><p>下载完成后, 解压, 将 <code>faac-1.28</code> 放到新建目录  <code>src</code> 下面即可, 目录结构如下:<br><img src="/upload/images/2018/02/14/2.jpg" alt="1"></p><p>修改 <code>build_faac.sh</code> 权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x build_faac.sh</span><br></pre></td></tr></table></figure><p>编辑 <code>build_faac.sh</code> 内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh  </span><br><span class="line">  </span><br><span class="line"># http://www.linuxfromscratch.org/blfs/view/svn/multimedia/faac.html  </span><br><span class="line"># ftp://mirror.ovh.net/gentoo-distfiles/distfiles/  </span><br><span class="line">  </span><br><span class="line">major=1  </span><br><span class="line">minor=28  </span><br><span class="line">micro=  </span><br><span class="line"></span><br><span class="line">XCD_ROOT=&quot;/Applications/Xcode.app/Contents/Developer&quot;  </span><br><span class="line">TOL_ROOT=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&quot;  </span><br><span class="line">#修改为最新的 sdk 版本</span><br><span class="line">SDK_ROOT=&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.2.sdk&quot;  </span><br><span class="line">SDK_SML_ROOT=&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator11.2.sdk&quot;  </span><br><span class="line"></span><br><span class="line">export PATH=$TOL_ROOT/usr/bin:$PATH  </span><br><span class="line">  </span><br><span class="line">work=`pwd`  </span><br><span class="line">srcs=$work/src  </span><br><span class="line">buid=$work/build  </span><br><span class="line">insl=$buid/install  </span><br><span class="line">name=faac-$&#123;major&#125;.$&#123;minor&#125;  </span><br><span class="line">pakt=$&#123;name&#125;.tar.gz  </span><br><span class="line">dest=$work/faac-iOS-$&#123;major&#125;.$&#123;minor&#125;.$&#123;micro&#125;.tgz  </span><br><span class="line">  </span><br><span class="line">rm -rf $srcs $buid $dest &amp;&amp; mkdir -p $srcs $buid  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">archs=&quot;i386 x86_64 armv7 armv7s arm64&quot;  </span><br><span class="line">  </span><br><span class="line">for a in $archs; do  </span><br><span class="line">  case $a in  </span><br><span class="line">    arm*)  </span><br><span class="line">      sys_root=$&#123;SDK_ROOT&#125;  </span><br><span class="line">      host=arm-apple-darwin</span><br><span class="line">      ;;  </span><br><span class="line">    i386|x86_64)  </span><br><span class="line">      sys_root=$&#123;SDK_SML_ROOT&#125;  </span><br><span class="line">      host=$a-apple-darwin</span><br><span class="line">      ;;  </span><br><span class="line">  esac  </span><br><span class="line">  prefix=$insl/$a &amp;&amp; rm -rf $prefix &amp;&amp; mkdir -p $prefix  </span><br><span class="line">  rm -rf $srcs &amp;&amp; mkdir -p $srcs &amp;&amp; cd $work &amp;&amp; tar xvzf $pakt -C $srcs &amp;&amp; cd $srcs/$name  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  export CC=&quot;$TOL_ROOT/usr/bin/clang -arch $a -isysroot $sys_root&quot;</span><br><span class="line">  export CXX=&quot;$TOL_ROOT/usr/bin/clang++ -arch $a -isysroot $sys_root&quot;</span><br><span class="line">  export CXXFLAGS=&quot;-arch $a -isysroot $sys_root&quot;</span><br><span class="line">  export CFLAGS=&quot;-arch $a -isysroot $sys_root&quot;</span><br><span class="line">  export LDFLAGS=&quot;-isysroot $sys_root&quot;</span><br><span class="line">  export LIBS=&quot;-L$&#123;sys_root&#125;/usr/lib&quot;</span><br><span class="line"></span><br><span class="line">  chmod +x bootstrap  </span><br><span class="line">  ./bootstrap \</span><br><span class="line">    &amp;&amp;./configure \</span><br><span class="line">    --host=$host \</span><br><span class="line">    --with-sysroot=$sys_root \</span><br><span class="line">    --prefix=$prefix \</span><br><span class="line">    --disable-shared \</span><br><span class="line">    --enable-static \</span><br><span class="line">    --disable-faac \</span><br><span class="line">    --with-mp4v2 \</span><br><span class="line">    &amp;&amp;make &amp;&amp; make install</span><br><span class="line">  lipo_archs=&quot;$lipo_archs $prefix/lib/libfaac.a&quot;</span><br><span class="line"></span><br><span class="line">  echo &#x27;continue any key pressed..&#x27;</span><br><span class="line">  read -n 1</span><br><span class="line">done</span><br><span class="line">  </span><br><span class="line">univ=$insl/universal &amp;&amp; mkdir -p $univ/lib  </span><br><span class="line">cp -r $prefix/include $univ/  </span><br><span class="line">lipo $lipo_archs -create -output $univ/lib/libfaac.a  </span><br><span class="line">ranlib $univ/lib/libfaac.a  </span><br><span class="line">strip -S $univ/lib/libfaac.a  </span><br><span class="line">  </span><br><span class="line">cd $univ &amp;&amp; tar cvzf $dest *</span><br></pre></td></tr></table></figure><p>执行 <code>./build_faac.sh</code>, 开始编译。</p><p>编译成功后, 生成 build 目录。<br><img src="/upload/images/2018/02/14/3.jpg" alt="1"></p><p>其中, universal 生成的库是通用库。</p><h2 id="编译-faad2"><a href="#编译-faad2" class="headerlink" title="编译 faad2"></a>编译 faad2</h2><p>解压后, 将 <code>faad2-2.7</code> 改名为 <code>faad</code>.</p><p>编写编译的脚本文件, 这里取名为 <code>build_fadd2.sh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch build_fadd2.sh</span><br></pre></td></tr></table></figure><p>编辑 <code>build_fadd2.sh</code> 文件。</p><p>写入如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">CONFIGURE_FLAGS=&quot;--enable-static --with-pic&quot;</span><br><span class="line"></span><br><span class="line">ARCHS=&quot;arm64 armv7s armv7 x86_64 i386&quot;</span><br><span class="line"></span><br><span class="line"># directories</span><br><span class="line">SOURCE=&quot;faad&quot;</span><br><span class="line">FAT=&quot;fat-faad&quot;</span><br><span class="line"></span><br><span class="line">SCRATCH=&quot;scratch-faad&quot;</span><br><span class="line"># must be an absolute path</span><br><span class="line">THIN=`pwd`/&quot;thin-faad&quot;</span><br><span class="line"></span><br><span class="line">COMPILE=&quot;y&quot;</span><br><span class="line">LIPO=&quot;y&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$*&quot; ]</span><br><span class="line">then</span><br><span class="line">if [ &quot;$*&quot; = &quot;lipo&quot; ]</span><br><span class="line">then</span><br><span class="line"># skip compile</span><br><span class="line">COMPILE=</span><br><span class="line">else</span><br><span class="line">ARCHS=&quot;$*&quot;</span><br><span class="line">if [ $# -eq 1 ]</span><br><span class="line">then</span><br><span class="line"># skip lipo</span><br><span class="line">LIPO=</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$COMPILE&quot; ]</span><br><span class="line">then</span><br><span class="line">CWD=`pwd`</span><br><span class="line">for ARCH in $ARCHS</span><br><span class="line">do</span><br><span class="line">echo &quot;building $ARCH...&quot;</span><br><span class="line">mkdir -p &quot;$SCRATCH/$ARCH&quot;</span><br><span class="line">cd &quot;$SCRATCH/$ARCH&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$ARCH&quot; = &quot;i386&quot; -o &quot;$ARCH&quot; = &quot;x86_64&quot; ]</span><br><span class="line">then</span><br><span class="line">PLATFORM=&quot;iPhoneSimulator&quot;</span><br><span class="line">CPU=</span><br><span class="line">if [ &quot;$ARCH&quot; = &quot;x86_64&quot; ]</span><br><span class="line">then</span><br><span class="line">SIMULATOR=&quot;-mios-simulator-version-min=7.0&quot;</span><br><span class="line">HOST=&quot;--host=x86_64-apple-darwin&quot;</span><br><span class="line">else</span><br><span class="line">SIMULATOR=&quot;-mios-simulator-version-min=5.0&quot;</span><br><span class="line">HOST=&quot;--host=i386-apple-darwin&quot;</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">PLATFORM=&quot;iPhoneOS&quot;</span><br><span class="line">if [ $ARCH = &quot;armv7s&quot; ]</span><br><span class="line">then</span><br><span class="line">CPU=&quot;--cpu=swift&quot;</span><br><span class="line">else</span><br><span class="line">CPU=</span><br><span class="line">fi</span><br><span class="line">SIMULATOR=</span><br><span class="line">HOST=&quot;--host=arm-apple-darwin&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">XCRUN_SDK=`echo $PLATFORM | tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;`</span><br><span class="line">CC=&quot;xcrun -sdk $XCRUN_SDK clang -Wno-error=unused-command-line-argument-hard-error-in-future&quot;</span><br><span class="line">AS=&quot;$CWD/$SOURCE/extras/gas-preprocessor.pl $CC&quot;</span><br><span class="line">CFLAGS=&quot;-arch $ARCH $SIMULATOR&quot;</span><br><span class="line">CXXFLAGS=&quot;$CFLAGS&quot;</span><br><span class="line">LDFLAGS=&quot;$CFLAGS&quot;</span><br><span class="line"></span><br><span class="line">CC=$CC CFLAGS=$CXXFLAGS LDFLAGS=$LDFLAGS CPPFLAGS=$CXXFLAGS CXX=$CC CXXFLAGS=$CXXFLAGS  $CWD/$SOURCE/configure \</span><br><span class="line">$CONFIGURE_FLAGS \</span><br><span class="line">$HOST \</span><br><span class="line">--prefix=&quot;$THIN/$ARCH&quot; \</span><br><span class="line">--disable-shared \</span><br><span class="line">--without-mp4v2</span><br><span class="line"></span><br><span class="line">make clean &amp;&amp; make &amp;&amp; make install-strip</span><br><span class="line">cd $CWD</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$LIPO&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;building fat binaries...&quot;</span><br><span class="line">mkdir -p $FAT/lib</span><br><span class="line">set - $ARCHS</span><br><span class="line">CWD=`pwd`</span><br><span class="line">cd $THIN/$1/lib</span><br><span class="line">for LIB in *.a</span><br><span class="line">do</span><br><span class="line">cd $CWD</span><br><span class="line">lipo -create `find $THIN -name $LIB` -output $FAT/lib/$LIB</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">cd $CWD</span><br><span class="line">cp -rf $THIN/$1/include $FAT</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>给予执行权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x build_fadd2.sh</span><br></pre></td></tr></table></figure><p>此时目录结构如下:<br><img src="/upload/images/2018/02/14/4.jpg" alt="1"></p><p>执行编译脚本, 在当前目录生成 <code>scratch-faad</code> 和 <code>fat-faad</code> 以及 <code>thin-faad</code> 目录, 如下:<br><img src="/upload/images/2018/02/14/5.jpg" alt="1"></p><p>使用 <code>fat-faad</code> 里面的库和文件即可。</p><p>可以使用下面的命令查看对应的 <code>.a</code> 文件所支持的架构:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info libfaad.a</span><br></pre></td></tr></table></figure><p>会得到对应的输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Architectures in the fat file: libfaad.a are: i386 armv7 armv7s arm64 </span><br></pre></td></tr></table></figure><p>同样可以查看 <code>libfaac.a</code>.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>编译好的文件, 已经放到 github 上面了, 有需要的可以下载使用, 点击 <a href="https://github.com/veryitman/faacfaad2">下载链接</a> 进入。</p><p>感谢 <a href="https://github.com/fflydev/faac-ios-build">fflydev&#x2F;faac-ios-build</a> 提供编译 <code>faac</code> 的 shell, 只需要将里面对应的 SDK 改为本机最新的 SDK 即可。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="http://www.voidcn.com/article/p-ftajkybd-p.html">faac 1.28的交叉编译与问题解决</a></p></li><li><p><a href="http://blog.csdn.net/coloriy/article/details/52053144">使用FAAD库解码AAC实例</a></p></li><li><p><a href="https://magiclen.org/linux-fdk-aac-2/">在Linux上使用FDK AAC將音樂轉成M4A(AAC、HE-AAC、HE-AACv2)格式</a></p></li><li><p><a href="https://www.jianshu.com/p/45928cdafde0">aac文件转码为wav文件</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 faac faad2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 多线程: 初步认识</title>
      <link href="/2018/02/12/iOS-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
      <url>/2018/02/12/iOS-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>几乎每个编程语言或者平台都会遇到多线程的问题, 说明多线程是一个非常重要且开发者必须了解和掌握的.</p><p>多线程也是面试官比较喜欢问的问题, 例如:</p><ul><li>进程和线程的区别, Android 是否支持多进程?</li><li>线程池如何实现的?</li><li>锁机制?</li><li>多线程之间如何通信?</li></ul><p>谈及 iOS 中的多线程，一般说的是 pthread，NSthread，GCD，NSOperation 这四种, 用的最多也最方便的就是 GCD 了. 关于这四者, 后续会为大家一一分享.</p><p>phtread 是跨平台的, C&#x2F;C++ 中都有它的声影, GCD 和 NSOperation 都是常用的，NSOperation 是基于 GCD 的. GCD 的核心概念是将一个任务添加到队列，指定任务执行的方法，然后执行, NSOperation 则是直接将一个操作添加到队列中.</p><p>该系列文章来跟大家分享关于 iOS 中的多线程.</p><ul><li>iOS 多线程: 初步认识(本篇)</li></ul><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程和线程的定义, 大家可以自行到维基百科上面去查.</p><p>这里只说二者的区别.</p><ul><li><p>一个程序至少有一个进程, 一个进程至少有一个线程如主线程.</p></li><li><p>多线程程序的并发性高.</p></li><li><p>进程在执行过程中拥有独立的内存单元，而多线程是共享内存的，从而极大地提高了程序的运行效率.</p></li><li><p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口. 线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制.</p></li><li><p>操作系统并没有将多个线程看做多个独立的应用, 多线程的意义在于一个应用程序中，有多个执行部分可以同时执行, 从而实现了进程的调度和管理以及资源分配.</p></li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>iOS 中, 队列主要分为:</p><ul><li>全局队列</li><li>主队列.</li><li>串行队列.</li><li>并发队列.</li></ul><blockquote><ul><li>Concurrent:<br>tasks are dequeued in FIFO order, but run concurrently and can finish in any order.</li></ul></blockquote><blockquote><ul><li>Serial: .<br>tasks execute one at a time in FIFO order</li></ul></blockquote><p>并发: 任务以 FIFO 从序列中移除，然后并发运行，可以按照任何顺序完成.</p><p>串行: 任务以FIFO从序列中一个一个执行. 一次只调度一个任务.</p><p>在 iOS 中, 并发不一定会开启多个线程, 串行也不一定只开启一个线程. 因为这里会牵扯到是异步还是同步执行.</p><p>主队列, 即 mainQueue.</p><blockquote><p>Returns the default queue that is bound to the main thread.</p></blockquote><p>会关联主线程.</p><p>全局队列, 即 globalQueue.</p><blockquote><p>The well-known global concurrent queues may not be modified.</p></blockquote><p>全局队列中执行不一定会开启新线程.</p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>在 iOS 的 GCD 中, 还有同步和异步执行的区别.</p><blockquote><p>同步</p></blockquote><p>同步执行代码块, 诸如 dispatch_async 中执行的.</p><blockquote><p>异步</p></blockquote><p>异步执行代码块, 诸如 dispatch_sync 中执行的.</p><h2 id="创建队列的方法"><a href="#创建队列的方法" class="headerlink" title="创建队列的方法"></a>创建队列的方法</h2><p><strong>创建主队列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t dispatch_get_main_queue(void);</span><br></pre></td></tr></table></figure><p><strong>创建全局队列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t dispatch_get_global_queue(long identifier, unsigned long flags);</span><br></pre></td></tr></table></figure><p>参数 identifier 用来表示优先级. 对应的优先级为:</p><ul><li>DISPATCH_QUEUE_PRIORITY_HIG</li><li>DISPATCH_QUEUE_PRIORITY_DEFAULT</li><li>DISPATCH_QUEUE_PRIORITY_LOW</li><li>DISPATCH_QUEUE_PRIORITY_BACKGROUND</li></ul><p>如果传入 0 标示 DISPATCH_QUEUE_PRIORITY_DEFAULT.</p><p>参数 flags 是一个保留参数, API 文档要求传入 0, 非0值可能会导致返回结果为 NULL.</p><p><strong>自定义队列</strong></p><p>dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr);</p><p>参数 label 是一个字符串.</p><p>参数 attr 用来标示是串行还是并行队列. 可以从 DISPATCH_QUEUE_SERIAL, DISPATCH_QUEUE_CONCURRENT 二者中取值.</p><p>如果该参数传入 NULL, 默认是 DISPATCH_QUEUE_SERIAL 串行队列.</p><h2 id="串行队列中的线程"><a href="#串行队列中的线程" class="headerlink" title="串行队列中的线程"></a>串行队列中的线程</h2><p>串行队列到底是开了一个线程, 还是开了多个线程, 我们一探究竟.</p><p>先看例子1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.veryitman&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">for (int i=0; i&lt;10; i++) &#123;</span><br><span class="line">    </span><br><span class="line">    dispatch_async(serialQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/02/12/1.jpg" alt="1"></p><p>可以看出, 只开启一个新线程.</p><p>再看例子2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.veryitman&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">dispatch_async(serialQueue, ^&#123;</span><br><span class="line">    NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">    sleep(2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(serialQueue, ^&#123;</span><br><span class="line">    NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/02/12/2.jpg" alt="1"></p><p>可以看出, 也只开启一个新线程.</p><p>改造一下例子2, 将其中的一个异步改为同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.veryitman&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">dispatch_async(serialQueue, ^&#123;</span><br><span class="line">    NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">    sleep(2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_sync(serialQueue, ^&#123;</span><br><span class="line">    NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/02/12/3.jpg" alt="1"></p><p>可以看出, 同步的执行在主线程, 二者并不是在一个线程中执行.</p><p>所以, 串行队列中执行的代码, 不一定都在子线程中, 如果是异步都是同一个线程中执行.如果是同步的话, 会在主线程中执行.</p><p><strong>同理, 并行队列中的异步执行会开启多个线程来执行.</strong></p><h2 id="执行方式和队列"><a href="#执行方式和队列" class="headerlink" title="执行方式和队列"></a>执行方式和队列</h2><p>这里的执行方式指的是同步或者异步执行.</p><p>先看异步执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/// 异步全局队列和主队列</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            // 1</span><br><span class="line">            NSLog(@&quot;dispatch_async. mainQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            // 0</span><br><span class="line">            NSLog(@&quot;dispatch_async. globalQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 异步串行和并行队列</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch_async(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</span><br><span class="line">            // 0</span><br><span class="line">            NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        dispatch_async(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line">            // 0</span><br><span class="line">            NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_CONCURRENT. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/02/12/4.jpg" alt="1"></p><p>再看同步执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/// 同步全局队列和主队列</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    #if 0</span><br><span class="line">        // 会死锁</span><br><span class="line">        dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;dispatch_sync. mainQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">        dispatch_sync(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            // 1</span><br><span class="line">            NSLog(@&quot;dispatch_sync. globalQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 同步串行和并行队列</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch_sync(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</span><br><span class="line">            // 1</span><br><span class="line">            NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_SERIAL. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        dispatch_sync(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line">            // 1</span><br><span class="line">            NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_CONCURRENT. isMainThread: %i&quot;, [NSThread isMainThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2018/02/12/5.jpg" alt="1"></p><blockquote><p>得出结论</p></blockquote><ul><li>任何队列的同步执行, 都没有开启新线程, 在主线程中执行.</li><li>主队列的同步执行会造成死锁.</li><li>主队列的异步执行, 没有开启新线程. 在主线程中执行.</li><li>串行和并行以及全局队列的异步执行, 都会开启新线程.</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="http://blog.csdn.net/robbyo/article/details/8549904">进程和线程的区别</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">进程与线程的一个简单解释</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS 多线程 进程 GCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++: 如何相互调用</title>
      <link href="/2018/02/12/C-C-%E5%A6%82%E4%BD%95%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/"/>
      <url>/2018/02/12/C-C-%E5%A6%82%E4%BD%95%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>C++ 中调用 C 比较简单. 但是 C 调用 C++ 稍微复杂一些.</p><p>C 调用 C++ 分为可以调用 C++ 类中的函数和普通 cpp 中的函数. 无论是哪种函数, 我们都可以使用封装了 C++ 的文件作为适配供给 C 来使用.</p><p>下面看具体的例子.</p><h2 id="C-调用-C"><a href="#C-调用-C" class="headerlink" title="C++ 调用 C"></a>C++ 调用 C</h2><p>首先创建 CFile.h 和 CFile.c 文件.</p><blockquote><p>CFile.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#ifndef CFile_h</span><br><span class="line">#define CFile_h</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">extern void start_c(int cmd);</span><br><span class="line"></span><br><span class="line">#endif /* CFile_h */</span><br></pre></td></tr></table></figure><blockquote><p>CFile.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CFile.h&quot;</span><br><span class="line"></span><br><span class="line">void start_c(int cmd) &#123;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;start_c by cmd: %i\n&quot;, cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 C++ 文件中调用 C 代码, 示例如下:</p><blockquote><p>main.cpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#include &quot;CFile.h&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    start_c(1);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到导入 C 文件的方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#include &quot;CFile.h&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接导入, 如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CFile.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    start_c(1);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Undefined symbols for architecture x86_64:</span><br><span class="line">  &quot;start_c(int)&quot;, referenced from:</span><br><span class="line">      _main in main.o</span><br><span class="line">ld: symbol(s) not found for architecture x86_64</span><br></pre></td></tr></table></figure><p>这里的 <code>extern &quot;C&quot;</code> 告诉编译器, 要按照 C 的链接约定，而不是 C++ 的链接约定.</p><p>C 编译器不支持 <code>extern &quot;C&quot;</code>.</p><h2 id="C-调用普通-C-的函数"><a href="#C-调用普通-C-的函数" class="headerlink" title="C 调用普通 C++ 的函数"></a>C 调用普通 C++ 的函数</h2><p>C 调用 C++ 有点曲折.</p><blockquote><p>CPPFile.hpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#ifndef CPPFile_hpp</span><br><span class="line">#define CPPFile_hpp</span><br><span class="line"></span><br><span class="line">void start_cpp(int cmd);</span><br><span class="line"></span><br><span class="line">#endif /* CPPFile_hpp */</span><br></pre></td></tr></table></figure><blockquote><p>CPPFile.cpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CPPFile.hpp&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void start_cpp(int cmd) &#123;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; &quot;start_cpp by cmd: &quot; &lt;&lt; cmd &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要写一个中间的 cpp(CPPAdapter.cpp)文件, 提供方法给 C 来使用.</p><p>注意: 这里没有 <code>CPPAdapter.hpp</code> 头文件.</p><blockquote><p>CPPAdapter.cpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CPPFile.hpp&quot;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line">    </span><br><span class="line">    void adapter_start_cpp(int cmd) &#123;</span><br><span class="line">        </span><br><span class="line">        //调用 CPPFile 中的方法</span><br><span class="line">        start_cpp(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>然后在 C 中调用 C++ 的代码:</p><blockquote><p>CFile.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CFile.h&quot;</span><br><span class="line"></span><br><span class="line">//声明函数</span><br><span class="line">extern void adapter_start_cpp(int cmd);</span><br><span class="line"></span><br><span class="line">void start_c(int cmd) &#123;</span><br><span class="line">        </span><br><span class="line">    //调用 c++ 代码</span><br><span class="line">    adapter_start_cpp(5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-调用-C-类中的方法"><a href="#C-调用-C-类中的方法" class="headerlink" title="C 调用 C++ 类中的方法"></a>C 调用 C++ 类中的方法</h2><p>和上面例子的原理一样的.</p><blockquote><p>CPPClassFile.hpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#ifndef CPPClassFile_hpp</span><br><span class="line">#define CPPClassFile_hpp</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">private:</span><br><span class="line">    string name;</span><br><span class="line">    </span><br><span class="line">public:</span><br><span class="line">    Person();</span><br><span class="line">    ~Person();</span><br><span class="line">    </span><br><span class="line">    int setName(string name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif /* CPPClassFile_hpp */</span><br></pre></td></tr></table></figure><blockquote><p>CPPClassFile.cpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CPPClassFile.hpp&quot;</span><br><span class="line"></span><br><span class="line">Person::Person() &#123;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; &quot;Person()&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~Person() &#123;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; &quot;~Person()&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Person::setName(string name) &#123;</span><br><span class="line">    </span><br><span class="line">    this-&gt;name = name;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; &quot;Set name: &quot; &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CPPAdapter.cpp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CPPFile.hpp&quot;</span><br><span class="line">#include &quot;CPPClassFile.hpp&quot;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line">    </span><br><span class="line">    void adapter_start_cpp(int cmd) &#123;</span><br><span class="line">        </span><br><span class="line">        //调用 CPPFile 中的方法</span><br><span class="line">        start_cpp(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int adapter_set_name(const char *cName) &#123;</span><br><span class="line">        </span><br><span class="line">        Person *person = new Person();</span><br><span class="line">        int ret = person-&gt;setName(cName);</span><br><span class="line">        delete person;</span><br><span class="line">        </span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>在 C 中可以调用了, 如下代码:</p><blockquote><p>CFile.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;CFile.h&quot;</span><br><span class="line"></span><br><span class="line">///声明 CPPFile 中的方法</span><br><span class="line">extern void adapter_start_cpp(int cmd);</span><br><span class="line"></span><br><span class="line">///声明 CPPClassFile 中的方法</span><br><span class="line">extern int adapter_set_name(const char *cName);</span><br><span class="line"></span><br><span class="line">void start_c(int cmd) &#123;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;start_c by cmd: %i\n&quot;, cmd);</span><br><span class="line">    </span><br><span class="line">    //调用 CPPFile 中的方法</span><br><span class="line">    adapter_start_cpp(5);</span><br><span class="line">    </span><br><span class="line">    //调用 CPPClassFile 中的方法</span><br><span class="line">    adapter_set_name(&quot;www.veryitman.com&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><p><code>extern &quot;C&quot;</code> 中的 “C” 并不表示 C 语言，”C” 表示的是一种链接约定.</p><p><code>extern &quot;C&quot;</code> 指令描述的是一种链接约定，它并不影响调用函数的定义，即使做了该声明，对函数类型的检查和参数转换仍要遵循 C++ 的标准，而不是 C 的标准.</p><p>不同的编程语言(编译型)链接特性是不同的，这也决定了它们编译后的链接符号的不同.</p><p>如函数 <code>void function(int d)</code>，C 语言会把它编译成类似 <code>_function</code> 这样的符号，C 链接器只要找到该函数符号就可以链接成功.</p><p>C++ 会把这个函数编译成类似 <code>_function_int</code> 或 <code>_xxx_functionIntxxx</code> 这样的符号，即在符号上增加了类型信息，这也解释了为什么 C++ 可以实现函数重载了.</p><p>那么，对于用 C 编译器编译成的库，用 C++ 直接链接势必会出现不能识别符号的问题，用 <code>extern &quot;C&quot;</code> 就可以解决, 正如上面的例子.</p><p>简单来说, <code>extern &quot;C&quot;</code> 的作用就是让编译器知道要以 C 语言的方式编译和链接函数.</p><h2 id="cplusplus-宏"><a href="#cplusplus-宏" class="headerlink" title="__cplusplus 宏"></a>__cplusplus 宏</h2><p><code>__cplusplus</code> 宏是 C++ 编译器默认定义的.</p><p>类似如下的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot;&#123;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">void fun(int, size_t);</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>在 C++ 中, 编译器将 fun 按照 C 的链接约定来编译, 而如果是 C 编译器, 直接按照 C 的链接约定来编译即可.</p><p><code>__cplusplus</code> 是在 C++ 编译器中默认定义的,Ｃ语言不支持 <code>extern &quot;Ｃ&quot;</code>.</p><p>上面的代码很实用, 也是一种编程技巧.</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C C++ 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS APNs: Background Fetch</title>
      <link href="/2018/02/08/iOS-APNs-Background-Fetch/"/>
      <url>/2018/02/08/iOS-APNs-Background-Fetch/</url>
      
        <content type="html"><![CDATA[<p>在前面的几篇文章中, 给大家介绍了跟推送相关的内容.</p><p>今天跟大家聊一聊 iOS7 新加入的 <code>Background Fetch</code> 功能.</p><p>该系列博客:</p><blockquote><p><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/">iOS APNs: 远程推送</a><br><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/">iOS APNs: 本地推送</a><br><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/">iOS APNs: 处理数据</a><br><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/">iOS APNs: 静默推送</a><br>iOS APNs: Background Fetch(本篇)</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>从 <code>Background Fetch</code> 字面上来看, 大致意思是可在后台获取数据.</p><p>在 iOS7 中，Apple 为开发者提供了可以在后台更新应用程序界面和内容的 API, 即 <code>Background Fetch</code>.</p><p>该特性允许开发者在一个周期间隔后进行特定的动作，如获取网络内容, 更新 UI 操作等.</p><p>同时在 iOS7 中, 也加入了另一个特性, 就是博文 <a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/">iOS APNs: 静默推送</a> 里面说的静默推送.</p><p>这些都是对 iOS 后台多任务的补充和完善, Apple 一直在优化系统从而增强用户体验.</p><h2 id="开启-Background-Fetch"><a href="#开启-Background-Fetch" class="headerlink" title="开启 Background Fetch"></a>开启 Background Fetch</h2><p><strong>1.需要 APP 支持</strong></p><p>如下图所示, 勾选即可.</p><p><img src="/upload/images/2018/02/08/1.png" alt="1"></p><p><strong>2.设置 fetch 时间间隔</strong></p><p>在 AppDelegate 中设置.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; </span><br><span class="line"></span><br><span class="line">// 设置 fetch 时间间隔</span><br><span class="line">    [application setMinimumBackgroundFetchInterval:UIApplicationBackgroundFetchIntervalMinimum];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UIApplicationBackgroundFetchIntervalMinimum</code> 是系统自定义的时间. 如果不设置, 默认是 <code>UIApplicationBackgroundFetchIntervalNever</code>, 这样就不会让 <code>Background Fetch</code> 生效了.</p><p>可以查看对 UIApplicationBackgroundFetchIntervalNever 的官方解释.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UIApplicationBackgroundFetchIntervalNever</span><br><span class="line"></span><br><span class="line">A fetch interval large enough to prevent fetch operations from occurring.</span><br></pre></td></tr></table></figure><p>当然, 你也可以设置自己定义的时间的间隔, 但是基本没有什么作用, 因为这个时间间隔完全由系统来决定, 系统会根据你的电量以及使用频率来决定.</p><p>所以, 可以理解为 <code>setMinimumBackgroundFetchInterval</code> 方法只是开启了 <code>Background Fetch</code> 功能.</p><p><strong>3.开启了系统后台更新功能</strong></p><p>在 iOS 系统中, 设置&#x2F;通用&#x2F;后台应用刷新中一定要开启对应 APP 的功能.</p><p>判断是否已经开启该功能的示例代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ([[UIApplication sharedApplication] backgroundRefreshStatus] != UIBackgroundRefreshStatusAvailable) &#123;</span><br><span class="line"></span><br><span class="line">//不可用提示用户</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理回调"><a href="#处理回调" class="headerlink" title="处理回调"></a>处理回调</h2><p>在实际的应用环中，<code>Background Fetch</code> 事件是由系统管理的，我们开发者是无法预先知道 Fetch 事件达到的时机的. </p><p>网上很多说可以使用 Xcode 模拟这个事件, 估计也是之前的系统和 Xcode 版本, 现在的 Xcode9 貌似不行了.</p><p>但是, 你的手机在后台等几分钟, 有时候会被系统触发该事件, 触发后, 对应的系统回调(在 AppDelegate 中)会被调用.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Background fetch 回调</span><br><span class="line">- (void)application:(UIApplication *)application</span><br><span class="line">performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;AppDelegate. Background fetch.&quot;);</span><br><span class="line">    </span><br><span class="line">    //可进行对应的耗时操作, 如下载等.</span><br><span class="line">    </span><br><span class="line">    completionHandler(UIBackgroundFetchResultNoData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Background Fetch</code> 会为我们的 App 争取更多的后台时间, 但是一般是几十秒左右, 不会太多. 所以, 不要在回调中做太多耗时的操作.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APNs 远程推送 BackgroundFetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS APNs: 静默推送</title>
      <link href="/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/"/>
      <url>/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>最近在看人工智能相关的知识，无意中发现了一个巨牛的 <a href="https://www.cbedai.net/androidbluetooth">人工智能教程</a>，分享一下给大家。</p><p>教程不仅是零基础，通俗易懂，而且非常风趣幽默，像看小说一样！觉得太牛了，所以分享给大家。点 <a href="https://www.cbedai.net/androidbluetooth">这里</a> 可以直接看教程。</p><hr><p>今天跟大家介绍一下 ios 的静默推送功能。</p><p>静默推送，简单来说就是通过推送实现用户无感知的消息通知。</p><p>该系列博文:</p><blockquote><p><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/">iOS APNs: 远程推送</a><br><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/">iOS APNs: 本地推送</a><br><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/">iOS APNs: 处理数据</a><br>iOS APNs: 静默推送(本篇)</p></blockquote><h2 id="普通推送"><a href="#普通推送" class="headerlink" title="普通推送"></a>普通推送</h2><p>例如微信，好友给你发送了一条消息，你的微信APP 在后台, 此时会收到带声音的一个消息提示。</p><p>这条推送机油有文字又有声音，点开这个推送可以直接打开 APP.</p><p>从程序的角度来讲，进入 App 后会调用下面的方法:</p><p>iOS10.0.x 和其之前的系统调用下面的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</span><br></pre></td></tr></table></figure><p>iOS10.0.x 之后的系统，会调用如下的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application</span><br><span class="line">                    didReceiveRemoteNotification:(NSDictionary *)userInfo</span><br><span class="line">                    fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler</span><br></pre></td></tr></table></figure><h2 id="静默推送的异同"><a href="#静默推送的异同" class="headerlink" title="静默推送的异同"></a>静默推送的异同</h2><p><strong>1.没有弹出框</strong></p><p>没有推送的弹框出现，用户毫无感知的接收到了这个推送消息. 有 <code>润物细无声</code> 的感觉。</p><p>该推送既没有文字又没有声音。</p><p><strong>2.需要用户授权允许推送</strong></p><p>这个跟普通推送一样，都需要用户授权才可以推送。</p><p><strong>3.会执行代理方法</strong></p><p>静默推送来的时候，也能执行上面的回调方法。执行上面方法的场景如下:</p><blockquote><p>1.App 在前台.<br>2.App 在后台, 但是没有被 kill 掉.</p></blockquote><p><strong>4.iOS7 以后才有的</strong></p><p>对于 iOS 之前是没有静默推送的。</p><p><strong>5.可以延长后台时间</strong></p><p>收到静默推送后，在应用程序挂起之前有 30 秒左右可以执行相关的操作。</p><p><strong>6.推送频率的控制</strong></p><p>静默的推送是苹果推送服务器控制推送频率的。</p><p>苹果推送服务根据后台推送任务的能耗(用电量,接收情况)来控制后台推送的推送频率和延迟时间。</p><hr><p><strong>总之</strong>, 静默推送是普通推送的一种变种而已。</p><p>无论是静默推送还是普通推送，开发者证书里面必须开通 push 相关的功能，并且也需要用户开启允许推送的授权。</p><p>这个在 <a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/">iOS APNs: 远程推送</a> 里面已经介绍过，不在这里赘述。</p><h2 id="推送的格式"><a href="#推送的格式" class="headerlink" title="推送的格式"></a>推送的格式</h2><p>普通推送的格式，大致是这个样子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;aps&quot;:</span><br><span class="line">&#123;</span><br><span class="line">&quot;alert&quot;:&quot;Testing.. (15),</span><br><span class="line">&quot;badge&quot;:1,</span><br><span class="line">&quot;sound&quot;:&quot;default&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静默推送是不允许带 <code>alert</code> <code>badge</code>  <code>sound</code> 等字段的，但是必须包含 <code>&quot;content-available&quot;:1</code>.</p><p>例如下面的形式都可以:</p><blockquote><p>形式1</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;aps&quot;:</span><br><span class="line">&#123;</span><br><span class="line">&quot;content-available&quot;:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>形式2</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;aps&quot;:</span><br><span class="line">&#123;</span><br><span class="line">&quot;custom&quot;:&quot;open_profile_page&quot;</span><br><span class="line">&quot;content-available&quot;:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 custom 是自己定义的，大家根据需求自行扩展即可。</p><blockquote><p>形式3</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;aps&quot; : &#123;</span><br><span class="line">        &quot;content-available&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;acme1&quot; : &quot;bar&quot;,</span><br><span class="line">    &quot;acme2&quot; : 42</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个来自苹果开发者 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html">文档</a> 。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>具体的使用场景, 需要结合本身的业务和功能特点来说。</p><p>静默推送的前提是 APP 没有被杀死，可以通过回调函数来执行相关的代码。</p><p>另外静默推送不会打扰用户，比如用户正在游戏中战斗，你频繁的使用普通推送给他，估计他都要疯了.。</p><p>我个人使用静默推送的场景大致是这样的，APP 将要挂起的时候, 请求服务器去发一条静默推送，然后使用本地通知的方式唤起用户来打开 APP，从而保证 APP 处于保活的状态，至少静默推送可以增加被后台挂起的时间。</p><p>关于本地通知的内容，可以参考之前的文章 <a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/">iOS APNs: 本地推送</a>.</p><p>更多的使用场景等大家在业务中去挖掘。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APNs 推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hi 2018, 我又来了</title>
      <link href="/2018/02/02/Hi-2018-%E6%88%91%E5%8F%88%E6%9D%A5%E4%BA%86/"/>
      <url>/2018/02/02/Hi-2018-%E6%88%91%E5%8F%88%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>好久没有更新自己的博客了, 以前坚持一周至少两三篇博文的我, 从 2017 年 10 月份到现在居然停止了。 </p><p>其实, 这是有原因的…</p><h2 id="数据丢了"><a href="#数据丢了" class="headerlink" title="数据丢了"></a>数据丢了</h2><p>2017 年 10 月 15 日晚, 我亲手把自己的之前写的文章(原数据)给弄丢了，我自己搭建的博客系统是使用 GitHub + Hexo 部署和发布的。</p><p>事情大致经过是这样的…</p><p>Mac 操作系统提示, 有更新的系统可以使用了, 问是否立即安装, 在公司的时候, 我心想, 更新后, 自己安装的一些库, 估计也要重新安装, 嫌麻烦就直接跳过了。</p><p>过了几天, 我晚上下班回家, 系统又提示我更新. 当时, 我就没有忍住, 直接更新了, 毕竟早晚都要更新的, 再说了 MacOS 还是比较让人放心的。</p><p>趁电脑更新系统的时候, 我就去洗了澡, 回来发现系统更新已经完成了。</p><p>心中想正好可以把之前没有完成的博客去完善一下, 谁知道…天不遂我愿呀! 再去使用 Hexo 的时候, 提示我失败, 居然无法使用了. 这可把我急的够呛, 一气之下(脑子估计当时进水了), 直接删了 Hexo 目录, 是那种程序员式的毫不留情的删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -fr ./hexo</span><br></pre></td></tr></table></figure><p>潇洒的操作后, 重新安装 Hexo, 又折腾了两个晚上, 最终也是安装好了, 可以写东东了。</p><p>但是发现从 Github 上面 clone 后的文件, 无法还原成自己当初的 MarkDown 文件了。</p><p>雪花那个飘啊飘, 北风那个萧呀萧…</p><p>一切都晚了! ^^</p><p>唯一值得庆幸的是, 原来自己的网站博文还在那里。</p><h2 id="还原数据"><a href="#还原数据" class="headerlink" title="还原数据"></a>还原数据</h2><p>从哪里跌倒, 就从哪里爬起来, 我决定把之前的数据使用 <code>人工智能</code> 的方式还原回来。</p><p>😆我就是那个 <code>人工</code>, 手动的将 HTML 转换为 MarkDown 文档, 压根没有什么 <code>智能</code>。</p><p>好歹那也是自己熬过多少个日夜的成果呀, 没有功劳也有苦劳, 我不忍心就这样让它丢掉, 含着泪也要把它们给找回来!</p><p>自己下半年也比较忙, 周末都在加班, 只能每天晚上回家抽些时间还原一点, 有时候太困, 就推迟到下个晚上. 大概用了 3 个月左右的时间, 基本还原回来了。</p><p>每篇文章基本都有配图, 都有跳转链接, 恢复起来, 还是需要一点时间和毅力的, 中途我也放弃过, 但是想想它们就要这样的被我抹杀了, 实在太可怜了, 就坚持下来了。</p><h2 id="反思和总结"><a href="#反思和总结" class="headerlink" title="反思和总结"></a>反思和总结</h2><p>还原之前的数据, 比写新文章还累, 主要是心累.</p><p>刚开始的时候, 我每篇都想一步到位的还原, 发现坚持几个晚上, 效率很低, 很容易放弃。</p><p>最后, 我调节了一下心态, 分 <code>迭代</code> 去做。</p><p><strong>第一个阶段</strong>, 把 HTML 文章拷贝到 MarkDown 工具中, 不做任何的修饰和修改.</p><p><strong>第二个阶段</strong>, 梳理 MarkDown 文档, 把缺失的图片补上去。</p><p><strong>第三个阶段</strong>, 把文章中的链接尽量补全。</p><p>经过这三个阶段后, 文章基本已经复原了, 只是格式上看起来有点糟糕。</p><p><strong>第四个阶段</strong>, 整理文章的排版, 对比已经发布的文章, 查漏补缺。</p><p>第四个阶段结束后, 文章基本都复活了, 接下来就是部署和发布了。</p><p><strong>第五个阶段</strong>, 整理 Hexo, 配置相关的主题。</p><p><strong>第六个阶段</strong>, 本地预览和再次校验文章, 统一发布。</p><p>每个阶段, 我都给自己一个小目标, 不断的去完善, 最后将各个阶段的成果串联起来, 就完成了. 当自己遇到困难的时候, 不妨分解一下任务, 不断的去完成每个小任务, 每个完成的小任务都是对自己最大的奖励。</p><p>整个还原的过程, 又让我重新梳理了一下之前的文章, 包括目录规划和文章中的措辞, 也对图片进行了压缩和处理. 收获颇多。</p><p>如果当初自己不那么冲动, 如果当初自己备份了文件, 应该就不会有这么一个艰辛的历程了。</p><blockquote><p>数据备份很重要, 冲动是要付出代价的。</p></blockquote><p>现在我把原数据保存在云盘中, 本地也保留一份, 定期更新到云盘中. 这样就可以防止数据丢失了。</p><p>祝大家在 2018 发发发, 身体健康, 幸福安康!</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>推荐给 Mac 用户一个图片压缩工具 <a href="https://imageoptim.com/mac">imageoptim</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 生活 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC: 静态库</title>
      <link href="/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/"/>
      <url>/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>如果你对 GCC 的编译 C语言的流程不清楚, 建议在阅读本文之前先去看一下 <a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/">GCC: 编译C语言的流程</a> 这篇文章, 篇幅短小精悍, 阅读后, 至少可以扫扫盲😜.</p><p>本篇博文用到的一些基础知识点:</p><p><strong>1.GCC</strong></p><p>gcc -c 选项含义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Only run preprocess, compile, and assemble steps</span><br></pre></td></tr></table></figure><p>是 <code>-c</code> 选项只是进行了预处理, 编译, 汇编的阶段, 不会进行链接的操作.</p><p><strong>2.静态库</strong></p><p>Linux 上的静态库，本质是一些目标文件的归档文件.</p><p><strong>3.静态库和共享库区别</strong></p><p>[1].使用共享库可以节省内存.</p><blockquote><p>比如 libc，系统中几乎所有的进程都映射 libc 到自己的进程地址空间，而 libc 的只读部分在物理内存中只需要存在一份，就可以被所有进程共享，这就是“共享库”这个名称的由来了.</p></blockquote><p>[2].使用共享库可以很方便地升级库文件而不需要重新编译应用程序.</p><p>[3].共享库占用更少的体积.</p><blockquote><p>在运行时做动态链接.而在链接静态库时, 链接器会把静态库中的目标文件取出来和可执行文件真正链接在一起.</p></blockquote><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>创建静态库的步骤如下:</p><p>[1]. 写源文件.<br>[2]. 通过 gcc -c x.c 生成目标文件.<br>[2]. 归档. 用 ar 归档目标文件，生成静态库.<br>[3]. 写头文件, 便于使用者知道怎么使用该静态库.</p><p>使用静态库时，在源码中包含对应的头文件，链接时记得链接自己的库.</p><p>下面结合具体例子, 展开讲.</p><h2 id="写源文件"><a href="#写源文件" class="headerlink" title="写源文件"></a>写源文件</h2><p>目录结构<br><img src="/upload/images/2017/10/08/1.jpg" alt="1"></p><p>示例文件都是很简单的代码, 附录可以查看完整示例.</p><h2 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h2><p>将 libs 目录下面的(c)源文件进行预处理, 编译和汇编.<br>注意这里没有进行链接.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c libs/person.c libs/eat.c libs/play.c libs/sleep.c</span><br></pre></td></tr></table></figure><p>执行城后, 会生成对应的 .o 文件.</p><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><p><code>libperson.a</code> 是要生成的库文件.</p><p>库文件都以 lib 开头, 静态库以. a 为后缀. 所以一般是 lib+ 名字.a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar rs libperson.a person.o sleep.o play.o eat.o</span><br></pre></td></tr></table></figure><p>ar: 类似于 tar, 用来对文件进行库打包.</p><p>r 选项: 将其后面的文件列表添加到文件包(libperson.a)中, 如果 libperson.a 不存在就创建它, 如果 libperson.a 已经存在且里面有同名的目标文件就进行替换操作.</p><p>s 选项: 为静态库创建索引.这个索引会被链接器使用.</p><blockquote><p>ranlib 命令也可以为静态库创建索引. 所以上面的命令可以等效为下面的两个命令.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ar r libperson.a person.o sleep.o play.o eat.o</span><br><span class="line">ranlib libperson.a</span><br></pre></td></tr></table></figure><h2 id="写头文件"><a href="#写头文件" class="headerlink" title="写头文件"></a>写头文件</h2><p>写一个 person.h 文件, 便于调用者查看库如何使用.</p><p>person.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _PERSON_H</span><br><span class="line">#define _PERSON_H</span><br><span class="line">extern void init(int pUid);</span><br><span class="line">extern void eat();</span><br><span class="line">extern void play();</span><br><span class="line">extern void sleep();</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>使用静态库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -L. -lperson -Ilibs -o main</span><br></pre></td></tr></table></figure><p>-L 选项: 告诉编译器去哪里找库文件, 这里的 _L. 表示在当前目录.<br>如果不用 -L 选项, 即使库文件在当前目录, 编译器也不会去找, 所以该选项不能少.</p><p>报错信息如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ld: library not found for -lperson</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure><p>-lperson: 告诉编译器要链接 libperson.a 库.</p><p>-I: 告诉编译器到哪里找头文件.<br>如果不指定头文件的查找目录, 也会报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.c:2:10: fatal error: &#x27;person.h&#x27; file not found</span><br><span class="line">#include &quot;person.h&quot;</span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br></pre></td></tr></table></figure><p>此时的目录结构:<br><img src="/upload/images/2017/10/08/2.jpg" alt="1"></p><p>链接成功后, 可以执行生成的 main (可执行)文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uid: 101 eating</span><br><span class="line">uid: 101 playing</span><br><span class="line">uid: 101 has sleep</span><br></pre></td></tr></table></figure><h2 id="有趣的实验"><a href="#有趣的实验" class="headerlink" title="有趣的实验"></a>有趣的实验</h2><p>猜想一下如果有两个库一个是共享库, 一个是静态库, 而且二者除了后缀不一样, 名字都一样如 libperson.a 和 libperson.so, 那么调用方如何来选择对应的库文件呢?</p><p>我们把 GCC: 共享库 里面生成的共享库 libperson.so 放到当前的目录, 重新编译链接 main.c 文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -L. -lperson -Ilibs -o main</span><br></pre></td></tr></table></figure><p>再次执行 .&#x2F;main, 得到结果是这样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From sharedlib.uid: 101 eating</span><br><span class="line">From sharedlib.uid: 101 playing</span><br><span class="line">From sharedlib.uid: 101 has sleep</span><br></pre></td></tr></table></figure><p>以上的结果, 说明链接器会优先选择共享库其次才是静态库.</p><blockquote><p>Linux(MacOS 也一样) 的 GCC 默认链接动态库，只有当动态库不存在时，才去链接静态库.<br>若是需要强制指定静态库需要指定选项 -static.但是在 MacOS 上面不支持该选项.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -static main.c -L. -lperson -Ilibs -o main</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>示例完整代码</p><blockquote><p>main.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;person.h&quot;</span><br><span class="line">int main() &#123;</span><br><span class="line">    init(101);</span><br><span class="line">    eat();</span><br><span class="line">    play();</span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>person.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _PERSON_H</span><br><span class="line">#define _PERSON_H</span><br><span class="line">extern void init(int pUid);</span><br><span class="line">extern void eat();</span><br><span class="line">extern void play();</span><br><span class="line">extern void sleep();</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><blockquote><p>person.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int uid;</span><br><span class="line">void init(int pUid) &#123;</span><br><span class="line">    uid = pUid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>eat.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int uid;</span><br><span class="line">void eat() &#123;</span><br><span class="line">    printf(&quot;uid: %i eating\n&quot;, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>play.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int uid;</span><br><span class="line">void play() &#123;</span><br><span class="line">    printf(&quot;uid: %i playing\n&quot;, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sleep.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int uid;</span><br><span class="line">void sleep() &#123;</span><br><span class="line">    printf(&quot;uid: %i has sleep\n&quot;, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/">GCC: 编译 C 语言的流程</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/">GCC: Homebrew 安装 GCC 和 Binutils</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/">GCC: 共享库</a></p><p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/">GCC: 静态库</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GCC 编译器 静态库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC: 共享库</title>
      <link href="/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/"/>
      <url>/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>共享库: 在程序执行期间需要调用到共享库的时候才加载到内存里面，可以被多个程序共享使用.</p><p>在 MacOS 上面创建和使用共享库要比在 Linux 上面简单.<br>在 Linux 上面还会牵扯到共享库路径问题, 在 Mac 上面就没有这样的问题.</p><p>在 MacOS 上面使用的 GCC 其本质是 LLVM. 你可以在命令行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p>可以看到对应的输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/c++/4.2.1</span><br><span class="line">Apple LLVM version 9.0.0 (clang-900.0.37)</span><br><span class="line">Target: x86_64-apple-darwin16.7.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</span><br></pre></td></tr></table></figure><h2 id="创建共享库步骤"><a href="#创建共享库步骤" class="headerlink" title="创建共享库步骤"></a>创建共享库步骤</h2><p>[1].写源文件.这里以 C文件为基础.<br>[2].将源文件生成目标文件.<br>[3].创建共享库.<br>[4].写头文件, 供调用方使用.</p><p>下面结合实例来分享一下如何在 Mac 上面创建共享库.</p><h2 id="写源文件"><a href="#写源文件" class="headerlink" title="写源文件"></a>写源文件</h2><p>目录结构:<br><img src="/upload/images/2017/10/07/1.jpg" alt="1"></p><p>对应的完整代码可以看文末的附录.</p><h2 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h2><p>执行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -c -fPIC libs/eat.c libs/play.c libs/sleep.c libs/person.c</span><br></pre></td></tr></table></figure><p>注意: <code>-fPIC</code> 选项一定要加.</p><blockquote><p>PIC(position independent code), 产生位置无关码</p></blockquote><h2 id="生成共享库"><a href="#生成共享库" class="headerlink" title="生成共享库"></a>生成共享库</h2><p>这里把共享库暂且称之为 <code>libperson.so</code>.</p><p>执行下面命令创建:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC eat.o play.o sleep.o person.o -o libperson.so</span><br></pre></td></tr></table></figure><h2 id="写头文件"><a href="#写头文件" class="headerlink" title="写头文件"></a>写头文件</h2><p>这里头文件主要是 <code>person.h</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _PERSON_H</span><br><span class="line">#define _PERSON_H</span><br><span class="line">extern void init(int pUid);</span><br><span class="line">extern void eat();</span><br><span class="line">extern void play();</span><br><span class="line">extern void sleep();</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="使用共享库"><a href="#使用共享库" class="headerlink" title="使用共享库"></a>使用共享库</h2><p>main.c 是使用方, 编译链接即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -L. -lperson -Ilibs -o main</span><br></pre></td></tr></table></figure><p>生成可执行文件 main, 执行结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From sharedlib.uid: 101 eating</span><br><span class="line">From sharedlib.uid: 101 playing</span><br><span class="line">From sharedlib.uid: 101 has sleep</span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>-L 选项, 告诉编译器去哪里找库文件, 这里的 _L. 表示在当前目录.</p><p>-lperson, 表示 libperson.so 库.</p><p>-Ilibs 告诉编译器头文件所在的目录.</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>示例完整代码</p><blockquote><p>main.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;person.h&quot;</span><br><span class="line">int main() &#123;</span><br><span class="line">    init(101);</span><br><span class="line">    eat();</span><br><span class="line">    play();</span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>person.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _PERSON_H</span><br><span class="line">#define _PERSON_H</span><br><span class="line">extern void init(int pUid);</span><br><span class="line">extern void eat();</span><br><span class="line">extern void play();</span><br><span class="line">extern void sleep();</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><blockquote><p>person.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int uid;</span><br><span class="line">void init(int pUid) &#123;</span><br><span class="line">    uid = pUid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>eat.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int uid;</span><br><span class="line">void eat() &#123;</span><br><span class="line">    printf(&quot;From sharedlib.uid: %i eating\n&quot;, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>play.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int uid;</span><br><span class="line">void play() &#123;</span><br><span class="line">    printf(&quot;From sharedlib.uid: %i playing\n&quot;, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sleep.c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int uid;</span><br><span class="line">void sleep() &#123;</span><br><span class="line">    printf(&quot;From sharedlib.uid: %i has sleep\n&quot;, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/">GCC: 编译 C 语言的流程</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/">GCC: Homebrew 安装 GCC 和 Binutils</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/">GCC: 共享库</a></p><p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/">GCC: 静态库</a></p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GCC 编译器 共享库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC: Homebrew 安装 GCC 和 Binutils</title>
      <link href="/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/"/>
      <url>/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/</url>
      
        <content type="html"><![CDATA[<h2 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h2><p>前段时间，有个博客上面的小伙伴给我发来邮件，问我关于 GCC 相关的知识，对于 GCC 我也只是凭着之前的了解，回复他了。书到用时方恨少呀！</p><p>这位小伙伴还在读大学，自学能力比较强，自己出了完成课时之外，还会在网上找资料自学。</p><p>我记得自己在大学的时候，对 GCC 一窍不通，只知道 Turbo-C 和那些被强制记住的关键字。</p><p>最后告诉他, 我会坚持把自己以前学习过相关 GCC 的知识，以博客的形式输出。于是。就有了 <a href="http://www.veryitman.com/categories/C-C/">GCC 系列</a> 的文章，希望能够帮到大家。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>这篇博客主要分享 macOS 下安装 GCC 和 Binutils 工具。</p><p>macOS 终端下输入 <code>gcc -v</code>, 其实是链接指向了 LLVM 编译器, 不是 GNU 的 GCC.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/c++/4.2.1</span><br><span class="line">Apple LLVM version 9.0.0 (clang-900.0.37)</span><br><span class="line">Target: x86_64-apple-darwin16.7.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</span><br></pre></td></tr></table></figure><h2 id="安装-GCC"><a href="#安装-GCC" class="headerlink" title="安装 GCC"></a>安装 GCC</h2><p>关于 GCC, 可以参考 <a href="https://zh.wikipedia.org/wiki/GCC">维基百科</a>.</p><p>执行下面命令, 即可开始安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/versions</span><br></pre></td></tr></table></figure><p>然后搜索 <code>gcc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search gcc</span><br></pre></td></tr></table></figure><p>搜索结果中会显示 gcc 的版本，可以选择安装一个，建议安装最新版。</p><p>这里以安装 gcc49 为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gcc49</span><br></pre></td></tr></table></figure><p>brew 会自动为你安装相关依赖，如 gmp4、mpfr2、libmpc08、isl011、cloog018.</p><p>这里安装需要等待一段时间…</p><p>看到下面的内容, 表示安装完毕.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pouring gcc49-4.9.2_1.yosemite.bottle.1.tar.gz</span><br><span class="line"></span><br><span class="line">/usr/local/Cellar/gcc49/4.9.2_1: 1138 files, 164M</span><br></pre></td></tr></table></figure><p>安装成功后, 安装目录在:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/gcc49/4.9.2_1</span><br></pre></td></tr></table></figure><p>你在终端直接输入 <code>gcc -v</code>，其实还是 LLVM，那么如何使用我们 刚安装的 gcc?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/Cellar/gcc49/4.9.2_1/bin</span><br><span class="line"></span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>可以看到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c++-4.9</span><br><span class="line">cpp-4.9</span><br><span class="line">g++-4.9</span><br><span class="line">gcc-4.9</span><br><span class="line">gcc-ar-4.9</span><br><span class="line">gcc-nm-4.9</span><br><span class="line">gcc-ranlib-4.9</span><br><span class="line">gcov-4.9</span><br><span class="line">x86_64-apple-darwin14.3.0-c++-4.9</span><br><span class="line">x86_64-apple-darwin14.3.0-g++-4.9</span><br><span class="line">x86_64-apple-darwin14.3.0-gcc-4.9</span><br><span class="line">x86_64-apple-darwin14.3.0-gcc-4.9.2</span><br><span class="line">x86_64-apple-darwin14.3.0-gcc-ar-4.9</span><br><span class="line">x86_64-apple-darwin14.3.0-gcc-nm-4.9</span><br><span class="line">x86_64-apple-darwin14.3.0-gcc-ranlib-4.9</span><br></pre></td></tr></table></figure><p>Ok，你应该明白了, 在命令行输入 <code>gcc-4.9 -v</code> 就可以使用我们刚安装的 GCC 了，包括 g++ 等工具.</p><p>以后使用 GNU 的 GCC 输入 <code>gcc-4.9</code> 就好了。</p><h2 id="安装-Binutils"><a href="#安装-Binutils" class="headerlink" title="安装 Binutils"></a>安装 Binutils</h2><p>关于 Binutils 可以参考 <a href="https://zh.wikipedia.org/zh-cn/GNU_Binutils">维基百科</a>.</p><p>执行下面命令, 直接安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install binutils</span><br></pre></td></tr></table></figure><p>同理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/Cellar/binutils/2.25/bin</span><br></pre></td></tr></table></figure><p>可以看到你需要的工具:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">gaddr2line</span><br><span class="line">gar</span><br><span class="line">gc++filt</span><br><span class="line">gcoffdump</span><br><span class="line">gdlltool</span><br><span class="line">gdllwrap</span><br><span class="line">gelfedit</span><br><span class="line">gnlmconv</span><br><span class="line">gnm</span><br><span class="line">gobjcopy</span><br><span class="line">gobjdump</span><br><span class="line">granlib</span><br><span class="line">greadelf</span><br><span class="line">gsize</span><br><span class="line">gsrconv</span><br><span class="line">gstrings</span><br><span class="line">gstrip</span><br><span class="line">gsysdump</span><br><span class="line">gwindmc</span><br><span class="line">gwindres</span><br></pre></td></tr></table></figure><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>在 macOS 上面，即使安装了 GNU 的 GCC，也没有在 Linux 上面用的那么爽，很多 GCC 的命令选项在 macOS 上面无法使用，但不得不承认 LLVM 是比较优秀的编译器。</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>gcc-4.9 编译代码报错，报错内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.c:<span class="number">9</span>:<span class="number">19</span>: fatal error: stdio.h: No such file or directory</span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">                   ^</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><p>卸载 <code>gcc</code> 重新安装最新版本的 <code>gcc</code> 即可，如果你不知道最新的 <code>gcc</code> 版本是哪个，可以 search 一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search gcc</span><br></pre></td></tr></table></figure><p>显示结果大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcc        </span><br><span class="line">gcc@5                 </span><br><span class="line">gcc@7</span><br><span class="line">gcc@4.9                  </span><br><span class="line">gcc@6            </span><br><span class="line">i386-elf-gcc</span><br></pre></td></tr></table></figure><p>这里以安装 <code>gcc@7</code> 为例，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 卸载原来的</span><br><span class="line">brew uninstall gcc</span><br><span class="line"></span><br><span class="line">// 安装最新版本</span><br><span class="line">brew install gcc@7</span><br></pre></td></tr></table></figure><h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/">GCC: 编译 C 语言的流程</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/">GCC: Homebrew 安装 GCC 和 Binutils</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/">GCC: 共享库</a></p><p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/">GCC: 静态库</a></p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> brew GCC C 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC: 编译C语言的流程</title>
      <link href="/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
      <url>/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>再看下文之前，先普及一下 Linux 和 gcc 的历史，下面的这段内容来自于网络。</p><blockquote><p>早在 20 世纪 70 年代，UNIX 系统是开源而且免费的。但是在 1979 年时，AT&amp;T 公司宣布了对 UNIX 系统的商业化计划，随之开源软件业转变成了版权式软件产业，源代码被当作商业机密，成为专利产品，人们再也不能自由地享受科技成果。</p></blockquote><blockquote><p>于是在 1984 年，Richard Stallman 面对于如此封闭的软件创作环境，发起了 GNU 源代码开放计划并制定了著名的 GPL 许可协议。</p></blockquote><blockquote><p>1987 年时，GNU 计划获得了一项重大突破—gcc编译器发布，这使得程序员可以基于该编译器编写出属于自己的开源软件。</p></blockquote><blockquote><p>随之，在 1991 年10 月，芬兰赫尔辛基大学的在校生 Linus Torvalds 编写了一款名为 Linux 的操作系统。该系统因其较高的代码质量且基于 GNU GPL 许可协议的开放源代码特性，迅速得到了 GNU 计划和一大批黑客程序员的支持。</p></blockquote><blockquote><p>随后 Linux 系统便进入了如火如荼的发展阶段。</p></blockquote><blockquote><p>1994 年 1 月，Bob Young 在 Linux 系统内核的基础之上，集成了众多的源代码和程序软件，发布了红帽系统并开始出售技术服务，这进一步推动了 Linux 系统的普及。</p></blockquote><blockquote><p>1998 年以后，随着 GNU 源代码开放计划和 Linux 系统的继续火热，以 IBM 和 Intel 为首的多家 IT 企业巨头开始大力推动开放源代码软件的发展。</p></blockquote><blockquote><p>到了 2017 年年底，Linux 内核已经发展到了 4.13 版本，并且 Linux 系统版本也有数百个之多，但它们依然都使用 Linus Torvalds 开发、维护的Linux 系统内核。RedHat 公司也成为了开源行业及 Linux 系统的带头公司。</p></blockquote><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>这篇博文 <a href="http://blog.csdn.net/veryitman/article/details/7340668">makefile: gcc 工作流程</a> 早期被我放在 CSDN 上面过.时隔多年, 仍不能忘怀, 现乔迁至此.</p><p>本文比较简单, 比较适合初学者.<br>我只是试图以实例的方式给大家讲解一下 GCC 编译链接 C语言程序的流程, 并没有高深的知识.</p><h2 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h2><p>C 语言经过预处理、编译、连接最后生成可执行文件.</p><p>在 Linux 的 GCC 下面，看看其工作流程. 流程图如下：</p><p><img src="/upload/images/2017/10/03/1.jpg" alt="1"></p><p>预处理，将包含的 *.h 文件或者一些预处理语句（如 #define）处理一下，然后将 *.c 文件生成 *.i 的中间文件.</p><blockquote><p>注意了 GCC 不会自动生成这样一个文件，如果需要，自己加 -E 参数即可.</p></blockquote><p>编译、汇编阶段生成 *.o 目标文件，最后经过链接生成可执行文件.</p><blockquote><p>注意：可执行文件不一定是 exe 文件.</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面以一个实例 hello.c，说明这个过程.</p><p><img src="/upload/images/2017/10/03/2.jpg" alt="1"></p><p>源文件很简单，这里只是为了说明问题.</p><p>在命令行，执行下面命令完成预处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc  -E  hello.c  -o  hello.i</span><br></pre></td></tr></table></figure><p>执行之后，你可以打开 hello.i 文件，可以看到很多 extern 以及将 MAX 解释为 20：<br><img src="/upload/images/2017/10/03/3.jpg" alt="1"></p><p>在命令行，执行下面命令, 完成编译阶段:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc  -S  hello.i  -o hello.s</span><br></pre></td></tr></table></figure><p>这时可以生成 *.s 文件，其实就是一些汇编语句，如下所示：<br><img src="/upload/images/2017/10/03/4.jpg" alt="1"></p><p>那麽，我们就可以进入汇编阶段了，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc  -c  hello.s  -o hello.o</span><br></pre></td></tr></table></figure><p>打开这个 hello.o 文件，都是一些机器码.</p><p>最后一个连接生成可执行文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.o -o hello</span><br></pre></td></tr></table></figure><p>在当前目录就可以生成 hello 这个可执行文件.</p><p>执行 .&#x2F;hello，就会输出：<br><img src="/upload/images/2017/10/03/5.jpg" alt="1"></p><p>到此，GCC 编译连接生成可执行文件完毕！</p><p>当前目录下面的文件：<br><img src="/upload/images/2017/10/03/6.jpg" alt="1"></p><p>以上的步骤，其实一句命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc  hello.c  -o  hello</span><br></pre></td></tr></table></figure><p>此时目录内容如下：<br><img src="/upload/images/2017/10/03/7.jpg" alt="1"></p><p>自己动手感受一下，你会收获更多！</p><h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/">GCC: 编译 C 语言的流程</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/">GCC: Homebrew 安装 GCC 和 Binutils</a></p><p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/">GCC: 共享库</a></p><p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/">GCC: 静态库</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GCC C 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS APNs: 处理数据</title>
      <link href="/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/"/>
      <url>/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>博文: <a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/">iOS 细说推送: 远程推送</a> 和 <a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/">iOS 细说推送: 本地推送</a><br>分别介绍了 iOS 的两种典型推送, iOS 还有很多类型的推送, 如静默推送, VOIP 推送(iOS8)等, 后面会慢慢介绍给大家.</p><p>今天跟大家聊聊关于如何处理推送的数据(payload).</p><p>该系列博客:</p><blockquote><p><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/">iOS APNs: 远程推送</a><br><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/">iOS APNs: 本地推送</a><br>iOS APNs: 处理数据(本篇)<br><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/">iOS APNs: 静默推送</a><br><a href="http://www.veryitman.com/2018/02/08/iOS-APNs-Background-Fetch/">iOS APNs: Background Fetch</a></p></blockquote><h2 id="推送的代理回调时机"><a href="#推送的代理回调时机" class="headerlink" title="推送的代理回调时机"></a>推送的代理回调时机</h2><p>还记得 AppDelegate 里面关于推送的几个代理方法吧.<br>~ 估计你也忘记了, 没关系, 我们再一起整理一下.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;markApp push. RemotePush userInfo: %@&quot;, userInfo);</span><br><span class="line">    </span><br><span class="line">    // 可以根据推送内容决定下一步的行为</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法在接收到 RemotePush 的时候, 调用时机:</p><p>1.APP 在前台运行的, RemotePush 被推送过来了.<br>2.APP 在后台运行, 无论是否被挂起只要没有被杀死, 点击推送内容.</p><p>以上两种情况均可以进入 didReceiveRemoteNotification 方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App push. LocalPush notification: %@&quot;, notification);</span><br><span class="line">    </span><br><span class="line">    // 可以根据推送内容决定下一步的行为</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法接收到 LocalPush 的时候, 调用时机:</p><p>1.APP 在前台运行的, LocalPush 被推送过来了.<br>2.APP 在后台运行, 无论是否被挂起只要没有被杀死, 点击推送内容.</p><p>以上两种情况均可以进入 didReceiveLocalNotification 方法.</p><p>这两个回调方法, 分别接收 RemotePush 和 LocalPush 的推送消息.</p><p>有些人会问了, 假如这个时候我的应用在后台, 被系统杀死了或者被用户双击 Home 键杀死了, 此时远程推送过来了, 或者状态栏里面有本地推送的消息, 我点击推送消息, 这两个方法会被调用吗?</p><p>类似这种效果, 上面是 RemotePush, 下面是 LocalPush.</p><p><img src="/upload/images/2017/08/07/1.jpg" alt="1"></p><p>我肯定的告诉大家, 应用被杀死的情况下, 点击推送内容, didReceiveRemoteNotification 和 didReceiveLocalNotification 都不会被调用.</p><p>这个时候, AppDelegate 中的另一个方法上场了.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application </span><br><span class="line">didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br></pre></td></tr></table></figure><p>看一下 didFinishLaunchingWithOptions 的具体实现, 示例代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    </span><br><span class="line">    /// 将应用图标的 badge 清零</span><br><span class="line">    &#123;</span><br><span class="line">        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:1];</span><br><span class="line">        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];</span><br><span class="line">        [[UIApplication sharedApplication] cancelAllLocalNotifications];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (nil != launchOptions) &#123;</span><br><span class="line">        /// 处理 LocalPush</span><br><span class="line">        &#123;</span><br><span class="line">            // 这里可以得到 UILocalNotification 对象</span><br><span class="line">            id localPushNotify = [launchOptions objectForKey:UIApplicationLaunchOptionsLocalNotificationKey];</span><br><span class="line">            </span><br><span class="line">            MZLOG(@&quot;AppDelegate localPush: %@&quot;, localPushNotify);</span><br><span class="line">            </span><br><span class="line">            if (nil != localPushNotify) &#123;</span><br><span class="line">                if ([localPushNotify isKindOfClass:[UILocalNotification class]]) &#123;</span><br><span class="line">                    // 获取 userinfo 数据</span><br><span class="line">                    NSDictionary *userInfo = [(UILocalNotification *)localPushNotify userInfo];</span><br><span class="line">                    MZLOG(@&quot;AppDelegate localPush of UILocalNotification: %@&quot;, userInfo);</span><br><span class="line">                    </span><br><span class="line">                    // 根据 userInfo 的内容处理如页面跳转等</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /// 处理 RemotePush</span><br><span class="line">        &#123;</span><br><span class="line">            NSDictionary *remotePushNotify = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];</span><br><span class="line">            MZLOG(@&quot;AppDelegate remotePush: %@&quot;, remotePushNotify);</span><br><span class="line">            </span><br><span class="line">            if (nil != remotePushNotify) &#123;</span><br><span class="line">                NSDictionary *remoteAps = [remotePushNotify objectForKey:@&quot;aps&quot;];</span><br><span class="line">                MZLOG(@&quot;AppDelegate remotePush. The aps&#x27; info, alert: %@, badge: %@, sound: %@&quot;,</span><br><span class="line">                      [remoteAps objectForKey:@&quot;alert&quot;],</span><br><span class="line">                      [remoteAps objectForKey:@&quot;badge&quot;], [remoteAps objectForKey:@&quot;sound&quot;]);</span><br><span class="line">// 根据推送的内容处理如页面跳转等</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;AppDelegate. launchOptions: %@&quot;, launchOptions);</span><br><span class="line">    </span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的打印输出内容, 如下</p><p>本地推送的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> AppDelegate localPush of UILocalNotification: &#123;</span><br><span class="line">    &quot;user_info_key&quot; = &quot;user_info_value_json_str&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程推送的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aps = &#123;</span><br><span class="line">alert = &quot;Testing.. (2)&quot;;</span><br><span class="line">badge = 1;</span><br><span class="line">sound = default;</span><br><span class="line">      &#125;;</span><br><span class="line">            </span><br><span class="line">The aps&#x27; info, alert: Testing.. (19), badge: 1, sound: default</span><br></pre></td></tr></table></figure><h2 id="自定义推送内容"><a href="#自定义推送内容" class="headerlink" title="自定义推送内容"></a>自定义推送内容</h2><blockquote><p>对于推送的数据格式, 是苹果规定的格式, 我们可以在其基础上添加我们需要的数据.</p></blockquote><p>在介绍下面内容之前, 先了解一下什么是 payload.</p><blockquote><p>payload 是推送通知的一部分，每一条推送通知都包含一个 Payload.<br>它包含了系统提醒用户通知到达的方式，还可以添加自定义的数据, 即通知主要传递的数据为 payload.</p></blockquote><blockquote><p>Payload 本身为 JSON 格式的字符串，它内部必须要包含一个键为 aps 的字典.也就是说 payload 是整个字符串.</p></blockquote><p>关于 payload 的限制</p><p>在早期的推送中, payload 不能超过 256bytes, 中间还经历过推送的 payload 最大为 2KB.<br>现在苹果支持最大为5KB(VOIP 推送), 官方文档有说, 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For regular remote notifications, the maximum size is 4KB (4096 bytes)</span><br><span class="line">For Voice over Internet Protocol (VoIP) notifications, the maximum size is 5KB (5120 bytes)</span><br><span class="line">NOTE</span><br><span class="line">If you are using the legacy APNs binary interface to send notifications instead of an HTTP/2 request, the maximum payload size is 2KB (2048 bytes)</span><br></pre></td></tr></table></figure><p>上面是 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1">官方文档</a> 的原文, 大概意思是:</p><blockquote><p>现在 APNs 支持 payload 为 4KB, 如果是 VoIP 推送的话, 支持 5KB. 但是, 如果你使用传统的 APNs 而不是使用 HTTP&#x2F;2 的话, 最大支持 2KB. 也就是说, 推送的 payload 大小和 iOS 系统无关, 而是和协议有关.</p></blockquote><p>可以使用下面代码, 查看 payload 长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload.getBytes().length</span><br></pre></td></tr></table></figure><p>我们正常的推送内容是这样的, 正常格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;aps&quot;:&#123;&quot;alert&quot;:&quot;Testing.. (21)&quot;,&quot;badge&quot;:1,&quot;sound&quot;:&quot;default&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果想对推送内容做自定义, 可以自己添加额外的数据, 如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;aps&quot;:&#123;&quot;alert&quot;:&quot;Testing.. (21)&quot;,&quot;badge&quot;:1,&quot;sound&quot;:&quot;default&quot;&#125;, &quot;ext&quot;:&#123;&quot;key&quot;:&quot;value&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中, ext 就是额外添加的数据模型.</p><p>在 APP 收到这样的数据模型时, 可以对应不同的行为.</p><p>大家可以根据自己的业务需求, 自行定义数据格式.</p><p>自定义的数据格式, 注意内容的长度, 在不同的 iOS 系统上面, 对于推送的内容是有长度限制的.</p><h2 id="再唠叨几句"><a href="#再唠叨几句" class="headerlink" title="再唠叨几句"></a>再唠叨几句</h2><p>关于 iOS7 以后添加的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application </span><br><span class="line">didReceiveRemoteNotification:(NSDictionary *)userInfo </span><br><span class="line">fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler</span><br></pre></td></tr></table></figure><p>这个方法也是在 AppDelegate 中实现的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application </span><br><span class="line">didReceiveRemoteNotification:(NSDictionary *)userInfo</span><br></pre></td></tr></table></figure><p>这个方法在 iOS3 就已经有了, 可谓是历史悠久.我姑且称之为该方法为 FatherMethod, 上面那个新加入的称之为 SonMethod.</p><p><strong>注意事项:</strong></p><p>[1]. 实现了 FatherMethod, 即使你实现了 SonMethod, SonMethod 也不会被调用.<br>[2]. SonMethod 比 FatherMethod 多了一个参数 completionHandler, 这个在后面会说到.主要用于 Background Mode 中的 Background Fetch.<br>[3]. 推送被调用的时机, 除了 FatherMethod 的时机外, 还多了一种时机, 就是在 APP 被杀死后, 点击推送内容打开 APP, 此时 APP 再次回到前台的时候, 该方法也会被调用(didFinishLaunchingWithOptions也会调用), 所以在处理远程推送内容的时候, 要注意这一点.</p><p>针对注意事项[3], 目前我能给出的有两种解决方案:</p><p>第一, 判断是否是第一次启动 APP, 如果是第一次启动 APP, 统一在didFinishLaunchingWithOptions 中处理, 不在 SonMethod 中处理.</p><p>第二, 远程推送统一在 SonMethod 中处理, didFinishLaunchingWithOptions 中只处理在 APP 被杀死的情况下, 用户点击推送本地的内容.</p><p>我个人采用的是第二中方案.</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>在推送工具 NWPusher 和 Xcode 的 Window&#x2F;Devices&#x2F;Console 帮助下, 才得以完善博文.</p><p>NWPusher 用来发送推送内容.</p><p>Window&#x2F;Devices&#x2F;Console 用于查看输出日志.</p><h2 id="必看文档"><a href="#必看文档" class="headerlink" title="必看文档"></a>必看文档</h2><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1">Creating the Remote Notification Payload</a></p><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html#//apple_ref/doc/uid/TP40008194-CH17-SW1">Payload Key Reference</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APNs 推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS APNs: 本地推送</title>
      <link href="/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/"/>
      <url>/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p><code>iOS APNs: 远程推送</code> 说过远程推送(RemotePush).</p><p>今天说说本地推送, 本地推送也就是平时所说的 LocalPush.</p><p>该系列博客:</p><blockquote><ul><li><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/">iOS APNs: 远程推送</a></li></ul></blockquote><ul><li>iOS APNs: 本地推送(本篇)</li><li><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/">iOS APNs: 处理数据</a></li><li><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/">iOS APNs: 静默推送</a></li><li><a href="http://www.veryitman.com/2018/02/08/iOS-APNs-Background-Fetch/">iOS APNs: Background Fetch</a></li></ul><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>在具体实现之前, 先说一下业务场景.</p><p>假如你的 APP 具有 IM(即时通讯) 功能, 这个时候, 你可以根据连接来判断用户是否在线, 如果不在线, 可以使用远程推送将推送内容告知用户.如果在线, 可以通过 IM 把内容告诉 APP, APP 收到这个消息后, 可以使用本地推送告知给用户.</p><p>据说 APNs 每天要处理的推送在亿级别, 所以如果可以使用 LocalPush 完成的业务, 我建议大家还是不要使用远程推送, 况且苹果并不一定保证远程推送一定成功, 如果网络或者 APNs 压力大, 推送也会延时.</p><p>给苹果减少点压力吧, 哈哈!</p><p>再说一个业务场景, 你的 APP 在后台运行时间快到要被系统挂起的时候了, 你可以发送一个 LocalPush 来提示用户或者刺激用户, 再次将 APP 拉回前台运行. 这样可以保证 APP 可以正常运行了.</p><p>上面说的第二个业务场景, 是今天例子的基础, 你也可以根据自己的实际业务场景来使用 LocalPush 功能.</p><h2 id="LocalPush-简介"><a href="#LocalPush-简介" class="headerlink" title="LocalPush 简介"></a>LocalPush 简介</h2><p>LocalPush 允许 APP 向用户发送通知, 对于用户来说, 就跟远程推送是一样的, 基本没有感知, 开发者也不希望用户有感知.</p><p>推送效果图:</p><p><img src="/upload/images/2017/08/06/1.png" alt="1"></p><blockquote><p>注意: 如果你的 APP 在前台, 发送 LocalPush 是不会要上述效果的.<br>如果在前台, 可以使用自定义的弹框来提示用户.</p></blockquote><p>LocalPush 同样需要用户授权推送的权限, 否则也无法发送成功.这个跟远程推送是一样的.</p><p>另外, LocalPush 需要 APP 在后台没有被挂起的情况下, 才能发送, 否则无法启用.</p><p>发送 LocalPush 的一个好处是不需要用户连接网络, 这个是区别于远程推送的, 因为远程推送必须要求用户连接网络的.很多单机游戏或者弱联网的游戏, 发送的推送都是 LocalPush, 而非远程推送.</p><p>在阅读下面内容之前, 建议大家先看看 iOS 后台模式 这篇文章.本篇也是基于这个为基础的.</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这个示例, 实现的场景如下:</p><p>用户打开 APP, 授权了推送的权限, 用户试玩一会之后, 将 APP 退到了后台, APP 监听退到后台之后, 延时一定时间发送 LocalPush 给用户.</p><p>AppDelegate.m 中使用后台模式</p><p>关于 MZBackgroundTask 的实现, 附录给出.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)applicationDidEnterBackground:(UIApplication *)application &#123;</span><br><span class="line">    </span><br><span class="line">    [[MZBackgroundTask sharedTask] startTask];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ViewController.m</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">                                             selector:@selector(onDidEnterBackground:)</span><br><span class="line">                                                 name:UIApplicationDidEnterBackgroundNotification</span><br><span class="line">                                               object:nil];</span><br><span class="line">&#125;</span><br><span class="line">- (void)onDidEnterBackground:(NSNotification *)notification &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App Background. Enter onDidEnterBackground.&quot;);</span><br><span class="line">    </span><br><span class="line">    // 等待 6s 后, 这个时间可以根据具体情况去修改, 这里只是模拟</span><br><span class="line">    int delta = 6;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delta * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;App Background. Enter onDidEnterBackground diapatch.&quot;);</span><br><span class="line">        </span><br><span class="line">        if (UIApplicationStateBackground == [UIApplication sharedApplication].applicationState) &#123;</span><br><span class="line">            UILocalNotification *notification = [UILocalNotification new];</span><br><span class="line">            notification.alertBody = @&quot;走, 去high吧!&quot;;</span><br><span class="line">            notification.soundName = UILocalNotificationDefaultSoundName;</span><br><span class="line">            // 应用图标上面显示的数字</span><br><span class="line">            notification.applicationIconBadgeNumber = notification.applicationIconBadgeNumber + 1;</span><br><span class="line">            // 可以自定义数据</span><br><span class="line">            notification.userInfo = @&#123;@&quot;user_info_key&quot;: @&quot;user_info_value_json_str&quot;&#125;;</span><br><span class="line">            </span><br><span class="line">            [[UIApplication sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        // 显示自定义弹框等</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 APP 点击 Home 键退到后台, 6s 后可以看到推送的效果.</p><p>点击推送的提示框, 再次打开了 APP, 会执行 AppDelegate 中的方法, 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App push. notification: %@&quot;, notification);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出来的 notification, 如下图所示:</p><p><img src="/upload/images/2017/08/06/2.jpg" alt="1"></p><p>其中, user_info 是我们自定义的数据部分.</p><p>附录</p><blockquote><p>MZBackgroundTask 实现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;MZBackgroundTask.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation MZBackgroundTask</span><br><span class="line"></span><br><span class="line">+ (instancetype)sharedTask &#123;</span><br><span class="line">    </span><br><span class="line">    static MZBackgroundTask *_task;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        _task = [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return _task;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)startTask &#123;</span><br><span class="line">    </span><br><span class="line">    if (![self _checkSupportBackgroundTask]) &#123;</span><br><span class="line">        MZLOG(@&quot;BackgroundTask. Current device don&#x27;t support backgroundTask.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIApplication *application = [UIApplication sharedApplication];</span><br><span class="line">    </span><br><span class="line">    __block UIBackgroundTaskIdentifier taskId;</span><br><span class="line">    </span><br><span class="line">    /// 申请后台执行</span><br><span class="line">    /// 注意: 在iOS7和该版本前，后台可以用下面的的方式在后台存活5-10分钟，在iOS8及后，最多存活3分钟</span><br><span class="line">    &#123;</span><br><span class="line">        taskId = [application beginBackgroundTaskWithName:NSStringFromClass([self class]) expirationHandler:^&#123;</span><br><span class="line">            </span><br><span class="line">            MZLOG(@&quot;BackgroundTask. BackgroundTask is Over. The remained time: %f&quot;, application.backgroundTimeRemaining);</span><br><span class="line">            </span><br><span class="line">            [application endBackgroundTask:taskId];</span><br><span class="line">            </span><br><span class="line">            taskId = UIBackgroundTaskInvalid;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (UIBackgroundTaskInvalid == taskId) &#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;BackgroundTask. Apply backgroundTask failed.&quot;);</span><br><span class="line">        </span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /// 可以监控后台任务剩余的时间, 针对业务可以去处理</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">            </span><br><span class="line">            while (true) &#123;</span><br><span class="line">                // 剩余可以后台执行的时间</span><br><span class="line">                NSTimeInterval remainedTime = application.backgroundTimeRemaining;</span><br><span class="line">                MZLOG(@&quot;BackgroundTask. The remained time: %f&quot;, remainedTime);</span><br><span class="line">                </span><br><span class="line">                if (remainedTime &lt; 2) &#123;</span><br><span class="line">                    // 可以告诉其他业务, 后台任务即将结束了</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                // 睡眠(延时)1s</span><br><span class="line">                [NSThread sleepForTimeInterval:1.f];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            /// 这里可以做一些清除工作</span><br><span class="line">            &#123;</span><br><span class="line">                // clean up</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            [application endBackgroundTask:taskId];</span><br><span class="line">            </span><br><span class="line">            taskId = UIBackgroundTaskInvalid;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Private.</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  当前设备是否支持后台任务.</span><br><span class="line"> *</span><br><span class="line"> *  @return YES, 支持后台任务. 否则, 不支持后台任务.</span><br><span class="line"> */</span><br><span class="line">- (BOOL)_checkSupportBackgroundTask &#123;</span><br><span class="line">    </span><br><span class="line">    SEL sel = @selector(isMultitaskingSupported);</span><br><span class="line">    BOOL supportBTask = [[UIDevice currentDevice] respondsToSelector:sel];</span><br><span class="line">    </span><br><span class="line">    return supportBTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APNs 远程推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS APNs: 远程推送</title>
      <link href="/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/"/>
      <url>/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本篇博文, 你首先需要知道的内容:</p><blockquote><p>1.了解过 Push.<br>2.阅读过 [iOS 后台模式] 这篇文章.<br>3.申请过苹果证书或者知道如何申请和制作证书.<br>4.iOS 开发基本知识.</p></blockquote><p>你在这篇博文将会学到:</p><blockquote><p>1.Push 的发展历程.<br>2.开源推送工具 NWPusher 的使用.<br>3.Push 的基本原理.</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>APNs, 苹果推送通知服务. 全称是: Apple Push Notification Service.</p><p>推送指的是由 APNs 服务器、ProviderService、iOS 系统、App 构成的通讯系统，也是移动互联网与传统的 Web 最明显不同的.</p><p>官方有比较详细的文档介绍, 可以戳这里 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1">官方文档</a> 查看.</p><p>苹果的文档写的确实好, 但是作为程序员, 最重要的还是要结合理论去实践.</p><p>本篇结合自己的实践和对推送的理解, 跟大家分享一下推送相关的知识.</p><h2 id="Push-发展历程"><a href="#Push-发展历程" class="headerlink" title="Push 发展历程"></a>Push 发展历程</h2><p>iOS 历经很多版本, 一直在优化或者说是进化推送相关的内容, 无论是从实用性和技术上来看, 推送是至关重要的.</p><p>看一下 push 发展历程</p><ul><li><p>iOS 3 - 引入推送通知 UIApplication 的 registerForRemoteNotificationTypes 与 UIApplicationDelegate 的 application(:didRegisterForRemoteNotificationsWithDeviceToken:)，application(:didReceiveRemoteNotification:)</p></li><li><p>iOS 4 - 引入本地通知 scheduleLocalNotification，presentLocalNotificationNow:， application(_:didReceive:)</p></li><li><p>iOS 5 - 加入通知中心页面</p></li><li><p>iOS 6 - 通知中心页面与 iCloud 同步</p></li><li><p>iOS 7 - 后台静默推送 application(_:didReceiveRemoteNotification:fetchCompletionHandle:)</p></li><li><p>iOS 8 - 重新设计 notification 权限请求，Actionable 通知 registerUserNotificationSettings(:)，UIUserNotificationAction 与 UIUserNotificationCategory，application(:handleActionWithIdentifier:forRemoteNotification:completionHandler:) 等</p></li><li><p>iOS 9 - Text Input action，基于 HTTP&#x2F;2 的推送请求 UIUserNotificationActionBehavior，全新的 Provider API 等</p></li><li><p>iOS 10- 支持Images, GIFs, Audio and Video类型, 并且有 Notification Service Extension 与 Notification Content Extension，可以实现推送数据在展示前进行下载更新、定制通知 UI, 并且统一了通知类型，具有时间间隔通知、地理位置通知和日历通知.</p></li></ul><p>该系列博客共分为几个部分:</p><ul><li>iOS APNs: 远程推送(本篇)</li><li><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/">iOS APNs: 本地推送</a></li><li><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/">iOS APNs: 处理数据</a></li><li><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/">iOS APNs: 静默推送</a></li><li><a href="http://www.veryitman.com/2018/02/08/iOS-APNs-Background-Fetch/">iOS APNs: Background Fetch</a></li></ul><p>如果需要完整源码的, 可以通过邮件联系我(<a href="mailto:&#118;&#x65;&#x72;&#x69;&#x74;&#x6d;&#97;&#110;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#111;&#109;">&#118;&#x65;&#x72;&#x69;&#x74;&#x6d;&#97;&#110;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#111;&#109;</a>), 后续完成后会上传到 github.</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先看官方的流程图, 如下所示:</p><p><img src="/upload/images/2017/08/05/1.jpg" alt="1"></p><p>该流程图, 主要说明的是自己 业务服务器(Provider) 推送消息到用户(Client APP) 的流程.</p><p>注意: 这里说的以及本文后面说的 业务服务器, 统一指的是可以向 APNs 发送推送消息的服务器.</p><p>下面这张图是比较完整的一张流程图, 自己画的, 凑合看吧!</p><p><img src="/upload/images/2017/08/05/2.jpg" alt="1"></p><p>大概流程, 我详细说一下.</p><p>1.iOS 设备启动后连接网络, 会与苹果服务器建立一个安全的长连接.<br>这个是系统维护的, 这也是推送的关键.<br>2.用户打开 app, 授权了推送通知的权限.<br>3.授权成功后, APNs 会将 deviceToken 返回给 iOS 终端.<br>4.终端将该 deviceToken 返回给指定的 APP.<br>5.APP 拿到 deviceToken 上传给我们自己的业务服务器.<br>6.业务服务器向 APNs 发送推送请求, 带上 deviceToken.<br>7.APNs 推送内容到指定的 iOS 终端.<br>8.iOS 终端将内容推送给用户.</p><p>关于 deviceToken 后面会讲.</p><h2 id="关于-deviceToken"><a href="#关于-deviceToken" class="headerlink" title="关于 deviceToken"></a>关于 deviceToken</h2><p>这里简单介绍一下 deviceToken.</p><blockquote><p>deviceToken 是 NSData 类型的数据, 是苹果服务器根据 设备,证书等信息和一定算法生成的.<br>需要将这个 deviceToken 传送给我们的服务器端, 这样一个用户对象就绑定了一个 deviceToken.<br>当需要给用户推送消息, 通过自己的业务服务器, 找用户对应的 deviceToken 和要发送的推送内容, 发送到苹果的 APNs, 然后 APNs 将消息推送到该 deviceToken 对应的手机上.</p></blockquote><p>关于 deviceToken 是否可变的问题</p><p>网上有些人说, deviceToken 是可变的, 有些人说, deviceToken 是不可变的, 我也不知道他们到底有没有实践过, 今天我要告诉大家的是, deviceToken 是可变的.</p><p>如卸载重装 app, deviceToken 会变. 我的设备 iphone6, iOS10.3.</p><p>下面是我实验的数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一次安装运行得到的 deviceToken</span><br><span class="line"></span><br><span class="line">&lt;4e0f2928 5be0700c=&quot;&quot; 296bf7f1=&quot;&quot; 3b0837e4=&quot;&quot; bc9da6d1=&quot;&quot; 9fdb672e=&quot;&quot; f87446be=&quot;&quot; 1c098431=&quot;&quot;&gt;</span><br><span class="line">卸载后, 第一次安装运行得到的 deviceToken</span><br></pre></td></tr></table></figure><p>这说明, deviceToken 是可变的.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>上面基本都是一些理论知识, 下面结合代码, 具体实现.</p><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3><p>在写代码之前, 需要配置一下工程.关于如何创建带有 push 功能的苹果证书的操作, 大家自行去网上学习, 这里不赘述.</p><p>不过这里要提醒一点, 创建的证书一定要和自己项目的 appid 保持一致, 否则无法推送.</p><p>这个 Demo 工程的名字是 MZPush.</p><p>安装好证书, 打开工程, 并能让工程识别到.</p><p>切换到 Target, 点击 Capabilities 选项.</p><p>步骤1: 配置 Push, 打开开关即可.</p><p><img src="/upload/images/2017/08/05/3.jpg" alt="1"></p><p>配置后台模式, 打开开关, 选中Remote notifications.</p><p><img src="/upload/images/2017/08/05/4.jpg" alt="1"></p><p>不过这一步, 不是必须的, 如果你不配置, 工程会有警告.我建议是选上, 在后面的博文中, 再仔细说说这个东西的好处.</p><p>警告信息如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You&#x27;ve implemented -[&lt;UIApplicationDelegate&gt; application:didReceiveRemoteNotification:fetchCompletionHandler:], </span><br><span class="line">but you still need to add &quot;remote-notification&quot; to the list of your supported UIBackgroundModes in your Info.plist.</span><br></pre></td></tr></table></figure><p>步骤2: 配置完这一步后,在 Info.plist 中可以看到多了一项内容:</p><p><img src="/upload/images/2017/08/05/5.jpg" alt="1"></p><p>步骤3: 配置工程最小兼容版本</p><p><img src="/upload/images/2017/08/05/6.jpg" alt="1"></p><p>因为我要兼容 iOS7, 所以在 Xcode8 中, 自己手动改为了 7.0.</p><p>步骤4: 关闭 Bitcode(可选操作)</p><p><img src="/upload/images/2017/08/05/7.jpg" alt="1"></p><p>步骤5: 配置支持 HTTP(可选操作)</p><p>在 Info.plist 中, 添加如下:</p><p><img src="/upload/images/2017/08/05/8.jpg" alt="1"></p><h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><p>询问用户授权的实现</p><p>该实现兼容了 iOS7.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+ (void)applyPushPermission &#123;</span><br><span class="line">    </span><br><span class="line">    UIApplication *application = [UIApplication sharedApplication];</span><br><span class="line">    </span><br><span class="line">    if (MZSysVersion &lt;= 7.0) &#123;</span><br><span class="line">        UIRemoteNotificationType nType = UIRemoteNotificationTypeAlert|UIRemoteNotificationTypeBadge|UIRemoteNotificationTypeSound;</span><br><span class="line">        [application registerForRemoteNotificationTypes:nType];</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        UIUserNotificationType nType =  UIUserNotificationTypeBadge|UIUserNotificationTypeSound|UIUserNotificationTypeAlert;</span><br><span class="line">        UIUserNotificationSettings *nSettings = [UIUserNotificationSettings settingsForTypes:nType categories:nil];</span><br><span class="line">        [application registerUserNotificationSettings:nSettings];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于用户授权, 分几种情况来看待.</p><p>情景一. 用户不允许 APP 推送, 即不授权.</p><p>Appdelegate 代理调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App push. notificationSettings: %@&quot;, notificationSettings);</span><br><span class="line">    </span><br><span class="line">    [application registerForRemoteNotifications];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</span><br></pre></td></tr></table></figure><p>error 信息大概如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error Domain=NSCocoaErrorDomain Code=3000 &quot;未找到应用程序的“aps-environment”的授权字符串&quot;</span><br><span class="line">UserInfo=&#123;NSLocalizedDescription=未找到应用程序的“aps-environment”的授权字符串&#125;</span><br></pre></td></tr></table></figure><p>情景二. 用户允许授权了, 又分为两种情况</p><p>1.使用具有 push 功能的证书</p><p>一定要有带有 push 功能的证书.</p><p>代理调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App push. notificationSettings: %@&quot;, notificationSettings);</span><br><span class="line">    </span><br><span class="line">    [application registerForRemoteNotifications];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法大概在上面回调 1s 后才会调用.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App push. deviceToken: %@&quot;, deviceToken);</span><br><span class="line">    </span><br><span class="line">    // 格式化该数据</span><br><span class="line">    NSString *deviceTokenStr = [NSString stringWithFormat:@&quot;%@&quot;, deviceToken];</span><br><span class="line">    deviceTokenStr = [deviceTokenStr stringByReplacingOccurrencesOfString:@&quot;&lt;&quot; withString:@&quot;&quot;];</span><br><span class="line">    deviceTokenStr = [deviceTokenStr stringByReplacingOccurrencesOfString:@&quot;&gt;&quot; withString:@&quot;&quot;];</span><br><span class="line">    deviceTokenStr = [deviceTokenStr stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</span><br><span class="line">    MZLOG(@&quot;App push. deviceToken string: %@&quot;, deviceTokenStr);</span><br><span class="line">    </span><br><span class="line">    // 可以上传该 token 到自己的业务服务器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 didRegisterForRemoteNotificationsWithDeviceToken 方法中可以得到 deviceToken 信息:</p><p><img src="/upload/images/2017/08/05/9.jpg" alt="1"></p><p>注意: 代码中将 NSData 的 deviceToken 转换为了 NSString 类型的数据类型.</p><p>2.使用一般的证书, 没有 push 功能的证书</p><p>这种情况和 <code>情景一</code> 一样.</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>万事俱备, 只欠东风了.</p><p>今天没有准备搭建一个自己的业务服务器去推送, 可以使用推送工具来替代.</p><p>安装 <a href="https://github.com/noodlewerk/NWPusher">NWPusher</a> 这个工具, 可以进行推送测试.</p><p>安装成功后, 打开这个 Mac APP, 填写相关信息.</p><p>点击 push 即可推送.</p><p><img src="/upload/images/2017/08/05/10.jpg" alt="1"></p><p>在 Appdelegate 中的代理回调中, 可以打印推送内容.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App push. userInfo: %@&quot;, userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推送的内容, 如下图所示.</p><p><img src="/upload/images/2017/08/05/11.jpg" alt="1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    aps =     &#123;</span><br><span class="line">        alert = &quot;Testing.. (6)&quot;;</span><br><span class="line">        badge = 1;</span><br><span class="line">        sound = default;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>1.<a href="https://onevcat.com/2016/08/notification/">活久见的重构 - iOS 10 UserNotifications 框架解析</a></p><p>2.<a href="http://www.jianshu.com/p/ace1b422bad4">国内 90%以上的 iOS 开发者，对 APNs 的认识都是错的</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推送 APNs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 后台模式</title>
      <link href="/2017/07/30/iOS-%E5%90%8E%E5%8F%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/07/30/iOS-%E5%90%8E%E5%8F%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="应用状态"><a href="#应用状态" class="headerlink" title="应用状态"></a>应用状态</h2><p>来自苹果开发者文档 The App Life Cycle 的图.</p><p><img src="/upload/images/2017/07/30/Background1.jpg" alt="1"></p><p>下面这张图说明了应用程序的状态, 如下所示:</p><p><img src="/upload/images/2017/07/30/Background2.jpg" alt="1"></p><p>具体的说一下这5中状态:</p><p>1.Not running</p><blockquote><p>未运行, 程序没启动或者被系统被用户杀死</p></blockquote><p>2.Inactive</p><blockquote><p>未激活, 程序在前台运行，不过没有接收到事件.<br>在没有事件处理情况下程序通常停留在这个状态.</p></blockquote><p>3.Active</p><blockquote><p>激活, 程序在前台运行而且接收到了事件.<br>这也是前台的一个正常的模式</p></blockquote><p>4.Backgroud</p><blockquote><p>后台, 程序在后台而且能执行代码，大多数程序进入这个状态后会在在这个状态上停留一会.<br>时间到之后会进入挂起状态(Suspended). 有的程序经过特殊的请求后可以长期处于 Backgroud 状态.</p></blockquote><p>5.Suspended</p><blockquote><p>挂起, 程序在后台不能执行代码.<br>系统会自动把程序变成这个状态而且不会发出通知.<br>当挂起时, 程序还是停留在内存中的, 当系统内存低时, 系统就把挂起的程序清除掉, 为前台程序提供更多的内存.</p></blockquote><p>关于 Backgroud 状态, 是我们今天要说的重点部分.</p><h2 id="多任务介绍"><a href="#多任务介绍" class="headerlink" title="多任务介绍"></a>多任务介绍</h2><p>iOS 的多任务是在 iOS4 的时候被引入的，在此之前 iOS 的 APP 都是按下 Home 键就被干掉了.<br>iOS4 虽然引入了后台和多任务，但是实际上是伪多任务，一般的 APP 后台并不能执行自己的代码，只有少数几类服务在通过注册后可以真正在后台运行，并且在提交到 AppStore 的时候也会被严格审核是否有越权行为，这种限制主要是出于对于设备的续航和安全两方面进行的考虑.之后经过iOS5 和 iOS6 的逐渐发展，后台能运行的服务的种类虽然出现了增加，但是 iOS 后台的本质并没有变化.<br>在iOS7之前，系统所接受的应用多任务可以大致分为几种：</p><ul><li>后台完成某些花费时间的特定任务.</li><li>后台播放音乐等.</li><li>位置服务.</li><li>IP电话(VOIP).</li><li>Newsstand.</li></ul><p>iOS7 后台任务申请的最长时间 10分钟.<br>iOS8+ 后台任务申请最长时间 3分钟.</p><h2 id="示例-APP-退到后台会被挂起"><a href="#示例-APP-退到后台会被挂起" class="headerlink" title="示例: APP 退到后台会被挂起"></a>示例: APP 退到后台会被挂起</h2><p>今天跟大家分享的是一般应用如何在后台延长生命周期的知识, 关于其他特殊的 App 如上面提到的5中情况, 不是今天讨论的重点.</p><p>我们先看一个例子, 例子很简单.</p><blockquote><p>这里要说明一下概念, 直接锁屏和点击 Home 键, 都会导致应用处于后台模式, 这里为了说明问题, 统一点<br>击 Home 作为代名词.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidLoad];    </span><br><span class="line">    </span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">                                             selector:@selector(onDidEnterBackground:)</span><br><span class="line">                                                 name:UIApplicationDidEnterBackgroundNotification</span><br><span class="line">                                               object:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)onDidEnterBackground:(NSNotification *)notification &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App Background. Enter onDidEnterBackground.&quot;);</span><br><span class="line">    </span><br><span class="line">    int delta = 1;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delta * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;App Background. Enter onDidEnterBackground diapatch.&quot;);</span><br><span class="line">        </span><br><span class="line">        UILocalNotification *notification = [UILocalNotification new];</span><br><span class="line">        notification.fireDate = [NSDate dateWithTimeIntervalSinceNow:3];</span><br><span class="line">        notification.alertBody = @&quot;走, 去high吧!&quot;;</span><br><span class="line">        notification.soundName = UILocalNotificationDefaultSoundName;</span><br><span class="line">        // 可以自定义数据</span><br><span class="line">        notification.userInfo = @&#123;@&quot;user_info_key&quot;: @&quot;user_info_value_json_str&quot;&#125;;</span><br><span class="line">        </span><br><span class="line">        [[UIApplication sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UIApplicationDidEnterBackgroundNotification</code> 可以监听到用户将 APP 退到后台.</p><p>当 APP 退到后台, 会调用 onDidEnterBackground 这个方法.</p><p>在 onDidEnterBackground 这个方法中, 我故意延时执行代码, 这里使用的是 dispatch_after.</p><p>编译运行这个工程, 运行成功后, 可以点击 Home 键将应用退到后台.</p><p>可以在 Xcode 的控制台看到 App Background. Enter onDidEnterBackground. 的打印信息, 但是迟迟不见 dispatch_after 里面的代码执行.</p><p>这里说明, APP 退到后台后被系统挂起了.</p><p>另外一个例子就是使用 NSTimer, 在 APP 退到后台后, 也会被终止.</p><p>完整例子, 一会在文章后台附录给出.</p><h2 id="通过后台模式延长-APP-运行"><a href="#通过后台模式延长-APP-运行" class="headerlink" title="通过后台模式延长 APP 运行"></a>通过后台模式延长 APP 运行</h2><p>上面的例子充分说明了, 在我们没有做任何处理的情况下, iOS 系统在 APP 退到后台的情况下, 会被系统挂起, 从而终止 APP 的代码行为.</p><p>下面通过实例, 来开启后台任务, 让 APP 尽可能的延长声明周期.</p><p>在工程的基础上, 新建一个文件 <code>MZBackgroundTask</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@interface MZBackgroundTask : NSObject</span><br><span class="line">+ (instancetype)sharedTask;</span><br><span class="line">- (void)startTask;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>具体实现, 只给出关键代码.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">- (void)startTask &#123;</span><br><span class="line">    </span><br><span class="line">    if (![self _checkSupportBackgroundTask]) &#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;BackgroundTask. Current device don&#x27;t support backgroundTask.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIApplication *application = [UIApplication sharedApplication];</span><br><span class="line">    </span><br><span class="line">    __block UIBackgroundTaskIdentifier taskId;</span><br><span class="line">    </span><br><span class="line">    /// 申请后台执行</span><br><span class="line">    /// 注意: 在iOS7和该版本前，后台可以用下面的的方式在后台存活5-10分钟，在iOS8及后，最多存活3分钟</span><br><span class="line">    &#123;</span><br><span class="line">        taskId = [application beginBackgroundTaskWithName:NSStringFromClass([self class]) expirationHandler:^&#123;</span><br><span class="line">            </span><br><span class="line">            MZLOG(@&quot;BackgroundTask. BackgroundTask is Over. The remained time: %f&quot;, application.backgroundTimeRemaining);</span><br><span class="line">            </span><br><span class="line">            [application endBackgroundTask:taskId];</span><br><span class="line">            </span><br><span class="line">            taskId = UIBackgroundTaskInvalid;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (UIBackgroundTaskInvalid == taskId) &#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;BackgroundTask. Apply backgroundTask failed.&quot;);</span><br><span class="line">        </span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /// 可以监控后台任务剩余的时间, 针对业务可以去处理</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">            </span><br><span class="line">            __block NSTimeInterval remainedTime;</span><br><span class="line">            </span><br><span class="line">            while (true) &#123;</span><br><span class="line">                </span><br><span class="line">                // 剩余可以后台执行的时间</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    </span><br><span class="line">                    // application.backgroundTimeRemaining 必须在主线程获取</span><br><span class="line">                    remainedTime = application.backgroundTimeRemaining;</span><br><span class="line">                    </span><br><span class="line">                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">                       </span><br><span class="line">                        MZLOG(@&quot;BackgroundTask. The remained time: %f&quot;, remainedTime);</span><br><span class="line">                        </span><br><span class="line">                        if (remainedTime &lt; 10) &#123;</span><br><span class="line">                            </span><br><span class="line">                            // 可以告诉其他业务, 后台申请的时间即将结束了</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        if (remainedTime &lt; 2) &#123;</span><br><span class="line">                            </span><br><span class="line">                            /// 这里可以做一些清除工作</span><br><span class="line">                            &#123;</span><br><span class="line">                                // clean up</span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                            [application endBackgroundTask:taskId];</span><br><span class="line">                            </span><br><span class="line">                            taskId = UIBackgroundTaskInvalid;</span><br><span class="line">                            </span><br><span class="line">                            return;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        // 睡眠(延时)1s</span><br><span class="line">                        [NSThread sleepForTimeInterval:1.f];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>startTask 开启后台任务.</p><p>在 AppDelegate 中, 调用这个方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)applicationDidEnterBackground:(UIApplication *)application &#123;</span><br><span class="line">    </span><br><span class="line">    [[MZBackgroundTask sharedTask] startTask];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行工程, 可以根据日志看出, 之前的 dispatch_after 和 timer 可以运行了, 并且可以运行3分钟(180s).</p><p>根据 backgroundTimeRemaining 这个属性, 可以看出具体的后台可执行的剩余时间.</p><p><img src="/upload/images/2017/07/30/Background3.jpg" alt="1"></p><p>注意: 我测试的时候使用的是 iOS10 设备.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>除了苹果规定的几种类型(如定位, 录音, VOIP 等)的应用外, 其他 APP 想申请更多的后台驻留时间, 就需要一些 <code>旁门左道</code> 的方法了.</p><p>苹果对后台操作做了这么多限制, 也是从用户的角度出发, 如安全, 省电, 省流量等.</p><p>比如, 在后台播放没有声音的音乐.</p><p>再比如, 申请定位服务的权限, 这样也可以保持 APP 在后台不被挂起.<br>但是, 依照苹果一贯的审核做法来看，如果声明了需要某项后台权限，你却没有相关实现的话，会直接被拒掉的.</p><p>这些是技术上的实现, 我没有推荐大家这么干, 现在苹果审核比以前还要严格, 大家还是悠着点干吧.如果你的 APP 不需要上架到 AppStore 的话, 就尽情的放纵吧…</p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p>1.<a href="http://www.jianshu.com/p/50ff7a3a0fcd">iOS实现无限后台background的方法</a></p><p>2.<a href="https://onevcat.com/2013/08/ios7-background-multitask/">WWDC 2013 Session笔记 - iOS7中的多任务</a></p><p>iOS 在后台的时候如果不使用后台模式, socket 也会被系统关闭连接, 比如我们使用的 IM 功能.<br>使用后台模式后, 向系统申请的时间(3分钟内), socket 还是没有被关闭的, 除非断网或者被路由器给断开了, 在申请的这段时间内, socekt 还是可以使用的, 如果想持续的保持 socket 连接, 就需要去了解一下 VOIP Socket 相关的知识了, 实践过后, 分享给大家.</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>下面是具体的实现代码.</p><blockquote><p>ViewController.m</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSTimer *timer;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">                                             selector:@selector(onDidEnterBackground:)</span><br><span class="line">                                                 name:UIApplicationDidEnterBackgroundNotification</span><br><span class="line">                                               object:nil];</span><br><span class="line">    </span><br><span class="line">    // 每隔一秒执行一次</span><br><span class="line">    _timer = [NSTimer scheduledTimerWithTimeInterval:1</span><br><span class="line">                                              target:self</span><br><span class="line">                                            selector:@selector(onTimerDidRun:)</span><br><span class="line">                                            userInfo:nil repeats:YES];</span><br><span class="line">    </span><br><span class="line">    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Callback.</span><br><span class="line"></span><br><span class="line">- (void)onTimerDidRun:(id)sender &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App Background. Timer Running.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)onDidEnterBackground:(NSNotification *)notification &#123;</span><br><span class="line">    </span><br><span class="line">    MZLOG(@&quot;App Background. Enter onDidEnterBackground.&quot;);</span><br><span class="line">    </span><br><span class="line">    int delta = 1;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delta * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;App Background. Enter onDidEnterBackground diapatch.&quot;);</span><br><span class="line">        </span><br><span class="line">        UILocalNotification *notification = [UILocalNotification new];</span><br><span class="line">        notification.fireDate = [NSDate dateWithTimeIntervalSinceNow:3];</span><br><span class="line">        notification.alertBody = @&quot;走, 去high吧!&quot;;</span><br><span class="line">        notification.soundName = UILocalNotificationDefaultSoundName;</span><br><span class="line">        // 可以自定义数据</span><br><span class="line">        notification.userInfo = @&#123;@&quot;user_info_key&quot;: @&quot;user_info_value_json_str&quot;&#125;;</span><br><span class="line">        </span><br><span class="line">        [[UIApplication sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - SetupViews.</span><br><span class="line"></span><br><span class="line">- (void)_setupViews &#123;</span><br><span class="line">    </span><br><span class="line">    self.view.backgroundColor = [UIColor purpleColor];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MZBackgroundTask.m</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;MZBackgroundTask.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation MZBackgroundTask</span><br><span class="line"></span><br><span class="line">+ (instancetype)sharedTask &#123;</span><br><span class="line">    </span><br><span class="line">    static MZBackgroundTask *_task;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        _task = [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return _task;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)startTask &#123;</span><br><span class="line">    </span><br><span class="line">    if (![self _checkSupportBackgroundTask]) &#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;BackgroundTask. Current device don&#x27;t support backgroundTask.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIApplication *application = [UIApplication sharedApplication];</span><br><span class="line">    </span><br><span class="line">    __block UIBackgroundTaskIdentifier taskId;</span><br><span class="line">    </span><br><span class="line">    /// 申请后台执行</span><br><span class="line">    /// 注意: 在iOS7和该版本前，后台可以用下面的的方式在后台存活5-10分钟，在iOS8及后，最多存活3分钟</span><br><span class="line">    &#123;</span><br><span class="line">        taskId = [application beginBackgroundTaskWithName:NSStringFromClass([self class]) expirationHandler:^&#123;</span><br><span class="line">            </span><br><span class="line">            MZLOG(@&quot;BackgroundTask. BackgroundTask is Over. The remained time: %f&quot;, application.backgroundTimeRemaining);</span><br><span class="line">            </span><br><span class="line">            [application endBackgroundTask:taskId];</span><br><span class="line">            </span><br><span class="line">            taskId = UIBackgroundTaskInvalid;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (UIBackgroundTaskInvalid == taskId) &#123;</span><br><span class="line">        </span><br><span class="line">        MZLOG(@&quot;BackgroundTask. Apply backgroundTask failed.&quot;);</span><br><span class="line">        </span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /// 可以监控后台任务剩余的时间, 针对业务可以去处理</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">            </span><br><span class="line">            __block NSTimeInterval remainedTime;</span><br><span class="line">            </span><br><span class="line">            while (true) &#123;</span><br><span class="line">                </span><br><span class="line">                // 剩余可以后台执行的时间</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    </span><br><span class="line">                    // application.backgroundTimeRemaining 必须在主线程获取</span><br><span class="line">                    remainedTime = application.backgroundTimeRemaining;</span><br><span class="line">                    </span><br><span class="line">                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">                       </span><br><span class="line">                        MZLOG(@&quot;BackgroundTask. The remained time: %f&quot;, remainedTime);</span><br><span class="line">                        </span><br><span class="line">                        if (remainedTime &lt; 10) &#123;</span><br><span class="line">                            </span><br><span class="line">                            // 可以告诉其他业务, 后台申请的时间即将结束了</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        if (remainedTime &lt; 2) &#123;</span><br><span class="line">                            </span><br><span class="line">                            /// 这里可以做一些清除工作</span><br><span class="line">                            &#123;</span><br><span class="line">                                // clean up</span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                            [application endBackgroundTask:taskId];</span><br><span class="line">                            </span><br><span class="line">                            taskId = UIBackgroundTaskInvalid;</span><br><span class="line">                            </span><br><span class="line">                            return;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        // 睡眠(延时)1s</span><br><span class="line">                        [NSThread sleepForTimeInterval:1.f];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Private.</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  当前设备是否支持后台任务.</span><br><span class="line"> *</span><br><span class="line"> *  @return YES, 支持后台任务. 否则, 不支持后台任务.</span><br><span class="line"> */</span><br><span class="line">- (BOOL)_checkSupportBackgroundTask &#123;</span><br><span class="line">    </span><br><span class="line">    SEL sel = @selector(isMultitaskingSupported);</span><br><span class="line">    BOOL supportBTask = [[UIDevice currentDevice] respondsToSelector:sel];</span><br><span class="line">    </span><br><span class="line">    return supportBTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后台模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Charles</title>
      <link href="/2017/07/23/%E4%BD%BF%E7%94%A8-Charles/"/>
      <url>/2017/07/23/%E4%BD%BF%E7%94%A8-Charles/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Charles 是 Mac 上面比较好用的抓包工具.</p><p>在使用微信登录 SDK 的时候, 我想看看微信请求的内容, 以及其授权过程, 发现只要连接 Charles, 跳转到微信之后无法打开微信的授权登录页面, 提示网络不可用.</p><p>经过研究, 是需要使用 Charles 配置 HTTPS, 配置完成后, 就可以随心所欲了.</p><p>所以, 今天跟大家分享一下 Charles 使用的两个点:</p><ul><li>Charles 的 HTTPS 配置.</li><li>使用 Charles 模拟(慢)网络.</li></ul><h2 id="工具和系统"><a href="#工具和系统" class="headerlink" title="工具和系统"></a>工具和系统</h2><ul><li>iPhone: iOS 10.3.</li><li>Mac OS: 10.12.5.</li><li>Charles: 4.0.2.</li></ul><h2 id="抓取-HTTPS-请求"><a href="#抓取-HTTPS-请求" class="headerlink" title="抓取 HTTPS 请求"></a>抓取 HTTPS 请求</h2><p><strong>1.Mac 安装证书</strong></p><blockquote><p>打开 Charles, 在 Help 选项中选择 SSL Proxying, 如下图所示:</p></blockquote><p><img src="/upload/images/2017/07/23/1.jpg" alt="1"></p><p><strong>2.Mac 信任证书</strong></p><blockquote><p>打开 Keychain Access (钥匙串), 找到刚才安装的证书, 信任证书, 如图:</p></blockquote><p><img src="/upload/images/2017/07/23/2.jpg" alt="1"></p><p><strong>3.给 iPhone 安装证书</strong></p><blockquote><p>打开 Charles, 在 Help 选项中选择 SSL Proxying, 操作如图:</p></blockquote><p><img src="/upload/images/2017/07/23/3.jpg" alt="1"></p><p>在弹出的对话框中, 可以看到 <code>chls.pro/ssl</code></p><p><img src="/upload/images/2017/07/23/4.jpg" alt="1"></p><p>手机设置代理, 连接 Charles</p><blockquote><p>一定要记住: 手机一定要设置代理, 否则安装证书会失败.</p></blockquote><p>打开手机的 Safari 浏览器, 输入 <code>chls.pro/ssl</code> 这个地址.</p><p><img src="/upload/images/2017/07/23/5.jpg" alt="1"></p><p>设置信任证书, 如下图:</p><p><img src="/upload/images/2017/07/23/6.jpg" alt="1"></p><p><img src="/upload/images/2017/07/23/7.jpg" alt="1"></p><h2 id="模拟任意网络"><a href="#模拟任意网络" class="headerlink" title="模拟任意网络"></a>模拟任意网络</h2><p>Charles 给我们提供了可以模拟任何网速的网络环境的条件.</p><p><img src="/upload/images/2017/07/23/8.jpg" alt="1"></p><p>打开 Throttle Settings, 然后 Enable Throttling</p><p><img src="/upload/images/2017/07/23/9.jpg" alt="1"></p><p>可以看到很多类型的网络供你选择.</p><p>Add Preset 可以自己自定义一个网络环境.</p><p>这个功能非常实用, 可以让我们模拟慢网络环境, 更好地调试自己的程序.</p><h2 id="遇到麻烦"><a href="#遇到麻烦" class="headerlink" title="遇到麻烦"></a>遇到麻烦</h2><p>1.抓取 HTTPS 的请求出现错误</p><p>错误日志如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SSLHandshake: Received fatal alert: unknown_ca</span><br><span class="line">Charles Proxy will even offer a helpful suggestion:</span><br><span class="line">You may need to configure your browser or application to trust the Charles Root Certificate. See SSL Proxying in the Help menu.</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2017/07/23/10.jpg" alt="1"></p><p>这种错误一般是出现在 iOS10 上面.</p><p>请在关于本机里面再设置一次 证书信任设置, 即可.</p><p><img src="/upload/images/2017/07/23/11.jpg" alt="1"></p><p>2.系统升级后, 设置的 HTTPS 抓包失效</p><p>按照上述方法, 重新设置一次即可.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Charles MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2d-js: 在 iOS 上运行</title>
      <link href="/2017/07/23/Cocos2d-js-%E5%9C%A8-iOS-%E4%B8%8A%E8%BF%90%E8%A1%8C/"/>
      <url>/2017/07/23/Cocos2d-js-%E5%9C%A8-iOS-%E4%B8%8A%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>在我的博文 <a href="http://www.veryitman.com/2017/05/14/2017-05-14-Cocos2d-js-%E9%A6%96%E6%AC%A1%E5%9C%A8-Mac-%E4%B8%8A%E9%9D%A2%E8%BF%90%E8%A1%8C/">Cocos2d-js: 首次在 Mac 上面运行</a> 这篇文章中, 介绍了 Cocos2d 相关的知识, 并且使用Cocos2dx 创建了一个 JS 的简单游戏项目.</p><p>今天跟大家分享一下, 如何在 ios 设备上面运行一个 JS 游戏项目.</p><p>该游戏项目(贪吃蛇)来自网络资源, 只供演示使用, 不提供任何关于游戏的资源.</p><h2 id="当初的想当然"><a href="#当初的想当然" class="headerlink" title="当初的想当然"></a>当初的想当然</h2><p>在 Mac 上面 so easy 的编译并运行了 JS 游戏, 我想在 iOS 设备上应该也很简单的就可以运行起来, 但是我发现我简单不加思考的想法, 是行不通的.</p><p>博文 <a href="http://www.veryitman.com/2017/05/14/2017-05-14-Cocos2d-js-%E9%A6%96%E6%AC%A1%E5%9C%A8-Mac-%E4%B8%8A%E9%9D%A2%E8%BF%90%E8%A1%8C/">Cocos2d-js: 首次在 Mac 上面运行</a> 在 FireFox 浏览器上面可以直接运行 <code>index.html</code>, 但是在 Chrome 浏览器上面就没那么顺利.</p><p>想到这里, 我就受到了启发, 莫非 iOS 设备上面需要自己搭建一套 Web Server?</p><h2 id="搭建-Web-Server"><a href="#搭建-Web-Server" class="headerlink" title="搭建 Web Server"></a>搭建 Web Server</h2><p>既然想到了这一步, 接下来就是找方案实施了.</p><p><a href="https://github.com/robbiehanson/CocoaHTTPServer">CocoaHTTPServer</a> 这个可以满足我的需求, 于是, 我就直接拿来使用了.</p><p>项目中, 我使用了 Cocoapods 来管理第三方库.在 podfile 中直接添加下面的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;CocoaHTTPServer&#x27;, &#x27;~&gt; 2.3&#x27;</span><br></pre></td></tr></table></figure><p>然后 pod install 即可.</p><p>1.在 ViewController 中导入头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;HTTPServer.h&gt;</span><br><span class="line">ViewController 声明部分</span><br><span class="line"></span><br><span class="line">@interface ViewController () &lt;WKNavigationDelegate&gt;</span><br><span class="line">@property (nonatomic, strong) WKWebView *webView;</span><br><span class="line">@property (nonatomic, strong) HTTPServer *localHttpServer;</span><br><span class="line">@property (nonatomic, strong) WKWebViewConfiguration *wbConfig;</span><br><span class="line">//用于调试的 UILabel</span><br><span class="line">@property (nonatomic, strong) IBOutlet UILabel *loadingLb;</span><br><span class="line">@property (nonatomic, assign) BOOL startServerSuccess;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>2.配置 Web Server</p><p>核心实现如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> - (void)_configLocalHttpServer</span><br><span class="line">&#123;</span><br><span class="line">    NSString *webPath = [[NSBundle mainBundle] pathForResource:@&quot;crazySnake&quot; ofType:nil];</span><br><span class="line">    _localHttpServer = [[HTTPServer alloc] init];</span><br><span class="line">    [_localHttpServer setType:@&quot;_http.tcp&quot;];</span><br><span class="line">    </span><br><span class="line">    NSFileManager *fileManager = [[NSFileManager alloc] init];</span><br><span class="line">    NSLog(@&quot;%@&quot;, webPath);</span><br><span class="line">    </span><br><span class="line">    if (![fileManager fileExistsAtPath:webPath]) &#123;</span><br><span class="line">        NSLog(@&quot;File path error!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        NSString *webLocalPath = webPath;</span><br><span class="line">        [_localHttpServer setDocumentRoot:webLocalPath];</span><br><span class="line">        NSLog(@&quot;webLocalPath:%@&quot;, webLocalPath);</span><br><span class="line">        [self _startWebServer];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (void)_startWebServer</span><br><span class="line">&#123;</span><br><span class="line">    self.loadingLb.hidden = NO;</span><br><span class="line">    </span><br><span class="line">    NSError *error;</span><br><span class="line">    if ([_localHttpServer start:&amp;error]) &#123;</span><br><span class="line">        NSLog(@&quot;Started HTTP Server on port %hu&quot;, [_localHttpServer listeningPort]);</span><br><span class="line">        self.port = [NSString stringWithFormat:@&quot;%d&quot;, [_localHttpServer listeningPort]];</span><br><span class="line">        </span><br><span class="line">        self.loadingLb.text = @&quot;Start Server Successfully.&quot;;</span><br><span class="line">        </span><br><span class="line">        _startServerSuccess = YES;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        NSLog(@&quot;Error starting HTTP Server: %@&quot;, error);</span><br><span class="line">        </span><br><span class="line">        self.loadingLb.text = @&quot;Start Server failed.&quot;;</span><br><span class="line">        </span><br><span class="line">        _startServerSuccess = NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_configLocalHttpServer</code> 是配置 HTTPServer 的方法, <code>_startWebServer</code> 是开启 Web Server 的方法.</p><p>这样调用 <code>_configLocalHttpServer</code> 就可以开启在设备上面开启一个 Web Server 了.</p><h2 id="Xcode-导入-JS-游戏项目"><a href="#Xcode-导入-JS-游戏项目" class="headerlink" title="Xcode 导入 JS 游戏项目"></a>Xcode 导入 JS 游戏项目</h2><p>首先看一下我的工程和资源目录结构, 如图:</p><p><img src="/upload/images/2017/07/23/2_1.jpg" alt="1"></p><p>仔细看一下, <code>crazySnake</code> 这个文件夹是蓝色的, 不是黄色的.</p><p>这里特别注意, 导入这个 crazySnake 文件夹的时候, Options 一定要选择 <code>Create folder reference</code>.</p><p>为什么要这么做?</p><p>细心的朋友可以发现, 使用 <code>Create folder reference </code>导入的文件夹, 在项目打包生成的 archive 的文件中(自己可以解压看)是可以看到 crazySnake 这个文件夹的, 如果不是这种方式, 而是使用 Create groups 方式(在 Xcode 中显示黄色), 在 archive 中是看不到 crazySnake 这个文件夹的, 而是将里面的文件打散放在 archive 的根目录下面了.</p><blockquote><p>总之, 一句话, <code>Create folder reference</code> 方式导入的文件夹在打包后还是原来的文件夹, 不会将文件夹里面的文件打散.</p></blockquote><p>试想一下, 如果多加入几个这样的目录, 都打散在根目录下面, 我们就不好管理这个文件夹里面的文件了.</p><h2 id="配置-WKWebView"><a href="#配置-WKWebView" class="headerlink" title="配置 WKWebView"></a>配置 WKWebView</h2><blockquote><p>这里我使用了 WKWebView 而不是 UIWebView 作为加载 HTML 的容器.<br>当然, 你也可以使用 UIWebView.</p></blockquote><p>主要的核心代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    self.navigationController.navigationBarHidden = YES;</span><br><span class="line">    </span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        self.loadingLb.text = @&quot;Config server...&quot;;</span><br><span class="line">        [self _configLocalHttpServer];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    /// 增加的调式方法: 可以重新启动 web server.</span><br><span class="line">    &#123;</span><br><span class="line">        SEL sel = @selector(_configLocalHttpServer);</span><br><span class="line">        UITapGestureRecognizer *gesture = [[UITapGestureRecognizer alloc] initWithTarget:self</span><br><span class="line">                                                                                  action:sel];</span><br><span class="line">        [self.loadingLb addGestureRecognizer:gesture];</span><br><span class="line">        self.loadingLb.userInteractionEnabled = YES;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (void)viewDidAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidAppear:animated];</span><br><span class="line">    </span><br><span class="line">    // 配置 WKWebView</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        _wbConfig = [[WKWebViewConfiguration alloc] init];</span><br><span class="line">        self.wbConfig.userContentController = [[WKUserContentController alloc] init];</span><br><span class="line">        </span><br><span class="line">        _webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:self.wbConfig];</span><br><span class="line">        </span><br><span class="line">        _webView.frame = self.view.bounds;</span><br><span class="line">        _webView.scrollView.showsHorizontalScrollIndicator = NO;</span><br><span class="line">        _webView.scrollView.showsVerticalScrollIndicator   = NO;</span><br><span class="line">        </span><br><span class="line">        [self.view addSubview:self.webView];</span><br><span class="line">        self.webView.frame = self.view.bounds;</span><br><span class="line">        self.webView.navigationDelegate = self;</span><br><span class="line">        </span><br><span class="line">        if (self.startServerSuccess) &#123;</span><br><span class="line">            self.loadingLb.hidden = YES;</span><br><span class="line">            </span><br><span class="line">            NSString *gameUrl = [[NSBundle mainBundle] pathForResource:@&quot;index&quot;</span><br><span class="line">                                                                ofType:@&quot;html&quot;</span><br><span class="line">                                                           inDirectory:@&quot;crazySnake&quot;];</span><br><span class="line">            NSURL *url = [NSURL fileURLWithPath:gameUrl];</span><br><span class="line">            </span><br><span class="line">            url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://127.0.0.1:%@/index.html&quot;, self.port]];</span><br><span class="line">            [self.webView loadRequest:[NSURLRequest requestWithURL:url]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单, 就是使用 WKWebView 加载一个 HTML 文件并启动 Web Server.</p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>接下来, 就是见证奇迹的时刻了…</p><p>上面配置了 Web Server 和 加载 html 的 WKWebView, 现在可以直接运行项目看效果了.</p><p>无论你是在模拟器还是在真机上面都可以运行这个 JS 游戏项目了.</p><p><img src="/upload/images/2017/07/23/2_2.jpg" alt="1"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>上面的例子本人亲自实践过的, 给大家提供了一个实现思路, 算是抛砖引玉.</p><p>如果想做好这个模式, 还需要很多工作要做, 这里列出来给大家分享一下.</p><blockquote><p>1.游戏资源包管理和下载.<br>2.游戏中需要和 Native 的交互逻辑.<br>3.数据加密.<br>4.移动端游戏本身的加载优化.</p></blockquote><p>如果你有更好的方案和想法, 我很乐意邮件 (<a href="mailto:&#x76;&#101;&#x72;&#x79;&#105;&#x74;&#x6d;&#97;&#x6e;&#x40;&#49;&#x32;&#54;&#46;&#x63;&#x6f;&#109;">&#x76;&#101;&#x72;&#x79;&#105;&#x74;&#x6d;&#97;&#x6e;&#x40;&#49;&#x32;&#54;&#46;&#x63;&#x6f;&#109;</a>) 与你沟通, 非常感谢!</p><p>代码示例我放在了 GitHub, 点击 <a href="https://github.com/veryitman/MZMWPlay">MZMWPlay</a> 前往下载体验.</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos Cocos2d-js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android: Chrome 调试 WEB 页面</title>
      <link href="/2017/06/01/Android-Chrome-%E8%B0%83%E8%AF%95-WEB-%E9%A1%B5%E9%9D%A2/"/>
      <url>/2017/06/01/Android-Chrome-%E8%B0%83%E8%AF%95-WEB-%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 Mac OS 上面通过 Safari 调试 iOS 设备或者模拟器的 WEB 页面, 比较方便.</p><p>关于具体如何使用 Safari 来调试 iOS 设备, 可以参考 [Safari 的开发者模式] 这篇文章.</p><p>自从踏上开发的道路, 电脑上就安装了 Chrome 浏览器, 并且一直保持着更新, Chrome 以其简单设计和高效的用法吸引了大批开发者.</p><p>使用 Chrome 调试 Android 设备的 WEB 页面, 易如反掌.</p><h2 id="Chrome-调试条件"><a href="#Chrome-调试条件" class="headerlink" title="Chrome 调试条件"></a>Chrome 调试条件</h2><p>使用这项技能的条件如下:</p><blockquote><p>1.Android 设备系统最低为4.4, 也就是 android-19</p></blockquote><blockquote><p>2.Chrome 最好使用最新版本的, 以前的版本不支持, 最低兼容版本目前尚不清楚.</p></blockquote><blockquote><p>3.配置 Android WebView, 使其支持 Debug 和使能 JavaScript 功能.</p></blockquote><blockquote><p>4.设备和 PC 通过 USB 连接正常, 且支持 USB 调试的.</p></blockquote><p>我目前使用的设备和 Chrome 版本信息如下:</p><blockquote><p>Android 设备: 5.1.1版本<br>Chrome: Version 58.0.3029.110 (64-bit)</p></blockquote><p>我们在地址栏中输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome://inspect</span><br></pre></td></tr></table></figure><p>就可以打开设备列表界面.<br><img src="/upload/images/2017/06/01/14962450324558.jpg" alt="1"></p><p>可以看到我的 Android 设备已经显示出来了.</p><p>下面举个例子说明该调试工具的使用.</p><h2 id="简单的-Android-工程示例"><a href="#简单的-Android-工程示例" class="headerlink" title="简单的 Android 工程示例"></a>简单的 Android 工程示例</h2><p>该工程只有一个 Activity, 使用 WebView 加载本地 HTML 文件.</p><h4 id="1-创建-assets-目录"><a href="#1-创建-assets-目录" class="headerlink" title="1. 创建 assets 目录"></a>1. 创建 assets 目录</h4><p>工程切换到 Project Files 视图<br><img src="/upload/images/2017/06/01/14962453176556.jpg" alt="1"></p><p>这样就可以在 src&#x2F;main 目录下新建了 assets 文件夹了.</p><h4 id="2-创建-HTML-文件"><a href="#2-创建-HTML-文件" class="headerlink" title="2. 创建 HTML 文件"></a>2. 创建 HTML 文件</h4><blockquote><p>该 HTML 文件, 命名为 local.html, 放在 assets 目录下面.</p></blockquote><p>local.html 源文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;Click me&lt;/button&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;A function is triggered when the button is clicked.&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function myFunction() &#123;</span><br><span class="line">        console.log(&#x27;js console.&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-在-Activity-中配置-WebView"><a href="#3-在-Activity-中配置-WebView" class="headerlink" title="3.在 Activity 中配置 WebView."></a>3.在 Activity 中配置 WebView.</h4><p>Activity.java 源文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MZWebPage extends AppCompatActivity &#123;</span><br><span class="line">    private WebView webView;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_mzweb_page);</span><br><span class="line">        webView = (WebView) this.findViewById(R.id.ui_web_view);</span><br><span class="line">        // 设置 WebView 的 Debug 为可用状态</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            WebView.setWebContentsDebuggingEnabled(true);</span><br><span class="line">        &#125;</span><br><span class="line">        WebSettings settings = webView.getSettings();</span><br><span class="line">        </span><br><span class="line">        // 设置 JavaScript 可以使用, 否则在 HTML 中无法调用 JavaScript 代码</span><br><span class="line">        settings.setJavaScriptEnabled(true);</span><br><span class="line">        // 本地文件</span><br><span class="line">        String url = &quot;file:///android_asset/local.html&quot;;</span><br><span class="line">        webView.loadUrl(url);</span><br><span class="line">        webView.setWebViewClient(new WebViewClient() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123;</span><br><span class="line">                return super.shouldOverrideUrlLoading(view, request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        // 设置渲染视图</span><br><span class="line">        webView.setWebChromeClient(new WebChromeClient());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 xml 布局文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;demo.droidsdk.near.idreamsky.com.nearsdk.MZWebPage&quot;&gt;</span><br><span class="line">    &lt;WebView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:id=&quot;@+id/ui_web_view&quot;&gt;</span><br><span class="line">    &lt;/WebView&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><h4 id="4-运行程序"><a href="#4-运行程序" class="headerlink" title="4. 运行程序"></a>4. 运行程序</h4><p>在 Chrome 中输入 chrome:&#x2F;&#x2F;inspect 打开, 可以看到正在运行的 local.html.<br><img src="/upload/images/2017/06/01/14962458882973.jpg" alt="1"></p><p>点击 <code>inspect</code>, 进入调试界面.</p><p>在调试界面, 点击页面的 Click me, 按钮, 对应的会有 log 输出.<br><img src="/upload/images/2017/06/01/14962459967493.jpg" alt="1"></p><h4 id="5-调试出错的-HTML"><a href="#5-调试出错的-HTML" class="headerlink" title="5.调试出错的 HTML"></a>5.调试出错的 HTML</h4><p>修改一下 local.html 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;Click me&lt;/button&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;A function is triggered when the button is clicked.&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function myFunction() &#123;</span><br><span class="line">        console.log(&#x27;js console.&#x27; + var_error);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这里可以看出 <code>var_error</code> 是一个不存在的变量.</p><p>重新运行, 点击 Click me, 可以看到右侧的 error:<br><img src="/upload/images/2017/06/01/14962461463698.jpg" alt="1"></p><p>关于 Chrome 开发者工具的更多使用, 可以参考官方文档 <a href="https://developers.google.com/web/tools/chrome-devtools/?hl=zh-cn">Chrome 开发者工具</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome Web Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保持你的好习惯</title>
      <link href="/2017/05/29/%E4%BF%9D%E6%8C%81%E4%BD%A0%E7%9A%84%E5%A5%BD%E4%B9%A0%E6%83%AF/"/>
      <url>/2017/05/29/%E4%BF%9D%E6%8C%81%E4%BD%A0%E7%9A%84%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2017/05/29/1.jpeg" alt="1"></p><p>明天就是传统的端午节了, 提前祝大家端午安康!</p><p>今天老婆让我帮忙把粽叶子洗洗, 说要包粽子, 我听话地把刚买来的粽叶子洗了个干净, 那都是带有绿色的叶子, 生机勃勃, 让我从指尖中感到无比的温馨和无尽的希望.</p><p>小的时候, 我很享受妈妈为我们包粽子的过程, 说实话, 我不是很喜欢吃粽子, 但是特别喜欢粽子锅里面的煮鸡蛋, 特别美味.</p><p>老家的粽子没有什么特色, 就是简简单单的糯米被包在叶子中, 然后放在锅里慢慢的煮, 熟了之后, 蘸点白糖就可以吃了.</p><p>到了南方之后, 我才发现世界上原来有各种各样的粽子, 红枣的, 绿豆的, 猪肉馅的, 鸡肉馅的…等等!</p><p>这些都是偶发的回忆, 和今天的推文没有关系, 不信, 你接着往下看.</p><h2 id="养成阅读的习惯"><a href="#养成阅读的习惯" class="headerlink" title="养成阅读的习惯"></a>养成阅读的习惯</h2><p>我不是一个聪明的孩子, 直到小学三年级, 我才真正的开始明白学习到底是怎么一回事, 用老家人的话说算是开窍了.</p><p>后来我很顺利的上了初中, 家里的大部分收入要靠庄家, 一年四季能够风调雨顺的话, 也能过个不错的年, 至少能把学费给交上.</p><p>初中二年级的时候, 我辍学了, 也许是命运的安排吧, 当时自己也没有多想, 毅然决定下学去寻找另一种人生.</p><p>于是, 我选择了理发这个行业. 和师傅在风风雨雨中度过了一年多的时间, 在当时的农村, 不上学有门手艺也算是对自己和父母有个交代.</p><p>我的内心仍然渴望去上学, 虽然不知道为什么要去上学也不知道上学后能干什么, 但是心里面总是觉得自己不能放弃学业.在理发的一年多时间里, 我没有放弃过学习.<br>冥冥之中自有安排, 妈妈有次问我: “还想去上学不?”, 我想都没想就情不自禁的点头了, 妈妈又说:”我就知道你没有放弃, 去继续上学吧, 不要留下遗憾!”.当时的我甭提有多高兴了.</p><p>再次回到校园的我比以前更加努力和拼命了, 更加懂得如何珍惜这来之不易的学习机会了.</p><p>直到大学毕业, 参加工作以及有了孩子后, 我也能保持自我学习和自我激励的状态, 保持好的阅读习惯, 让我受益终身.</p><p>有次孩子早晨起床忙完后, 就开始坐在那里看书, 有好几次晚上, 我也发现他洗完澡后, 坐在那里看书, 或者是做手工, 或是画画.</p><p>我感到很好奇, 决定找个机会问问他.</p><p>有一个周末的上午, 早餐过后, 我就把他拉到身边, 和他一起看儿童读物, 问他:”宝贝, 你为什么喜欢看书呢?”, 他说:”爸爸, 是你影响了我, 你喜欢看书, 我也喜欢看书.”, 看着他一副天真的样子, 我真的不敢相信几岁的孩子能说出这样的话, 但我内心感到无比的欣慰.原来好的习惯会传染给自己身边的人, 并且能让你感到自豪.</p><h2 id="坚持写博客"><a href="#坚持写博客" class="headerlink" title="坚持写博客"></a>坚持写博客</h2><p>写博客或者是生活日记, 确实很”浪费”时间, 甚至会占用你任何休息的时间, 写博客偶尔也会让你抓耳挠腮, 感叹:”书到用时方恨少”!</p><p>所以, 读, 写不能分家, 更应该是将二者紧密的联合在一起.<br>多阅读多写, 才会让你更加的通透, 当然了, 我只是喜欢写, 写的质量也很一般, 只是为了满足内心的那一点点对知识的渴望.</p><p>写的多了, 你就更加愿意去思考了, 思考多了, 很多事情你就看开了, 对你的生活和工作都有好处.</p><p>从09年到现在我一直坚持写博客, 刚开始也是无从下笔, 不知道自己到底该写一写什么东西, 写了之后, 是不是别人看了会嘲笑我, 诸如此类的担心太多太多, 后来我也想明白了, 你写的再好也有人比你写得好, 也会有人说你写的不好.那我何必去计较这么些个事儿了, 只管动手写吧!</p><p>然后, 就在博客网站上面耕耘, 技术的, 吐槽的, 生活的我都喜欢写, 不管你喜不喜欢看, 它都在那里, 哈哈!</p><p>我把博客当做自己的朋友, 心情好亦或是不好的时候, 我都会向他倾诉, 希望自己写下的东西或多或少能帮助一些人, 这也许是我坚持写博客的最大动力了.</p><p>如果你也喜欢写博客或者是准备写博客, 就开始动手写吧, 不要再犹豫了.</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个世界上, 没多少人喜欢听别人啰嗦, 即使听了你的啰嗦, 也不一定会付出实践, 即使你是长者或者是智者, 况且我只是一介平民.</p><p>但是我还是要啰嗦一句:”保持持续学习的习惯, 会消耗你的勤奋, 但会让你受益终生”, 信不信由你!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Safari 的开发者模式</title>
      <link href="/2017/05/15/Safari-%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/05/15/Safari-%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="设置-Safari"><a href="#设置-Safari" class="headerlink" title="设置 Safari"></a>设置 Safari</h2><p>1.打开 Safari 的 Preference<br><img src="/upload/images/2017/05/15/14948249631231.jpg" alt="1"></p><p>2.切换到 Advanced 选项<br><img src="/upload/images/2017/05/15/14948250437147.jpg" alt="1"></p><p>将 <code>Show Develop menu in menu bar</code> 选中.</p><p>可以看到 Safari 多了 Develop 选项<br><img src="/upload/images/2017/05/15/14948254198174.jpg" alt="1"></p><h2 id="设置设备或者模拟器"><a href="#设置设备或者模拟器" class="headerlink" title="设置设备或者模拟器"></a>设置设备或者模拟器</h2><h3 id="在-iphone或者模拟器-中设置-Safari"><a href="#在-iphone或者模拟器-中设置-Safari" class="headerlink" title="在 iphone或者模拟器 中设置 Safari"></a>在 iphone或者模拟器 中设置 Safari</h3><h4 id="打开-Safari-的高级选项"><a href="#打开-Safari-的高级选项" class="headerlink" title="打开 Safari 的高级选项"></a>打开 Safari 的高级选项</h4><p><img src="/upload/images/2017/05/15/14948252328005.jpg" alt="1"></p><h4 id="打开-Web-检查器"><a href="#打开-Web-检查器" class="headerlink" title="打开 Web 检查器"></a>打开 Web 检查器</h4><p><img src="/upload/images/2017/05/15/14948252717169.jpg" alt="1"></p><p>上面设置完毕后, 运行你的程序, 在 Safari 的 Develop 中可以看到对应设备, 从而可以调试 HTML 页面了.<br><img src="/upload/images/2017/05/15/14948259031169.jpg" alt="1"></p><p>在调试窗口中，可以看到当前正在加载网页的各种信息，如源码、请求头、图片、加载的资源与脚本、控制台输出等.</p><p>也可以直接修改网页的 CSS 样式和布局等进行修改，而不用重新运行 App.<br><img src="/upload/images/2017/05/15/14948635711574.jpg" alt="1"></p><p>使用 Safari 的开发者模式, 可以帮助我们调试前端页面, 解决一些问题, 比较方便.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS Safari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS: 自定义 UIWebView 和 WKWebView 的 UserAgent</title>
      <link href="/2017/05/14/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89-UIWebView-%E5%92%8C-WKWebView-%E7%9A%84-UserAgent/"/>
      <url>/2017/05/14/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89-UIWebView-%E5%92%8C-WKWebView-%E7%9A%84-UserAgent/</url>
      
        <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>在 iOS8, 苹果推出了 WKWebView, 目的很明显: 取代 UIWebView.</p><p>随着时间的推移, 越来越多的应用开始最低版本支持为 iOS8, 大家也纷纷的开始使用 WKWebView 组件.</p><p>在 iOS10.x 版本上, UIWebView 的表现不尽如人意, 在我们的后台日志和用户反馈, 存在很多莫名其妙的 crash 以及卡顿现象, 内存飙升等问题. 针对不同的 JS 游戏引擎, UIWebView 表现也不够好, 所以是时候使用 WKWebView 了.</p><p>但是话又说回来, 如果你最低版本支持 iOS8, 也不能完全放弃 UIWebView, WKWebView 有一部分 API 只有 iOS9+ 才有, 如果你的应用在 iOS8 运行而使用 iOS9 的 API, 肯定会 crash.</p><p>例如:</p><blockquote><p>1.清除缓存.<br>2.设置 user-agent.</p></blockquote><p>今天要说的是关于设置自定义 UIWebView 和 WKWebView 的 UserAgent 问题.</p><h2 id="WKWebView-UserAgent"><a href="#WKWebView-UserAgent" class="headerlink" title="WKWebView UserAgent"></a>WKWebView UserAgent</h2><h4 id="默认的-UserAgent"><a href="#默认的-UserAgent" class="headerlink" title="默认的 UserAgent"></a>默认的 UserAgent</h4><p>使用下面的代码, 可以输出 WKWebView 的默认 UserAgent.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidload </span><br><span class="line">&#123;</span><br><span class="line">[self.wkWebView evaluateJavaScript:@&quot;navigator.appName&quot; completionHandler:^(id __nullable appName, NSError * __nullable error) &#123;</span><br><span class="line">        NSLog(@&quot;navigator.appName: %@&quot;, appName);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [self.wkWebView evaluateJavaScript:@&quot;navigator.userAgent&quot; completionHandler:^(id __nullable userAgent, NSError * __nullable error) &#123;</span><br><span class="line">    NSLog(@&quot;navigator.userAgent: %@&quot;, userAgent);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>navigator.appName 无论在 iOS8, iOS9 还是 iOS10, 输出结果都是一致的.</p><p>navigator.userAgent 在不同的 iOS 系统上面输出结果略有不同.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// iOS 8.3</span><br><span class="line">// Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12F70</span><br><span class="line">// iOS 9.0</span><br><span class="line">// Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.32 (KHTML, like Gecko) Mobile/13A4254v</span><br><span class="line">// iOS 10.x</span><br><span class="line">//Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Mobile/14E269</span><br></pre></td></tr></table></figure><h4 id="自定义-UserAgent"><a href="#自定义-UserAgent" class="headerlink" title="自定义 UserAgent"></a>自定义 UserAgent</h4><p>修改默认的 UserAgent, 需要使用下面的方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.wkWebView.customUserAgent = @&quot;CustomUserAgent&quot;</span><br></pre></td></tr></table></figure><p>这样, 就改变了其默认的 UserAgent 值了.</p><p>特别需要注意: customUserAgent 是 iOS9 之后才有的字段.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*! @abstract The custom user agent string or nil if no custom user agent string has been set.</span><br><span class="line">*/</span><br><span class="line">@property (nullable, nonatomic, copy) NSString *customUserAgent API_AVAILABLE(macosx(10.11), ios(9.0));</span><br></pre></td></tr></table></figure><p>所以在 iOS8.x, 如果你想改变 UserAgent, 还是要使用 UIWebView.</p><h2 id="HTML-使用-UserAgent"><a href="#HTML-使用-UserAgent" class="headerlink" title="HTML 使用 UserAgent"></a>HTML 使用 UserAgent</h2><p>HTML 中可以根据自定义的 UserAgent, 做出不同的行为, 如自定的 UserAgent 可以包括应用的版本号, HTML 可以根据不同的版本来做版本区分等逻辑.</p><p>在 HTML 中, 可以使用 JS 来获取 UserAgent 的值.</p><p>Demo.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;user-agent&lt;/title&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            function getUserAgent() &#123;</span><br><span class="line">                var ug = navigator.userAgent;</span><br><span class="line">                document.getElementById(&quot;mySpan&quot;).innerHTML = ug;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;显示 user-agent&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;&lt;span style=&quot;font-size:30px&quot; id=&quot;mySpan&quot;&gt;..&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;点击显示 user-agent&quot; onclick=&quot;getUserAgent()&quot;  class=&quot;button&quot;/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .button &#123;</span><br><span class="line">            background-color: #4C0950;</span><br><span class="line">            border: none;</span><br><span class="line">            color: white;</span><br><span class="line">            padding: 15px 32px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">            margin: 20px 200px 100px 300px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            border-radius: 15;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>使用 WKWebView 加载该 Demo.html 文件, 效果图如下:<br><img src="/upload/images/2017/05/14/webView.jpg" alt="1"></p><h2 id="UIWebView-UserAgent"><a href="#UIWebView-UserAgent" class="headerlink" title="UIWebView UserAgent"></a>UIWebView UserAgent</h2><h4 id="默认的-UserAgent-1"><a href="#默认的-UserAgent-1" class="headerlink" title="默认的 UserAgent"></a>默认的 UserAgent</h4><p>使用下面的代码, 可以输出 UIWebView 的默认 UserAgent.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSString *appName = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.appName&quot;];</span><br><span class="line">NSLog(@&quot;navigator.appName: %@&quot;, appName);</span><br><span class="line">    </span><br><span class="line">NSString *userAgent = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.userAgent&quot;];</span><br><span class="line">NSLog(@&quot;navigator.userAgent %@&quot;, userAgent);</span><br></pre></td></tr></table></figure><p>打印输出结果和 WKWebView 的结果一致.</p><h4 id="设置自定的-UserAgent"><a href="#设置自定的-UserAgent" class="headerlink" title="设置自定的 UserAgent"></a>设置自定的 UserAgent</h4><p>设置一个 key 为 @”UserAgent” 的本地存储即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[NSUserDefaults standardUserDefaults] registerDefaults:@&#123;@&quot;UserAgent&quot;:@&quot;CustomUserAgent-UIWebView&quot;&#125;];</span><br><span class="line">    </span><br><span class="line">NSString *appName = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.appName&quot;];</span><br><span class="line">NSLog(@&quot;navigator.appName: %@&quot;, appName);</span><br><span class="line">    </span><br><span class="line">NSString *userAgent = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.userAgent&quot;];</span><br><span class="line">NSLog(@&quot;navigator.userAgent %@&quot;, userAgent);</span><br></pre></td></tr></table></figure><p>这样就改变了 UIWebView 的默认 UserAgent 了.</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>应用最低版本支持 iOS7&#x2F;8 的开发者们, 可以考虑 UIWebView 和 WKWebView 并存的开发模式. iOS9及以上的开发者你们, 可以完全放弃 UIWebView, 大胆的拥抱 WKWebView 了.</p><p>移植 UIWebView 到 WKWebView 的成本不算大.<br>如果你现在有时间, 可以开始着手做这些事了.前端和客户端需要考虑之前交互那部分的逻辑, 即 JS 调用 Native 或者 Native 调用 JS 的需要做些调整, 因为 WKWebView 的调用方式和 UIWebView 不一样了, 前端页面要考虑版本兼容性.</p><p>新的 WKWebView 虽然存在一些坑, 但是使用它亦是大势所趋, 正所谓 存在即合理, 你没有理由拒绝它.</p><p>后续, 我会写一写在 WKWebView 上面遇到的一些问题, 分享给大家.</p><p>之前我也写过一篇文章, 是关于 UIWebView 缓存的, 不妨, 你也瞅瞅 [iOS: 聊聊 UIWebView 缓存].</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIWebView WKWebView UserAgent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2d-js: 首次在 Mac 上面运行</title>
      <link href="/2017/05/14/Cocos2d-js-%E9%A6%96%E6%AC%A1%E5%9C%A8-Mac-%E4%B8%8A%E9%9D%A2%E8%BF%90%E8%A1%8C/"/>
      <url>/2017/05/14/Cocos2d-js-%E9%A6%96%E6%AC%A1%E5%9C%A8-Mac-%E4%B8%8A%E9%9D%A2%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="Cocos2d-js-介绍"><a href="#Cocos2d-js-介绍" class="headerlink" title="Cocos2d-js 介绍"></a>Cocos2d-js 介绍</h2><p>如果你是刚接触 Cocos2d-js 开发的人, 一定会被 Cocos2d-js 和 Cocos2d-HTML5 以及 Cocos2d-x 搞得晕头转向.</p><p>下面简单介绍一下 Cocos2d-js 的前世今生.</p><p>目前 Cocos2d-x 支持使用 C++、Lua、Javascript 语言来进行开发，且内置 JavaScript 引擎，通过 C++ 解析 Javascript 去执行.</p><p>Cocos2d-HTML5 是使用 JavaScript 进行开发，最终运行在浏览器里的.</p><p>v3.0 后，Cocos2d-HTML5 和 Cocos2d-x JSBinding 被合到了一起，称作 Cocos2d-JS.</p><p>与 Cocos2d-HTML5 不同的是，Cocos2d-js 开发的程序不仅能运行在浏览器里，还能编译运行在 Mac OSX, Windows, iOS, Android 平台上.</p><p>从 Cocos2d-x v3.7 版本之后, js 版本被合并到 Cocos2d-x 中了.</p><p>具体可以看 <a href="https://github.com/cocos2d/cocos2d-x/blob/cocos2d-x-3.7/docs/RELEASE_NOTES.md">Release Note</a> 这个说明.</p><p>这个版本的发布日期是在2015年7月21.</p><p>原来的 Cocos2d-js 版本在 [GitHub] 上面已经停止更新了.</p><p>说明如下:</p><blockquote><p>2&#x2F;27&#x2F;2016 - This repository is no longer active.<br>Cocos2d-JS was merged with Cocos2d-x starting at version 3.7.</p></blockquote><p>可以看出, Cocos2d-js 原来独立的项目被合并到了 Cocos2d-x 中了.</p><p>现在使用 Cocos2d-x 不仅可以创建 cpp 项目和 lua 项目, 也可以创建 js 项目了.</p><p>官方有说明的:</p><blockquote><p>Cocos2d-JS is Cocos2d-x engine’s JavaScript version that includes Cocos2d-html5 and Cocos2d-x JavaScript Bindings.</p></blockquote><p>至于什么是 Cocos2d-x JavaScript Bindings, 大家自行 google, 这里不赘述.</p><p>关系图大概如下:<br><img src="/upload/images/2017/05/14/3.png" alt="1"></p><p>Cocos2d-x 框架图<br><img src="/upload/images/2017/05/14/4.jpg" alt="1"></p><h2 id="搭建-Cocos2d-js-开发环境"><a href="#搭建-Cocos2d-js-开发环境" class="headerlink" title="搭建 Cocos2d-js 开发环境"></a>搭建 Cocos2d-js 开发环境</h2><h4 id="1-下载-Cocos2d-x"><a href="#1-下载-Cocos2d-x" class="headerlink" title="1.下载 Cocos2d-x"></a>1.下载 Cocos2d-x</h4><p>可以在官网下载最新的 Release 包, 点击 下载地址, 我下载的最新包是 cocos2d-x-3.15.</p><p>下载解压即可, 这里我把 cocos2d-x-3.15 修改为 cocos2d-x.</p><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>在 cocos2d-x 目录, 执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py</span><br></pre></td></tr></table></figure><p>执行完毕后, 可以看到 ‘~&#x2F;.bash_profile&#96; 的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Add environment variable COCOS_CONSOLE_ROOT for cocos2d-x</span><br><span class="line">export COCOS_CONSOLE_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/tools/cocos2d-console/bin</span><br><span class="line">export PATH=$COCOS_CONSOLE_ROOT:$PATH</span><br><span class="line"># Add environment variable COCOS_TEMPLATES_ROOT for cocos2d-x</span><br><span class="line">export COCOS_TEMPLATES_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/templates</span><br><span class="line">export PATH=$COCOS_TEMPLATES_ROOT:$PATH</span><br></pre></td></tr></table></figure><p>这里, 没有看到我的 <code>ANT_ROOT</code> 路径, 其实该脚本智能的找到 <code>/usr/local/Cellar/ant/1.9.7/bin</code>, 但是我不想使用这个 ant, 想使用自己下载的 ant, 修改该文件如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Add environment variable COCOS_CONSOLE_ROOT for cocos2d-x</span><br><span class="line">export COCOS_CONSOLE_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/tools/cocos2d-console/bin</span><br><span class="line">export PATH=$COCOS_CONSOLE_ROOT:$PATH</span><br><span class="line"># Add environment variable ANT_ROOT for cocos2d-x</span><br><span class="line">export ANT_ROOT=/Users/mark/developer/apache/apache-ant-1.10.1/bin</span><br><span class="line">export PATH=$ANT_ROOT:$PATH</span><br><span class="line"># Add environment variable COCOS_TEMPLATES_ROOT for cocos2d-x</span><br><span class="line">export COCOS_TEMPLATES_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/templates</span><br><span class="line">export PATH=$COCOS_TEMPLATES_ROOT:$PATH</span><br></pre></td></tr></table></figure><p>最后执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>使环境变量立即生效.</p><h4 id="创建-js-工程"><a href="#创建-js-工程" class="headerlink" title="创建 js 工程"></a>创建 js 工程</h4><p>cd 到任意目录, 执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cocos new HelloJs -l js -d .</span><br></pre></td></tr></table></figure><blockquote><p>new HelloJs 表示工程名字为 HelloJs<br>-l js 表示创建 js 工程.<br>-d . 表示在当前路径创建该工程</p></blockquote><p>可以看到下面创建工程的过程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Copy template into /Users/mark/workspace/mzProjs/c2dx/works/HelloJs</span><br><span class="line">Copying directory from cocos root directory...</span><br><span class="line">Copying files from template directory...</span><br><span class="line">Copying Cocos2d-x files...</span><br><span class="line">Rename project name from &#x27;HelloJavascript&#x27; to &#x27;HelloJs&#x27;</span><br><span class="line">Replace the project name from &#x27;HelloJavascript&#x27; to &#x27;HelloJs&#x27;</span><br><span class="line">Replace the project package name from &#x27;org.cocos2dx.hellojavascript&#x27; to &#x27;org.cocos2dx.HelloJs&#x27;</span><br><span class="line">Replace the Mac bundle id from &#x27;org.cocos2dx.hellojavascript&#x27; to &#x27;org.cocos2dx.HelloJs&#x27;</span><br><span class="line">Replace the iOS bundle id from &#x27;org.cocos2dx.hellojavascript&#x27; to &#x27;org.cocos2dx.HelloJs&#x27;</span><br></pre></td></tr></table></figure><p>工程目录:<br><img src="/upload/images/2017/05/14/1.jpg" alt="1"></p><h4 id="工程发布"><a href="#工程发布" class="headerlink" title="工程发布"></a>工程发布</h4><p>将上面的工程编译发布.</p><p>编译发布:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cocos compile -p web -m release</span><br></pre></td></tr></table></figure><blockquote><p>-p web 表示编译 web 平台.<br>-m release 表示编译为 release 模式.</p></blockquote><p>编译输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Building mode: release</span><br><span class="line">running: &#x27;/Users/mark/developer/apache/apache-ant-1.10.1/bin/ant -f /Users/mark/workspace/mzProjs/c2dx/works/HelloJs/publish/html5/build.xml&#x27;</span><br><span class="line">Buildfile: /Users/mark/workspace/mzProjs/c2dx/works/HelloJs/publish/html5/build.xml</span><br><span class="line">compile:</span><br><span class="line">   [jscomp] Compiling 156 file(s) with 42 extern(s)</span><br><span class="line">   [jscomp] 0 error(s), 0 warning(s)</span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line">Total time: 8 seconds</span><br></pre></td></tr></table></figure><p>如果你在这一步编译报错, 或者执行不下去, 一般都是没有在环境变量中配置好 ant.</p><p>编程成功后, 会多出 publish 目录:<br><img src="/upload/images/2017/05/14/2.jpg" alt="1"></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>执行 cocos run 命令来在系统默认的浏览器上面运行.</p><p>cd 到工程目录, 执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cocos run -p web -s . --port 9009</span><br></pre></td></tr></table></figure><p>这样会帮我们在本地启动一个 webServer 来运行示例, 直接打开了默认使用的浏览器.</p><blockquote><p>-s: 表示当前需要执行的源码路径<br>–port: 指定端口, 如果不指定端口, 默认在 8000 端口执行.</p></blockquote><p>更多 cocos run 命令可以, 使用下面的命令来查看帮助:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cocos run --help</span><br></pre></td></tr></table></figure><h2 id="本地运行-index-html-的问题"><a href="#本地运行-index-html-的问题" class="headerlink" title="本地运行 index.html 的问题"></a>本地运行 index.html 的问题</h2><p>你可以用火狐浏览器(FireFox)打开本地工程目录中的 index.html, 即可看到运行效果了.<br>FireFox 应该是在本地启动了一个 WebServer 来运行.</p><p>在 chrome 中直接运行 index.html, 无法看到最终效果, 一直卡在 loading 界面.</p><p>打开 inspect, 可以看到报错信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load file:/xx/publish/html5/project.json.</span><br><span class="line">Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.</span><br></pre></td></tr></table></figure><p>网上有人讨论过过问题, 说是 chrome 跨域不支持 file 协议，那么即使你允许 chrome 跨域支持, 直接运行本地的 index.html 还是报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">game.min.js:54 Uncaught TypeError: Cannot read property &#x27;modules&#x27; of null</span><br></pre></td></tr></table></figure><p>在 MacOS 上面允许 chrome 跨域访问文件的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Google\ Chrome.app --args --allow-file-access-from-files</span><br></pre></td></tr></table></figure><p>可以看出, 在这方面, FireFox 做的比 chrome 好.</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><blockquote><p>更新时间 2017-10-15</p></blockquote><p>在微信公众号上面看到 <a href="https://mp.weixin.qq.com/s?__biz=MjM5ODAxNTM2NA==&mid=2659646056&idx=1&sn=239871c3775ae12af5edf9ac2381b0b2">一招教你辨别 Cocos、Cocos2d、Cocos2d-x</a> 这篇文章, 大家可以看看, 对 cocos 会有更加深入的了解.</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos cocos2d-js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小小篮球队</title>
      <link href="/2017/04/29/%E5%B0%8F%E5%B0%8F%E7%AF%AE%E7%90%83%E9%98%9F/"/>
      <url>/2017/04/29/%E5%B0%8F%E5%B0%8F%E7%AF%AE%E7%90%83%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/images/2017/04/29/hua.jpeg" alt="1"></p><p>篮球, 我最喜欢的一项体育运动, 大学的业余时间基本都”泡”在球场, 压根不知道什么是累.</p><p>毕业后的第一份工作, 做的比较开心, 大家年龄相仿, 兴趣相投.</p><p>小小的团队, 没有任何纷争, 大家互相学习, 氛围及其融洽.</p><p>每个周五我们几个人都会提前下班去打一场篮球, 完事后, 一起喝点小酒, 那日子甭提有多他NND的惬意.</p><p>公司解散后, 大家各奔东西, 事过境迁, 各有各的工作和生活, 聚在一起的日子也是少之又少, 以前的日子只能怀念了.</p><p>人总需要一些非工作之外的兴趣, 整天围绕着工作, 早晚都会疯掉.</p><p>有些人喜欢泡泡图书馆, 有些人喜欢打打游戏, 有些人喜欢跑跑步, 有些人喜欢唱唱歌…</p><p>不管怎么样, 你需要某种爱好, 来润色一下你的生活, 我选择了篮球运动.</p><p>下面, 来说说篮球队中典型的几种人, 大家结合自己的工作和生活, 思考一下吧~</p><h2 id="单打独斗"><a href="#单打独斗" class="headerlink" title="单打独斗"></a>单打独斗</h2><p>篮球运动是一项集体运动, 需要每个人发挥自己应有的水平, 才能发挥团队的力量.</p><p>有些人喜欢单打独斗, 完全不考虑团队中其他成员的感受, 只要球到了他手中, 其他人只能看他的表演, 任凭你喊破嗓子, 他也不会理你.</p><p>这种人, 其实是有一定能力的人, 不然也不会也不可能这么做, 只是他们觉得凭一己之力就可以让大家高正无忧了, 自己没有思考过这样做是不是最合适的.</p><p>久而久之, 大家看着他的”表演”, 再也不想发挥了, 单打独斗的人慢慢的也累了, 最后大家都身心疲惫, 球队被对方轻而易举地打败.</p><h2 id="“指挥官”"><a href="#“指挥官”" class="headerlink" title="“指挥官”"></a>“指挥官”</h2><p>球队中有一种人, 自己不努力, 总是喜欢颐指气使, 经常听到他们说这样的话:</p><blockquote><p>你快点跑呀, 积极点…<br>死死地防着他, 不要让他进攻, 快…<br>你传球给我呀, 让你别着急, 好了吧, 输了吧…<br>输了, 都怪你…</p></blockquote><p>听到这些话, 再好脾气的人估计都难以接受, 脾气不好的直接开始打他了吧!</p><p>这种人最不受待见, 也最遭人唾骂, 这种人在实际工作中, 可能是你的领导.</p><h2 id="偷懒的"><a href="#偷懒的" class="headerlink" title="偷懒的"></a>偷懒的</h2><p>篮球运动的确很消耗体力, 如果在万箭齐发的时刻, 有人故意掉链子, 那将是功亏一篑.</p><p>大家在打球的时候, 都在为”荣誉”而战, 但是偏偏有人会使点小心眼, 能少跑一步就少跑一步, 能放对方走就放对方走, 绝对不伤害对方一毛一线. 明明可以稍微努力一下, 就可以拿到篮板, 偏偏让对方比自己还矮小的轻而易举的拿走了篮板.</p><p>要知道比自己矮小的那个人, 只是努力的跳了一下.</p><p>球场上虽然不是让你拼个你死我活, 不要求你全力以赴, 但是尽力而为总是要有的, 这是一种态度.</p><p>在实际工作中, 这种”队友”比比皆是, 但是不一定遭人恨, 有些还是很招人喜欢的, 毕竟他们没有抢你的功劳, 处处让着你, 没有他们的这些所谓的付出, 哪能衬托出你的光芒.</p><h2 id="鼓励你的"><a href="#鼓励你的" class="headerlink" title="鼓励你的"></a>鼓励你的</h2><p>上面说的都是一些”负能量”, 大家一笑而过吧.下面说点正能量的.</p><p>在球队中, 还有一种这样的人, 他会察言观色, 觉得你累了, 就告诉大家: “我们应该节奏慢一点, 缓冲一下.”,</p><p>当你手感不好的时候, 他会告诉你, 没事, 多来几次就好了, 不要有压力.</p><p>当你防守遇到困难时, 他会默默的给你补防, 给你接力, 最大程度的给你信心.</p><p>当大家士气不高的时候, 他会站出来投几个漂亮的球, 抑或给对方一个完美的盖帽, 并且鼓励大家不要放弃, 给大家信心, 做大家坚固的后盾.</p><p>这种人除了自己有一定的能力外, 还能顾全大局, 并且可以帮助队友, 帮助团队渡过难关, 确实难得.</p><h2 id="渴望进步的"><a href="#渴望进步的" class="headerlink" title="渴望进步的"></a>渴望进步的</h2><p>球队中, 存在一些新人, 或者是渴望自己能投出漂亮弧线球的人, 他们比不上那些资历老且经验丰富的前辈, 但是他们内心有一份信念: “我要变强!”.</p><p>这种人, 跟你讨论球技, 虚心向你学习一切可以提高球技的方法, 即使在观众席上, 他们也能聚精会神的观看, 自己领悟其中的奥妙. 只要你约他出来打球, 他都在第一时间出现在球场, 因为他不想放弃学习的机会.</p><p>久而久之, 这些人会变得越来越厉害, 通过不断的学习和摸索, 有了一套自己的打法, 步伐稳健, 再也不是那种接球不稳, 传球频频失误的”毛头小子”了.</p><p>这种人, 值得我们去挖掘和鼓励, 如果你正好是那个资历老且经验丰富的前辈, 就传授”真经”给他们吧.<br>对于你来说, 有人愿意跟你学习, 跟你分享, 也是美事一桩.</p><p>何乐而不为呢?</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不管你遇到什么样的队友, 如果你愿意, 请胸怀宇宙(当然不是 孙连城 那种啊).</p><p>万事万物皆有联系, 愿你能偶尔放下手中的工作, 去选择和爱上另一种乐趣.</p><p>五一放假了, 祝大家节日快乐!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS: 应用内打开 AppStore</title>
      <link href="/2017/04/15/iOS-%E5%BA%94%E7%94%A8%E5%86%85%E6%89%93%E5%BC%80-AppStore/"/>
      <url>/2017/04/15/iOS-%E5%BA%94%E7%94%A8%E5%86%85%E6%89%93%E5%BC%80-AppStore/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我们的 App 需要在 AppStore 上面打开某个 App 或者游戏, 目的最常见的有:</p><blockquote><p>1.评分评论.<br>2.推荐下载(App 或者游戏).</p></blockquote><p>很多开发者知道打开 AppStore 只需要一句代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;itunes app url&quot;]];</span><br></pre></td></tr></table></figure><p>这样就很简单的打开 AppStore 了, 但是产品经理问了, 能在我们应用内打开 AppStore 吗?</p><p>你当时懵逼了吗?</p><p>不要懵逼, 以后只要遇到类似这种问题, 你就问产品经理哪个 APP 这样做了?<br>然后, 他就给你看别人家的效果, 你就理直气壮地说: “别人可以做到的, 我们也可以做到!”.</p><p>应用内打开 AppStore 也很简单.<br>在 iOS6之后, 苹果已经给我们提供了 <a href="https://developer.apple.com/reference/storekit/skstoreproductviewcontroller#//apple_ref/doc/c_ref/SKStoreProductViewController">SKStoreProductViewController</a>, 大家看一下文档, 你就笑了.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SKStoreProductViewController</span><br><span class="line">/* View controller to display iTunes Store product information */</span><br></pre></td></tr></table></figure><h2 id="应用内打开-AppStore"><a href="#应用内打开-AppStore" class="headerlink" title="应用内打开 AppStore"></a>应用内打开 AppStore</h2><p>这里我以在应用内打开 <code>微信</code> 为例子.</p><p>效果图如下:<br><img src="/upload/images/2017/04/15/eff_appstore_1.png" alt="1"></p><p>从效果图可以看出, 用户在自己的应用内打开 AppStore 后, 不仅可以下载或者打开微信, 还可以直接评论评分, 简直爽(也难怪产品经理这么干).</p><p>那我们说一下如何实现上面的效果.</p><p>实现方案和步骤</p><p>1.包含头文件 <code>#import &lt;StoreKit/StoreKit.h&gt;</code></p><p>2.实现 <code>SKStoreProductViewControllerDelegate</code></p><p>具体代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">- (void)openAppFromAppStore:(NSString *)appid</span><br><span class="line">&#123;</span><br><span class="line">if (nil == appid || appid.length &lt;= 0) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加个 loading</span><br><span class="line"></span><br><span class="line">SKStoreProductViewController *store = [[SKStoreProductViewController alloc] init];</span><br><span class="line">    </span><br><span class="line">    store.delegate = self;</span><br><span class="line">    </span><br><span class="line">    NSDictionary&lt;NSString *, id&gt; *parameters = @&#123;SKStoreProductParameterITunesItemIdentifier: appid&#125;;</span><br><span class="line"></span><br><span class="line">    [store loadProductWithParameters:parameters completionBlock:^(BOOL result, NSError *error) &#123;</span><br><span class="line">    </span><br><span class="line">        // 结束 loading</span><br><span class="line">        </span><br><span class="line">        if (error) &#123;</span><br><span class="line">            </span><br><span class="line">            NSLog(@&quot;error %@ with userInfo %@&quot;, error, [error userInfo]);</span><br><span class="line">            </span><br><span class="line">            // 提示用户发生了错误</span><br><span class="line">            </span><br><span class="line">            // 或者通过 URL 打开 AppStore App.</span><br><span class="line">            </span><br><span class="line">            // NSString *url = @&quot;https://itunes.apple.com/in/app/wechat/id414478124?mt=8&quot;;</span><br><span class="line">            </span><br><span class="line">            //[[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            </span><br><span class="line">            [self presentViewController:store animated:YES completion:^&#123;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line">/// 用户点击取消会执行该方法</span><br><span class="line">- (void)productViewControllerDidFinish:(SKStoreProductViewController *)viewController</span><br><span class="line">&#123;</span><br><span class="line">    [viewController dismissViewControllerAnimated:YES completion:^&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用(@”414478124” 是 微信 的)方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self openAppFromAppStore:@&quot;414478124&quot;];</span><br></pre></td></tr></table></figure><h2 id="修改-AppStore-的导航栏"><a href="#修改-AppStore-的导航栏" class="headerlink" title="修改 AppStore 的导航栏"></a>修改 AppStore 的导航栏</h2><p>产品经理说, 既然你已经实现了上面的功能, 看看能不能把 AppStore 的导航栏改一个牛逼的颜色, 就像上面的大红色.</p><p>~</p><p>可以, 干!</p><p>直接上代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">- (void)openAppFromAppStore:(NSString *)appid</span><br><span class="line">&#123;</span><br><span class="line">if (nil == appid || appid.length &lt;= 0) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加个 loading</span><br><span class="line"></span><br><span class="line">// 导航栏上面的文字和图片颜色变了</span><br><span class="line">[[UINavigationBar appearance] setTintColor:[UIColor greenColor]];</span><br><span class="line">    </span><br><span class="line">    // 导航栏的大红色出来了</span><br><span class="line">    [[UINavigationBar appearance] setBarTintColor:[UIColor redColor]];</span><br><span class="line">    </span><br><span class="line">    [UINavigationBar appearanceWhenContainedIn:[SKStoreProductViewController class], nil];</span><br><span class="line"></span><br><span class="line">SKStoreProductViewController *store = [[SKStoreProductViewController alloc] init];</span><br><span class="line">    </span><br><span class="line">    store.delegate = self;</span><br><span class="line">    </span><br><span class="line">    NSDictionary&lt;NSString *, id&gt; *parameters = @&#123;SKStoreProductParameterITunesItemIdentifier: appid&#125;;</span><br><span class="line"></span><br><span class="line">    [store loadProductWithParameters:parameters completionBlock:^(BOOL result, NSError *error) &#123;</span><br><span class="line">        </span><br><span class="line">        // 结束 loading</span><br><span class="line">        </span><br><span class="line">        if (error) &#123;</span><br><span class="line">            </span><br><span class="line">            NSLog(@&quot;error %@ with userInfo %@&quot;, error, [error userInfo]);</span><br><span class="line">            </span><br><span class="line">            // 提示用户发生了错误</span><br><span class="line">            </span><br><span class="line">            // 或者通过 URL 打开 AppStore App.</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            </span><br><span class="line">            [self presentViewController:store animated:YES completion:^&#123;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.打开 <code>SKStoreProductViewController</code> 目前只能使用 <code>present</code> 方式, 不可以使用 <code>push</code> 的方式.</p><p>否则会报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Terminating app due to uncaught exception &#x27;SKUnsupportedPresentationException&#x27;,</span><br><span class="line">//reason: &#x27;SKStoreProductViewController must be used in a modal view controller&#x27;</span><br></pre></td></tr></table></figure><p>2.加入 loading</p><p>在应用内打开 AppStore, 为了不让用户傻等(网络不好的时候, 打开很慢), 可以加入 loading, 缓解一下用户急躁的心情.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AppStore iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找合伙人, 不易</title>
      <link href="/2017/03/26/%E6%89%BE%E5%90%88%E4%BC%99%E4%BA%BA-%E4%B8%8D%E6%98%93/"/>
      <url>/2017/03/26/%E6%89%BE%E5%90%88%E4%BC%99%E4%BA%BA-%E4%B8%8D%E6%98%93/</url>
      
        <content type="html"><![CDATA[<p>早在高中时期, 读过 &lt;三言&gt; 中的 &lt;警世通言&gt;, 第一章写的是 <code>俞伯牙摔琴谢知音</code>, 讲的是钟子期和俞伯牙的故事.</p><p>读完之后, 整个人都觉得难受, 心理有说不出的滋味, 眼泪竟夺眶而出.</p><p>流传的这首诗, 可以感受下.</p><blockquote><p>摔碎瑶琴凤尾寒，子期不在对谁弹！<br>春风满面皆朋友，欲觅知音难上难。<br>势利交怀势利心，斯文谁复念知音！<br>伯牙不作钟期逝，千古令人说破琴。</p></blockquote><p>自己工作之后, 对 <code>欲觅知音难上难</code> 这句话尤为赞同.</p><p>年少轻狂的你, 藏着要改变世界的心, 残酷的现实会抹去你凸起的棱角, 岁月和环境会让你变得越发不安.</p><p>不安的世界, 让你茫然.</p><p>于是, 点上一支烟, 回顾折腾的人生, 笑叹: 别人笑我太疯癫, 我笑他人看不穿.</p><p>可惜, 我们不是唐寅, 没有这份洒脱和奔放, 毕竟时代也大相径庭.</p><p>~ 好了, 回到现实中来.</p><p>刚毕业, 你会把主要精力放在如何把工作做好, 维持自己的生计上面, 如果能跟身边的大牛学到一些专业知识, 再苦再累, 你都是开心的.</p><p>渐渐地, 你发现知识(专业的和非专业的知识)真是要活到老学到老, 永无止境, 无法像武侠片里面演得那样移花接木, 斗转星移. 呜呼, 脚踏实地的做好本职工作, 顺便能拓展一下自己的交际圈, 扩大自己的知识面, 还是很有必要的.</p><p>各行各业都有非常突出的人才, 很多时候, 我们只能望洋兴叹.</p><p>如果你能遇到一个肯与你分享和交流, 或者是愿意将自己的实践分享给你的人, 那你算是上辈子积了大德了. 阿弥陀佛!</p><p>我把这样的人称之为 <code>恩人</code>, 也算是 <code>知音</code>.</p><p>以前, 很多朋友会问如果将来自己开公司, 是否愿意接受现在的自己, 我的回答是一定接受. 如果还有人问这个问题, 我会另外再追加一个问题:</p><blockquote><p>如果你开公司, 你是否愿意接受和你现在一起工作的同事?或者说你是否愿意让他成为你的合伙人?</p></blockquote><p>这些问题, 看似玩笑, 实则很现实很残酷, 一旦你决定要去做成某件事情, 立志要实现自己的抱负和理想的时候, 你的立场会和其他人千差外别.首先要考虑的是要和谁一起共谋事, 才能真正的帮到自己, 并且也能帮到别人.因为选择是双向的, 能找到和你一拍即合的人, 也确实不易.但愿任何一个渴望成功并付出行动的人, 能找到自己的合伙人, 找到自己的知音.</p><p>真正的成功者, 不是沉浸在多少人让你成功的喜悦中, 而是你让多少人和你一起分享了成功的喜悦的人.</p><p>说到这里, 本人只是想说明白一个道理, 送给即将或者已经在职场奋斗的人:</p><blockquote><p>踏踏实实的做事并没有错, 但是找到值得 “托付终身” 的人确实不易, 你现在能做的只有用知识来武装自己, 让自己变强.</p></blockquote><p>在职场中, 你会遇到很多让你不爽的人或者事. 记住, 要做到 <code>对事不对人</code>, 不要太委屈自己, 大丈夫能屈能伸, 该出手时就出手, 没有什么大不了.</p><p>如果真的觉得有些人或者有些事不值得你浪费时间, 就离它们远点. 惹不起但可以躲得起, 你说呢?</p><p>酌一壶小酒, 老夫聊发少年狂!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 生活 合伙人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让自己变强</title>
      <link href="/2017/03/10/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%8F%98%E5%BC%BA/"/>
      <url>/2017/03/10/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%8F%98%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<p>当你读到这篇文章的时候, 我其实还不知道『怎么让自己变强』.<br>具体说, 就是没有一套让你或者让他变强的武林秘籍.</p><p>只能结合自己经历的事, 分享给大家, 希望能感同身受!</p><p>这几天加班加地有点猛, 浑然不知周末轮回了.<br>心理总是在念叨, 好久没有在公众号涂鸦了, 手痒痒了.<br>趁今晚回来早(22:30回到家), 就动笔了.</p><p>『让自己变强』, 这句话说着很简单, 但不是任何人都能意识到这几个字带来的力量.</p><p>在「明朝那些事儿」中有这么一段:</p><blockquote><p>我们经常会产生一个疑问，那就是怎样才能获得其他国家及其人民的尊重，在世界上风光自豪一把，其实答案很简单——国家强大。</p></blockquote><p>看到这里, 感触颇深.</p><h2 id="在团队中成长"><a href="#在团队中成长" class="headerlink" title="在团队中成长"></a>在团队中成长</h2><p>团队成长的主观条件是团队的成员要成长, 不然团队哪里来的成长.</p><p>如果你是作为一个团队或者小组的负责人, 会面临各种各样的问题, 比如需要跟团队以外的部门谈合作, 需要跟老板汇报工作, 还要处理内部的问题等等诸如此类!</p><p>我觉得安邦需安内, 也就是说要先搞定团队内部的各种事物, 人是比较复杂的感情动物, 你不好也不能控制别人的情绪. 所以, 需要对事不对人!你不能说, 你看他长得不好看, 就知道工作做不好类似的话.</p><p>这样一说, 基本两个人就结下了梁子.迟早会爆发.</p><p>首先, 要给团队成员希望, 让大家都认识到有统一的目标.</p><p>其次, 让每个人给出工作和实行计划, 制定自己的考核目标.对做出突出贡献的成员奖励, 每个人都需要得到尊重, 而奖励是最大的尊重.</p><p>最后, 加强与团队成员之间的沟通, 互相帮助, 让大家能够相互信任和鼓励, 良好有效的沟通, 事半功倍.</p><p>作为团队负责人, 肯定希望手下的人各个骁勇善战, 百战百胜, 但是现实中很难做到, 其实也没有必要.<br>西游记告诉我们, 唐僧带领的团队才是最好的团队.</p><h2 id="少埋怨多给予帮助"><a href="#少埋怨多给予帮助" class="headerlink" title="少埋怨多给予帮助"></a>少埋怨多给予帮助</h2><p>每个人生活和工作的环境不一样, 在不同的地点不同的时间面对不同的事情, 都会有不同的看法.</p><p>世界上任何一种选择, 都是命中注定的, 没有人能强迫你去做出任何错误的选择, 除了你自己.</p><p>在自己所处的环境中, 要么你能改变环境使其来适应自己, 要么就离开这个自己不适应的环境, 不要去抱怨.</p><p>唉声叹气, 不仅仅影响自己的工作效率和生活质量, 还会影响到别人.<br>成天在抱怨, 觉得谁谁都不行, 自己才是最牛逼的, 日行见久, 你就是那个充满负能量的人, 当别人觉悟到的时候, 就会离你而去, 岂不咎由自取?!我想这也是微信朋友圈只有点赞没有非点赞的原因吧!</p><p>如果觉得自己的同事或者朋友有所欠缺, 就想办法去帮助他, 鼓励他, 把你认为一些好的方式和方法传授给他. 说不定哪天因为你的一句话或者一个方法, 他就走上人生巅峰了, 哈哈!</p><p>从现在开始, 忘记埋怨, 给予别人更多的帮助和鼓励.</p><h2 id="培养自己的专注力"><a href="#培养自己的专注力" class="headerlink" title="培养自己的专注力"></a>培养自己的专注力</h2><p>专注力, 是一个很神奇的东西.</p><p>如果一个人没有专注力, 很难再有所突破, 据说牛顿是在做梦的时候, 发明了很多折磨广大青少年的牛顿定律的.</p><p>每个人在自己的行业上, 多少都有短板. 有短板是情有可原的, 但是首先你得认识到自己的短板, 然后再指定计划去突破他.</p><blockquote><p>要想进步, 必须面对自己的不足.</p></blockquote><p>比如, 工作上需要你学会某种技术, 如果在某个时间点, 你没有学会, 可能就会丢掉饭碗, 你就会不顾一切的去学习, 直到学会会用为止. 这个过程, 你就是在专注这件事情, 回头想想咬咬牙, 还是可以办到的, 没有什么大不了的.</p><p>每天给自己一点时间, 专注去做一件事情, 坚持下来, 你会发现, 学习和进步就是 feel feel 倍儿爽.</p><h2 id="最后分享给大家一句话"><a href="#最后分享给大家一句话" class="headerlink" title="最后分享给大家一句话:"></a>最后分享给大家一句话:</h2><blockquote><p>不能改变别人的时候, 试着改变一下自己或许就能把事情变通了.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 生活 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat8 配置 HTTPS</title>
      <link href="/2017/02/15/Tomcat8-%E9%85%8D%E7%BD%AE-HTTPS/"/>
      <url>/2017/02/15/Tomcat8-%E9%85%8D%E7%BD%AE-HTTPS/</url>
      
        <content type="html"><![CDATA[<p>博客 [Tomcat8 域名配置] 介绍了如何在本地配置 Tomcat8 的域名以及通过域名来访问对应的资源.</p><p>今天继续跟大家分享如何配置 Tomcat8 的 HTTPS (单向认证), 本篇博客的主要内容如下:</p><blockquote><p>1.配置 Tomcat 的 HTTPS.<br>2.通过 HTTPS + ip 的方式来访问资源.<br>3.通过 HTTPS + 域名 的方式来访问资源.</p></blockquote><h2 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h2><p>1.安装了 JDK, 并配置了其相关的环境变量.可参考 Mac 配置 JDK1.8.</p><p>2.安装了 Tomcat8, 并配置了其相关的环境变量.可参考 Mac 配置 Tomcat8.</p><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><blockquote><p>获取证书可以去购买, 这里是在本地机器搭建, 使用 JDK 自带的工具 keytool 生成即可.</p></blockquote><p>打开 mac 终端, 执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -v -genkey -alias tomcat -keyalg RSA -keystore ~/Desktop/tomcat.keystore</span><br></pre></td></tr></table></figure><p>紧接着, 会出现一些让你输入信息的交互信息, 第一个是让你输入 密钥库密码(口令), 我输入的是 1234567, 其他信息可以任意输入内容, 在最后一步, 问你生成的 密钥口令 和 密钥库的口令 是否相同, 如果相同就直接回车, 我这里是直接回车的, 即密码相同, 都是 1234567.</p><p>这样就生成了所谓的证书.</p><h2 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h2><blockquote><p>通过修改 server.xml 来配置.</p></blockquote><p>将 tomcat.keystore 文件复制到 Tomcat 的 conf 目录.</p><p>修改 server.xml 文件, 增加一个 Connector, 内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;  </span><br><span class="line">           maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;  </span><br><span class="line">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;conf/tomcat.keystore&quot; keystorePass=&quot;1234567&quot;/&gt;</span><br></pre></td></tr></table></figure><p>注意, keystoreFile 是证书文件, keystorePass 是密码, 这里配置一定要正确.</p><h2 id="配置-HTTPS-IP"><a href="#配置-HTTPS-IP" class="headerlink" title="配置 HTTPS + IP"></a>配置 HTTPS + IP</h2><p>配置一个虚拟主机, 修改 server.xml 文件, 增加 Host:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;192.168.1.103&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">&lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</span><br><span class="line">&lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>配置 name&#x3D;”192.168.1.103” 是你本机的 ip 地址.</p><p>这个在博客 [iOS: 聊聊 UIWebView 缓存] 中有详细的介绍, 这里不再赘述.</p><p>启动 Tomcat, 进行测试.</p><p>这里需要到 Tomcat 的 bin 目录下, 执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo startup.sh</span><br></pre></td></tr></table></figure><p>启动成功后, 打开浏览器, 输入: <a href="https://192.168.1.103:8443/test.html">https://192.168.1.103:8443/test.html</a>, 这个时候, 会弹出如下的警告(提示不安全):<br><img src="/upload/images/2017/02/15/1.png" alt="1"></p><p>直接点击 Advanced 后再点击 Proceed to 192.168.1.103:8443(unsafe) 处理即可看到页面内容.</p><h2 id="配置-HTTPS-域名"><a href="#配置-HTTPS-域名" class="headerlink" title="配置 HTTPS + 域名"></a>配置 HTTPS + 域名</h2><p>修改 server.xml, 增加 Connector:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;  </span><br><span class="line">          maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;  </span><br><span class="line">          clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;conf/tomcat.keystore&quot; keystorePass=&quot;1234567&quot;/&gt;</span><br></pre></td></tr></table></figure><p>修改 server.xml, 增加 Host:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;www.mark.com&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">&lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</span><br><span class="line">&lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;host 文件, 增加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.mark.com</span><br></pre></td></tr></table></figure><p>启动 Tomcat, 在 bin 目录, 执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown.sh</span><br><span class="line">sudo startup.sh</span><br></pre></td></tr></table></figure><p>启动成功后, 打开浏览器, 输入 <a href="https://www.mark.com:8443/test.html">https://www.mark.com:8443/test.html</a>, 如果弹出警告, 可以像如上处理来显示页面内容.</p><p>如果你这里配置失败了, 请修改一下端口号, 如将 8443 改为 8433.<br>重启 Tomcat 在试一下.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Apache 官方文档: <a href="https://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html">ssl-howto</a></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat Java Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat8 域名配置</title>
      <link href="/2017/02/13/Tomcat8-%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/02/13/Tomcat8-%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>博客 [Mac 配置 Tomcat8] 介绍了在 Mac 下安装和启动 Tomcat.</p><p>接下来介绍, 如何在本地配置 Tomcat8 的域名.</p><p>网上有很多关于 Tomcat 如何配置单域名或者多域名的文章, 很多都是翻译或者复制别人的, 根本没有实践过, 害人不浅!</p><p>结合自己的实践, 把配置的整个过程分享给大家, 希望能帮到你.</p><p>下面进入正题.</p><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>在 Tomcat 的安装(其实是解压的)目录 &#x2F;conf 下有 server.xml 文件.</p><p>将下面内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">              connectionTimeout=&quot;20000&quot;</span><br><span class="line">              redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><p>修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">              connectionTimeout=&quot;20000&quot;</span><br><span class="line">              redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="添加-web-项目"><a href="#添加-web-项目" class="headerlink" title="添加 web 项目"></a>添加 web 项目</h2><blockquote><p>这一步主要是为了后面测试.</p></blockquote><p>很简单, 在 Tomcat 的安装目录 webapps 下面新建 test 文件夹, 里面创建一个 html 文件即可.<br>这里将其命名为 test.html.</p><p>test.html 内容见后面的附录即可.</p><h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><blockquote><p>增加虚拟主机配置.还需要修改 server.xml 文件.</p></blockquote><p>在 server.xml 文件中, 在标签 <Engine> 和</Engine> 之间增加下面的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;www.mark.com&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">    &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>其中, <a href="http://www.mark.com/">www.mark.com</a> 是我自己任意取的一个域名, docBase&#x3D;”test” 是指向上面新建的 test 目录.</p><h2 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h2><p>由于部署在本地, 需要修改 host.</p><p>修改 &#x2F;etc&#x2F;host 文件, 需要 sudo 权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/host</span><br></pre></td></tr></table></figure><p>增加如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.mark.com</span><br></pre></td></tr></table></figure><h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><blockquote><p>这一步, 验证配置是否生效.</p></blockquote><p>启动 Tomcat, 这里的操作比较特殊, 需要 sudo 权限来启动 Tomcat, 否则会报下面的错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.coyote.AbstractProtocol.init Failed to initialize end point associated with ProtocolHandler [&quot;http-nio-80&quot;]</span><br><span class="line"> java.net.SocketException: Permission denied</span><br></pre></td></tr></table></figure><p>因为, 只有 root 用户才可以使用 1024 以下的端口号.</p><p>正确姿势:</p><p>cd 进入 Tomcat 的 bin 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Tomcat/bin</span><br></pre></td></tr></table></figure><p>执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo startup.sh</span><br></pre></td></tr></table></figure><p>成功后, 打开浏览器, 输入 <a href="http://www.mark.com/test.html">http://www.mark.com/test.html</a>, 即可看到页面内容.</p><h2 id="配置另一个域名"><a href="#配置另一个域名" class="headerlink" title="配置另一个域名"></a>配置另一个域名</h2><p>可以配置另外的一个域名, 比如 <a href="http://www.ithome.com/">www.ithome.com</a>, 即多增加一个虚拟主机配置.</p><p>在 server.xml 增加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;www.ithome.com&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">    &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>配置 DNS, 同理修改 etc&#x2F;host 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.ithome.com</span><br></pre></td></tr></table></figure><p>可以看出, 在浏览器输入 <a href="http://www.ithome.com/test.html">http://www.ithome.com/test.html</a> 和 <a href="http://www.mark.com/test.html">http://www.mark.com/test.html</a> 效果是一样的.</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>test.html 文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">Now I input another line, with fancy&lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</span><br><span class="line">&lt;/u&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">Now I input another line, with fancy &lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</span><br><span class="line">&lt;/u&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    mark.zhang is an itman.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.button &#123;</span><br><span class="line">    background-color: #4CAF50;</span><br><span class="line">    border: none;</span><br><span class="line">    color: white;</span><br><span class="line">    padding: 15px 32px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: 86px;</span><br><span class="line">    margin: 50px 200px 100px 300px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    border-radius: 15;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">   &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot; class=&quot;button&quot;&gt;Try it&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   function myFunction() &#123;</span><br><span class="line">       alert(&quot;Blog: www.veryitman.com&quot;);</span><br><span class="line">   &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATS: HTTPS 认证</title>
      <link href="/2017/02/08/ATS-HTTPS-%E8%AE%A4%E8%AF%81/"/>
      <url>/2017/02/08/ATS-HTTPS-%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 <a href="http://www.veryitman.com/2017/02/06/ATS-HTTP-HTTPS-%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/">ATS: HTTP&#x2F;HTTPS 协议介绍</a> 中介绍了一些关于 HTTP&#x2F;HTTPS 的概念以及相关的基本知识。</p><p>今天来聊聊关于 HTTPS 的认证方式和过程。</p><p>说 HTTPS 认证前，我们先了解一下几个相关概念。</p><h2 id="关于加密的几个概念"><a href="#关于加密的几个概念" class="headerlink" title="关于加密的几个概念"></a>关于加密的几个概念</h2><h4 id="1-SSL-协议加密方式"><a href="#1-SSL-协议加密方式" class="headerlink" title="1. SSL 协议加密方式"></a>1. SSL 协议加密方式</h4><blockquote><p>SSL 既用了对称加密，也用了非对称加密。</p></blockquote><p>在建立传输链路时, SSL 首先对对称加密的密钥使用公钥进行非对称加密，链路建立好之后，SSL 对传输内容使用对称加密。</p><p>下面是两种加密方式的对比：</p><p>1.1、对称加密</p><blockquote><p>对称加密采用了对称密码编码技术，它的特点是文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥，这种方法在密码学中叫做 <code>对称加密算法</code>，对称加密算法使用起来简单快捷，密钥较短，且破译困难，除了数据加密标准（DES），另一个对称密钥加密系统是国际数据加密算法（IDEA），它比 DES 的加密性好，而且对计算机功能要求也没有那么高。<br>IDEA 加密标准由 PGP（Pretty Good Privacy）系统使用。</p></blockquote><p>该加密方式，速度快，可加密内容较大，用来加密会话过程中的消息。</p><p>1.2、非对称加密</p><blockquote><p>1976年，美国学者 Dime 和 Henman 为解决信息公开传送和密钥管理问题，提出一种新的密钥交换协议，允许在不安全的媒体上的通讯双方交换信息，安全地达成一致的密钥，这就是“公开密钥系统”。<br>相对于 <code>对称加密算法</code> 这种方法也叫做 <code>非对称加密算法</code>。<br>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）. 公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。<br>因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p></blockquote><p>该加密方式，速度较慢，能提供更好的身份认证技术，用来加密对称加密的密钥。</p><h4 id="2-数字证书"><a href="#2-数字证书" class="headerlink" title="2. 数字证书"></a>2. 数字证书</h4><p>一种文件的名称，好比一个机构或人的签名就好比一个公司的公章一样，能够证明这个机构或人的真实性，其中包含的信息，用于实现上述功能。</p><p>CA 证书（即数字证书）是由 CA（Certification Authority，证书颁发机构）机构发布的数字证书。其内容包含电子签证机关的信息、公钥用户信息、公钥、签名和有效期。这里的公钥是服务端的公钥、签名是指用 <code>hash</code> 散列函数计算公开的明文信息的信息摘要，然后采用 CA 的私钥对信息摘要进行加密，加密完的密文就是签名。 即 <code>证书 =  公钥 + 签名 +申请者和颁发者的信息</code>。 客户端中因为在操作系统中就预置了 CA 的公钥，所以支持解密签名（因为签名使用 CA 的私钥加密的）。</p><p><strong>我们为什么需要 CA 认证机构颁发证书？</strong></p><p>HTTP 协议被认为不安全是因为传输过程容易被监听者勾线监听、伪造通信方以及窃取网络通信内容，而 HTTPS 协议主要解决的便是网络传输的安全性问题。</p><p>我们假设不存在认证机构，任何人都可以制作证书，这带来的安全风险便是经典的 <a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击</a>（Man-in-the-MiddleAttack，简称 “MITM<em>攻击</em>”）问题。</p><p>推荐大家看看 <a href="https://zhuanlan.zhihu.com/p/103456919">网络世界背后的“功臣”——CA 认证</a> 这篇文章。</p><h4 id="3-加密和认证"><a href="#3-加密和认证" class="headerlink" title="3. 加密和认证"></a>3. 加密和认证</h4><p>加密是指通信双方为了防止敏感信息在信道上被第三方窃听而泄漏，将明文通过加密变成密文，如果第三方无法解密的话，就算获得密文也无能为力。</p><p>认证是指通信双方为了确认对方是值得信任的消息发送或接受方，而不是使用假身份的非法者，采取的确认身份的方式。</p><p>只有同时进行了加密和认证才能保证通信的安全，因此在 SSL 通信协议中这两者(加密和认证)都被使用。</p><p>加密一般使用 <code>对称加密算法</code> 和 <code>不对称加密算法</code>，最常见的算法非对称加密就是 RSA 加密算法。</p><h4 id="4-消息摘要"><a href="#4-消息摘要" class="headerlink" title="4. 消息摘要"></a>4. 消息摘要</h4><p>这个技术主要是为了避免消息被篡改，消息摘要也称之为数字摘要。</p><p>消息摘要是把一段信息通过某种不可逆的算法，得出一串字符串。这个字符串就是消息的摘要，如果消息被篡改(发生了变化)，那么摘要也一定会发生变化，当然了如果两个不同的消息生成的摘要是一样的，那么这就叫发生了 <code>碰撞</code>。好的摘要算法是没有人能从中找到 <code>碰撞</code> 或者说极度难找到。</p><p>消息摘要的算法主要有 MD2、MD4、MD5、SHA-1、SHA-256、RIPEMD128、RIPEMD160 等，在证书领域，一般都是用 SHA(安全哈希算法)。消息摘要算法的主要特征是加密过程不需要密钥，并且经过加密的数据无法被解密，只有输入相同的明文数据经过相同的消息摘要算法才能得到相同的密文。</p><p>数字证书、加密和认证、消息摘要三个技术结合起来，就是在 HTTPS 中广泛应用的证书（certificate），证书本身携带了加密&#x2F;解密的信息，并且可以标识自己的身份，也自带消息摘要。</p><h2 id="HTTPS-认证方式"><a href="#HTTPS-认证方式" class="headerlink" title="HTTPS 认证方式"></a>HTTPS 认证方式</h2><p>分为单向和双向认证。</p><h3 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h3><blockquote><p>单向认证较简单，只需要客户端校验服务端的证书的合法性即可。换句话说，只需要客户端验证 SSL 服务器身份，不需要服务端验证 SSL 客户端身份。 也就是说单向认证不需要客户端保存 CA 证书即单向认证 SSL 协议不需要客户拥有 CA 证书。</p></blockquote><p>该认证过程使用下面的流程图来表示:<br><img src="/upload/images/2017/02/08/HTTPS_Single.png" alt="1"></p><h3 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h3><blockquote><p> 双向认证和单向认证原理基本一致，但是需要双方都校验对方的证书的合法性。换句话说， 要求服务器和客户端双方都有证书，客户端需要校验服务端，服务端也需要校验客户端。 也就是说双向认证需要客户端、服务端都要保存证书。</p></blockquote><p>该认证过程使用下面的流程图来表示：<br><img src="/upload/images/2017/02/08/HTTPS_Double.png" alt="1"></p><p>这里总结一下双向通信的流程🤦‍。</p><p><strong>第1步：客户端向服务端发起请求</strong></p><blockquote><p>这个过程主要做了下面两件事情：</p></blockquote><p>①、客户端生成随机数 R1 发送给服务端；</p><p>②、告诉服务端自己支持哪些加密算法；</p><p><strong>第2步：服务器向客户端发送数字证书</strong></p><p>①、服务端生成随机数 R2；</p><p>②、从客户端支持的加密算法中选择一种双方都支持的加密算法（此算法用于后面的会话密钥生成）;</p><p>③、服务端把证书、随机数 R2 和会话密钥生成算法，一起发给客户端；</p><p><strong>第3步：客户端验证数字证书</strong></p><p>①、验证证书的可靠性，先用 CA 的公钥解密被加密过后的证书，能解密则说明证书没有问题，然后通过证书里提供的摘要算法对数据进行摘要计算，然后通过自己生成的摘要与服务端发送的摘要比对，比对如果一致表示通信内容没有被修改；</p><p>②、验证证书合法性，包括证书是否吊销、是否到期、域名是否匹配，通过后则进行后面的流程；</p><p>③、获得证书的公钥、会话密钥生成算法、随机数 R2（服务端生成的）；</p><p>④、客户端生成第三个随机数 R3；</p><p>⑤、根据会话秘钥算法使用 R1、R2、R3 生成会话秘钥；</p><p>⑥、用服务端证书的公钥加密随机数 R3 并发送给服务端；</p><p><strong>第4步：服务器得到会话密钥</strong></p><p>①、服务器用私钥解密客户端发过来的随机数 R3；</p><p>②、根据会话秘钥算法使用 R1、R2、R3 生成会话秘钥；</p><p><strong>第5步：客户端与服务端进行加密会话</strong></p><p>①、客户端发送加密数据给服务端，客户端加密数据后发送给服务端。</p><p>②、服务端响应客户端，服务端用会话密钥解密客户端发送的数据，然后用会话密钥把响应的数据加密发送给客户端；</p><p>③、客户端用会话密钥解密服务端响应的数据；</p><p>从上面可以看出，前4步属于双方的通信握手过程，第5步才进行真正的通信。在握手的过程中使用了 <strong>非对称加密</strong> 主要用于生成后续通信的密钥，在后续的数据通信中使用了 <strong>对称加密</strong>。</p><h3 id="随机数的产生"><a href="#随机数的产生" class="headerlink" title="随机数的产生"></a>随机数的产生</h3><p>不管是单向认证，还是双向认证，都有随机数的产生和发送，其中 R1、R2 都是明文传输，只有 R3 是加密传输的。</p><p>R1：Client Random，是由客户端产生的随机数；</p><p>R2：Server Random，是由服务端产生的随机数；</p><p>R3：是客户端产生的且使用密钥加密的随机数，也称之为 Premaster secret；</p><p>主密钥（Master Secret）是由预备主密钥 Premaster secret 即 R3、R1 和 R2 通过 PRF（PredoRandomFunction，伪随机数函数） 函数生成的（不过在 TLS 1.3 中，不再使用 PRF 这种算法了，而是采用更标准的 HKDF 算法来进行密钥的推导），后续客户端、服务端使用的 <strong>会话密钥</strong> 则是由主密钥根据一定的算法生成的。另外要注意的是，会话密钥也会变的，只是在当前某个会话中它是不变的另外建立会话后它又改变了。</p><p>随机数的产生流程图:<br><img src="/upload/images/2017/02/08/HTTPS_Random.png" alt="1"></p><p>无论是单向认证还是双向认证都会生成三个随机数即上述流程中的 R1、R2、R3，根据三个随机数创建一个对称加密的秘钥。前两个随机数可以被抓包拿到，但第三个随机数已经使用非对称加密算法加密过，所以最终生成的秘钥是保密的。对称秘钥的安全靠第三个随机数的不可破解来保证。理论上来说，只要服务器的公钥足够长，那么 R3（也被称之为 <code>Premaster secret</code>） 可以保证不被破解。但是为了足够安全，可以考虑把握手阶段的算法从默认的 RSA 算法改为 <code>Diffie-Hellman</code> 算法（简称 <code>DH</code> 算法）。</p><p><strong>我们思考一个问题：为何需要生成3个随机数，1个不行吗？</strong></p><p>1、并不是每个主机都能产生完全的随机数，有很多产生的随机数只是弱随机数而已如范围小可能被猜测，这样就不安全了；</p><p>2、用 3 个随机数一起生成密钥能使得伪随机数更接近随机；</p><p>大家可以看看 <a href="https://halfrost.com/https-key-cipher/">TLS 中的密钥计算</a> 这篇文章，里面详细的讲解了随机数生成的原理以及不同 TLS 版本生成会话密钥的差异。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><strong>推荐在线流程图工具</strong>:</p><p><a href="http://www.veryitman.com/2017/02/08/www.processon.com">ProcessOn</a>.</p><p><strong>推荐博文</strong>:</p><p>1、<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">图解SSL&#x2F;TLS协议</a></p><p>2、<a href="http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html">HTTPS的七个误解(译文)</a></p><p>3、<a href="http://blog.sina.com.cn/s/blog_56d8ea900100bzpr.html">对称加密和非对称加密介绍和区别</a></p><p>4、<a href="https://mp.weixin.qq.com/s/LKcdq4HATB05LZUJ7beojw">你连HTTPS 原理没搞懂，还给我讲“中间人攻击”</a></p><p>本文中参考了上面文章的部分内容，感谢以上文章作者们。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP HTTPS TLS SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATS: HTTP/HTTPS 协议介绍</title>
      <link href="/2017/02/06/ATS-HTTP-HTTPS-%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2017/02/06/ATS-HTTP-HTTPS-%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>苹果在2017年要求 App 必须支持 <code>HTTPS</code>，不过, 这个要求,，最后又被苹果自己延期了。我只能说，苹果的开发哥哥们真会玩…<br>但是不管怎么说，作为一名合格的程序员还是有义务和责任了解并理解 HTTPS 整个通信过程以及原理的。</p><p>该系列博客介绍 iOS 上面的 ATS 以及相关的 HTTPS 知识，分为两篇来分享。</p><p>本篇是第一篇，第二篇：<a href="http://www.veryitman.com/2017/02/08/ATS-HTTPS-%E8%AE%A4%E8%AF%81/">ATS: HTTPS 认证</a> 。</p><p>今天先简单了解一下 HTTPS 以及相关的知识。</p><h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><p>先了解一下相关的常用名词。</p><h4 id="1-HTTP"><a href="#1-HTTP" class="headerlink" title="1.HTTP"></a>1.HTTP</h4><p>HyperText Transfer Protocol，超文本传输协议。</p><h4 id="2-HTTPS"><a href="#2-HTTPS" class="headerlink" title="2.HTTPS"></a>2.HTTPS</h4><p>Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议。</p><h4 id="3-SSL"><a href="#3-SSL" class="headerlink" title="3.SSL"></a>3.SSL</h4><p>Secure Socket Layer，安全套接字层。</p><h4 id="4-TLS"><a href="#4-TLS" class="headerlink" title="4.TLS"></a>4.TLS</h4><p>Transport Layer Security，传输层安全.其前身就是 SSL.</p><h4 id="5-ATS"><a href="#5-ATS" class="headerlink" title="5.ATS"></a>5.ATS</h4><p>App Transport Security，应用传输安全。</p><h2 id="协议介绍"><a href="#协议介绍" class="headerlink" title="协议介绍"></a>协议介绍</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP 全称是 <code>HyperText Transfer Protocol</code>，即超文本传输协议，是互联网上使用最广泛的一种协议，所有 WWW 文件必须遵循的标准。</p><p>HTTP 协议传输的数据都是未加密的, 也就是明文的，因此使用 HTTP 协议传输隐私信息非常不安全。默认使用 TCP 端口 <code>80</code>.</p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>安全的超文本传输协议，<code>Hyper Text Transfer Protocol over Secure Socket Layer</code>，网景公式设计了 SSL(Secure Socket Layer) 协议用于对 HTTP 协议传输的数据进行加密，保证会话过程中的安全性。</p><p>HTTPS 协议默认使用 TCP 的 <code>443</code>  端口。</p><h3 id="拆分-HTTPS"><a href="#拆分-HTTPS" class="headerlink" title="拆分 HTTPS"></a>拆分 HTTPS</h3><h4 id="SSL-协议加密方式"><a href="#SSL-协议加密方式" class="headerlink" title="SSL 协议加密方式"></a>SSL 协议加密方式</h4><p>SSL 协议即用到了对称加密也用到了非对称加密(公钥加密)，在建立传输链路时，SSL 首先对对称加密的密钥使用公钥进行非对称加密（主要用于证书校验，这里指的证书是CA认证机构颁发的证书也就是常说的数字证书），链路建立好之后，SSL 对传输内容使用对称加密。</p><blockquote><p>1、对称加密（通信双方使用同一个密钥解密）<br>速度高，可加密内容较大，用来加密会话过程中的消息。</p></blockquote><blockquote><p>2、非对称加密（通信双方使用不同密钥解密或者解密）<br>加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥。</p></blockquote><h4 id="HTTP-SSL"><a href="#HTTP-SSL" class="headerlink" title="HTTP+SSL"></a>HTTP+SSL</h4><p>HTTPS，可以看做是 HTTP+SSL，所以我们应该把重点在 SSL 上面。</p><h4 id="HTTPS-1"><a href="#HTTPS-1" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>在 HTTP 基础上提出的一种安全的 HTTP 协议，因此可以称为安全的超文本传输协议。</p><p>HTTP 协议直接放置在 TCP 协议之上，而 HTTPS 提出在 HTTP 和 TCP 中间加上一层加密层。</p><p>从发送端看，这一层负责把 HTTP 的内容加密后送到下层的 TCP，从接收方看，这一层负责将 TCP 送来的数据解密还原成 HTTP 的内容。</p><h4 id="SSL-Secure-Socket-Layer"><a href="#SSL-Secure-Socket-Layer" class="headerlink" title="SSL(Secure Socket Layer)"></a>SSL(Secure Socket Layer)</h4><p>是 Netscape 公司设计的主要用于 WEB 的安全传输协议.<br>它在 HTTPS 协议栈中负责实现上面提到的加密层.</p><p>一个 HTTPS 协议栈大致是这样的：<br><img src="/upload/images/2017/02/06/HTTP+SSL.png" alt="1"></p><h4 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h4><p>HTTPS，也称作 HTTP over TLS.</p><p>TLS (传输层安全, Transport Layer Security) 的前身是 SSL，<code>TLS 1.0</code> 通常被标示为 <code>SSL 3.1</code>，<code>TLS 1.1</code> 为 <code>SSL 3.2</code>，<code>TLS 1.2</code> 为 <code>SSL 3.3</code>.</p><blockquote><p>苹果 ATS (App Transport Security)，要求支持 HTTPS 的 TLS 版本最低为 V1.2.</p></blockquote><p>下图描述了在 TCP&#x2F;IP 协议栈中 TLS(各子协议）和 HTTP 的关系:<br><img src="/upload/images/2017/02/06/tcp-ip-model.png" alt="1"></p><p>其中 Handshake protocol，Change Ciper Spec protocol 和 Alert protocol 组成了 SSL Handshaking Protocols.</p><p>SSL 和 TLS 的发展历史:</p><blockquote><p>1994年，NetScape 公司设计了 SSL 协议（Secure Sockets Layer）的 1.0 版，但是未发布。</p></blockquote><blockquote><p>1995年，NetScape 公司发布 SSL 2.0 版，很快发现有严重漏洞。</p></blockquote><blockquote><p>1996年，SSL 3.0 版问世，得到大规模应用。</p></blockquote><blockquote><p>1999年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0 版。</p></blockquote><blockquote><p>2006年和2008年，TLS 进行了两次升级，分别为 TLS 1.1 版和 TLS 1.2 版.最新的变动是2011年 TLS 1.2 的修订版。</p></blockquote><blockquote><p>TLS 1.3 改动会比较大，目前还在草案阶段。</p></blockquote><h2 id="HTTP-和-HTTPS-区别"><a href="#HTTP-和-HTTPS-区别" class="headerlink" title="HTTP 和 HTTPS 区别"></a>HTTP 和 HTTPS 区别</h2><p>HTTPS 和 HTTP 的区别主要为以下四点:</p><p>1、HTTPS 协议需要到 CA 申请证书，一般免费证书很少，需要交费，费用越高那么安全性会越好，所谓一分价钱一分货在这里被体现的淋漓尽致。</p><p>2、HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SLL&#x2F;TLS 加密传输协议(非对称加密)。</p><p>3、HTTP 和 HTTPS 不同的连接方式，用的端口也不一样，前者是 80，后者是 443.</p><p>4、HTTP 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议更加安全。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATS HTTP HTTPS SSL TLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN: Yarn</title>
      <link href="/2017/02/05/RN-Yarn/"/>
      <url>/2017/02/05/RN-Yarn/</url>
      
        <content type="html"><![CDATA[<p>React Native 正式版已经更新到 0.41.1 了.</p><p>最近使用 <code>react-native-cli</code> 来创建 React Native 工程, 提示如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This will walk you through creating a new React Native project in /Users/mark/workspace/mzProjs/ReactNative/LatestRN</span><br><span class="line">Installing react-native...</span><br><span class="line">Consider installing yarn to make this faster: https://yarnpkg.com</span><br></pre></td></tr></table></figure><p>其实 Yarn 也一直在更新, 最新版本 v0.20.0.</p><p>官网对应的有中文版本和中文文档, 可以 <a href="http://yarnpkg.top/">点此进入</a>.</p><h2 id="Yarn-简介"><a href="#Yarn-简介" class="headerlink" title="Yarn 简介"></a>Yarn 简介</h2><p>一句话介绍:</p><blockquote><p>A new package manager for JavaScript</p></blockquote><p>Yarn 是一个依赖管理工具，它能够管理你的代码，并与全世界的开发者分享你的代码.</p><p>Yarn 是高效、安全和可靠.</p><blockquote><p>1.高效: 使用了缓存, 可以很快的获取已经 download 的包.<br>2.安全: 在代码被执行之前，会使用CheckSum算法验证每一个依赖包的完整性.<br>3.可靠: 在不同平台(windows&#x2F;mac&#x2F;linux)只要是同一份配置文件, 执行结果是一样的.</p></blockquote><p>还有很多特性:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Offline Mode</span><br><span class="line">If you&#x27;ve installed a package before, you can install it again without any internet connection.</span><br><span class="line">Deterministic</span><br><span class="line">The same dependencies will be installed the same exact way across every machine regardless of install order.</span><br><span class="line">Network Performance</span><br><span class="line">Yarn efficiently queues up requests and avoids request waterfalls in order to maximize network utilization.</span><br><span class="line">Same Packages</span><br><span class="line">Install any package from npm and keep your package workflow the same.</span><br><span class="line">Network Resilience</span><br><span class="line">A single request failing won&#x27;t cause an install to fail. Requests are retried upon failure.</span><br><span class="line">Flat Mode</span><br><span class="line">Resolve mismatching versions of dependencies to a single version to avoid creating duplicates.</span><br></pre></td></tr></table></figure><p>Yarn 能够让你使用其他开发者开发的代码，让你更容易的开发软件.</p><p>代码是通过依赖包 (有时也被称为组件). 在每一个依赖中会定义一个 package.json 文件，用来描述这个依赖包中所有要被分享的代码.</p><p>Yarn 是开源的, 点击 <a href="http://yarnpkg.top/">Github</a> 了解更多.</p><p>对比 npm 和 yarn, 可以阅读文章:<br><a href="https://www.sitepoint.com/yarn-vs-npm/">Yarn vs npm: Everything You Need to Know</a></p><p>中文版:<br><a href="https://gold.xitu.io/entry/580de578bf22ec0058330692">译 Yarn vs npm: 你需要知道的一切</a></p><h2 id="安装-Yarn"><a href="#安装-Yarn" class="headerlink" title="安装 Yarn"></a>安装 Yarn</h2><p>具体安装的教程, 可以参考官网的 <a href="http://yarnpkg.top/Installation.html">安装教程</a>.</p><p>在 MacOS 上面使用 Homebrew 安装很方便, 两个命令即可完成.</p><p>下面具体说说操作步骤.</p><p>强烈开发同事购买一个 VPN, 这个年头没有 VPN, 日子不好过.</p><p>1.更新 brew</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update --verbose</span><br></pre></td></tr></table></figure><p>最后加上参数 <code>--verbose</code>, 不然等待的过程很煎熬, 没有任何提示信息.</p><p>2.安装 yarn</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure><p>在安装过程中, 如果提示如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please note by default only English locale support is provided. If you need</span><br><span class="line">full locale support you should either rebuild with full icu:</span><br><span class="line">  `brew reinstall node --with-full-icu`</span><br><span class="line">or add full icu data at runtime following:</span><br><span class="line">  https://github.com/nodejs/node/wiki/Intl#using-and-customizing-the-small-icu-build</span><br></pre></td></tr></table></figure><p>可以重新安装已经安装的 node, 执行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew reinstall node --with-full-icu</span><br></pre></td></tr></table></figure><p>在执行上面安装命令的时候, 如果卡住不动或者很久, Ctrl+C 终止当前的操作, 重新操作一遍即可.</p><p>安装成功后, 可以查看安装的版本信息, 执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn --verbose</span><br></pre></td></tr></table></figure><p>会显示如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn install v0.20.0</span><br><span class="line">verbose Performing &quot;GET&quot; request to &quot;https://yarnpkg.com/latest-version&quot;.</span><br><span class="line">[1/4] 🔍  Resolving packages...</span><br><span class="line">success Already up-to-date.</span><br><span class="line">✨  Done in 0.29s.</span><br></pre></td></tr></table></figure><p>使用 brew 安装 Yarn 后, 不需要设置环境变量.</p><h2 id="Yarn-与-React-Native"><a href="#Yarn-与-React-Native" class="headerlink" title="Yarn 与 React Native"></a>Yarn 与 React Native</h2><p>在 <code>React Native 0.37</code> 版本中已经加入了对 Yarn 的支持.</p><p>可以在 React Native 的官方的这篇 <a href="https://facebook.github.io/react-native/blog/2016/11/08/introducing-button-yarn-and-a-public-roadmap.html">Blog</a> 找到更多信息.</p><p>用 Yarn 创建 React Native 工程</p><p>既然 RN 已经支持了 Yarn, 那么就可以使用 Yarn 来管理和创建 RN 工程了.</p><p>使用 Yarn, 必须满足几个条件:</p><blockquote><p>1.react-native-cli 的版本不能小于 1.2.0 版本.<br>2.React Natvie 必须是 0.37 及以上的版本.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init MZLatestRN</span><br></pre></td></tr></table></figure><p>当你安装好 Yarn 后, 执行上面的命令可以出现提示信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This will walk you through creating a new React Native project in ~/workspace/Projs/ReactNative/MZLatestRN</span><br><span class="line">Using yarn v0.20.0</span><br><span class="line">Installing react-native...</span><br></pre></td></tr></table></figure><p>可以看出, RN 会使用 Yarn 来创建工程.</p><p>其中, <code>~/workspace/Projs/ReactNative</code> 是我本地的工作目录. <code>MZLatestRN</code> 是要创建的 RN 工程名称.</p><p>如果你的网络好的话, 大概1分钟就可以创建成功.</p><p>工程目录:<br><img src="/upload/images/2017/02/05/1.png" alt="1"></p><p>可以看出多了 <code>yarn.lock</code> 文件.</p><p>Yarn 还在茁壮成长, 希望它越来越好, 更多的使用和工作原理可以参考 <a href="https://yarnpkg.com/docs">官方 Doc</a>, 介绍的很详细.</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative iOS Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 PHP 遇到的问题</title>
      <link href="/2017/02/02/%E5%AE%89%E8%A3%85-PHP-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2017/02/02/%E5%AE%89%E8%A3%85-PHP-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在博客 <a href="http://www.veryitman.com/2017/02/02/PHP-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/">PHP 开发准备</a> 介绍了安装并部署 PHP 程序到 Nginx.</p><p>今天分享在安装中遇到的问题和其他工具的安装, 以及常用的操作, 包括 MySQL, Nginx 等.</p><h2 id="pecl-安装"><a href="#pecl-安装" class="headerlink" title="pecl 安装"></a>pecl 安装</h2><blockquote><p>PEAR 是 PHP 扩展与应用库(PHP Extension and Application Repository) 的缩写。它是一个 PHP 扩展及应用的一个代码仓库，简单地说，PEAR 就是 PHP 的 CPAN.</p></blockquote><blockquote><p>PECL (PHP Extension Community Library)，PHP 的扩展库，它提供了一系列已知的扩展库，由 C++ 等其他语言编写而成，以 .so 形式出现，.so 为共享库, 是 shared object, 用于动态连接的, 和 dll 差不多，为比 PEAR 更快，但是与 PEAR 不同的是，PECL 需要在服务器上配置并被注册到主机中.</p></blockquote><blockquote><p>最直接的表述: PEAR 是 PHP 的上层扩展，PECL 是 PHP 的底层扩展.</p></blockquote><p>下面说如何安装 pecl 和 pear.</p><p>1.下载 pear</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://pear.php.net/go-pear.phar</span><br></pre></td></tr></table></figure><p>2.安装 pear</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php -d detect_unicode=0 go-pear.phar</span><br></pre></td></tr></table></figure><p>3.执行以上命令后会进行安装过程，会有一些配置选项</p><p>输入1，回车，配置 pear 路径为：<code>/usr/local/pear</code><br>输入4，回车，配置命令路径为：<code>/usr/local/bin</code></p><p>4.回车两次，其他让其默认，安装完成.</p><p>5.可以通过命令检查 pear 是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pear version</span><br></pre></td></tr></table></figure><p>或者执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecl version</span><br></pre></td></tr></table></figure><p>可以看到类似信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PEAR Version: 1.10.1</span><br><span class="line">PHP Version: 5.6.27</span><br><span class="line">Zend Engine Version: 2.6.0</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h4 id="MySQL-操作"><a href="#MySQL-操作" class="headerlink" title="MySQL 操作"></a>MySQL 操作</h4><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start #启动</span><br><span class="line">mysql.server stop  #停止</span><br><span class="line">mysql -u root -p   #用 user 和 pwd 连接</span><br><span class="line">php-fpm 相关操作</span><br></pre></td></tr></table></figure><p>1.运行 php-fpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php-fpm -D</span><br></pre></td></tr></table></figure><p>2.关闭 php-fpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall php-fpm</span><br></pre></td></tr></table></figure><p>3.查看 php-fpm 运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -Pni4 | grep LISTEN | grep php</span><br></pre></td></tr></table></figure><p>可以看到 (fpm 默认在 9000 端口)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php-fpm  84200   root  8u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm  84201   _www  0u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm  84202   _www  0u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm  84203   _www  0u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br></pre></td></tr></table></figure><p>4.php-fpm 开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/php56/*.plist ~/Library/LaunchAgents</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</span><br></pre></td></tr></table></figure><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>1.测试配置是否有语法错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>2.启动 nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>3.重新加载配置|重启|停止|退出 nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload|reopen|stop|quit</span><br></pre></td></tr></table></figure><p>4.开机启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure><p>5.nginx 监听 80 端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:wheel /usr/local/Cellar/nginx/1.6.0_1/bin/nginx</span><br><span class="line">sudo chmod u+s /usr/local/Cellar/nginx/1.6.0_1/bin/nginx</span><br></pre></td></tr></table></figure><h2 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h2><p>因为使用了 Homebrew 安装的 PHP, 配置文件的目录不是常规的 &#x2F;etc</p><p>这里有几个目录需要知道, 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/private/etc</span><br><span class="line">/usr/local/etc/php/5.6</span><br><span class="line">/usr/local/var/www</span><br></pre></td></tr></table></figure><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>1.执行 sudo php-fpm -D 报 php56-intl&#x2F;intl.so 加载问题</p><p>warning 的内容大致如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NOTICE: PHP message: PHP Warning:  PHP Startup: Unable to load dynamic library &#x27;/usr/local/opt/php56-intl/intl.so&#x27; - dlopen(/usr/local/opt/php56-intl/intl.so, 9): image not found in Unknown on line 0</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Warning&lt;/b&gt;:  PHP Startup: Unable to load dynamic library &#x27;/usr/local/opt/php56-intl/intl.so&#x27; - dlopen(/usr/local/opt/php56-intl/intl.so, 9): image not found in &lt;b&gt;Unknown&lt;/b&gt; on line &lt;b&gt;0&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">Unknown(0) : Warning - PHP Startup: Unable to load dynamic library &#x27;/usr/local/opt/php56-intl/intl.so&#x27; - dlopen(/usr/local/opt/php56-intl/intl.so, 9): image not found</span><br><span class="line">[31-Dec-2016 22:40:38] NOTICE: PHP message: PHP Warning:  PHP Startup: mcrypt: Unable to initialize module</span><br><span class="line">Module compiled with build ID=API20131226,NTS</span><br><span class="line">PHP    compiled with build ID=API20131226,NTS,debug</span><br><span class="line">These options need to match</span><br><span class="line"> in Unknown on line 0</span><br></pre></td></tr></table></figure><p>解决方案: 执行下面的命令, 即可解决.方案来源 <a href="https://github.com/Homebrew/homebrew-php/issues/2544">Github</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew reinstall --build-from-source php56-intl</span><br></pre></td></tr></table></figure><p>2.执行 sudo php-fpm -D 报 PHP Startup: mcrypt: Unable to initialize module</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">31-Dec-2016 22:56:51] NOTICE: PHP message: PHP Warning:  PHP Startup: mcrypt: Unable to initialize module</span><br><span class="line">Module compiled with build ID=API20131226,NTS</span><br><span class="line">PHP    compiled with build ID=API20131226,NTS,debug</span><br><span class="line">These options need to match</span><br><span class="line"> in Unknown on line 0</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Warning&lt;/b&gt;:  PHP Startup: mcrypt: Unable to initialize module</span><br><span class="line">Module compiled with build ID=API20131226,NTS</span><br><span class="line">PHP    compiled with build ID=API20131226,NTS,debug</span><br><span class="line">These options need to match</span><br><span class="line"> in &lt;b&gt;Unknown&lt;/b&gt; on line &lt;b&gt;0&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">Unknown(0) : Warning - PHP Startup: mcrypt: Unable to initialize module</span><br><span class="line">Module compiled with build ID=API20131226,NTS</span><br><span class="line">PHP    compiled with build ID=API20131226,NTS,debug</span><br><span class="line">These options need to match</span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew reinstall --build-from-source php56-intl</span><br></pre></td></tr></table></figure><p>3.连接 mysql</p><p>使用 <code>mysql -u root -p</code> 连接 mysql, 提示 Can’t connect to local MySQL server through socket ‘&#x2F;tmp&#x2F;mysql.sock 错误.</p><p>解决方案: 启动 mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start</span><br></pre></td></tr></table></figure><p>重新连接即可.</p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP MySql nginx php-fpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 开发准备</title>
      <link href="/2017/02/02/PHP-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/"/>
      <url>/2017/02/02/PHP-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<p><strong>注意</strong>：这篇文章是基于 Homebrew 安装 php5.6 以及 nginx 和 mysql 的介绍，安装高版本的 php 请绕行。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>亲自实践在 MacOS 上面安装 PHP5.6+MySQL+Nginx.</p><p>将自己遇到的问题和对应的解决方案, 分享出来, 希望能帮到你.</p><p>MacOS 上面搭建 PHP 开发环境, 使用 Homebrew 来安装对应的开发套件, 就更加简单了.</p><p>这篇博客的目的就是安装 PHP 开发环境, 并将第一个 PHP 程序部署在 Nginx 上面.</p><p>如果在安装和使用过程中遇到问题, 可以查看这篇博客: <a href="http://www.veryitman.com/2017/02/02/%E5%AE%89%E8%A3%85-PHP-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/">Mac PHP 安装遇到的问题</a>.</p><p>下面开始介绍具体的安装步骤.</p><h2 id="一-安装-Homebrew"><a href="#一-安装-Homebrew" class="headerlink" title="一. 安装 Homebrew"></a>一. 安装 Homebrew</h2><p>这个大家可以自行访问 <a href="http://brew.sh/">Homebrew</a> 了解, 这里不再涉及具体的安装过程和方法.</p><h2 id="二-安装-php56"><a href="#二-安装-php56" class="headerlink" title="二. 安装 php56"></a>二. 安装 php56</h2><blockquote><p>1.加入官方源</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/dupes</span><br><span class="line">brew tap homebrew/versions</span><br><span class="line">brew tap homebrew/php</span><br></pre></td></tr></table></figure><blockquote><p>2.安装 PHP</p></blockquote><p>默认安装会运行在 Apache 下.<br>而我们要使它运行在 PHP-fpm 下，所以要增加参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--with-fpm --without-apache</span><br></pre></td></tr></table></figure><p>查看所有安装参数可以输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew option php56</span><br></pre></td></tr></table></figure><p>进行查看，参考安装指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">brew install php56 \</span><br><span class="line">--without-snmp \</span><br><span class="line">--without-apache \</span><br><span class="line">--with-debug \</span><br><span class="line">--with-fpm \</span><br><span class="line">--with-intl \</span><br><span class="line">--with-homebrew-curl \</span><br><span class="line">--with-homebrew-libxslt \</span><br><span class="line">--with-homebrew-openssl \</span><br><span class="line">--with-imap \</span><br><span class="line">--with-mysql \</span><br><span class="line">--with-tidy</span><br></pre></td></tr></table></figure><p>这里使用了下面的选项:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with-homebrew-curl</span><br></pre></td></tr></table></figure><p>我试过不带此选项, 安装 PHP56 会失败, 找不到 curl.</p><p>安装成功后, 可以查看版本信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br><span class="line">php-fpm -v</span><br></pre></td></tr></table></figure><p>此时看到是的系统自带的版本.</p><p>下面一步是增加环境变量, 完成后在看版本信息, 即可.</p><blockquote><p>3.配置 PHP 环境变量</p></blockquote><p>配置环境变量的目的是要使用 brew 安装的 PHP 和 PHP-fpm, 不使用 MacOS 自带的 PHP 版本.</p><p><code>/usr/local/sbin/</code> 下面是我们 brew 安装的 PHP, 其实他是一个软连接指向:<br><code>/usr/local/Cellar/php56/5.6.27_4/sbin</code></p><p><code>/usr/local/bin/</code> 下面也是 brew 安装的 PHP, 指向:<br><code>/usr/local/Cellar/php56/5.6.27_4/bin</code></p><p>vim ~&#x2F;.bash_profile 增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/sbin:$PATH&quot;</span><br></pre></td></tr></table></figure><p>使其立即生效, 执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>或者重启终端.</p><p>如果想看系统的 PHP 版本可以这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/php -v</span><br></pre></td></tr></table></figure><blockquote><p>4.配置 php-fpm</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /private/etc/php-fpm.conf</span><br></pre></td></tr></table></figure><p>找到 error_log 项，添加下面配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_log = /usr/local/var/log/php-fpm.log</span><br><span class="line">pid = /usr/local/var/run/php-fpm.pid</span><br></pre></td></tr></table></figure><p>否则会报:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FPM initialization failed</span><br></pre></td></tr></table></figure><h2 id="三-安装-nginx"><a href="#三-安装-nginx" class="headerlink" title="三. 安装 nginx"></a>三. 安装 nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>创建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/var/logs/nginx</span><br><span class="line">mkdir -p /usr/local/etc/nginx/sites-available</span><br><span class="line">mkdir -p /usr/local/etc/nginx/sites-enabled</span><br><span class="line">mkdir -p /usr/local/etc/nginx/conf.d</span><br><span class="line">mkdir -p /usr/local/etc/nginx/ssl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www</span><br><span class="line">sudo chown :staff /var/www</span><br><span class="line">sudo chmod 775 /var/www</span><br><span class="line">vi /var/www/info.php</span><br><span class="line">vi /var/www/index.html</span><br><span class="line">vi /var/www/403.html</span><br><span class="line">vi /var/www/404.html</span><br></pre></td></tr></table></figure><p>改变 nginx.conf 配置文件</p><p>该配置文件在 <code>/usr/local/etc/nginx/nginx.conf</code> 下面.</p><p>我的配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">error_log  /usr/local/etc/nginx/logs/error.log debug;</span><br><span class="line">pid        /usr/local/var/run/nginx.pid;</span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  256;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include             mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"> </span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">    access_log  /usr/local/etc/nginx/logs/access.log  main;</span><br><span class="line"> </span><br><span class="line">    sendfile            on;</span><br><span class="line"> </span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line"> </span><br><span class="line">    index index.html index.php;</span><br><span class="line"> </span><br><span class="line">    include /usr/local/etc/nginx/sites-enabled/*; </span><br><span class="line">    include /usr/local/etc/nginx/conf.d/*;</span><br><span class="line">     server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</span><br><span class="line">            index  index.php index.html index.htm; #加index.php</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</span><br><span class="line">index  index.php index.html index.htm; #加index.php</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置了我的 web 目录和支持的文件.</p><h2 id="四-运行-PHP"><a href="#四-运行-PHP" class="headerlink" title="四. 运行 PHP"></a>四. 运行 PHP</h2><p>创建 index.php</p><p>启动 PHP-fpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php-fpm</span><br></pre></td></tr></table></figure><p>或者以守护进程的方式来启动 PHP-fpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php-fpm -D</span><br></pre></td></tr></table></figure><p>启动 Nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>编辑 index.php</p><p>在 web 目录(我配置的) <code>/Users/mark/workspace/mzProjs/phpdev/nginx/nginx_sites/</code> 新建文件 <code>index.php</code>.</p><p>index.php 里面可以编写代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- lang: php --&gt;</span><br><span class="line">&lt;!-- ~/nginx_sites/index.php --&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    echo &quot;Hello PHP&quot;;</span><br><span class="line">    echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">    </span><br><span class="line">    echo &quot;学习 php&quot;;</span><br><span class="line">    echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">    echo phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器, 你会看到下面的页面:<br><img src="/upload/images/2017/02/02/php1.png" alt="1"></p><p>也可以在该目录下创建其他 php 文件, 如 mark.php 文件.</p><p>浏览器中输入:<br><a href="http://localhost:8080/mark.php">http://localhost:8080/mark.php</a> 可以执行相对应的文件.</p><p>这里的 <code>mark.php</code> 是自己新建的 php 文件.</p><h2 id="五-安装-MySQL"><a href="#五-安装-MySQL" class="headerlink" title="五. 安装 MySQL"></a>五. 安装 MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p>等待安装成功后，直接启动和连接数据库。</p><ul><li>启动 mysql</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start</span><br></pre></td></tr></table></figure><ul><li>连接 mysql</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP MySql nginx php-fpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过年回家这几天</title>
      <link href="/2017/01/31/%E8%BF%87%E5%B9%B4%E5%9B%9E%E5%AE%B6%E8%BF%99%E5%87%A0%E5%A4%A9/"/>
      <url>/2017/01/31/%E8%BF%87%E5%B9%B4%E5%9B%9E%E5%AE%B6%E8%BF%99%E5%87%A0%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>从放假回家到现在已经一个多星期了, 感触颇多.</p><p>主要有以下几个感触:</p><blockquote><p>1.健康最重要.<br>2.坚持做好一件事情.<br>3.感恩.</p></blockquote><p><img src="/upload/images/2017/01/31/1.jpeg" alt="1"></p><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>前两年回家, 还能见着很多长辈, 互相嘘寒问暖, 家长里短的闲聊, 如今有些已离我远去.</p><p>无情的疾病夺走了尚未花甲的他们, 让人不禁感叹生命的脆弱.</p><p>我小的时候, 很喜欢和长辈们聊天.</p><p>主要是他们讲, 我做一个小小的听众, 觉得他们懂得特别多, 从天文到地里, 从文学到艺术, 讲的有声有色.<br>每逢夏季, 我都会搬着小板凳, 在屋前的老树下, 纠缠他们, 逼着嚷着让他们给我讲故事, 甭提有多高兴.</p><p>如今, 老树犹在, 他们已不在人世.睹物思人.</p><p>农村大部分人, 不太关注自己的健康, 唯一衡量自己身体状况的标准就是 <code>米饭馒头能吃多少</code>.</p><p>很多人, 明明已经感觉到身体不适, 也不愿意去医院做检查, 就这样日积月累成疾.<br>等实在忍受不了才去医院检查, 为时已晚.</p><p>平时不注意自己的身体, 身体早晚都会让你注意.</p><p>无论平时工作再忙, 也要坚持锻炼, 没有健康的体魄, 其他的都是扯淡.</p><h2 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h2><p>农村这几年鼓励年轻人在家创业, 搞养殖. 有很多人放弃了打工, 回家拿着补贴开始有模有样的创业.</p><p>前几年回老家, 看到各种搞养殖的, 有养鸡养鸭养鹅的, 有养羊养猪养牛的, 如雨后春笋, 遍地开花.</p><p>但是今年回家, 看到很多荒凉的房子, 无人问津.</p><p>我问过几个小伙子(之前在家搞养殖的人, 最后放弃了的).他们跟我说的基本都一样, 太累了, 收益慢!<br>搞养殖, 的确很累, 也很枯燥无味, 每天和这些不会说话的动物们待在一起, 喂它们吃喝, 管他们温饱, 实在乏味.</p><p>另外有两个年轻人, 从开始养殖到现在已经坚持五六年了, 搞得风生水起, 家里盖起了楼房, 取了巧媳妇, 生了胖小子, 一家人其乐融融.<br>他们跟我说的基本一样, 只要坚持, 就有收获!</p><p>这两个坚持下来的年轻人, 他们相信自己能够把这份事业做好, 他们把别人眼中的脏活累活当做一种快乐, 一种享受!</p><p>刚开始, 很艰难, 他们也想过放弃, 但是又舍不得这几年的付出, 于是就坚持下来了, 并且收获了不少意想不到的知识, 不管是物质上还是精神上都得到了满足.</p><p>世上, 没有一帆风顺的事业.</p><p>只要自己喜欢, 感兴趣的行业, 就值得你去坚持.<br>如果你从内心都不感兴趣, 趁早放弃, 因为你很难坚持下来.</p><p>想投机取巧的成就一份事业, 只有神话故事里有吧!</p><p>不经一番寒彻骨, 哪得梅花扑鼻香!</p><h2 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h2><p>小的时候, 家里很拮据, 我能够把大学念完, 简直就是天意.</p><p>父母永远只会对我说一句话, 只要你想上学, 我们就支持到底.</p><p>我知道家里的经济情况, 所以在学习上也是不遗余力, 每次放学除了帮爸爸妈妈干农活, 就是完成家庭作业, 练字背书.</p><p>那个时候, 不知道哪来的狠劲, 即使是寒冬腊月, 也要坚持写作业, 即使是手都冻肿了, 也要练字.</p><p>当我接到重点高中通知书的那天, 父亲高兴的合不拢嘴, 心理充满了骄傲.</p><p>我能感觉到……</p><p>然而考上高中, 接下来就是凑钱交学费, 隔壁有个伯伯, 他说学费不够, 算他的.<br>那个时候, 大家家里都不宽裕, 能借钱给你的, 简直就是大恩人.<br>一直到现在, 我都很感激他, 每年过年回家, 我都会给伯伯买点礼物, 给个红包, 陪他聊聊天.他还开玩笑的说, 当年自己的投资, 算是有了回报了.</p><p>这辈子, 我们最应该感谢的是我们自己的父母, 养育我们成人, 送我们读书上学. 过年回家, 要多陪陪他们, 珍惜和他们在一起的每一刻.</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习杂谈</title>
      <link href="/2017/01/27/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"/>
      <url>/2017/01/27/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p>今天是中国传统节日, 大年三十, 祝大家新年快乐, 身体健康, 幸福美满.</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>最近无论是朋友还是同事或者博友, 都问过我关于学习方面的事情.</p><p>探讨的问题大概分为如下几种:</p><p>怎么有效的学习新知识?<br>怎么快速掌握新知识?<br>是否有必要每天学习?<br>如何坚持学习?<br>谈到关于学习的话题, 我也不是什么专家, 更不是心理咨询师, 只是谈谈个人的一些看法和经历, 希望能给大家带来一点点的帮助.</p><p>不要只是嘴上说 <code>我感兴趣</code>, 如果没有驱动和目标, 兴趣永远都只是兴趣.</p><h2 id="你为什么学习它"><a href="#你为什么学习它" class="headerlink" title="你为什么学习它"></a>你为什么学习它</h2><p>学习知识之前, 问问自己为什么要学它? 大部分人学习新东西都是为了工作或者为了更好的工作或者为了转行或者其他目的, 也有一部分人是为了兴趣爱好.</p><p>这里我只谈为了工作而去学习新知识的内容, 其他方面的我自己也没有什么心得体会, 不能乱说.</p><p>既然为了工作或者更好的工作来学习, 那么我们就明确了目标, 如果你已经有了目标, 恭喜你, 你即将成功了.</p><p>有一些人说, 我学习它, 这个东西不一定哪天就有用了, 我怕将来失业.<br>这中担心不是在杞人忧天, 特别是在互联网的时代, 如果不学习很容易就落伍啦, 君担心完全在理!</p><p>但是, 当下你最应该考虑的是目前掌握的技能是否已经熟练了, 是否是能够独当一面了, 如果深学下去会不会更有前途? 如果是, 请你深入去学习, 不要太杞人忧天了!</p><p>在精钻一门学问的情况下, 可以扩大自己的知识面, 而不是 <code>吃着碗里看着锅里</code> 的, 要脚踏实地的大步向前.</p><h2 id="坚持学习"><a href="#坚持学习" class="headerlink" title="坚持学习"></a>坚持学习</h2><p>上面的扯淡有点多啊.回正题.</p><p>既然搞清楚了为什么学习它, 接下来就是搞定它.</p><p>你需要有坚持学习的态度和行动, 不然一切都会成为云烟. 那么当初咬牙切齿的抱负, 结果都是冲动的惩罚.</p><p>学习新知识的前期是很累的, 但是只要你意志足够坚定, 一定可以克服种种困难.</p><p>记得当初接手一个二手项目, 项目也是足够复杂, 并且有很多引擎之前都没有用过, 上面领导逼得比较紧, 没办法, 只能将其拿下, 每天晚上挑灯夜战, 在 log 的海洋里遨游.</p><p>很快自己掌握了新的知识, 结合项目, 不断的去调试和总结, 最终按期完成需求, 回过头想想, 想要坚持做好一件事情, 除了自身的自我约束, 还需要外界环境的 倒逼.</p><p>当你坚持不住的时候, 问问自己, 是否已经到了极限, 如果感到累了, 适当的放松一下, 比如出去跑个步, 打个球或者找朋友叙叙旧.</p><p>适当的给自己一点压力, 事半功倍.</p><h2 id="学习的渠道"><a href="#学习的渠道" class="headerlink" title="学习的渠道"></a>学习的渠道</h2><p>刚开始学习新知识, 大家都渴望有一些大牛能够指导自己, 或者能够从前辈那里获取一些武林秘籍, 这些都是学习的渠道.</p><p>有些小伙伴在学习的过程中, 会遇到各种各样的困难, 比如在学习一门知识的时候, 发现竟然还需要学习另一门新知识, 真是日了狗了!<br>到这里, 可能有些人就会情不自禁的选择了放弃, 嘴上说还在学习, 其实心里已经疲倦.</p><p>还有一些初学者, 他们没有什么经验, 如果主动性再差点, 动辄遇到问题就问, 根本没有过思考, 哪怕是一点点的思考都没有.其实他们不是不想搞, 就怕搞错了.仅仅是因为怕, 就戛然而止了!<br>这种人, 确实可惜, 所以他们需要更多的指导和教育.这里提醒大家, 学习知识, 不要怕犯错, 大胆的去试错, 在错误中成长, 这样你才能有所收获.</p><p>记得以前为了安装 linux, 我把办公室的办公电脑都格式化了, 组长差点要开除我了, 现在想想虽然挨了骂, 但是挺值得.</p><p>现在互联网很发达, 想学习的东西基本网上都有, 你可以没有智商, 没有情商, 但是你一定要有 <code>搜商 (搜索能力)</code>.<br>当你自己经过思考, 无法解决问题, 就去搜索相关的知识, 如果搜索也失败了, 再去请教别人, 这样你就可以从中收获意外的惊喜.</p><p>所以, 学习渠道的重要来源之一就是在互联网搜索, 培养自己的搜索能力很重要, 我建议大家使用谷歌浏览器, 然后使用 google 的搜索引擎, 搭建一套翻墙的 VPN, 这样你可以在知识的海洋里爽翻.</p><p>另外一个比较重要的学习渠道就是你认为的牛人, 向他们学习相关的学习方法, 问他们是怎么学习的, 然后结合自己的实际情况加以运用, 跟他们多交流.</p><h2 id="对自己’狠’一些"><a href="#对自己’狠’一些" class="headerlink" title="对自己’狠’一些"></a>对自己’狠’一些</h2><p>我之前有个坏习惯, 喜欢晚上躺在床上看视频, 这些视频可能是优酷或者腾讯视频客户端的, 也有可能是新闻类的 app 来源的视频.<br>视频只要看起来, 时间就不受控制了.第二天早晨起床也很困难.</p><p>最后自己把视频类和新闻类 app 全部卸载掉了, 然后把目标转移到 stackoverflow 和 github 上面.<br>那里才是程序员的世界, 只有你想不到的, 没有做不到的.</p><p>为了学习新知识, 你需要对自己狠一点, 每天拿点时间出来总结和学习, 一个月一个季度一年下来, 你比别人都进步了很多.</p><p>养成一个好习惯, 终生受益.</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 生活 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS: 聊聊 UIWebView 缓存</title>
      <link href="/2017/01/15/iOS-%E8%81%8A%E8%81%8A-UIWebView-%E7%BC%93%E5%AD%98/"/>
      <url>/2017/01/15/iOS-%E8%81%8A%E8%81%8A-UIWebView-%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发项目过程中, 一些若交互的页面会使用 HTML 展示.</p><p>在 iOS 中, 使用 UIWebView 的频率还是比较高的.</p><p>今天跟大家聊聊 UIWebView 缓存相关的话题.</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我今天使用 Tomcat 来作为 web 容器, 在本机搭建一个 web 服务器, 然后使用 iPhone 访问该 web 页面, 展示和梳理 UIWebview 关于缓存的问题.</p><p>如果你对 Tomcat 还不熟悉, 希望你可以先去大概了解一下, 如何在 Mac os 上面安装和使用 Tomcat, 可以参考我的博文: [Mac 配置 Tomcat8].</p><blockquote><p>Tomcat 是一个开放源代码、运行 servlet 和 JSP Web 应用软件的基于 Java 的 Web 应用软件容器.<br>Tomcat Server 是根据 servlet 和 JSP 规范执行的，因此可以说 Tomcat Server 实行了 Apache-Jakarta 规范，且比绝大多数商业应用软件服务器要好.<br>但是 Tomcat 对静态文件、高并发的处理比较弱.</p></blockquote><p>写这篇文章的时候, 我使用的版本分别是 <code>apache-tomcat-8.5.8</code>, <code>jdk1.8</code>.</p><h2 id="配置-Tomcat"><a href="#配置-Tomcat" class="headerlink" title="配置 Tomcat"></a>配置 Tomcat</h2><h3 id="修改-server-xml-文件"><a href="#修改-server-xml-文件" class="headerlink" title="修改 server.xml 文件"></a>修改 server.xml 文件</h3><p>文件在 Tomcat 的根目录的 conf 目录下, 如我的文件在这个目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache-tomcat-8.5.8/conf/server.xml</span><br></pre></td></tr></table></figure><p>增加如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;&lt;your local ip&gt;&quot; debug=&quot;0&quot; appBase=&quot;&lt;base dir&gt;&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">&lt;Context path=&quot;&quot; docBase=&quot;&lt;html file path&gt;&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</span><br><span class="line">&lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>注意:<br>1.将上述内容放到 <code>&lt;/Host&gt;</code> 和 <code>&lt;/Engine&gt;</code> 节点中间.<br>2.将 <code>name=&quot;&lt;your local ip&gt;&quot;</code> 中的 <your local ip> 改为你本机的 ip 地址.<br>查看本机的 ip 地址方法很简单:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</span><br></pre></td></tr></table></figure><p>3.将 appBase&#x3D;”<base dir>“ 中的 <base dir> 改为你的 web 目录.<br>4.将 docBase&#x3D;”<html file path>“ 中的 <html file path> 改为你的 html 目录.</p><p>我的配置如下(部分):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;!-- Access log processes all example.</span><br><span class="line">             Documentation at: /docs/config/valve.html</span><br><span class="line">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">        &lt;!--mark 配置静态网页. [BEGIN] --&gt;</span><br><span class="line">        &lt;Host name=&quot;192.168.1.103&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/Host&gt;</span><br><span class="line">        &lt;!--mark 配置静态网页. [END] --&gt;</span><br><span class="line">    &lt;/Engine&gt;</span><br><span class="line">  &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><p>搞定上面的配置, 接下来可以配置相关目录了.</p><p>在 Tomcat 的根目录有个文件夹 webapps, 在 webapps 目录下新建目录 test 即可.</p><h2 id="构建-HTML-页面"><a href="#构建-HTML-页面" class="headerlink" title="构建 HTML 页面"></a>构建 HTML 页面</h2><p>在 test 目录, 新建一个 html 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch test.html</span><br></pre></td></tr></table></figure><p>文件内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> &lt;p&gt;</span><br><span class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">Now I input another line, with fancy&lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</span><br><span class="line">&lt;/u&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">Now I input another line, with fancy &lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</span><br><span class="line">&lt;/u&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    mark.zhang is itman.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.button &#123;</span><br><span class="line">    background-color: #4CAF50;</span><br><span class="line">    border: none;</span><br><span class="line">    color: white;</span><br><span class="line">    padding: 15px 32px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: 86px;</span><br><span class="line">    margin: 50px 200px 100px 300px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    border-radius: 15;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">   &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot; class=&quot;button&quot;&gt;Try it&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   function myFunction() &#123;</span><br><span class="line">       alert(&quot;Blog: www.veryitman.com&quot;);</span><br><span class="line">   &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>搭建完成后, 启动 Tomcat 服务器.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.sh</span><br></pre></td></tr></table></figure><p>在浏览器里面通过 ip:port&#x2F;test.html 的方式来访问该页面.</p><p>看到类似下面的效果即表示搭建成功:</p><p><img src="/upload/images/2017/01/15/html.png" alt="1"></p><h2 id="客户端访问"><a href="#客户端访问" class="headerlink" title="客户端访问"></a>客户端访问</h2><p>客户端访问该页面, 使用 UIWebview 来请求(HTTP 协议)页面内容.</p><p>一般请求会使用下面的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)requestWithURL:(NSURL *)URL;</span><br></pre></td></tr></table></figure><p>该方法的描述如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Creates and returns a URL request for a specified URL with default cache policy and timeout value.</span><br><span class="line">The default cache policy is NSURLRequestUseProtocolCachePolicy and the default timeout interval is 60 seconds.</span><br></pre></td></tr></table></figure><p>大概意思是使用的缓存策略是根据协议来的, 即 NSURLRequestUseProtocolCachePolicy. 超时时间默认是60s.</p><p>也就是说类似如下的请求:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSURLRequest *urlReq = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:60.f];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果协议支持缓存的话, UIWebview 请求到的数据就是缓存数据.该缓存是需要 WEB 服务器支持的.</p><p>这里我没有配置 Tomcat 的缓存.可以抓包看下:</p><p><img src="/upload/images/2017/01/15/rsp1.png" alt="2"></p><p>后续博客会分别为大家介绍在 Tomcat 和 Nginx 配置缓存下, 客户端 UIWebview 请求的相关问题.</p><p>客户端显示页面效果:<br><img src="/upload/images/2017/01/15/c1.jpeg" alt="2"></p><p>ViewController 代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line"></span><br><span class="line">static NSString * const H5Url = @&quot;http://192.168.1.104:8080/test.html&quot;;</span><br><span class="line"></span><br><span class="line">@interface ViewController () &lt;UIWebViewDelegate&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIWebView *webView;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIButton *refBtn;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    _webView = [[UIWebView alloc] init];</span><br><span class="line">    CGSize boundsSize = self.view.bounds.size;</span><br><span class="line">    self.webView.frame = CGRectMake(0, 20, boundsSize.width, boundsSize.height);</span><br><span class="line">    self.webView.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    self.webView.scrollView.showsHorizontalScrollIndicator = NO;</span><br><span class="line">    self.webView.scrollView.showsVerticalScrollIndicator   = NO;</span><br><span class="line">    self.webView.scalesPageToFit = YES;</span><br><span class="line">    self.webView.delegate = self;</span><br><span class="line">    [self.view addSubview:self.webView];</span><br><span class="line">    </span><br><span class="line">    UIButton *refreshBtn = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    [self.view addSubview:refreshBtn];</span><br><span class="line">    [refreshBtn addTarget:self action:@selector(onRefreshWebView) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    refreshBtn.backgroundColor = [UIColor redColor];</span><br><span class="line">    refreshBtn.layer.masksToBounds = YES;</span><br><span class="line">    refreshBtn.layer.cornerRadius = 5.f;</span><br><span class="line">    refreshBtn.frame = CGRectMake(50, 250, 200, 50);</span><br><span class="line">    [refreshBtn setTitle:@&quot;刷新页面&quot; forState:UIControlStateNormal];</span><br><span class="line">    _refBtn = refreshBtn;</span><br><span class="line">    </span><br><span class="line">    [self loadDataUsingCache];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;didFailLoadWithError: %@&quot;, error);</span><br><span class="line">    </span><br><span class="line">    [self hideLoading];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request</span><br><span class="line"> navigationType:(UIWebViewNavigationType)navigationType</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;shouldStartLoadWithRequest: %@&quot;, request);</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)webViewDidStartLoad:(UIWebView *)webView</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;webViewDidStartLoad&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;webViewDidFinishLoad&quot;);</span><br><span class="line">    </span><br><span class="line">    [self hideLoading];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//刷新页面.</span><br><span class="line">- (void)onRefreshWebView</span><br><span class="line">&#123;</span><br><span class="line">    // 方式1: 不使用缓存请求数据</span><br><span class="line">    //[self loadDataNoUsingCache];</span><br><span class="line">    </span><br><span class="line">    // 方式2: 清除 NSCache 缓存, 再请求数据</span><br><span class="line">    [self clearAllCache];</span><br><span class="line">    [self loadDataUsingCache];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)loadDataUsingCache</span><br><span class="line">&#123;</span><br><span class="line">    [self showLoading];</span><br><span class="line">    </span><br><span class="line">    NSURL *url = [NSURL URLWithString:H5Url];</span><br><span class="line">    </span><br><span class="line">    NSURLRequest *urlReq = [NSURLRequest requestWithURL:url</span><br><span class="line">                                            cachePolicy:NSURLRequestReturnCacheDataDontLoad</span><br><span class="line">                                        timeoutInterval:10.f];</span><br><span class="line">    </span><br><span class="line">    [self.webView loadRequest:urlReq];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)loadDataWithProtocol</span><br><span class="line">&#123;</span><br><span class="line">    [self showLoading];</span><br><span class="line">    </span><br><span class="line">    NSURL *url = [NSURL URLWithString:H5Url];</span><br><span class="line">    </span><br><span class="line">    [NSURLRequest requestWithURL:url];</span><br><span class="line">    </span><br><span class="line">    NSURLRequest *urlReq = [NSURLRequest requestWithURL:url</span><br><span class="line">                                            cachePolicy:NSURLRequestUseProtocolCachePolicy</span><br><span class="line">                                        timeoutInterval:60.f];</span><br><span class="line">    </span><br><span class="line">    [self.webView loadRequest:urlReq];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)loadDataNoUsingCache</span><br><span class="line">&#123;</span><br><span class="line">    [self showLoading];</span><br><span class="line">    </span><br><span class="line">    NSURL *url = [NSURL URLWithString:H5Url];</span><br><span class="line">    NSURLRequest *urlReq = [NSURLRequest requestWithURL:url</span><br><span class="line">                                            cachePolicy:NSURLRequestReloadIgnoringCacheData</span><br><span class="line">                                        timeoutInterval:20.0];</span><br><span class="line">    [self.webView loadRequest:urlReq];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)clearAllCache</span><br><span class="line">&#123;</span><br><span class="line">    // remove cache rsp</span><br><span class="line">    [[NSURLCache sharedURLCache] removeAllCachedResponses];</span><br><span class="line">    </span><br><span class="line">    [[NSURLCache sharedURLCache] setDiskCapacity:0];</span><br><span class="line">    [[NSURLCache sharedURLCache] setMemoryCapacity:0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)showLoading</span><br><span class="line">&#123;</span><br><span class="line">    [self.refBtn setTitle:@&quot;刷新中...&quot; forState:UIControlStateNormal];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)hideLoading</span><br><span class="line">&#123;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [self.refBtn setTitle:@&quot;刷新页面&quot; forState:UIControlStateNormal];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这里注意下面的 三个方法 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 使用缓存数据, 如果有缓存的话</span><br><span class="line">// 使用这个方法, 改变 HTML 或者 JS 代码</span><br><span class="line">// 页面不会拉取最新数据, 还是使用之前请求到的数据.</span><br><span class="line">// 除非重新刷新</span><br><span class="line">- (void)loadDataUsingCache;</span><br><span class="line">// 使用协议缓存, 需要 web 服务器支持.</span><br><span class="line">- (void)loadDataWithProtocol;</span><br><span class="line">// 不使用缓存, 加载数据</span><br><span class="line">- (void)loadDataNoUsingCache;</span><br></pre></td></tr></table></figure><p>另外, 刷新 UIWebview 的方式如下, 有 两种方式 来刷新页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  刷新页面.</span><br><span class="line"> */</span><br><span class="line">- (void)onRefreshWebView</span><br><span class="line">&#123;</span><br><span class="line">    // 方式1: 不使用缓存请求数据</span><br><span class="line">    //[self loadDataNoUsingCache];</span><br><span class="line">    </span><br><span class="line">    // 方式2: 清除 NSCache 缓存, 再请求数据</span><br><span class="line">    [self clearAllCache];</span><br><span class="line">    [self loadDataUsingCache];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种刷新方式, 会重新加载数据.<br>但是不适合多层级的 HTML 页面, 比如你的 HTML 页面有很多层, 想刷新当前页面, 可以使用下面的方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 重新加载当前页面</span><br><span class="line">[self.webView reload];</span><br></pre></td></tr></table></figure><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>查看本机 IP 的 shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</span><br></pre></td></tr></table></figure><p>停止 Tomcat 的运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS UIWebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>f8app</title>
      <link href="/2017/01/01/f8app/"/>
      <url>/2017/01/01/f8app/</url>
      
        <content type="html"><![CDATA[<p>本文主要探讨的是如何编译和运行 f8app.</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>f8app</code> 是 Facebook 开源的, 基于 React Native 开发的一款 App.</p><p>代码基本都是 js 的, 很少有原生的代码.</p><p><code>f8app</code> 是借鉴和学习 React Native 的上好资料.</p><p>原文介绍:</p><blockquote><p>This is the entire source code of the official F8 app of 2016, available on Google Play and the App Store.</p></blockquote><p>项目开源地址: <a href="https://github.com/fbsamples/f8app">Github</a></p><h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>安装和配置了 React Native 开发环境.</li><li>Xcode 7.3 +</li><li>CocoaPods (only for iOS) 1.0+</li><li>MongoDB (needed to run Parse Server locally)</li></ul><h3 id="源码构建"><a href="#源码构建" class="headerlink" title="源码构建"></a>源码构建</h3><p>下载源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/fbsamples/f8app.git</span><br></pre></td></tr></table></figure><p>下载完成后, 进入下载的 f8app 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd f8app</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>如果是 iOS 的话, 需要进入 iOS 目录执行 <code>pod install</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ios</span><br><span class="line">pod install</span><br></pre></td></tr></table></figure><p>在项目 f8app 目录下运行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>打开浏览器输入地址 <a href="http://localhost:8080/">http://localhost:8080</a>, 可以看到 graphql 的界面.</p><h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><p>使用 Homebrew 来安装.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>导入例子数据.</p><p>注意:<br>在源码的路径即 <code>~/yourpath/f8app</code> 下面执行, 下面操作没有特殊说明都是在源码根目录下面操作.<br>你可以多开几个终端端口来进行操作.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run import-data</span><br></pre></td></tr></table></figure><p>导入例子数据, 会报下面的 错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">error: Uncaught internal server error. &#123; [MongoError: connect ECONNREFUSED 127.0.0.1:27017]</span><br><span class="line">name: &#x27;MongoError&#x27;,</span><br><span class="line">message: &#x27;connect ECONNREFUSED 127.0.0.1:27017&#x27; &#125; Error: connect ECONNREFUSED 127.0.0.1:27017</span><br><span class="line">at Object.exports._errnoException (util.js:893:11)</span><br><span class="line">at exports._exceptionWithHostPort (util.js:916:20)</span><br><span class="line">at TCPConnectWrap.afterConnect as oncomplete</span><br></pre></td></tr></table></figure><p>需要安装 <code>mongodb-runner</code></p><p>安装方法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g parse-server mongodb-runner</span><br></pre></td></tr></table></figure><p>运行 <code>mongodb-runner</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb-runner start</span><br></pre></td></tr></table></figure><p>这里执行完毕后, 需要等待一会.</p><p>你会看到如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting a MongoDB deployment to test against...</span><br></pre></td></tr></table></figure><p>上面运行结束后, 你可以查看 MongoDB 是否在运行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -iTCP:27017 -sTCP:LISTEN</span><br></pre></td></tr></table></figure><p>会显示当前正在运行的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE    SIZE/OFF  NODE  NAME</span><br><span class="line">mongod  86824 mark    7u  IPv4    0x91959c43a65644ed      0t0  TCP *:27017 (LISTEN)</span><br></pre></td></tr></table></figure><p>停止 mongodb 运行的方式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb-runner stop</span><br></pre></td></tr></table></figure><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><p><a href="http://localhost:8080/dashboard">Parse Dashboard</a></p><p><a href="http://localhost:8080/graphql">GraphiQL</a></p><h3 id="启动-react-native"><a href="#启动-react-native" class="headerlink" title="启动 react-native"></a>启动 react-native</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start</span><br></pre></td></tr></table></figure><h3 id="运行-f8app"><a href="#运行-f8app" class="headerlink" title="运行 f8app"></a>运行 f8app</h3><p>Android:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android</span><br><span class="line">adb reverse tcp:8081 tcp:8081   # required to ensure the Android app can</span><br><span class="line">adb reverse tcp:8080 tcp:8080   # access the Packager and GraphQL server</span><br></pre></td></tr></table></figure><p>iOS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure><p>如果出现红色背景的 error 提示, 可以不管, 直接 Dismiss 即可.</p><p>然后可以看到如下界面:</p><p><img src="/upload/images/2017/01/01/f8app.jpg" alt="1"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.在运行后关闭登录按钮, 报错: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppEventsLogger.logEvent</span><br></pre></td></tr></table></figure><p>解决方案:</p><p>在 <code>/js/store/track.js</code> 文件的第 43 行, 注释掉 log, 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case &#x27;SKIPPED_LOGIN&#x27;:</span><br><span class="line">      //AppEventsLogger.logEvent(&#x27;Skip login&#x27;, 1);</span><br><span class="line">      break;</span><br></pre></td></tr></table></figure><p>在模拟器上面重新 Reload 即可.</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS Android JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见 2016</title>
      <link href="/2016/12/31/%E5%86%8D%E8%A7%81-2016/"/>
      <url>/2016/12/31/%E5%86%8D%E8%A7%81-2016/</url>
      
        <content type="html"><![CDATA[<p>今天是2016年的最后一天，正好赶上放假，给自己的这一年做个小结。</p><p>2016，继续做项目，作为一名软件工程师，不停地在学习。</p><p>2016，学习到了很多关于产品和运营相关的知识。知道了 <code>倒逼</code> 的作用.</p><p>2016，读了20本非技术类书籍，养成了读书的习惯，并把读书的好处讲给身边的人听。</p><p>2016，开始减肥，注意锻炼身体，几乎每周都有一次从公司到家的步行，一次篮球或者跑步运动。</p><p>2016，购买了域名，建立了自己的 <a href="file:///Users/mark/Desktop/backups/public/2016/12/31/veryitman.com">博客网站</a>。</p><p>2016，儿子大了一岁，自己老了一岁，家庭依旧幸福着。渐渐地理解了做父亲的责任。</p><p>2016，对自己影响最大的几句话，分享给大家:</p><p><strong>1. 技术要给产品提供最大的自由度.</strong></p><p><strong>2. 不要轻易的说 NO.</strong></p><p><strong>3. 要不断的让自己值钱, 而不是简单的为了金钱而跳槽.</strong></p><p><strong>4. 不要总是抱怨你的产品设计是狗屎, 学会和产品沟通更优的方案.</strong></p><p><strong>5. 关注细节, 把产品做好.</strong></p><p><strong>6. 多关注别人的优点.</strong></p><p><strong>7. 让对方把话说完.</strong></p><p><strong>8. 多看书, 多思考.</strong></p><p>感谢所有陪伴和支持我的朋友，同事，亲人！</p><p>祝愿所有人2017幸福、健康、快乐！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 配置 Tomcat8</title>
      <link href="/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-Tomcat8/"/>
      <url>/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-Tomcat8/</url>
      
        <content type="html"><![CDATA[<h2 id="Tomcat-简介"><a href="#Tomcat-简介" class="headerlink" title="Tomcat 简介"></a>Tomcat 简介</h2><p>Tomcat 是一个 Web 服务器.</p><blockquote><p>Web 服务器是指为特定组件提供服务的一个标准化的运行时的环境.<br>可为组件提供事务处理, 数据访问, 安全性和持久性等服务.</p></blockquote><p>Tomcat 是免费且开源的, 他是 Apache 软件基金会 Jakarta 项目中的其中一个子项目.由 Apache, Sun 和其他一些公司及个人共同开发完成.</p><p>Tomcat 也是使用最为广泛的 JSP 服务器.</p><blockquote><p>JSP 是 Java Server Pages 的简称, 是在传统的 HTML 文件中插入 Java 程序段和 JSP 标记的一种动态网页技术.</p></blockquote><h2 id="下载-Tomcat"><a href="#下载-Tomcat" class="headerlink" title="下载 Tomcat"></a>下载 Tomcat</h2><p>前往 <a href="http://tomcat.apache.org/download-80.cgi">这里</a> 可以下载 Tomcat.</p><p>我目前安装的是 8.5.8 版本的.</p><p><img src="/upload/images/2016/11/26/tomcat1.png" alt="1"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先安装 JDK, 安装教程可以参考 <a href="http://www.veryitman.com/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-Tomcat8/">Mac 配置 JDK1.8</a> 这篇文章.</p><p>解压下载的 tar.gz 即可.</p><p>最好解压到自己的工作目录, 如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/developr/</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>编辑 <code>/etc/profile</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JRE_HOME=$JAVA_HOME</span><br><span class="line">TOMCAT_HOME=/Users/mark/developer/apache/apache-tomcat-8.5.8</span><br><span class="line">PATH=$JAVA_HOME/bin:$TOMCAT_HOME/bin:$PATH</span><br><span class="line">export JRE_HOME</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>其中的 JAVA_HOME 是 <a href="http://www.veryitman.com/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-Tomcat8/">Mac 配置 JDK1.8</a> 这篇文章里面设置的 JDK 的环境变量.</p><p>配置环境变量的目的, 可以让我们方便的使用 Tomcat 的命令.</p><h2 id="检验安装是否成功"><a href="#检验安装是否成功" class="headerlink" title="检验安装是否成功"></a>检验安装是否成功</h2><p>使 <code>/etc/profile</code> 配置文件立即生效.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>如果没有生效, 重启终端即可.</p><p>开启 Tomcat 服务, 执行下面的命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.sh</span><br></pre></td></tr></table></figure><p>该命令在 Tomcat 的安装目录的 bin 目录下面.</p><p>执行后, 可以看到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Using CATALINA_BASE:   /Users/mark/developer/apache/apache-tomcat-8.5.8</span><br><span class="line">Using CATALINA_HOME:   /Users/mark/developer/apache/apache-tomcat-8.5.8</span><br><span class="line">Using CATALINA_TMPDIR: /Users/mark/developer/apache/apache-tomcat-8.5.8/temp</span><br><span class="line">Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class="line">Using CLASSPATH:       /Users/mark/developer/apache/apache-tomcat-8.5.8/bin/bootstrap.jar:/Users/mark/developer/apache/apache-tomcat-8.5.8/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p>在浏览器里面打开: <a href="http://localhost:8080/">http://localhost:8080/</a></p><p>即可看到一只可爱的 Tom 猫.</p><p>执行 <code>shutdown.sh</code> 可以关闭 Tomcat.</p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装和使用 infer</title>
      <link href="/2016/11/26/Mac-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-infer/"/>
      <url>/2016/11/26/Mac-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-infer/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>infer 是 Facebook 开源的一款代码静态检查工具, 源码可以在 <a href="https://github.com/facebook/infer">Github</a> 上面获取.</p><p>支持 Java&#x2F;C&#x2F;OC 等语言, 支持 Gradle, Buck, Maven, Xcodebuild, Make 等.</p><p>我一般用来分析 iOS 和 Android 工程.</p><p>可以在 <a href="http://fbinfer.com/docs/getting-started.html">这里</a> 查看 Start.</p><h2 id="安装-infer"><a href="#安装-infer" class="headerlink" title="安装 infer"></a>安装 infer</h2><p>只要你用 Homebrew, mac 下安装 infer 很简单:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install infer</span><br></pre></td></tr></table></figure><p>在早期版本, infer 不支持 brew 安装. 安装起来各种问题, 现在 infer 支持了 brew 安装, 很方便.</p><p>这里我使用的 infer 版本是 0.9.4.</p><p>安装成功后, 可以查看安装版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">infer -version</span><br></pre></td></tr></table></figure><p>可以看到如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Infer version v0.9.4</span><br><span class="line">Copyright 2009 - present Facebook. All Rights Reserved.</span><br><span class="line">Mac:public mark$ infer --version</span><br><span class="line">Infer version v0.9.4</span><br><span class="line">Copyright 2009 - present Facebook. All Rights Reserved.</span><br></pre></td></tr></table></figure><p>这里有个问题, 有时候 brew 无法更新最新的 infer, 我目前的解决方案是先卸载之前安装的 infer, 然后再重新安装.</p><p>卸载 infer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall infer</span><br></pre></td></tr></table></figure><h2 id="安装-xcpretty"><a href="#安装-xcpretty" class="headerlink" title="安装 xcpretty"></a>安装 xcpretty</h2><p><a href="https://github.com/supermarin/xcpretty">xcpretty</a> 是一款格式化 xcodebuild 输出结果的工具.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">▸ Building X/N [(Release)]</span><br><span class="line">▸ Check Dependencies</span><br><span class="line">▸ Copying Info.plist</span><br><span class="line">▸ Running script &#x27;[CP] Check Pods Manifest.lock&#x27;</span><br><span class="line">▸ Running script &#x27;Replace PaySdk&#x27;</span><br><span class="line">▸ Compiling User.m</span><br></pre></td></tr></table></figure><p>从0.9.4版本后, infer 默认使用了 xcpretty.</p><p>可以使用 gem 安装 xcpretty 工具:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install xcpretty</span><br></pre></td></tr></table></figure><p>如果没有安装成功, 或者提示权限不够, 那就这样折腾:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install xcpretty</span><br></pre></td></tr></table></figure><p>想了解更多关于 xcpretty 的使用可以去 <a href="https://github.com/supermarin/xcpretty">github</a>.</p><h2 id="使用-infer"><a href="#使用-infer" class="headerlink" title="使用 infer"></a>使用 infer</h2><h3 id="iOS-项目使用-infer"><a href="#iOS-项目使用-infer" class="headerlink" title="iOS 项目使用 infer"></a>iOS 项目使用 infer</h3><p>infer 的文档写的也较全面.</p><p>可以在 <a href="http://fbinfer.com/docs/infer-workflow.html">这里</a> 查看使用方法.</p><p>1.分析 Cocoapods 项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">infer -- xcodebuild -workspace N.xcworkspace -scheme NSchema</span><br></pre></td></tr></table></figure><p>其中 N.xcworkspace 是你的 workspace 名称, NSchema 是你需要检查的 Schema 名称.</p><p>2.分析 .xcodeproj</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">infer -- xcodebuild -target targetName -configuration Debug -sdk iphonesimulator</span><br></pre></td></tr></table></figure><p>其中 targetName 是项目的 target 名称, 必须指定.</p><p>分析成功后, infer 会有输出报告.</p><p>该报告在你的项目目录下, 名称是 infer-out.</p><p>bug.txt 是以文本方式输出的 issue 文档.<br>另外还有 csv 格式的 issue 文档.</p><h3 id="Android-Gradle-工程使用-infer"><a href="#Android-Gradle-工程使用-infer" class="headerlink" title="Android Gradle 工程使用 infer"></a>Android Gradle 工程使用 infer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradle clean</span><br><span class="line">infer -- gradle build</span><br></pre></td></tr></table></figure><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>infer 还有很多高级的用法, 比如可以增量检查.</p><p>增量检查的功能依赖于你的编译器是否支持.</p><p>infer 增量检查的选项是 –reactive.</p><blockquote><p>之前的版本是 –incremental 选项.<br>自从 v0.8.0 版本后使用了 –reactive 选项.</p></blockquote><p>可以这样来进行增量检查:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">infer --reactive -- xcodebuild -workspace N.xcworkspace -scheme NSchema</span><br></pre></td></tr></table></figure><p>infer 还有很多高级用法, 可以在 <a href="http://fbinfer.com/docs/advanced-features.html">Advanced usage</a> 中去查阅和使用.</p><p>再使用过程中, 随着 MacOS, Xcode 的升级, infer 会面临更多的挑战, 如果遇到问题, 第一时间去 <a href="https://github.com/facebook/infer">GitHub</a>  上面提  issue.</p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS infer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 配置 JDK1.8</title>
      <link href="/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-JDK1-8/"/>
      <url>/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-JDK1-8/</url>
      
        <content type="html"><![CDATA[<h2 id="下载-JDK"><a href="#下载-JDK" class="headerlink" title="下载 JDK"></a>下载 JDK</h2><p>在 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">这里下载</a> jdk.</p><p>下载版本是 1.8u112, 信息如下:</p><p><img src="/upload/images/2016/11/26/jdk1.png" alt="1"></p><h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h2><p>下载完成后, 直接双击安装即可.</p><h2 id="配置-Path"><a href="#配置-Path" class="headerlink" title="配置 Path"></a>配置 Path</h2><p>成功安装后, 目录<br><code>/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/</code> 就会存在.</p><p>编辑 <code>/etc/profile</code> 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export CLASSPATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>保存文件.</p><p>使这个文件立即生效.可以 source 一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>执行下面命令来检验 jdk 是否安装成功.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出如下信息, 标示配置 JDK 成功.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version “1.8.0_112”</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_112-b16)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)</span><br></pre></td></tr></table></figure><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS java jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GameDevelopment: 与 Cocos2d 的再相逢</title>
      <link href="/2016/11/12/GameDevelopment-%E4%B8%8E-Cocos2d-%E7%9A%84%E5%86%8D%E7%9B%B8%E9%80%A2/"/>
      <url>/2016/11/12/GameDevelopment-%E4%B8%8E-Cocos2d-%E7%9A%84%E5%86%8D%E7%9B%B8%E9%80%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="认识-Cocos2d"><a href="#认识-Cocos2d" class="headerlink" title="认识 Cocos2d"></a>认识 Cocos2d</h2><p>相信很多人听说过 cocos2d-x 这个引擎, 但听过 <a href="http://cocos2d-objc.org/">cocos2d-objc</a> 的人应该不多.</p><p>cocos2d-objc 是 cocos 系列的 objective-c 版本.<br>开发语言是 OC.在 iOS 上面使用该版本的引擎, 基本是无缝连接(写的没有什么障碍).</p><p>欣赏一下 cocos2d-objc 的 logo, 如图:<br><img src="/upload/images/2016/11/12/1.png" alt="1"></p><p>如果你对 OC 版感兴趣, 可以通过博文 <a href="http://blog.csdn.net/veryitman/article/details/44993643">coco2d-iphone: 环境搭建</a> 去了解.</p><p>cocos2d-x 目前支持 JavaScript, lua, c++ 等主流语言来开发.<br>cocos 还在迅猛发展中, 不断的完善开发工具, 广大游戏开发者依然热力贡献, 程序猿们在游戏的战场挥洒青春.</p><p>现在 cocos 的开发者会得到更多的支持.</p><p>下面给张图来展示 cocos 家族及其发展:<br><img src="/upload/images/2016/11/12/2.png" alt="1"></p><h2 id="由-libgdx-转向-Cocos2d"><a href="#由-libgdx-转向-Cocos2d" class="headerlink" title="由 libgdx 转向 Cocos2d"></a>由 libgdx 转向 Cocos2d</h2><p>几年前, 那个时候还在开发棋牌游戏, 当时自己也是刚刚接触游戏开发这个「高逼格」的行业, 之前自己是个纯 App 开发者.</p><p>内心还是蛮激动的, 心想可能要走上人生巅峰了…</p><p>棋牌游戏, 当时使用的是 java 的游戏引擎 <a href="https://libgdx.badlogicgames.com/">libgdx</a> 0.X.X 的版本, 该引擎和 Android 基本也是无缝连接, Api 设计的很好.</p><p>现在 libgdx 也发展到了1.6.x 版本了, 工具也完善了很多.</p><p>虽然 libgdx 也可以跨平台, 但是最终我们还是选择了 cocos2d-x 来移植该游戏.其中原因是因为 cocos2d-x 太火了, 人也好找.</p><p>改为 cocos2d-x 的版本之后, 我就被安排到了另外一个项目, 也是一个棋牌游戏, 该游戏现在在腾讯的微信游戏里面运营.</p><p>这个游戏是 cocos2d-objc 的引擎写的, 自己也不会 objc, 于是硬着头皮学习, 很快的就上手了这个项目.写的也是风生水起.</p><p>cocos2d-objc, 现在也支持跨平台, 并且有 xcode 的插件, 可以在 xcode 里面写 Android 的代码, 调试开发等.</p><p>因为接触 cocos2d, 后面就直接开搞 iOS 开发了.</p><h2 id="再次使用-Cocos2d"><a href="#再次使用-Cocos2d" class="headerlink" title="再次使用 Cocos2d"></a>再次使用 Cocos2d</h2><p>互联网 IT 业的发展, 刺激了各个行业的发展, 也促进和激发了新生的技术, 在这个行业, 每个人都能体会 <code>活到老学到老</code> 这句话的含义.</p><p>这两年, HTML5 的发展, 让很多程序员重新认识了 JavaScript 的重要性. 特别是最近 ReactNative 的发展, jsPacth 的开源, 微信小程序的推出, 让 JavaScript 火得不要不要的.</p><p>说实话, 是时候开始学习前端相关的技术了, 至少你需要去了解.</p><p>cocos2d-js 的发展, 给 HTML 游戏开发带来了很多便利. 最近我们需要开发 H5 的游戏, 直接拿起 coco2d-x(支持 JavaScript) 就撸起.</p><p>去 <a href="https://github.com/cocos2d/cocos2d-x">GitHub</a> 上面直接 clone 最新版就可以, 按照 README.md 来搭建环境就好了.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇博客也是有感而发, 没有实质性的内容.</p><p>主要目的是想告诉大家, 技术的发展日新月异, 想在这里大展拳脚, 你需要保持一颗年轻的心, 不怕苦, 勇往直前的精神.</p><p>我们需要学习的技术有很多, 我认为, 要根据项目本身的发展来适度的学习, 切记盲目的学习, 学习一门新技术之后, 要及时的运用在项目当中, 并分享给你身边的人.</p><blockquote><p>不拒绝不排斥新技术, 坚持学习和乐于分享, 应该是必备的技能.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cocos2d Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac install Cocoapods</title>
      <link href="/2016/11/08/Mac-install-Cocoapods/"/>
      <url>/2016/11/08/Mac-install-Cocoapods/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>这篇博客原本被我发表在 <a href="http://blog.csdn.net/veryitman/article/details/50769069">CSDN</a> .</p><p>那里不再更新, 现在在这里做持续更新.</p><h2 id="导引"><a href="#导引" class="headerlink" title="导引"></a>导引</h2><p>如果你的 Mac OSX 升级到 10.11.x+, 并且需要安装 Cocoapods, 可以参考本博客.</p><h2 id="安装-ruby"><a href="#安装-ruby" class="headerlink" title="安装 ruby"></a>安装 ruby</h2><p>Mac 系统自带了 ruby, 但是建议大家使用 Homebrew 安装 ruby.</p><p>因为 Cocoapods 升级需要对应的 ruby 版本也要升级, 使用 Homebrew 比较方便.</p><p>安装 ruby:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ruby</span><br></pre></td></tr></table></figure><p>查看当前安装的 ruby 版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure><p>会得到类似下面的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15]</span><br></pre></td></tr></table></figure><p>gem 是管理 Ruby 库和程序的标准包.<br>安装了 ruby, 自带了 gem 工具.</p><p>可以使用 <code>gem -v</code> 查看 gem 版本.</p><h2 id="安装-Cocoapods"><a href="#安装-Cocoapods" class="headerlink" title="安装 Cocoapods"></a>安装 Cocoapods</h2><p>1.移除原来的源, 不管以前是否安装过 Cocoapods.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove http://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>2.重新添加源, 注意是 https.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -a https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure><p>之前 <a href="https://ruby.taobao.org/">taobao 的源</a> 好像已经不行了.</p><p><strong>注意：</strong>添加源之前在浏览器打开 <code>https://gems.ruby-china.org/</code> 这个地址看一看是否能访问，如果不能访问就修改一下为 <code>https://gems.ruby-china.com</code> 这个地址。</p><p>3.查看是否添加成功, 该步骤可选.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>安装, 使用 root 权限安装.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure><p>这种安装方式, 会安装最新的 release 版本.</p><p>你也可以使用下面两种方式来安装.</p><p>指定版本安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods -v 1.0.0</span><br></pre></td></tr></table></figure><p>安装最新的 release beta 版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods --pre</span><br></pre></td></tr></table></figure><h2 id="卸载-Cocoapods"><a href="#卸载-Cocoapods" class="headerlink" title="卸载 Cocoapods"></a>卸载 Cocoapods</h2><p>卸载 Cocoapods 只需执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure><p>如果想删除本地的 pod repo, 可以这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -fr ~/.cocoapods/</span><br></pre></td></tr></table></figure><h2 id="建立本地-repo"><a href="#建立本地-repo" class="headerlink" title="建立本地 repo"></a>建立本地 repo</h2><p>安装完 Cocoapods 后, 需要建立本地的 repo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>即使你现在不执行 pod setup, 后面进行 pod install 或者 pod update 的时候, 也会自动的进行 pod setup.</p><p>执行 pod setup 的目的是将所有第三方的 podspec 索引文件更新到本地的 <code>~/.cocoapods/repos</code> 目录中.</p><h2 id="安装使用中遇到的问题"><a href="#安装使用中遇到的问题" class="headerlink" title="安装使用中遇到的问题"></a>安装使用中遇到的问题</h2><p>问题1: 命令行执行 pod 发生: pod command not found, 但是 sudo pod 却可以执行.</p><p>解决方案即如下步骤:</p><p>[1].卸载原有的 Cocoapods</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure><p>[2].重新安装 Cocoapods</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure><p>[3].赋予&#x2F;usr&#x2F;local&#x2F;bin给予执行与读取权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R +rx /usr/local/bin/</span><br></pre></td></tr></table></figure><blockquote><p>建议最好使用代(fanq)理(qiang).</p></blockquote><p>问题2: 更新 gem 过程中, 遇到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Operation not permitted - /usr/bin/update_rubygems</span><br></pre></td></tr></table></figure><p>可以通过通过 brew 安装 ruby 解决.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ruby</span><br></pre></td></tr></table></figure><p>问题3: pod setup 失败</p><p>失败提示信息类似:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &#x27;master&#x27;...</span><br><span class="line">error: RPC failed; curl 56 SSLRead() return error -36</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>解决方案: 更新 gem</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><p>问题4: 添加源, 提示如下问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source https://gems.ruby-china.org/ already present in the cache</span><br></pre></td></tr></table></figure><p>这个说明你已经添加过该源, 可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>来查看已经添加的源.</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>1.更新 gem</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><p>2.pod repo update</p><p>更新本地仓库.</p><p>3.pod search xxx</p><p>搜索 cocoapods 项目.</p><p>4.pod list</p><p>列出所有可用的库.</p><p>5.pod install</p><p>根据 podfile 和 podfile.lock来安装库.</p><p>默认会执行 pod repo update.</p><p>可以加入参数 <code>–no-repo-update</code> 不执行 pod repo update.</p><p>6.pod update</p><p>更新已安装的库到最新版本, 并且创建新的 Podfile.lock 文件.</p><p>该命令也会默认会执行 pod repo update.</p><p>可以加入参数 –no-repo-update 不执行 pod repo update.</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2017-01-04 更新</p><blockquote><p>升级 ruby 到 2.4 版本后, cocoapods 无法使用了.</p></blockquote><p>升级的 ruby 版本信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin15]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用任何 pod 命令都报错:</span><br><span class="line"></span><br><span class="line">/usr/local/Cellar/ruby/2.4.0/lib/ruby/2.4.0/rubygems.rb:270:in `find_spec_for_exe&#x27;: can&#x27;t find gem cocoapods (&gt;= 0.a) (Gem::GemNotFoundException)</span><br><span class="line">from /usr/local/Cellar/ruby/2.4.0/lib/ruby/2.4.0/rubygems.rb:298:in `activate_bin_path&#x27;</span><br><span class="line">from /usr/local/bin/pod:22:in `&lt;main&gt;&#x27;</span><br></pre></td></tr></table></figure><p>查找各种解决方案, 最终还是没有解决.</p><p>你可以在 <a href="https://cocoapods.org/app">这里</a> 下载 Cocoapods 的 Mac 版本 App 使用.</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocoaPods, iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocoapods 问题集锦</title>
      <link href="/2016/11/08/Cocoapods-%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2016/11/08/Cocoapods-%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="承诺"><a href="#承诺" class="headerlink" title="承诺"></a>承诺</h2><p>本文会持续更新, 分享在使用 cocoapods 过程中遇到的问题和解决方案.</p><p>欢迎大家补充.</p><h2 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h2><p>可以阅读博客 <a href="http://www.veryitman.com/2016/11/08/2016-11-08-Mac-install-Cocoapods/">Mac 安装 Cocoapods</a>.</p><h2 id="pod-search-问题"><a href="#pod-search-问题" class="headerlink" title="pod search 问题"></a>pod search 问题</h2><blockquote><p>pod search 无法搜索到指定的项目</p></blockquote><p>问题描述: 执行 pod search [Name], 出现类似下面的提示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] Unable to find a pod with name, author, summary, or description matching `[Name]`</span><br></pre></td></tr></table></figure><p>解决方案: 删除 search_index.json 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br></pre></td></tr></table></figure><p>然后, 重新执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search 项目名称</span><br></pre></td></tr></table></figure><p>如果这样行不通的话, 可以这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.cocoapods</span><br><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>如果你的网络不好, 需要漫长的等待…</p><p>这个时候, 可以去抽半盒烟了. Orz…</p><h2 id="pod-setup-问题"><a href="#pod-setup-问题" class="headerlink" title="pod setup 问题"></a>pod setup 问题</h2><blockquote><p>pod setup 卡死</p></blockquote><p>问题描述:</p><p>pod setup 会在本地建立 cocoapods 仓库.</p><p>在执行的过程中, 你可以在 <code>~/.cocoapods/repos</code> 使用<br><code>du -sh *</code> 来看 repos 目录的大小变化.</p><p>如果观察好久, 大小没有变化, 最终会出现类似下面的错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &#x27;master&#x27;...</span><br><span class="line">error: RPC failed; curl 56 SSLRead() return error -36</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>解决方案，如下：</p><p>先更新 gem</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><p>再重新执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure><h2 id="pod-install-问题"><a href="#pod-install-问题" class="headerlink" title="pod install 问题"></a>pod install 问题</h2><p>无法使用，报类似下面的两种错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">can&#x27;t find gem cocoapods (&gt;= 0.a) with executable pod (Gem::GemNotFoundException)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">While executing gem ... (TypeError) </span><br><span class="line">no implicit conversion of nil into String</span><br></pre></td></tr></table></figure><p>解决方案，如下：</p><p><strong>1. 重新安装 ruby</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew reinstall ruby</span><br></pre></td></tr></table></figure><p><strong>2. gem 更新</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm /usr/local/bin/update_rubygems</span><br><span class="line"></span><br><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><p><strong>3. 重新安装 Cocoapods 并重新添加源</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br><span class="line"></span><br><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br><span class="line"></span><br><span class="line">gem sources -a https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocoaPods, iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocoapods 管理开源项目</title>
      <link href="/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
      <url>/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在进行下面工作之前，请确保你做了下面三件事情：</p><p><strong>1. 创建或者已经有了 github 账号.</strong><br><strong>2. 了解和熟悉如何在 github 上面创建 Repository.</strong><br><strong>3. MacOS 上面安装了 Cocoapods.</strong></p><p>如果你还没有使用 Cocoapods, 建议看看 <a href="http://www.veryitman.com/2016/11/08/Mac-install-Cocoapods/">Mac OSX 10.11.1+ 安装 Cocoapods</a> 这篇博客.</p><p>在博客 <a href="http://www.veryitman.com/2016/09/25/iOS-%E9%A1%B9%E7%9B%AE-%E6%89%93%E9%80%A0%E6%9C%AC%E5%9C%B0-pod-%E5%BA%93/">iOS 项目: 打造本地 pod 库</a> 里面有介绍如何打造本地的 pod 库，不需要借助任何仓库就可以完成，操作简单，适合项目组内使用。</p><p>今天给大家分享如何将代码开源并放到 pod 库中，供别人使用。这种方式属于打造公共（Public repo）仓库， 任何人都可以搜索到你贡献的库并使用你的库。后面会跟大家分享如何打造私有（Private repo），敬请期待。</p><p>这篇博客是基于一个实际例子 <a href="https://github.com/veryitman/MZInsetLabel">MZInsetLabel</a> 来说明的，期待与优秀的你交流讨论。</p><h2 id="创建-Repository-并完善项目"><a href="#创建-Repository-并完善项目" class="headerlink" title="创建 Repository 并完善项目"></a>创建 Repository 并完善项目</h2><p><strong>1. 在 Github 上面创建 Repository，取名为 MZInsetLabel.</strong></p><p><strong>2. 将该工程 clone 到本地磁盘.</strong></p><p><strong>3. 写代码，这里我只写了 MZInsetLabel.h | .m 文件.</strong></p><p><strong>4. 创建 podspec 文件.</strong></p><p>使用下面命令，即可产生该文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create MZInsetLabel</span><br></pre></td></tr></table></figure><p>在当前目录会生成 <code>MZInsetLabel.podspec</code> 文件。按照文件规范和实际情况填写即可，如果不知道怎么填写，可以在 Github 上面找一个开源项目参考即可。</p><blockquote><p>注意: Tag 版本号不要错误.</p></blockquote><p>最终内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name         = &quot;MZInsetLabel&quot;</span><br><span class="line">  s.version      = &quot;0.2.0&quot;</span><br><span class="line">  s.summary      = &quot;MZInsetLabel is subClass of UILabel.&quot;</span><br><span class="line">  s.description  = &lt;&lt;-DESC</span><br><span class="line">                        MZInsetLabel is a sub class of UILabel that can be set insets.</span><br><span class="line">                   DESC</span><br><span class="line">  s.homepage     = &quot;http://www.veryitman.com&quot;</span><br><span class="line">  s.license      = &quot;MIT&quot;</span><br><span class="line">  s.author       = &#123; &quot;veryitman&quot; =&gt; &quot;veryitman@126.com&quot; &#125;</span><br><span class="line">  s.platform     = :ios, &quot;7.0&quot;</span><br><span class="line">  s.source = &#123; :git =&gt; &quot;https://github.com/veryitman/MZInsetLabel.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line">  s.source_files  = &quot;*.&#123;h,m&#125;&quot;</span><br><span class="line">  s.framework  = &quot;UIKit&quot;</span><br><span class="line">  s.requires_arc = true</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="项目检测"><a href="#项目检测" class="headerlink" title="项目检测"></a>项目检测</h2><p>检查该 podspec 文件，执行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint MZInsetLabel.podspec</span><br></pre></td></tr></table></figure><blockquote><p>–verbose 可以输出更加详细的内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint MZInsetLabel.podspec --verbose</span><br></pre></td></tr></table></figure><p>正确的话, 你可以看到下图如所示的内容：<br><img src="/upload/images/2016/11/1/1.jpg" alt="1"></p><p>在检测的过程中，如果有一些警告导致无法验证通过，可以使用 <code>--allow-warnings</code> 参数规避这些 warning，但我还是建议大家尽量将 warning 修改好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --allow-warnings</span><br></pre></td></tr></table></figure><p><code>pod lib lint *.podspec</code> 是只从本地验证你的 pod 能否通过验证.</p><p><code>pod spec lint*..podspec</code> 是从本地和远程验证你的 pod 能否通过验证.</p><p>大家可自行选择这两种方式。</p><h2 id="添加项目到-Github-Repository"><a href="#添加项目到-Github-Repository" class="headerlink" title="添加项目到  Github Repository"></a>添加项目到  Github Repository</h2><p>将本地的代码 push 到 Github 的 Repository, 就是刚才创建的 MZInsetLabel.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add `文件`或者`文件夹`</span><br><span class="line"></span><br><span class="line">git commit -m &quot;Init&quot;</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>在你的 Github Repository 上面创建一个 Release 作为 Tag（0.1.0版本），如图所示:<br><img src="/upload/images/2016/11/1/2.jpg" alt="1"></p><h2 id="推送到-cocoapods"><a href="#推送到-cocoapods" class="headerlink" title="推送到 cocoapods"></a>推送到 cocoapods</h2><p><strong>1. 注册 trunk</strong></p><blockquote><p>pod trunk register 你的邮箱 ‘用户名’ –description&#x3D;’简单描述’</p></blockquote><p>完整命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register veryitman@126.com &#x27;veryitman&#x27; --description=&#x27;mark&#x27;</span><br></pre></td></tr></table></figure><p><strong>2. 打开邮箱, 激活邮件, 点击链接激活</strong></p><p><strong>3. 检查注册信息</strong></p><p>执行命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure><p><strong>4.添加到 cocoapods</strong></p><p>执行下面命令, 即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push MZInsetLabel.podspec</span><br></pre></td></tr></table></figure><p>成功的效果图:</p><p><img src="/upload/images/2016/11/1/3.jpg" alt="1"></p><p><img src="/upload/images/2016/11/1/4.png" alt="1"></p><h2 id="验证使用"><a href="#验证使用" class="headerlink" title="验证使用"></a>验证使用</h2><p><strong>1. 检查是否可以搜索到</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search MZInsetLabel</span><br></pre></td></tr></table></figure><p>如果搜索不到, 请执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure><p><strong>2. 在项目中可以使用该项目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;MZInsetLabel&#x27;, &#x27;~&gt; 0.1.0&#x27;</span><br></pre></td></tr></table></figure><p>然后在你的测试项目中，执行 <code>pod install</code> 即可。</p><h2 id="可能遇到的麻烦"><a href="#可能遇到的麻烦" class="headerlink" title="可能遇到的麻烦"></a>可能遇到的麻烦</h2><p><strong>1. 执行 <code>pod trunk push *.podspec</code> 时, 好久没反应?</strong></p><blockquote><p>这种情况, 大多数都是因为你的网络不给力造成的, 如果你确定你的网络没问题, 那么请翻墙.</p></blockquote><p><strong>2. 执 行 <code>pod trunk push *.podspec</code> 时报错?</strong></p><p>报错信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR | [iOS] unknown: Encountered an unknown error (Simulator iPhone 4s is not available.) during validation.</span><br></pre></td></tr></table></figure><p>这个错误是因为, 更新了 xcode8 之后不再支持 ios7 的缘故.</p><p>解决方案(我的), 升级 cocoapods.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure><p><strong>3. pod trunk push 失败</strong></p><p>失败提示信息类似:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &#x27;master&#x27;...</span><br><span class="line">error: RPC failed; curl 56 SSLRead() return error -36</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>解决方案: 更新 gem</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><h2 id="Git-命令行操作"><a href="#Git-命令行操作" class="headerlink" title="Git 命令行操作"></a>Git 命令行操作</h2><p><strong>1. 向远程 Repository 添加 tag</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -m &quot;注释&quot; 0.0.1</span><br><span class="line"></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>执行后，可以看到 Github Repository 上会多一个对应的 tag 版本。</p><p><strong>2.删除本地 Tag</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag --delete [TagName]</span><br></pre></td></tr></table></figure><p>如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag --delete 0.0.1</span><br></pre></td></tr></table></figure><p><strong>3. 删除远程 Tag</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --delete origin [TagName]</span><br></pre></td></tr></table></figure><p>如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --delete origin 0.0.1</span><br></pre></td></tr></table></figure><blockquote><p>在 Github 上面如果你不小心打错了 Release, 然后删除该 Release.<br>你会发现, tag 无法删除.使用上面方式妥妥的解决.</p></blockquote><p>如果你删除 tag，想重新打一个相同的 tag，需要先删除本地的 tag，否则会失败。</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS cocoapods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS: 谈谈 frame 和 bounds</title>
      <link href="/2016/10/22/iOS-%E8%B0%88%E8%B0%88-frame-%E5%92%8C-bounds/"/>
      <url>/2016/10/22/iOS-%E8%B0%88%E8%B0%88-frame-%E5%92%8C-bounds/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>大家知道, 我们可以设置 view 的四个角或者其中一个或者几个为圆角.</p><p>使用的方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect </span><br><span class="line">byRoundingCorners:(UIRectCorner)corners </span><br><span class="line">cornerRadii:(CGSize)cornerRadii;</span><br></pre></td></tr></table></figure><p>拖好界面元素之后, 在代码中来修改其为圆角, 居然失败了.</p><p>想要的效果是这样的:<br><img src="/upload/images/2016/10/23/02.png" alt="1"></p><p>但是最终是这样的:<br><img src="/upload/images/2016/10/23/01.png" alt="1"></p><p>于是总结了一下, 分享给大家.</p><h2 id="设置圆角"><a href="#设置圆角" class="headerlink" title="设置圆角"></a>设置圆角</h2><p>这里分两种情况.</p><p><strong>第一种:</strong> 只放置控件, 不设置约束.</p><p>1.storyboard 中拖好控件.</p><p>注意: 这里我并没有设置任何约束.</p><p>2.vc 代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) IBOutlet UILabel *lb;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    [self changeLbCorner];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)changeLbCorner</span><br><span class="line">&#123;</span><br><span class="line">   UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.frame</span><br><span class="line">                                                  byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</span><br><span class="line">                                                        cornerRadii:CGSizeMake(7, 7)];</span><br><span class="line">   CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</span><br><span class="line">   maskLayer.frame = _lb.bounds;</span><br><span class="line">   maskLayer.path = maskPath.CGPath;</span><br><span class="line">   self.lb.layer.mask  = maskLayer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>代码编译运行到模拟器(iphone6), 看不到任何东西.</p><p>log 日志显示 lb 的信息如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ViewController viewDidLoad]:</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</span><br></pre></td></tr></table></figure><p>位置信息是正确的, 咨询检查发现是参数传入错误, 修改 changeLbCorner 方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)changeLbCorner</span><br><span class="line">&#123;</span><br><span class="line">    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.bounds</span><br><span class="line">                                                   byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</span><br><span class="line">                                                         cornerRadii:CGSizeMake(7, 7)];</span><br><span class="line">    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</span><br><span class="line">    maskLayer.frame = _lb.bounds;</span><br><span class="line">    maskLayer.path = maskPath.CGPath;</span><br><span class="line">    self.lb.layer.mask  = maskLayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是将 <code>self.lb.frame</code> 改成了 <code>self.lb.bounds</code>.</p><p>再次运行可以看到效果:<br><img src="/upload/images/2016/10/23/02.png" alt="1"></p><p><strong>第二种:</strong> 放置控件并设置约束.</p><p>1.设置 lb 距离父 view 左边和上边的约束.<br>2.运行上面的代码, 发现, lb 并没有被设置为圆角.<br>并且 lb 的宽度和高度变小了, 变成了文字的实际的宽高.<br><img src="/upload/images/2016/10/23/04.png" alt="1"></p><p>看 log:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ViewController viewDidLoad]:</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</span><br></pre></td></tr></table></figure><p>其实这个时候, (从上面图中可以看出) 这里的信息是错误的.</p><p>正确的信息应该是这样的(在 viewDidAppear 中)打印信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ViewController viewDidAppear]:</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;58.5, 19.5&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;58.5, 19.5&#125;&#125;</span><br></pre></td></tr></table></figure><p>于是, 将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self changeLbCorner];</span><br></pre></td></tr></table></figure><p>放到 viewDidAppear 中, 圆角就正常了.</p><p>接下来, 我们把 lb 的宽高(136*39)约束也加上.</p><p>看一下, viewDidLoad 和 viewDidAppear 方法中打印的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ViewController viewDidLoad]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</span><br><span class="line">[ViewController viewDidAppear:]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看出, viewDidLoad 中错的一塌糊涂.</p><p>这里也说明一个问题:</p><blockquote><p>xib 或者 storyboard 中设置过约束(现实开发中, 基本都会设置约束)的组件, 在 viewDidLoad 中并没有完全 layout, 只是预加载了这些组件.<br>想获取组件如 frame 何 bounds 信息, 在 viewDidLoad 中是不合适甚至是错误的.</p></blockquote><p>那么, 问题来了, 哪里合适哪里正确.</p><p>上面如果你认真看了, 在 viewDidAppear 中是可以正确获取的, 那么还有没有其他方法可以获取呢?</p><h2 id="VC-生命周期函数"><a href="#VC-生命周期函数" class="headerlink" title="VC 生命周期函数"></a>VC 生命周期函数</h2><p>要回答上面的问题, 大家要知道 vc 的生命周期函数.</p><p>上面的例子, 可以看出: 当函数 ViewDidLoad 被调用的时候，IBQutlets 已经被连接，但View 还没有被加载出来，无法获取 frame 等信息.<br>可以在 viewDidLoad 中完成在 IB 中不能完成的 view 的自定义。</p><p>关于 loadView 和 viewDidLoad 在后面博客跟大家分享.</p><p>今天要说的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewDidLayoutSubviews</span><br></pre></td></tr></table></figure><p><code>viewDidLayoutSubviews</code> 在 VC 子视图位置或者尺寸 (position|size) 被改变的时候被调用.</p><p>直到 AutoLayout 已经完成工作的时候才会被确定，所以在执行完 AutoLayout 之后会调用此方法. 换句话说, view 的 frame 和 bounds 这个时候是正确可以获取的.</p><p><code>viewDidLayoutSubviews</code> 这个方法在 <code>viewDidAppear</code> 之前被调用, 有可能会被调用多次.</p><p>即依赖 bounds 或者 frame 的操作，都应该放在<code>viewDidLayoutSubviews</code> 中，而不是 <code>viewDidLoad</code> 或 <code>viewWillAppear</code> 中.</p><p>改变后的代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line"></span><br><span class="line">#define MZLog(fmt, ...) NSLog((@&quot;%s\n&quot; fmt), __FUNCTION__, ##__VA_ARGS__)</span><br><span class="line">#define MZLogLbInfo \</span><br><span class="line">MZLog(@&quot;lb.bounds: %@ \nlb.frame: %@&quot;, NSStringFromCGRect(self.lb.bounds), NSStringFromCGRect(self.lb.frame))</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) IBOutlet UILabel *lb;</span><br><span class="line">@property (strong, nonatomic) IBOutlet UILabel *displayedText;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewWillAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewWillAppear:animated];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewWillLayoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [super viewWillLayoutSubviews];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLayoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLayoutSubviews];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">    </span><br><span class="line">    [self changeLbCorner];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidAppear:animated];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark Callback.</span><br><span class="line"></span><br><span class="line">- (void)changeLbCorner</span><br><span class="line">&#123;</span><br><span class="line">    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.bounds</span><br><span class="line">                                                   byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</span><br><span class="line">                                                         cornerRadii:CGSizeMake(7, 7)];</span><br><span class="line">    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</span><br><span class="line">    maskLayer.frame = _lb.bounds;</span><br><span class="line">    maskLayer.path = maskPath.CGPath;</span><br><span class="line">    self.lb.layer.mask  = maskLayer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>打印的 log 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[ViewController viewDidLoad]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</span><br><span class="line">[ViewController viewWillAppear:]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</span><br><span class="line">[ViewController viewWillLayoutSubviews]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</span><br><span class="line">[ViewController viewDidLayoutSubviews]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</span><br><span class="line">[ViewController viewWillLayoutSubviews]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</span><br><span class="line">[ViewController viewDidLayoutSubviews]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</span><br><span class="line">[ViewController viewDidAppear:]</span><br><span class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </span><br><span class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="frame-和-bounds"><a href="#frame-和-bounds" class="headerlink" title="frame 和 bounds"></a>frame 和 bounds</h2><p>上面的例子, 大家看到由于传入了 frame 而不是 bounds 造成设置圆角失败.</p><p>下面说说 frame 和 bounds.</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>从网上”偷”过来的图</p><p><img src="/upload/images/2016/10/23/03.jpg" alt="1"></p><blockquote><p>1.frame</p></blockquote><p>该 view 在父 view 坐标系统中的位置和大小(参照点是，父坐标系统).</p><blockquote><p>2.bounds</p></blockquote><p>该 view 在本地坐标系统中的位置和大小(参照点是，本地坐标系统，就相当于 view 自己的坐标系统，以(0,0)点为起点).<br>其实本地坐标系统的关键就是要知道的它的原点(0,0).</p><p>bounds 默认值是(0, 0, width, height).除非手动改变 bounds 的值.</p><p>单纯的从概念上面, 很难理解二者的区别.</p><p>提供一个例子, 例子大概是这样的:<br>redView 是 yellowView 的父视图, yellowView 是 blueView 的父视图.</p><p>通过改变 redView 的 bounds 会影响子视图的位置(不是frame).<br>将 redView 的 bounds 起点设为(-20, -20), 子视图相对于 redView 的本地坐标(0, 0), 也就需要往下增加20, 这样, yellowView 就往下移动了.</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h3><p><img src="/upload/images/2016/10/23/05.png" alt="1"></p><p><img src="/upload/images/2016/10/23/06.png" alt="1"></p><p><img src="/upload/images/2016/10/23/07.png" alt="1"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line"></span><br><span class="line">#define MZLog(fmt, ...) NSLog((@&quot;%s\n&quot; fmt), __FUNCTION__, ##__VA_ARGS__)</span><br><span class="line">#define MZLogLbInfo \</span><br><span class="line">MZLog(@&quot;lb.bounds: %@ \nlb.frame: %@&quot;, NSStringFromCGRect(self.lb.bounds), NSStringFromCGRect(self.lb.frame))</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) IBOutlet UILabel *lb;</span><br><span class="line">@property (strong, nonatomic) IBOutlet UILabel *displayedText;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line">&#123;</span><br><span class="line">    UIView *redView;</span><br><span class="line">    UIView *yellowView;</span><br><span class="line">    UIView *blueView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    // 将 redView 添加到 self.view</span><br><span class="line">    &#123;</span><br><span class="line">        redView = [[UIView alloc] initWithFrame:CGRectMake(100, 200, 120, 120)];</span><br><span class="line">        redView.backgroundColor = [UIColor redColor];</span><br><span class="line">        [self.view addSubview:redView];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 将 yellowView 添加到 redView</span><br><span class="line">    &#123;</span><br><span class="line">        yellowView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 90, 90)];</span><br><span class="line">        yellowView.backgroundColor = [UIColor yellowColor];</span><br><span class="line">        [redView addSubview:yellowView];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 将 blueView 添加到 yellowView</span><br><span class="line">    &#123;</span><br><span class="line">        blueView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 60, 60)];</span><br><span class="line">        blueView.backgroundColor = [UIColor blueColor];</span><br><span class="line">        [yellowView addSubview:blueView];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self logViewInfo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewWillAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewWillAppear:animated];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewWillLayoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [super viewWillLayoutSubviews];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLayoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLayoutSubviews];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">    </span><br><span class="line">    [self changeLbCorner];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidAppear:animated];</span><br><span class="line">    </span><br><span class="line">    MZLogLbInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark Callback.</span><br><span class="line"></span><br><span class="line">- (void)changeLbCorner</span><br><span class="line">&#123;</span><br><span class="line">    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.bounds</span><br><span class="line">                                                   byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</span><br><span class="line">                                                         cornerRadii:CGSizeMake(7, 7)];</span><br><span class="line">    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</span><br><span class="line">    maskLayer.frame = _lb.bounds;</span><br><span class="line">    maskLayer.path = maskPath.CGPath;</span><br><span class="line">    self.lb.layer.mask  = maskLayer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (IBAction)doResetAction:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:1.0f animations:^&#123;</span><br><span class="line">        [redView setBounds:CGRectMake(0, 0, 120, 120)];</span><br><span class="line">        [yellowView setBounds:CGRectMake(0, 0, 90, 90)];</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        [self logViewInfo];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (IBAction)doChangeRedViewBounds:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:1.0f animations:^&#123;</span><br><span class="line">        [redView setBounds:CGRectMake(-20, -20, 120, 120)];</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        [self logViewInfo];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (IBAction)doChangeYellowViewBounds:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:1.0f animations:^&#123;</span><br><span class="line">        [yellowView setBounds:CGRectMake(-20, -20, 90, 90)];</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        [self logViewInfo];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark Display Debug Info.</span><br><span class="line"></span><br><span class="line">- (void)logViewInfo</span><br><span class="line">&#123;</span><br><span class="line">    NSString *log4rView = [NSString stringWithFormat:@&quot;RedView\nframe:%@ \nbounds:%@&quot;,</span><br><span class="line">                           NSStringFromCGRect(redView.frame), NSStringFromCGRect(redView.bounds)];</span><br><span class="line">    NSString *log4yView = [NSString stringWithFormat:@&quot;YellowView\nframe:%@ \nbounds:%@&quot;,</span><br><span class="line">                           NSStringFromCGRect(yellowView.frame), NSStringFromCGRect(yellowView.bounds)];</span><br><span class="line">    NSString *log4bView = [NSString stringWithFormat:@&quot;BlueView\nframe:%@ \nbounds:%@&quot;,</span><br><span class="line">                           NSStringFromCGRect(blueView.frame), NSStringFromCGRect(blueView.bounds)];</span><br><span class="line">    </span><br><span class="line">    NSString *log = [NSString stringWithFormat:@&quot;%@\n%@\n%@&quot;, log4rView, log4yView, log4bView];</span><br><span class="line">    [self display:log];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)display:(NSString *)content</span><br><span class="line">&#123;</span><br><span class="line">    self.displayedText.text = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>frame, 描述的是当前视图在其父视图中的位置和大小.<br>bounds, 描述的是当前视图在其自身坐标系统中的位置和大小.</li></ul><p>所以, bounds 默认是 <code>(0, 0, frame.size.width, frame.size.height)</code></p><p>另外, 还有一个 <code>center</code> 描述的是当前视图的中心点在其父视图中的位置.</p><ul><li>bounds 和 frame 是两个不等同的概念, 改变 bounds 会影响子视图的位置(人眼看到其改变了位置), 设置 bounds 可以修改自己坐标系的原点位置. 但是不会改变子视图的 bounds 和 frame.</li></ul><blockquote><p>明白上面的道理很重要, iOS 中滚动视图能让你看到其中的内容, 正是利用了 contentoffset 和 bounds 属性.</p></blockquote><blockquote><p>这里以 tableView 为例子, 当我们向上滚动 tableView, tableView 的 contentOffset 和 bounds 的坐标都是正数, 相当于其本地坐标(0, 0)改变了即增加了(坐标系往下为增加), 那么其子视图就会向上去.</p></blockquote><blockquote><p>向下滑动时, 也是同一个道理.<br>可以通过运行 <a href="https://github.com/veryitman/iOSDemo/tree/master/na">完整 Demo</a> 中[查看 TableView]按钮来打开例子, 看日志.</p></blockquote><ul><li><p>改变子视图所有父视图的 bounds, 子视图的位置是累加改变的.<br>如上面改变 redView 和 yellowView 的 bounds, blueView 的位置相对 redView 往下移动了 40.</p></li><li><p>当同一个视图的 bounds 大于 frame, 会导致 frame 被撑大，frame 的 x, y, width, height 都会被改变. 反之, bounds 小于 frame, frame 也会变小.</p></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ol><li><p>GitHub 上面可以下载 <a href="https://github.com/veryitman/iOSDemo/tree/master/na">完整 Demo</a></p></li><li><p>推荐之前写在 CSDN 上的博文: <a href="http://blog.csdn.net/veryitman/article/details/51622235">iOS UI 技巧: 视图无法被点击</a></p></li></ol><p>可关注我的微信公众号:<br><img src="/upload/me/qrcode_wx.jpg" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS frame bounds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN: 模拟 Mobx</title>
      <link href="/2016/10/11/RN-%E6%A8%A1%E6%8B%9F-Mobx/"/>
      <url>/2016/10/11/RN-%E6%A8%A1%E6%8B%9F-Mobx/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看过 [React Native 使用 Mobx] 这篇博客的同学, 对 Mobx 应该有了一个简单直观的认识.</p><p>其实, 我们完全可以使用 RN 中的 State 来达到同样的效果.</p><p>今天的主要内容是使用 State 来模拟 Mobx, 也算是对 Mobx 的进一步认识.</p><p>效果</p><p>实现效果和 [React Native 使用 Mobx] 中的效果一致, 只是代码没有使用 Mobx 框架.</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="LegacyCounter-js"><a href="#LegacyCounter-js" class="headerlink" title="LegacyCounter.js"></a>LegacyCounter.js</h3><blockquote><p>Add 和 Minus 两个按钮分别触发各自的回调, 来更新 state.<br>使用 state 的变化来到达更新 View (计数的 Text 会相应的做出变化)的目的.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 模拟 Mobx 在 ReactNative 上的一个小例子.</span><br><span class="line"> * </span><br><span class="line"> * state -&gt; view</span><br><span class="line"> */</span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableHighlight</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">class LegacyCounter extends Component &#123;</span><br><span class="line">    //构造方法</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    </span><br><span class="line">        this.state = &#123;</span><br><span class="line">            //计数</span><br><span class="line">            counter: 0</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render () &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;View style = &#123;styles.container&#125;&gt;</span><br><span class="line">            &#123;/*加一*/&#125;</span><br><span class="line">            &lt;TouchableHighlight</span><br><span class="line">                onPress = &#123;() =&gt; &#123;this.setState(&#123;</span><br><span class="line">                    counter: ++this.state.counter</span><br><span class="line">                &#125;)&#125;&#125;&gt;</span><br><span class="line">                &lt;Text&gt;Add&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableHighlight&gt;</span><br><span class="line">            &#123;/* 显示处理结果 */&#125;</span><br><span class="line">            &lt;Text style = &#123;styles.resultTxtStyle&#125;&gt;</span><br><span class="line">            &#123;this.state.counter&#125;</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">            &#123;/*减一*/&#125;</span><br><span class="line">            &lt;TouchableHighlight </span><br><span class="line">                onPress = &#123;() =&gt; &#123;this.setState(&#123;</span><br><span class="line">                    counter: --this.state.counter</span><br><span class="line">                &#125;)&#125;&#125;&gt;</span><br><span class="line">                &lt;Text&gt;Minus&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableHighlight&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default class LegacyComponent extends Component &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style = &#123;&#123;flex: 1, marginTop: 64&#125;&#125;&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;LegacyCounter/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 样式定义 */</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flexDirection: &#x27;row&#x27;,</span><br><span class="line">        justifyContent: &#x27;space-around&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    resultTxtStyle: &#123;</span><br><span class="line">        fontSize: 22, </span><br><span class="line">        color: &#x27;red&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="index-ios-js"><a href="#index-ios-js" class="headerlink" title="index.ios.js"></a>index.ios.js</h3><blockquote><p>这个文件很简单, 只是调用 LegacyCounter 中的组件.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">//引入自定义模块</span><br><span class="line">import LegacyComponent from &#x27;./js/Mobx/LegacyCounter&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">class RNMobxDemo extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;LegacyComponent/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AppRegistry.registerComponent(&#x27;RNMobxDemo&#x27;, () =&gt; MZRNTutorial);</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果你想了解更多关于 RN 中 State 的知识, 请移步官方文档查阅 State 的用法.</p><p>后续会给大家带来更多关于 RN 这些方面的东西.</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS Android ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN: 使用 Mobx</title>
      <link href="/2016/10/06/RN-%E4%BD%BF%E7%94%A8-Mobx/"/>
      <url>/2016/10/06/RN-%E4%BD%BF%E7%94%A8-Mobx/</url>
      
        <content type="html"><![CDATA[<h2 id="来由"><a href="#来由" class="headerlink" title="来由"></a>来由</h2><p>在 <a href="https://jsfiddle.net/24u7juu0/">JSFiddler</a> 上面看到 React 结合 Mobx 的一个小例子.</p><p>爱不释手, 遂拿来改造一下, 让其能在 RN 上面一展雄风.</p><p>之前听过 Mobx, 说是要替代 Redux, 反正我是不知道这些东东, 第一次听说没有什么感觉!<br>如今又再次偶遇 Mobx, 决定认真学习一下它.</p><h2 id="Mobx-简介"><a href="#Mobx-简介" class="headerlink" title="Mobx 简介"></a>Mobx 简介</h2><p>Mobx 的 <a href="https://github.com/mobxjs/mobx">github</a> 地址.<br>目前关于他和 React Native 的(中文)资料不多, 大多数是关于 React 的.</p><p>看来想学好 React Native, 还是要做好 React 的功课呀!</p><p>官网给了一个 Mobx 的图:<br><img src="/upload/images/2016/10/08/rn_mobx_ef4.png" alt="1"></p><p>我也是刚接触这个「牛逼闪闪」的 Mobx, 共勉!</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>今天的例子很简单, 效果图如下<br><img src="/upload/images/2016/10/08/rn_mobx_ef1.png" alt="1"></p><p>点击 Add<br><img src="/upload/images/2016/10/08/rn_mobx_ef3.png" alt="1"></p><p>点击 Minus<br><img src="/upload/images/2016/10/08/rn_mobx_ef2.png" alt="1"></p><p>下面具体说说如何搞定这个 Demo.</p><h2 id="准备「材料」"><a href="#准备「材料」" class="headerlink" title="准备「材料」"></a>准备「材料」</h2><p>这里假设你已经具备 React Native 的基本开发环境, 至少成功运行过一次 React Native 的程序.</p><h3 id="1-创建-React-Native-项目"><a href="#1-创建-React-Native-项目" class="headerlink" title="1.创建 React Native 项目"></a>1.创建 React Native 项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init RNMobxDemo</span><br></pre></td></tr></table></figure><p>你也可以给你的工程取一个你喜欢的名字.<br>这里姑且称之为 RNMobxDemo</p><h3 id="2-安装-mobx-和-mobx-react"><a href="#2-安装-mobx-和-mobx-react" class="headerlink" title="2.安装 mobx 和 mobx-react"></a>2.安装 mobx 和 mobx-react</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mobx mobx-react --save</span><br></pre></td></tr></table></figure><h3 id="3-Counter-js"><a href="#3-Counter-js" class="headerlink" title="3.Counter.js"></a>3.Counter.js</h3><blockquote><p>该文件使用了 mobx 和 mobx-react 的组件.</p></blockquote><p>具体代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableHighlight</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">import &#123; observer &#125; from &#x27;mobx-react/native&#x27;;</span><br><span class="line">import &#123; observable &#125; from &#x27;mobx&#x27;;</span><br><span class="line">// 被观察者, 观察 counter 变量  </span><br><span class="line">const storer = observable(&#123;</span><br><span class="line">    counter: 0</span><br><span class="line">&#125;);</span><br><span class="line">//---------------------------------</span><br><span class="line">//  ES6 写法: Arrow Function</span><br><span class="line">//---------------------------------</span><br><span class="line">storer.plus =  () =&gt; &#123;</span><br><span class="line">    storer.counter ++;</span><br><span class="line">&#125;;</span><br><span class="line">storer.minus = () =&gt; &#123;</span><br><span class="line">    storer.counter --;</span><br><span class="line">&#125;;</span><br><span class="line">class Counter extends Component &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;View style = &#123;styles.container&#125;&gt;</span><br><span class="line">            &#123;/*加一*/&#125;</span><br><span class="line">            &lt;TouchableHighlight</span><br><span class="line">                onPress = &#123;() =&gt; &#123;this.props.store.plus()&#125;&#125;&gt;</span><br><span class="line">                &lt;Text&gt;Add&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableHighlight&gt;</span><br><span class="line">            &#123;/* 显示处理结果 */&#125;</span><br><span class="line">            &lt;Text style = &#123;styles.resultTxtStyle&#125;&gt;</span><br><span class="line">            &#123;this.props.store.counter&#125;</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">            &#123;/*减一*/&#125;</span><br><span class="line">            &lt;TouchableHighlight </span><br><span class="line">                onPress = &#123;() =&gt; &#123;storer.minus()&#125;&#125;&gt;</span><br><span class="line">                &lt;Text&gt;Minus&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableHighlight&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 使用 observer 创建</span><br><span class="line">const CounterComponent = observer(Counter);</span><br><span class="line">export default class ReactionsComponent extends Component &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style = &#123;&#123;flex: 1, marginTop: 64&#125;&#125;&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;CounterComponent store = &#123;storer&#125; /&gt; </span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 样式定义 */</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flexDirection: &#x27;row&#x27;,</span><br><span class="line">        justifyContent: &#x27;space-around&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    resultTxtStyle: &#123;</span><br><span class="line">        fontSize: 22, </span><br><span class="line">        color: &#x27;red&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-index-ios-js"><a href="#4-index-ios-js" class="headerlink" title="4.index.ios.js"></a>4.index.ios.js</h3><blockquote><p>该文件使用自定义的组件 ReactionsComponent</p></blockquote><p>具体代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">//引入自定义模块</span><br><span class="line">import ReactionsComponent from &#x27;./js/Mobx/Counter&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">class RNMobxDemo extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;ReactionsComponent/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AppRegistry.registerComponent(&#x27;RNMobxDemo&#x27;, () =&gt; MZRNTutorial);</span><br></pre></td></tr></table></figure><p>Mobx 支持「注解」.</p><p>这里的注解就是 ES7 中的 decorators (装饰者模式).</p><p>下面代码是使用注解的方式来声明, 但是你需要安装相关的插件(babel plugin)来支持.</p><p>安装该插件很简单, 在项目根目录按照下面步骤即可:</p><blockquote><p>Step 1: 创建 .babelrc 文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .babelrc</span><br></pre></td></tr></table></figure><blockquote><p>Step 2: 编辑 .babelrc 文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &#x27;presets&#x27;: [&#x27;react-native&#x27;],</span><br><span class="line"> &#x27;plugins&#x27;: [&#x27;transform-decorators-legacy&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Step 3: 安装插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev</span><br></pre></td></tr></table></figure><p>修改「Counter.js」, 代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableHighlight</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">import &#123; observer &#125; from &#x27;mobx-react/native&#x27;;</span><br><span class="line">import &#123; observable &#125; from &#x27;mobx&#x27;;</span><br><span class="line">// 被观察者, 观察 counter 变量  </span><br><span class="line">const storer = observable(&#123;</span><br><span class="line">    counter: 0</span><br><span class="line">&#125;);</span><br><span class="line">//---------------------------------</span><br><span class="line">//  ES6 写法: Arrow Function</span><br><span class="line">//---------------------------------</span><br><span class="line">storer.plus =  () =&gt; &#123;</span><br><span class="line">    storer.counter ++;</span><br><span class="line">&#125;;</span><br><span class="line">storer.minus = () =&gt; &#123;</span><br><span class="line">    storer.counter --;</span><br><span class="line">&#125;;</span><br><span class="line">@observer //使用@方式来前置声明</span><br><span class="line">class Counter extends Component &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;View style = &#123;styles.container&#125;&gt;</span><br><span class="line">            &#123;/*加一*/&#125;</span><br><span class="line">            &lt;TouchableHighlight</span><br><span class="line">                onPress = &#123;() =&gt; &#123;this.props.store.plus()&#125;&#125;&gt;</span><br><span class="line">                &lt;Text&gt;Add&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableHighlight&gt;</span><br><span class="line">            &#123;/* 显示处理结果 */&#125;</span><br><span class="line">            &lt;Text style = &#123;styles.resultTxtStyle&#125;&gt;</span><br><span class="line">            &#123;this.props.store.counter&#125;</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">            &#123;/*减一*/&#125;</span><br><span class="line">            &lt;TouchableHighlight </span><br><span class="line">                onPress = &#123;() =&gt; &#123;storer.minus()&#125;&#125;&gt;</span><br><span class="line">                &lt;Text&gt;Minus&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableHighlight&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default class ReactionsComponent extends Component &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style = &#123;&#123;flex: 1, marginTop: 64&#125;&#125;&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;Counter store = &#123;storer&#125; /&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 样式定义 */</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flexDirection: &#x27;row&#x27;,</span><br><span class="line">        justifyContent: &#x27;space-around&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    resultTxtStyle: &#123;</span><br><span class="line">        fontSize: 22, </span><br><span class="line">        color: &#x27;red&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从例子可以看出, storer 相当于 state, 当 state 发生改变了, 视图 View 也跟着变化.<br>也就是状态驱动.</p><p>Android 开发的同学应该知道 Adapter 和 notifyDatasetChanged 的机制, 当数据源发生变化的时候, 可以通知视图进行刷新操作.</p><p>这里的 Mobx 也可以这么简单的理解.</p><p>Mobx 的强大之处还有很多, 需要慢慢学习和挖掘.</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS Android ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN: 0.34 运行在 Android 的问题</title>
      <link href="/2016/09/26/RN-0-34-%E8%BF%90%E8%A1%8C%E5%9C%A8-Android-%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2016/09/26/RN-0-34-%E8%BF%90%E8%A1%8C%E5%9C%A8-Android-%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天闲来无事, 想使用 RN 工程在 Android 设备上面跑跑.</p><p>想看看运行效果怎么样?!</p><h2 id="适合读者"><a href="#适合读者" class="headerlink" title="适合读者"></a>适合读者</h2><ul><li>有 Android 开发基础.</li><li>会使用 Android Studio.</li><li>初级 React Native 的开发者.</li></ul><h2 id="开发环境和工具"><a href="#开发环境和工具" class="headerlink" title="开发环境和工具"></a>开发环境和工具</h2><ul><li>Android Studio 2.2</li><li>ReactNative 0.34</li><li>Android 模拟器</li><li>Mac 操作系统</li></ul><h2 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h2><p>不出所料, 真的不能一帆风顺的 Run.</p><p>在我的博客 ReactNative: 不一样的 HelloWorld 中展示了 RN 在 iOS 上面的运行情况.</p><p>今天还是这个例子, 部署和运行到 Android 上面.</p><p>效果如下:<br><img src="/upload/images/2016/9/26/rn_and_eff_01.png" alt="1"></p><p>在这个过程中, 遇到几个问题.</p><p>特此记录.</p><h2 id="问题描述和解决"><a href="#问题描述和解决" class="headerlink" title="问题描述和解决"></a>问题描述和解决</h2><h3 id="问题1-直接运行-crash"><a href="#问题1-直接运行-crash" class="headerlink" title="问题1: 直接运行 crash"></a>问题1: 直接运行 crash</h3><p>log 描述(部分)</p><blockquote><p>E&#x2F;AndroidRuntime: FATAL EXCEPTION: main<br>Process: com.mzrntutorial, PID: 5849<br>java.lang.RuntimeException:<br>Unable to start activity ComponentInfo{com.mzrntutorial&#x2F;com.mzrntutorial.MainActivity}: java.lang.ClassCastException: android.app.Application cannot be cast to com.facebook.react.ReactApplication<br>at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2416)<br>at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2476)     </p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>Manifest.xml 配置 Application 名称</p><p>android:name&#x3D;”.MainApplication”</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2:"></a>问题2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not get batchedbridge make sure your bundle is packaged correctly</span><br></pre></td></tr></table></figure><p>解决问题1后, 再次运行, 会报问题2.<br>该问题是因为没有启动本地的 server.</p><p>使用 Xcode 可以自动运行本地 server.<br>可以参考博客 React Native 如何启动 local server</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>手动启动 server.</p><p>cd 项目根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start</span><br></pre></td></tr></table></figure><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3:"></a>问题3:</h3><blockquote><p>模拟器没有 menu 按键, 无法 Reload</p></blockquote><p>这个其实不是什么大问题, 但是对于初学者, 也算是一个问题.</p><p>新版的 Android SDK 创建的模拟器没有 menu 按键了</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>连续按两次字母 r 即可刷新.</p><p>这些问题, FB 后面肯定会解决的.<br>阿门!</p><h2 id="附录-代码"><a href="#附录-代码" class="headerlink" title="附录(代码)"></a>附录(代码)</h2><p>index.ios.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;getPlatformString, isIOS&#125; from &#x27;./js/Generals/Utils/IDSRNPlatformUtil&#x27;;</span><br><span class="line">import MZButton from &#x27;./js/ReactUIKit/MZButton&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Platform,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  TouchableHighlight</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">// 调用其他模块方法</span><br><span class="line">var os = getPlatformString();</span><br><span class="line">var iosPlatform = isIOS();//when run on &#x27;ios&#x27; true</span><br><span class="line">class MZRNTutorial extends Component &#123;</span><br><span class="line">  constructor(props)</span><br><span class="line">  &#123;</span><br><span class="line">      super(props);</span><br><span class="line">      this.state = &#123;status:1&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  customPressHandler = () =&gt; &#123;</span><br><span class="line">      alert(&#x27;当前状态: &#x27; + this.state.status);</span><br><span class="line">      this.state.status = 2;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&#x27;render ...&#x27;);</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">          Near use React Native!</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          To get started, edit index.android.js</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          Press &#x27;R&#x27; twice to reload,&#123;&#x27;\n&#x27;&#125;</span><br><span class="line">          or shake for dev menu</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &#123;/* 显示当前平台信息*/&#125;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">            current os: &#123;Platform.OS&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &#123;/*</span><br><span class="line">        &lt;TouchableOpacity</span><br><span class="line">            style=&#123;styles.button&#125;</span><br><span class="line">            onPress=&#123;this.customPressHandler&#125;</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;Text style=&#123;styles.buttonText&#125;&gt;确定&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableOpacity&gt;</span><br><span class="line">        */&#125;</span><br><span class="line">        &lt;MZButton text=&quot;确定?&quot; bgColor=&quot;green&quot; dianjishijian=&#123;()=&gt;&#123;alert(&#x27;居然点击确定?!&#x27;)&#125;&#125;&gt;</span><br><span class="line">        &lt;/MZButton&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  button: &#123;</span><br><span class="line">    height: 40,</span><br><span class="line">    width: 150,</span><br><span class="line">    borderRadius: 20,</span><br><span class="line">    justifyContent: &#x27;center&#x27;,</span><br><span class="line">    backgroundColor: &#x27;green&#x27;,</span><br><span class="line">    overflow: &#x27;hidden&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  buttonText: &#123;</span><br><span class="line">    textAlign: &#x27;center&#x27;,</span><br><span class="line">    color: &#x27;white&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: 1,</span><br><span class="line">    justifyContent: &#x27;center&#x27;,</span><br><span class="line">    alignItems: &#x27;center&#x27;,</span><br><span class="line">    backgroundColor: &#x27;#F5FCFF&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  welcome: &#123;</span><br><span class="line">    fontSize: 20,</span><br><span class="line">    textAlign: &#x27;center&#x27;,</span><br><span class="line">    margin: 10,</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: &#123;</span><br><span class="line">    textAlign: &#x27;center&#x27;,</span><br><span class="line">    color: &#x27;#333333&#x27;,</span><br><span class="line">    marginBottom: 5,</span><br><span class="line">  &#125;,</span><br><span class="line">  flowRight: &#123;</span><br><span class="line">   flexDirection: &#x27;row&#x27;,</span><br><span class="line">   alignItems: &#x27;center&#x27;,</span><br><span class="line">   alignSelf: &#x27;stretch&#x27;</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">AppRegistry.registerComponent(&#x27;MZRNTutorial&#x27;, () =&gt; MZRNTutorial);</span><br></pre></td></tr></table></figure><p>MZButton.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Platform,</span><br><span class="line">  TouchableOpacity</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">//-----------------------------------------------------</span><br><span class="line">//外部使用该模块, ES6需要使用关键字 export default</span><br><span class="line">//-----------------------------------------------------</span><br><span class="line">export default class MZButton extends Component</span><br><span class="line">&#123;</span><br><span class="line">    constructor(props)</span><br><span class="line">    &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;status:1&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    costumPressHandler = () =&gt; &#123;</span><br><span class="line">        alert(&#x27;当前状态:&#x27; + this.state.status);</span><br><span class="line">        const &#123;dianjishijian&#125; = this.props;</span><br><span class="line">        dianjishijian();</span><br><span class="line">    &#125;;</span><br><span class="line">    // 使用属性值设置背景颜色</span><br><span class="line">    // style=&#123;[styles.button], &#123;backgroundColor:this.props.beijingyanse&#125;&#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        //解构</span><br><span class="line">        const &#123;text, bgColor&#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;TouchableOpacity</span><br><span class="line">                style=&#123;[styles.button], &#123;backgroundColor:bgColor&#125;&#125;</span><br><span class="line">                onPress = &#123;this.costumPressHandler&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;Text style=&#123;styles.buttonText&#125;&gt;</span><br><span class="line">                    &#123;/* 使用属性值 */&#125;</span><br><span class="line">                    &#123;this.props.text&#125;</span><br><span class="line">                &lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">    button: &#123;</span><br><span class="line">      height: 40,</span><br><span class="line">      width: 150,</span><br><span class="line">      borderRadius: 20,</span><br><span class="line">      justifyContent: &#x27;center&#x27;,</span><br><span class="line">      backgroundColor: &#x27;green&#x27;,</span><br><span class="line">      overflow: &#x27;hidden&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    buttonText: &#123;</span><br><span class="line">      textAlign: &#x27;center&#x27;,</span><br><span class="line">      color: &#x27;white&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>IDSRNPlatformUtil.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">    Platform</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">export function getPlatformString()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(Platform.OS);</span><br><span class="line">    </span><br><span class="line">    return Platform.OS;</span><br><span class="line">&#125;</span><br><span class="line">export function isIOS()</span><br><span class="line">&#123;</span><br><span class="line">    return Platform.OS === &#x27;ios&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">export function isAndroid()</span><br><span class="line">&#123;</span><br><span class="line">    return Platform.OS == &#x27;android&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 项目: 打造本地 pod 库</title>
      <link href="/2016/09/25/iOS-%E9%A1%B9%E7%9B%AE-%E6%89%93%E9%80%A0%E6%9C%AC%E5%9C%B0-pod-%E5%BA%93/"/>
      <url>/2016/09/25/iOS-%E9%A1%B9%E7%9B%AE-%E6%89%93%E9%80%A0%E6%9C%AC%E5%9C%B0-pod-%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>本篇的姊妹篇 <a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">Cocoapods 管理开源项目</a> 已准备完毕，直戳 <a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">链接</a> 即可达到。</p><h2 id="Cocoapods-管理代码的必要性"><a href="#Cocoapods-管理代码的必要性" class="headerlink" title="Cocoapods 管理代码的必要性"></a>Cocoapods 管理代码的必要性</h2><p>项目到了一定规模, 代码组织和结构显得尤为重要.</p><p>重构项目结构，可以从分离代码开始，代码分离，可以把常用稳定的组件封装抽离出来.</p><p>分离代码, 常用的有几种方式:</p><blockquote><ol><li>放到不同的文件夹, 管理和组织代码.</li><li>使用 framework 的方式, 提供给项目使用.</li><li>工具管理如 Cocoapods.</li></ol></blockquote><p>这几种方式, 各有所长, 各有优劣, 无所谓好与坏, 根据自己的项目特点来组织即可.</p><p>我的做法是使用 cocoapods 来管理.</p><p>下面进入今天的主题:</p><blockquote><p>使用 cocoapods 管理自己的本地代码.</p></blockquote><p>博客 <a href="http://blog.csdn.net/veryitman/article/details/50769069">Mac OSX 10.11.1+ 安装 Cocoapods</a><br>介绍了如何在最新版 MacOS 中安装 Cocoapods 以及注意事项, 并且作者保证持续「更新, 更正」内容.</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>使用 Xcode 创建一个工程, 工程名就起为 <code>TestPods</code> 吧.</p><blockquote><p>工程目录可以防止在桌面或者你喜欢的目录下面都可以.</p></blockquote><p>在 TestPods 下面创建 LocalLib 目录, 用来放置分离的代码.当然, 你也可以将 LocalLib 这个目录放到其他目录.</p><p>在 LocalLib 下面, 我的 pod 库代码名称为 download.</p><p>可以新建这个目录.</p><p>目录如下:<br><img src="/upload/images/2016/9/25/pod_lib_dir.png" alt="1"></p><h2 id="创建-podspec-文件"><a href="#创建-podspec-文件" class="headerlink" title="创建 podspec 文件"></a>创建 podspec 文件</h2><p>在 download 目录下面, 创建 podspec 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create download</span><br></pre></td></tr></table></figure><p>创建完成后, 会生成 download.podspec 文件.</p><p>具体内容, 创建后, 大家可以自行查看.</p><h2 id="修改-podspec-文件"><a href="#修改-podspec-文件" class="headerlink" title="修改 podspec 文件"></a>修改 podspec 文件</h2><p>修改 download.podspec, 主要修改几个关键地方:</p><blockquote><p>源码位置<br>源码版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――#</span><br><span class="line">  #</span><br><span class="line">  #  Specify the location from where the source should be retrieved.</span><br><span class="line">  #  Supports git, hg, bzr, svn and HTTP.</span><br><span class="line">  #</span><br><span class="line">  s.source       = &#123; :git =&gt; &quot;&quot;, :tag =&gt; &quot;0.0.1&quot; &#125;</span><br><span class="line">  # ――― Source Code ――――――――――――――――――――――――――――――――――――――――――――#</span><br><span class="line">  #</span><br><span class="line">  #  CocoaPods is smart about how it includes source code. For source files</span><br><span class="line">  #  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</span><br><span class="line">  #  For header files it will include any header in the folder.</span><br><span class="line">  #  Not including the public_header_files will make all headers public.</span><br><span class="line">  #</span><br><span class="line">  s.source_files  = &quot;Source&quot;, &quot;Source/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">  s.exclude_files = &quot;Source/Exclude&quot;</span><br></pre></td></tr></table></figure><p>另外, 配置好相关描述信息, 不要包含 ‘Example’ 的字样, 不然, 新版的 Cocoapods 执行 pod install 时候, 会报出警告和错误.</p><p>这样, 工程可以使用 pods 库了.</p><h2 id="工程使用-pod-库"><a href="#工程使用-pod-库" class="headerlink" title="工程使用 pod 库"></a>工程使用 pod 库</h2><p>将 TestPods 改为 cocoapods 项目.</p><p>在 TestPods 目录, 执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><p>会生成 Podfile 等文件.</p><p>修改 Podfile 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment this line to define a global platform for your project</span><br><span class="line"># platform :ios, &#x27;7.0&#x27;</span><br><span class="line"># Uncomment this line if you&#x27;re using Swift</span><br><span class="line"># use_frameworks!</span><br><span class="line">target &#x27;TestPods&#x27; do</span><br><span class="line">pod &#x27;download&#x27;, :path =&gt; &#x27;./LocalLib/download/&#x27;</span><br><span class="line">#pod &#x27;core_lib_spec&#x27;, :svn =&gt; &#x27;http://svn.ids111.com/o2o/client/ios/trunks/master/Frameworks/CoreLibrary&#x27;</span><br><span class="line">end</span><br><span class="line">target &#x27;TestPodsTests&#x27; do</span><br><span class="line">end</span><br><span class="line">target &#x27;TestPodsUITests&#x27; do</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>关键是指明 pod 库的位置.<br>路径一定要正确.否则无法找到该库.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;download&#x27;, :path =&gt; &#x27;./LocalLib/download/&#x27;</span><br></pre></td></tr></table></figure><p>在 TestPods 下面, pod install 即可.</p><p>如果, pod install 报错, 一般都是你的 pod 库的配置文件(.podspec)里面写的不符合要求.</p><p>根据报错信息, 加以修改即可.</p><p>xcode 打开工程.<br><img src="/upload/images/2016/9/25/pod_lib_pro.png" alt="1"></p><h2 id="示例下载"><a href="#示例下载" class="headerlink" title="示例下载"></a>示例下载</h2><p>工程示例代码, 可以 <a href="http://download.csdn.net/download/androidbluetooth/9520262">戳这里下载</a> 玩耍!</p><hr><p><strong>扫码关注，你我就各多一个朋友~</strong></p><p><img src="/upload/me/qrcode_wx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS Cocoapods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN: 如何启动 local server</title>
      <link href="/2016/09/22/RN-%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8-local-server/"/>
      <url>/2016/09/22/RN-%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8-local-server/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>react-native init</code> 创建的工程, 在 xcode 中运行会自动启动一个 RN 的本地 Server.</p><p>像下面图片展示这样:<br><img src="/upload/images/2016/9/22/rn_1.png" alt="1"></p><p>那么, 这里问题来了.</p><p>比如, 我想暂时不启动这个本地 Server, 那么如何关闭呢?</p><p>下面跟大家一起探讨和追究一下.</p><h2 id="找到启动的根源"><a href="#找到启动的根源" class="headerlink" title="找到启动的根源"></a>找到启动的根源</h2><p>启动这个终端的是在一个 React.xcodeproj 工程的 「Build Phases」中脚本里面配置的.</p><p>脚本内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if nc -w 5 -z localhost 8081 ; then</span><br><span class="line">  if ! curl -s &quot;http://localhost:8081/status&quot; | grep -q &quot;packager-status:running&quot; ; then</span><br><span class="line">    echo &quot;Port 8081 already in use, packager is either not running or not running correctly&quot;</span><br><span class="line">    exit 2</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  open &quot;$SRCROOT/../packager/launchPackager.command&quot; || echo &quot;Can&#x27;t start packager automatically&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>真正起作用的是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open &quot;$SRCROOT/../packager/launchPackager.command&quot;</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这样我们就可以关闭这个自启动了, 示例代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if nc -w 5 -z localhost 8081 ; then</span><br><span class="line">  if ! curl -s &quot;http://localhost:8081/status&quot; | grep -q &quot;packager-status:running&quot; ; then</span><br><span class="line">    echo &quot;Port 8081 already in use, packager is either not running or not running correctly&quot;</span><br><span class="line">    exit 2</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">#open &quot;$SRCROOT/../packager/launchPackager.command&quot; || echo &quot;Can&#x27;t start packager automatically&quot;</span><br><span class="line">    echo &quot;Nothing...&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="看看-launchPackager-command"><a href="#看看-launchPackager-command" class="headerlink" title="看看 launchPackager.command"></a>看看 launchPackager.command</h2><p>这个文件在「node_modules&#x2F;react-native&#x2F;packager&#x2F;」下面.</p><p>该文件是启动另外一个脚本 packager.sh, 核心代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./packager.sh</span><br></pre></td></tr></table></figure><p>最终执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node &quot;$THIS_DIR/../local-cli/cli.js&quot; start &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>大家有兴趣可以去看看源码, 一探究竟.</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative iOS Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN: 创建iOS工程代码的indent问题</title>
      <link href="/2016/09/19/RN-%E5%88%9B%E5%BB%BAiOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E7%9A%84indent%E9%97%AE%E9%A2%98/"/>
      <url>/2016/09/19/RN-%E5%88%9B%E5%BB%BAiOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E7%9A%84indent%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>使用最新版RN(0.33)来创建工程, 大家可以发现, OC 代码的退格变成了两个空格.<br>如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">  NSURL *jsCodeLocation;</span><br><span class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</span><br><span class="line">  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                      moduleName:@&quot;Mark&quot;</span><br><span class="line">                                               initialProperties:nil</span><br><span class="line">                                                   launchOptions:launchOptions];</span><br><span class="line">  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];</span><br><span class="line">  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">  UIViewController *rootViewController = [UIViewController new];</span><br><span class="line">  rootViewController.view = rootView;</span><br><span class="line">  self.window.rootViewController = rootViewController;</span><br><span class="line">  [self.window makeKeyAndVisible];</span><br><span class="line">  return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论你回车或者 tab 或者格式化(<code>右键/Structure/Re-Indent</code>)代码, 会发现, 都是这种调调.</p><p>面对这突如其来的变化, 我开始觉得有点淡淡的忧伤.</p><p>对于一直使用 <code>tab width = 4</code> 的我来说, 无法忍受. 必须改过来.</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>打开 Xcode 的 preferences, 看到其『设置』正常的不要不要的.</p><p>所以可以断定不是 Xcode 的问题.</p><p><img src="/upload/images/2016/9/19/xcode_pref.png" alt="1"></p><p>因为升级了 Xcode 到最新版 Xcode8, 还以为是 Xcode8 的 bug, 打开之前的 React Native 工程或者其他 Xcode 工程, 就没有这个「蛋疼」的问题.</p><p>最终猜想是工程配置文件引起的…</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然和 Xcode 没有关系, 那么问题就一定出现在配置文件上面.</p><p>罪魁祸首 <code>project.pbxproj</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indentWidth = 2;</span><br><span class="line">sourceTree = &quot;&lt;group&gt;&quot;;</span><br><span class="line">tabWidth = 2;</span><br></pre></td></tr></table></figure><p>修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indentWidth = 4;</span><br><span class="line">sourceTree = &quot;&lt;group&gt;&quot;;</span><br><span class="line">tabWidth = 4;</span><br></pre></td></tr></table></figure><p>或者直接删除:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">indentWidth = 2;</span><br><span class="line">tabWidth = 2;</span><br></pre></td></tr></table></figure><p>关闭工程, 重启 Xcode 就可以了.</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative iOS Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN: Mac 配置 ES6 简易开发环境</title>
      <link href="/2016/09/16/RN-Mac-%E9%85%8D%E7%BD%AE-ES6-%E7%AE%80%E6%98%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2016/09/16/RN-Mac-%E9%85%8D%E7%BD%AE-ES6-%E7%AE%80%E6%98%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="创建文件夹-ES6"><a href="#创建文件夹-ES6" class="headerlink" title="创建文件夹 ES6"></a>创建文件夹 ES6</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ES6</span><br><span class="line">-lib</span><br><span class="line">-src</span><br></pre></td></tr></table></figure><p>你可以任意取一个你喜欢的目录名称.</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>填写项目信息.</p><p>查看一下 package.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat package.json</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;es6tutorials&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Tutorial&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;es6&quot;,</span><br><span class="line">    &quot;.etc&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;mark.zhang&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目录结构如下</p><p><img src="/upload/images/2016/9/10/1.jpg" alt="1"></p><h3 id="安装-babel-cli"><a href="#安装-babel-cli" class="headerlink" title="安装 babel-cli"></a>安装 babel-cli</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><p>也可以全局安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-cli -g</span><br></pre></td></tr></table></figure><p>全局安装上后，会安装如下四个程序到全局环境中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">babel</span><br><span class="line">babel-node</span><br><span class="line">babel-doctor</span><br><span class="line">babel-external-helpers</span><br></pre></td></tr></table></figure><h2 id="安装-babel-core"><a href="#安装-babel-core" class="headerlink" title="安装 babel-core"></a>安装 babel-core</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core --save</span><br></pre></td></tr></table></figure><h2 id="安装-ES2015-插件"><a href="#安装-ES2015-插件" class="headerlink" title="安装 ES2015 插件"></a>安装 ES2015 插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-preset-es2015</span><br></pre></td></tr></table></figure><p>编写配置文件 .babelrc</p><p>注意该文件有个点符号.</p><p>在工程目录下新建该文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .babelrc</span><br></pre></td></tr></table></figure><p>写入如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;es2015&quot;,</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试代码 tutorials.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function test()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">    var a = 0;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">var a = [];</span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  var c = i;</span><br><span class="line">  a[i] = function () &#123;</span><br><span class="line">    console.log(c);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); // 9</span><br><span class="line">var b = [];</span><br><span class="line">for (var i=0; i&lt;10; i++) &#123;</span><br><span class="line">    let c = i; //let 是 es6中的关键字</span><br><span class="line">    b[i] = function() &#123;</span><br><span class="line">        console.log(c)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">b[6]();</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src/tutorials.js</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel-node src/tutorials.js</span><br></pre></td></tr></table></figure><p><img src="/upload/images/2016/9/10/2.jpg" alt="1"></p><p>这里可以下载 <a href="https://github.com/veryitman/ES6Tutorials">工程源码</a>.</p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="1-将-ES6-语法的文件转换为-ES5-的语法"><a href="#1-将-ES6-语法的文件转换为-ES5-的语法" class="headerlink" title="1.将 ES6 语法的文件转换为 ES5 的语法"></a>1.将 ES6 语法的文件转换为 ES5 的语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel -d lib/ src/</span><br></pre></td></tr></table></figure><p>在 lib 目录下会生成 src 目录中对应的文件.</p><h3 id="2-进入交互模式"><a href="#2-进入交互模式" class="headerlink" title="2.进入交互模式"></a>2.进入交互模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel-node</span><br></pre></td></tr></table></figure><p>两次 ctrl+c 退出</p><h3 id="3-检查babel状况"><a href="#3-检查babel状况" class="headerlink" title="3.检查babel状况"></a>3.检查babel状况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel-doctor</span><br></pre></td></tr></table></figure><p>检查以下内容</p><ul><li><p>配置文件.babelrc</p></li><li><p>是否有重复的babel安装包，比如说安装了5和6</p></li><li><p>babel安装包是否已经升级到了最新版</p></li><li><p>npm &gt;&#x3D; 3.3.0</p></li></ul><p><img src="/upload/images/2016/9/10/3.jpg" alt="1"></p><h3 id="4-卸载全局的-babel-cli"><a href="#4-卸载全局的-babel-cli" class="headerlink" title="4.卸载全局的 babel-cli"></a>4.卸载全局的 babel-cli</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall --global babel-cli</span><br></pre></td></tr></table></figure><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li><p><a href="https://babeljs.io/docs/usage/cli/">Babel comes with a built-in CLI which can be used to compile files from the command line.</a></p></li><li><p>阮一峰老师的 <a href="https://www.gitbook.com/book/wohugb/ecmascript-6/details">ECMAScript 6入门</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS: 手机是否设置网络代理</title>
      <link href="/2016/09/16/iOS-%E6%89%8B%E6%9C%BA%E6%98%AF%E5%90%A6%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/"/>
      <url>/2016/09/16/iOS-%E6%89%8B%E6%9C%BA%E6%98%AF%E5%90%A6%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>项目开发过程中, 会遇到下面这样一种情景:</p><blockquote><p>产品或者设计同事需要体验目前产品开发的进度, 然后要求开发人员, 将现在的版本给他们体验.<br>做过程序开发的人都知道, 开发版本会有不少问题.<br>这时, 产品和设计同事就会抱怨, 怎么登录不了, 这里没有数据了!<br>有个小伙伴被折腾的实在受不了, 连网页都打不开了.<br>最后找到原因:<br>他手机被之前的程序猿设置了网络代理, 代理到程序猿哥哥的电脑上来抓包调试问题, 忘记取消设置了.</p></blockquote><p>假如可以判断当前手机是否设置了网络代理, 就可以很好地解决上面情景中提到的问题了.</p><h2 id="找到线索"><a href="#找到线索" class="headerlink" title="找到线索"></a>找到线索</h2><p>在 ASIHttpRequest 中找到如下方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)configureProxies</span><br><span class="line">&#123;</span><br><span class="line">// Have details of the proxy been set on this request</span><br><span class="line">if (![self isPACFileRequest] &amp;&amp; (![self proxyHost] &amp;&amp; ![self proxyPort])) &#123;</span><br><span class="line">// If not, we need to figure out what they&#x27;ll be</span><br><span class="line">NSArray *proxies = nil;</span><br><span class="line">// Have we been given a proxy auto config file?</span><br><span class="line">if ([self PACurl]) &#123;</span><br><span class="line">// If yes, we&#x27;ll need to fetch the PAC file asynchronously, so we stop this request to wait until we have the proxy details.</span><br><span class="line">[self fetchPACFile];</span><br><span class="line">return NO;</span><br><span class="line">// Detect proxy settings and apply them</span><br><span class="line">&#125; else &#123;</span><br><span class="line">#if TARGET_OS_IPHONE</span><br><span class="line">NSDictionary *proxySettings = [NSMakeCollectable(CFNetworkCopySystemProxySettings()) autorelease];</span><br><span class="line">#else</span><br><span class="line">NSDictionary *proxySettings = [NSMakeCollectable(SCDynamicStoreCopyProxies(NULL)) autorelease];</span><br><span class="line">#endif</span><br><span class="line">proxies = [NSMakeCollectable(CFNetworkCopyProxiesForURL((CFURLRef)[self url], (CFDictionaryRef)proxySettings)) autorelease];</span><br><span class="line">// Now check to see if the proxy settings contained a PAC url, we need to run the script to get the real list of proxies if so</span><br><span class="line">NSDictionary *settings = [proxies objectAtIndex:0];</span><br><span class="line">if ([settings objectForKey:(NSString *)kCFProxyAutoConfigurationURLKey]) &#123;</span><br><span class="line">[self setPACurl:[settings objectForKey:(NSString *)kCFProxyAutoConfigurationURLKey]];</span><br><span class="line">[self fetchPACFile];</span><br><span class="line">return NO;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!proxies) &#123;</span><br><span class="line">[self setReadStream:nil];</span><br><span class="line">[self failWithError:[NSError errorWithDomain:NetworkRequestErrorDomain code:ASIInternalErrorWhileBuildingRequestType userInfo:[NSDictionary dictionaryWithObjectsAndKeys:@&quot;Unable to obtain information on proxy servers needed for request&quot;,NSLocalizedDescriptionKey,nil]]];</span><br><span class="line">return NO;</span><br><span class="line">&#125;</span><br><span class="line">// I don&#x27;t really understand why the dictionary returned by CFNetworkCopyProxiesForURL uses different key names from CFNetworkCopySystemProxySettings/SCDynamicStoreCopyProxies</span><br><span class="line">// and why its key names are documented while those we actually need to use don&#x27;t seem to be (passing the kCF* keys doesn&#x27;t seem to work)</span><br><span class="line">if ([proxies count] &gt; 0) &#123;</span><br><span class="line">NSDictionary *settings = [proxies objectAtIndex:0];</span><br><span class="line">[self setProxyHost:[settings objectForKey:(NSString *)kCFProxyHostNameKey]];</span><br><span class="line">[self setProxyPort:[[settings objectForKey:(NSString *)kCFProxyPortNumberKey] intValue]];</span><br><span class="line">[self setProxyType:[settings objectForKey:(NSString *)kCFProxyTypeKey]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>踏破铁鞋无觅处…</p><p>判断 iphone 是否设置网络代理的示例代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)hasSetProxy</span><br><span class="line">&#123;</span><br><span class="line">    BOOL proxy = NO;</span><br><span class="line">    </span><br><span class="line">    NSDictionary *proxySettings = (__bridge NSDictionary *)(CFNetworkCopySystemProxySettings());</span><br><span class="line">    NSURL *url = [NSURL URLWithString:@&quot;http://www.baidu.com&quot;];</span><br><span class="line">    NSArray *proxies = (__bridge NSArray *)(CFNetworkCopyProxiesForURL((__bridge CFURLRef)(url),</span><br><span class="line">                                                                       (__bridge CFDictionaryRef)(proxySettings)));</span><br><span class="line">    MZLOG(@&quot;proxies:%@&quot;, proxies);</span><br><span class="line">    NSDictionary *settings = proxies[0];</span><br><span class="line">    MZLOG(@&quot;kCFProxyHostNameKey: %@&quot;, [settings objectForKey:(NSString *)kCFProxyHostNameKey]);</span><br><span class="line">    MZLOG(@&quot;kCFProxyPortNumberKey: %@&quot;, [settings objectForKey:(NSString *)kCFProxyPortNumberKey]);</span><br><span class="line">    MZLOG(@&quot;kCFProxyTypeKey: %@&quot;, [settings objectForKey:(NSString *)kCFProxyTypeKey]);</span><br><span class="line">    if ([[settings objectForKey:(NSString *)kCFProxyTypeKey] isEqualToString:@&quot;kCFProxyTypeNone&quot;]) &#123;</span><br><span class="line">        proxy = NO;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        proxy = YES;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><p>判断如果设置了代理, 提示用户, 帮他直接跳到 wifi 设置界面.</p><p>下面说说如何跳到系统的 wifi 设置界面.</p><p>1.配置 URL TYPES</p><p><img src="/upload/images/2016/9/16/1.jpeg" alt="1"></p><p>注意这里的配置是 <code>prefs</code>.</p><p>2.openURL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NSString * urlString = @&quot;prefs:root=WIFI&quot;;</span><br><span class="line">NSURL *url = [NSURL URLWithString:urlString];</span><br><span class="line">UIApplication *app = [UIApplication sharedApplication];</span><br><span class="line">if ([app canOpenURL:[NSURL URLWithString:urlString]]) &#123;</span><br><span class="line"> </span><br><span class="line">    if ([[UIDevice currentDevice].systemVersion doubleValue] &gt;= 10.0) &#123;</span><br><span class="line">    </span><br><span class="line">    [app openURL:url options:@&#123;&#125; completionHandler:nil];</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">    </span><br><span class="line">    [app openURL:url];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外, 跳转到系统其他界面的 URL 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.系统设置</span><br><span class="line">prefs:root=INTERNET_TETHERING</span><br><span class="line">2.WIFI设置</span><br><span class="line">prefs:root=WIFI</span><br><span class="line">3.蓝牙设置</span><br><span class="line">prefs:root=Bluetooth</span><br><span class="line">4.系统通知</span><br><span class="line">prefs:root=NOTIFICATIONS_ID</span><br><span class="line">5.通用设置</span><br><span class="line">prefs:root=General</span><br><span class="line">6.显示设置</span><br><span class="line">prefs:root=DISPLAY&amp;BRIGHTNESS</span><br><span class="line">7.壁纸设置</span><br><span class="line">prefs:root=Wallpaper</span><br><span class="line">8.声音设置</span><br><span class="line">prefs:root=Sounds</span><br><span class="line">9.隐私设置</span><br><span class="line">prefs:root=privacy</span><br><span class="line">10.打开 APP Store</span><br><span class="line">prefs:root=STORE</span><br><span class="line">11.打开 Notes</span><br><span class="line">prefs:root=NOTES</span><br><span class="line">12.打开 Safari</span><br><span class="line">prefs:root=Safari</span><br><span class="line">13.打开 Music</span><br><span class="line">prefs:root=MUSIC</span><br><span class="line">14.打开 photo</span><br><span class="line">prefs:root=Photos</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与 CSDN 的诀别</title>
      <link href="/2016/09/10/%E4%B8%8E-CSDN-%E7%9A%84%E8%AF%80%E5%88%AB/"/>
      <url>/2016/09/10/%E4%B8%8E-CSDN-%E7%9A%84%E8%AF%80%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>写这个话题, 内心还是蛮沉重的.</p><p>几年前与 CSDN 不期而遇, 在里面各种折腾, 翻阅大牛们的博客, 写评论, 甚至打印出来. 在技术论坛不停地”灌水”, 订阅 CSDN 杂志, 准备练就一身武艺.</p><p>互联网的蓬勃发展, 让我原来不安的心有了更加狂躁的冲动.</p><p>在某个夜深人静的夜晚, 开启了奋笔疾书的历程, 踏上了 CSDN 的博客之旅.<br>这么多年以来, CSDN 就像我的一个朋友, 不管是家长里短, 还是技术讨论, 各种心酸, 我都会记录在那里.</p><p>一坚持就是几年…</p><p>如今, 要离开 CSDN 的博客了, 不准备在那里继续’耕耘’了.<br>总结起来有如下几个原因:</p><blockquote><ol><li>文章被任意的转载, 没经过本人的允许.我在论坛也问过该事, 没有任何回应, 很失望!</li><li>广告越来越多.</li><li>相比以前, 很难找到让人满意的有质量的文章.</li></ol></blockquote><p>再见, CSDN! 请原谅我的不辞而别!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 写作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
